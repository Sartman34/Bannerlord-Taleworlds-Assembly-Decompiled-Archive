using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Buildings;

public class Building
{
	[SaveableField(0)]
	public readonly BuildingType BuildingType;

	[SaveableField(1)]
	public float BuildingProgress;

	public const float MaxHitpoints = 100f;

	[SaveableField(2)]
	public bool IsCurrentlyDefault;

	[SaveableField(3)]
	private int _currentLevel;

	[SaveableField(5)]
	private float _hitpoints = 100f;

	public TextObject Name => BuildingType.Name;

	public TextObject Explanation => BuildingType.Explanation;

	[SaveableProperty(6)]
	public Town Town { get; private set; }

	public int CurrentLevel
	{
		get
		{
			return _currentLevel;
		}
		set
		{
			_currentLevel = value;
			if (Town.Owner != null)
			{
				Town.Owner.SetLevelMaskIsDirty();
			}
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsBuilding(object o, List<object> collectedObjects)
	{
		((Building)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(BuildingType);
		collectedObjects.Add(Town);
	}

	internal static object AutoGeneratedGetMemberValueTown(object o)
	{
		return ((Building)o).Town;
	}

	internal static object AutoGeneratedGetMemberValueBuildingType(object o)
	{
		return ((Building)o).BuildingType;
	}

	internal static object AutoGeneratedGetMemberValueBuildingProgress(object o)
	{
		return ((Building)o).BuildingProgress;
	}

	internal static object AutoGeneratedGetMemberValueIsCurrentlyDefault(object o)
	{
		return ((Building)o).IsCurrentlyDefault;
	}

	internal static object AutoGeneratedGetMemberValue_currentLevel(object o)
	{
		return ((Building)o)._currentLevel;
	}

	internal static object AutoGeneratedGetMemberValue_hitpoints(object o)
	{
		return ((Building)o)._hitpoints;
	}

	public Building(BuildingType buildingType, Town town, float buildingProgress = 0f, int currentLevel = 0)
	{
		BuildingType = buildingType;
		BuildingProgress = buildingProgress;
		Town = town;
		_currentLevel = currentLevel;
		IsCurrentlyDefault = false;
		_ = buildingType.IsDefaultProject;
	}

	public override int GetHashCode()
	{
		return BuildingType.GetHashCode() + Town.GetHashCode();
	}

	public int GetConstructionCost()
	{
		float num = 1f;
		if (Town.Settlement.OwnerClan.Kingdom != null && Town.Settlement.OwnerClan.Kingdom.ActivePolicies.Contains(DefaultPolicies.CastleCharters))
		{
			num = 0.8f;
		}
		return (int)((float)BuildingType.GetProductionCost(_currentLevel) * num);
	}

	public void LevelUp()
	{
		if (CurrentLevel < 3)
		{
			int constructionCost = GetConstructionCost();
			CurrentLevel++;
			BuildingProgress -= constructionCost;
			CampaignEventDispatcher.Instance.OnBuildingLevelChanged(Town, this, 1);
		}
	}

	public void LevelDown()
	{
		if (CurrentLevel != BuildingType.StartLevel)
		{
			CurrentLevel--;
			BuildingProgress = 0f;
			_hitpoints = 100f;
			CampaignEventDispatcher.Instance.OnBuildingLevelChanged(Town, this, -1);
		}
	}

	public void HitPointChanged(float change)
	{
		if (CurrentLevel != BuildingType.StartLevel)
		{
			_hitpoints = MathF.Clamp(_hitpoints + change, 0f, 100f);
			if (_hitpoints == 0f)
			{
				LevelDown();
			}
		}
	}

	public float GetBuildingEffectAmount(BuildingEffectEnum effect)
	{
		if (_currentLevel < BuildingType.StartLevel || _currentLevel > 3)
		{
			Debug.FailedAssert(string.Concat("Building: ", Name, " current level is out of bounds!"), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Buildings\\Building.cs", "GetBuildingEffectAmount", 126);
		}
		if (_currentLevel == 0)
		{
			return 0f;
		}
		return Campaign.Current.Models.BuildingEffectModel.GetBuildingEffectAmount(this, effect);
	}

	public TextObject GetBonusExplanation()
	{
		if (_currentLevel == 0)
		{
			return TextObject.Empty;
		}
		return GetBonusExplanations()[_currentLevel - 1];
	}

	private TextObject[] GetBonusExplanations()
	{
		TextObject[] array = new TextObject[3]
		{
			TextObject.Empty,
			TextObject.Empty,
			TextObject.Empty
		};
		if (_currentLevel == 0 || _currentLevel > 3)
		{
			return array;
		}
		for (int i = 0; i < _currentLevel; i++)
		{
			array[i] = BuildingType.GetExplanationAtLevel(i);
		}
		return array;
	}
}
