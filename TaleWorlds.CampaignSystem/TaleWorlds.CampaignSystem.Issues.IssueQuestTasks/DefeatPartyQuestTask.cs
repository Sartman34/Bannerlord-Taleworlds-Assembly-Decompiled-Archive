using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues.IssueQuestTasks;

public class DefeatPartyQuestTask : QuestTaskBase
{
	public delegate bool PartyConditionDelegateType(PartyBase defeatedParty);

	public delegate void OnPartyDefeatedDelegateType(PartyBase party);

	private PartyConditionDelegateType _partyConditionDelegate;

	private OnPartyDefeatedDelegateType _onPartyDefeatedDelegate;

	[SaveableField(40)]
	private readonly List<PartyBase> _partiesToDefeat;

	[SaveableField(41)]
	private int _targetNumParties;

	[SaveableField(42)]
	private int _deferatedNumParties;

	[SaveableField(43)]
	private TextObject _partyType;

	[SaveableField(44)]
	private bool _finishOnFail;

	internal static void AutoGeneratedStaticCollectObjectsDefeatPartyQuestTask(object o, List<object> collectedObjects)
	{
		((DefeatPartyQuestTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_partiesToDefeat);
		collectedObjects.Add(_partyType);
	}

	internal static object AutoGeneratedGetMemberValue_partiesToDefeat(object o)
	{
		return ((DefeatPartyQuestTask)o)._partiesToDefeat;
	}

	internal static object AutoGeneratedGetMemberValue_targetNumParties(object o)
	{
		return ((DefeatPartyQuestTask)o)._targetNumParties;
	}

	internal static object AutoGeneratedGetMemberValue_deferatedNumParties(object o)
	{
		return ((DefeatPartyQuestTask)o)._deferatedNumParties;
	}

	internal static object AutoGeneratedGetMemberValue_partyType(object o)
	{
		return ((DefeatPartyQuestTask)o)._partyType;
	}

	internal static object AutoGeneratedGetMemberValue_finishOnFail(object o)
	{
		return ((DefeatPartyQuestTask)o)._finishOnFail;
	}

	public DefeatPartyQuestTask(List<PartyBase> partiesToDefeat, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null, bool finishOnFail = false)
		: base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
	{
		_partiesToDefeat = new List<PartyBase>();
		foreach (PartyBase item in partiesToDefeat)
		{
			_partiesToDefeat.Add(item);
		}
		_targetNumParties = partiesToDefeat.Count;
		_partyType = partiesToDefeat[0].Name;
		_finishOnFail = finishOnFail;
	}

	public DefeatPartyQuestTask(PartyConditionDelegateType partyCondition, OnPartyDefeatedDelegateType onPartyDefeated, int targetNumParties, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null)
		: base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
	{
		_partyConditionDelegate = partyCondition;
		_targetNumParties = targetNumParties;
		_onPartyDefeatedDelegate = onPartyDefeated;
	}

	public void OnMapEventEnded(MapEvent mapEvent)
	{
		if (!mapEvent.IsPlayerMapEvent)
		{
			return;
		}
		if (PartyBase.MainParty.Side == mapEvent.WinningSide)
		{
			foreach (PartyBase involvedParty in mapEvent.InvolvedParties)
			{
				if (involvedParty.Side == mapEvent.DefeatedSide)
				{
					if (_partyConditionDelegate == null && _partiesToDefeat.Contains(involvedParty))
					{
						_partiesToDefeat.Remove(involvedParty);
						_deferatedNumParties++;
					}
					else if (_partyConditionDelegate != null && _partyConditionDelegate(involvedParty))
					{
						_deferatedNumParties++;
					}
					if (_onPartyDefeatedDelegate != null)
					{
						_onPartyDefeatedDelegate(involvedParty);
					}
				}
			}
			if (_deferatedNumParties >= _targetNumParties)
			{
				Finish(FinishStates.Success);
			}
		}
		else
		{
			if (PartyBase.MainParty.Side != mapEvent.DefeatedSide || !_finishOnFail)
			{
				return;
			}
			foreach (PartyBase involvedParty2 in mapEvent.InvolvedParties)
			{
				if (_partyConditionDelegate == null && _partiesToDefeat.Contains(involvedParty2))
				{
					Finish(FinishStates.Fail);
					break;
				}
			}
		}
	}

	protected override void OnFinished()
	{
		if (_partiesToDefeat != null)
		{
			_partiesToDefeat.Clear();
		}
	}

	public override void SetReferences()
	{
		CampaignEvents.MapEventEnded.AddNonSerializedListener(this, OnMapEventEnded);
	}
}
