using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues.IssueQuestTasks;

public class CaptureAndBringNpcTask : QuestTaskBase
{
	[SaveableField(10)]
	private Hero _targetHero;

	public bool isFinishedSuccess;

	internal static void AutoGeneratedStaticCollectObjectsCaptureAndBringNpcTask(object o, List<object> collectedObjects)
	{
		((CaptureAndBringNpcTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_targetHero);
	}

	internal static object AutoGeneratedGetMemberValue_targetHero(object o)
	{
		return ((CaptureAndBringNpcTask)o)._targetHero;
	}

	public CaptureAndBringNpcTask(Hero targetHero, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null)
		: base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
	{
		_targetHero = targetHero;
	}

	private DialogFlow GetTakePrisonerDialogFlow()
	{
		return DialogFlow.CreateDialogFlow("lord_start", int.MaxValue).NpcLine("{=2vcfifbb}I yield").Condition(() => Hero.OneToOneConversationHero == _targetHero && isFinishedSuccess)
			.BeginPlayerOptions()
			.PlayerOption("{=cbzJRaDJ}You are my prisoner now!")
			.GotoDialogState("lord_start")
			.Consequence(delegate
			{
				TakePrisonerAction.Apply(Hero.MainHero.PartyBelongedTo.Party, _targetHero);
			})
			.EndPlayerOptions();
	}

	public void OnPlayerBattleEnd(MapEvent mapEvent)
	{
		if (PartyBase.MainParty.Side != mapEvent.WinningSide)
		{
			return;
		}
		foreach (PartyBase involvedParty in mapEvent.InvolvedParties)
		{
			if (involvedParty.Side == mapEvent.DefeatedSide)
			{
				foreach (CharacterObject prisonerHero in PartyBase.MainParty.PrisonerHeroes)
				{
					if (prisonerHero == _targetHero.CharacterObject)
					{
						Finish(FinishStates.Success);
						break;
					}
				}
			}
			if (!base.IsActive)
			{
				break;
			}
		}
	}

	protected override void OnFinished()
	{
		_targetHero = null;
	}

	public override void SetReferences()
	{
		CampaignEvents.OnPlayerBattleEndEvent.AddNonSerializedListener(this, OnPlayerBattleEnd);
	}
}
