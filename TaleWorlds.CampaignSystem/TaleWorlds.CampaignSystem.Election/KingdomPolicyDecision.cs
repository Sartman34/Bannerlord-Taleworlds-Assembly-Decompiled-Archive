using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election;

public class KingdomPolicyDecision : KingdomDecision
{
	public class PolicyDecisionOutcome : DecisionOutcome
	{
		[SaveableProperty(200)]
		public bool ShouldDecisionBeEnforced { get; private set; }

		internal static void AutoGeneratedStaticCollectObjectsPolicyDecisionOutcome(object o, List<object> collectedObjects)
		{
			((PolicyDecisionOutcome)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueShouldDecisionBeEnforced(object o)
		{
			return ((PolicyDecisionOutcome)o).ShouldDecisionBeEnforced;
		}

		public override TextObject GetDecisionTitle()
		{
			TextObject textObject = new TextObject("{=kakxnaN5}{?SUPPORT}Yes{?}No{\\?}");
			textObject.SetTextVariable("SUPPORT", ShouldDecisionBeEnforced ? 1 : 0);
			return textObject;
		}

		public override TextObject GetDecisionDescription()
		{
			if (ShouldDecisionBeEnforced)
			{
				return new TextObject("{=pWyxaauF}We support this proposal");
			}
			return new TextObject("{=BktSNgY4}We oppose this proposal");
		}

		public override string GetDecisionLink()
		{
			return null;
		}

		public override ImageIdentifier GetDecisionImageIdentifier()
		{
			return null;
		}

		public PolicyDecisionOutcome(bool shouldBeEnforced)
		{
			ShouldDecisionBeEnforced = shouldBeEnforced;
		}
	}

	[SaveableField(200)]
	public readonly PolicyObject Policy;

	[SaveableField(203)]
	private bool _isInvertedDecision;

	[SaveableField(202)]
	private List<PolicyObject> _kingdomPolicies;

	internal static void AutoGeneratedStaticCollectObjectsKingdomPolicyDecision(object o, List<object> collectedObjects)
	{
		((KingdomPolicyDecision)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Policy);
		collectedObjects.Add(_kingdomPolicies);
	}

	internal static object AutoGeneratedGetMemberValuePolicy(object o)
	{
		return ((KingdomPolicyDecision)o).Policy;
	}

	internal static object AutoGeneratedGetMemberValue_isInvertedDecision(object o)
	{
		return ((KingdomPolicyDecision)o)._isInvertedDecision;
	}

	internal static object AutoGeneratedGetMemberValue_kingdomPolicies(object o)
	{
		return ((KingdomPolicyDecision)o)._kingdomPolicies;
	}

	public KingdomPolicyDecision(Clan proposerClan, PolicyObject policy, bool isInvertedDecision = false)
		: base(proposerClan)
	{
		Policy = policy;
		_isInvertedDecision = isInvertedDecision;
		_kingdomPolicies = new List<PolicyObject>(base.Kingdom.ActivePolicies);
	}

	public override bool IsAllowed()
	{
		return Campaign.Current.Models.KingdomDecisionPermissionModel.IsPolicyDecisionAllowed(Policy);
	}

	public override int GetProposalInfluenceCost()
	{
		return Campaign.Current.Models.DiplomacyModel.GetInfluenceCostOfPolicyProposalAndDisavowal(base.ProposerClan);
	}

	public override TextObject GetGeneralTitle()
	{
		return Policy.Name;
	}

	public override TextObject GetSupportTitle()
	{
		TextObject textObject = null;
		textObject = ((!_isInvertedDecision) ? new TextObject("{=iiH5gKzE}Vote for {POLICY_NAME}") : new TextObject("{=XGcST2dB}Vote to disavow {POLICY_NAME}"));
		textObject.SetTextVariable("POLICY_NAME", Policy.Name);
		return textObject;
	}

	public override TextObject GetChooseTitle()
	{
		TextObject textObject = null;
		textObject = ((!_isInvertedDecision) ? new TextObject("{=!}{POLICY_NAME}") : new TextObject("{=9DaDtQbo}Disavow {POLICY_NAME}"));
		textObject.SetTextVariable("POLICY_NAME", Policy.Name);
		return textObject;
	}

	public override TextObject GetSupportDescription()
	{
		TextObject textObject = null;
		textObject = ((!_isInvertedDecision) ? new TextObject("{=jFOva44m}{FACTION_LEADER} proposes the policy of {POLICY_NAME}. You can pick your stance regarding this decision.") : new TextObject("{=ZPv3uCOb}{FACTION_LEADER} proposes disavowing the policy of {POLICY_NAME}. You can pick your stance regarding this decision."));
		textObject.SetTextVariable("FACTION_LEADER", DetermineChooser().Leader.Name);
		textObject.SetTextVariable("POLICY_NAME", Policy.Name);
		return textObject;
	}

	public override TextObject GetChooseDescription()
	{
		TextObject textObject = null;
		textObject = ((!_isInvertedDecision) ? new TextObject("{=0EqPRs21}As {?IS_FEMALE}queen{?}king{\\?} you must decide whether to enforce the policy of {POLICY_NAME}.") : new TextObject("{=1AU2jnNV}As {?IS_FEMALE}queen{?}king{\\?} you must decide whether to disavow the policy of {POLICY_NAME}."));
		textObject.SetTextVariable("IS_FEMALE", DetermineChooser().Leader.IsFemale ? 1 : 0);
		textObject.SetTextVariable("POLICY_NAME", Policy.Name);
		return textObject;
	}

	public override IEnumerable<DecisionOutcome> DetermineInitialCandidates()
	{
		yield return new PolicyDecisionOutcome(shouldBeEnforced: true);
		yield return new PolicyDecisionOutcome(shouldBeEnforced: false);
	}

	public override Clan DetermineChooser()
	{
		return base.Kingdom.RulingClan;
	}

	public float CalculateSupport(Clan clan)
	{
		return DetermineSupport(clan, new PolicyDecisionOutcome(shouldBeEnforced: true));
	}

	protected override bool ShouldBeCancelledInternal()
	{
		if (!_isInvertedDecision)
		{
			return base.Kingdom.ActivePolicies.Contains(Policy);
		}
		return !base.Kingdom.ActivePolicies.Contains(Policy);
	}

	public override float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome)
	{
		PolicyDecisionOutcome obj = possibleOutcome as PolicyDecisionOutcome;
		float num = 0.1f;
		float num2 = 0.1f;
		float num3 = 0.1f;
		if (clan.Kingdom != null && clan.Kingdom.RulingClan == clan)
		{
			num2 += 1f;
			num3 -= 1.5f;
			num -= 0.4f;
		}
		else if (clan.IsMinorFaction)
		{
			num += 1f;
			num3 -= 1.5f;
			num2 -= 0.3f;
		}
		else if (clan.Tier >= 3)
		{
			num -= 1.3f;
			num3 += (float)clan.Tier * 0.2f;
			num2 -= 1.3f;
		}
		else if (clan.Tier == 2)
		{
			num2 -= 0.1f;
			num3 += 0.4f;
			num -= 0.5f;
		}
		_ = clan.Culture;
		num += 0.6f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Egalitarian) - 0.9f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic);
		num3 += 0.6f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic) - 0.9f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Egalitarian) - 0.5f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Authoritarian);
		num2 += 0.8f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Authoritarian) - 1.3f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic);
		float num4 = Policy.EgalitarianWeight * num + Policy.OligarchicWeight * num3 + Policy.AuthoritarianWeight * num2;
		if (_isInvertedDecision)
		{
			num4 = 0f - num4;
		}
		float num5 = 0f;
		num5 = ((!obj.ShouldDecisionBeEnforced) ? (-100f) : 60f);
		return num4 * num5;
	}

	public override void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
	{
		foreach (DecisionOutcome possibleOutcome in possibleOutcomes)
		{
			if (((PolicyDecisionOutcome)possibleOutcome).ShouldDecisionBeEnforced)
			{
				possibleOutcome.SetSponsor(base.ProposerClan);
			}
			else
			{
				AssignDefaultSponsor(possibleOutcome);
			}
		}
	}

	public override void ApplyChosenOutcome(DecisionOutcome chosenOutcome)
	{
		bool shouldDecisionBeEnforced = ((PolicyDecisionOutcome)chosenOutcome).ShouldDecisionBeEnforced;
		if (shouldDecisionBeEnforced && !_isInvertedDecision)
		{
			base.Kingdom.AddPolicy(Policy);
		}
		else if (shouldDecisionBeEnforced && _isInvertedDecision)
		{
			base.Kingdom.RemovePolicy(Policy);
		}
	}

	public override TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, SupportStatus supportStatus, bool isShortVersion = false)
	{
		TextObject textObject = (((((PolicyDecisionOutcome)chosenOutcome).ShouldDecisionBeEnforced && !_isInvertedDecision) || (!((PolicyDecisionOutcome)chosenOutcome).ShouldDecisionBeEnforced && _isInvertedDecision)) ? (_kingdomPolicies.Contains(Policy) ? new TextObject("{=jnYwiCAz}The {KINGDOM} will continue {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}") : new TextObject("{=Lbs2bNlg}The {KINGDOM} will start {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}")) : ((!_kingdomPolicies.Contains(Policy)) ? new TextObject("{=faUooB7V}The {KINGDOM} will not be {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}") : new TextObject("{=2BVDp7Tg}The {KINGDOM} will stop {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}")));
		textObject.SetTextVariable("KINGDOM", base.Kingdom.InformalName);
		textObject.SetTextVariable("POLICY", Policy.Name);
		textObject.SetTextVariable("POLICY_DESCRIPTION", Policy.LogEntryDescription);
		if (isShortVersion || IsSingleClanDecision())
		{
			textObject.SetTextVariable("POLICY_SUPPORT", TextObject.Empty);
		}
		else
		{
			textObject.SetTextVariable("POLICY_SUPPORT", "{=bqEO389P}This decision caused a split in the council.");
			if (supportStatus == SupportStatus.Majority)
			{
				textObject.SetTextVariable("POLICY_SUPPORT", "{=3W67kdtc}This decision had the support of the council.");
			}
			if (supportStatus == SupportStatus.Minority)
			{
				textObject.SetTextVariable("POLICY_SUPPORT", "{=b6MgRYlM}This decision was opposed by most of the council.");
			}
		}
		return textObject;
	}

	public override DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
	{
		return possibleOutcomes.FirstOrDefault((DecisionOutcome t) => ((PolicyDecisionOutcome)t).ShouldDecisionBeEnforced);
	}

	public override TextObject GetSecondaryEffects()
	{
		return Policy.SecondaryEffects;
	}

	public override void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome)
	{
	}
}
