using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.BarterSystem.Barterables;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.MapNotificationTypes;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election;

public class MakePeaceKingdomDecision : KingdomDecision
{
	public class MakePeaceDecisionOutcome : DecisionOutcome
	{
		[SaveableField(100)]
		public readonly bool ShouldPeaceBeDeclared;

		[SaveableField(110)]
		public readonly Kingdom Kingdom;

		[SaveableField(120)]
		public readonly IFaction FactionToMakePeaceWith;

		internal static void AutoGeneratedStaticCollectObjectsMakePeaceDecisionOutcome(object o, List<object> collectedObjects)
		{
			((MakePeaceDecisionOutcome)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(Kingdom);
			collectedObjects.Add(FactionToMakePeaceWith);
		}

		internal static object AutoGeneratedGetMemberValueShouldPeaceBeDeclared(object o)
		{
			return ((MakePeaceDecisionOutcome)o).ShouldPeaceBeDeclared;
		}

		internal static object AutoGeneratedGetMemberValueKingdom(object o)
		{
			return ((MakePeaceDecisionOutcome)o).Kingdom;
		}

		internal static object AutoGeneratedGetMemberValueFactionToMakePeaceWith(object o)
		{
			return ((MakePeaceDecisionOutcome)o).FactionToMakePeaceWith;
		}

		public MakePeaceDecisionOutcome(bool shouldPeaceBeDeclared, Kingdom kingdom, IFaction factionToMakePeaceWith)
		{
			ShouldPeaceBeDeclared = shouldPeaceBeDeclared;
			Kingdom = kingdom;
			FactionToMakePeaceWith = factionToMakePeaceWith;
		}

		public override TextObject GetDecisionTitle()
		{
			TextObject textObject = new TextObject("{=kakxnaN5}{?SUPPORT}Yes{?}No{\\?}");
			textObject.SetTextVariable("SUPPORT", ShouldPeaceBeDeclared ? 1 : 0);
			return textObject;
		}

		public override TextObject GetDecisionDescription()
		{
			if (base.SponsorClan != null && Kingdom != null && FactionToMakePeaceWith != null && base.SponsorClan != Clan.PlayerClan)
			{
				TextObject reason = TextObject.Empty;
				if (ShouldPeaceBeDeclared)
				{
					Campaign.Current.Models.DiplomacyModel.GetScoreOfDeclaringPeace(Kingdom, FactionToMakePeaceWith, base.SponsorClan, out reason);
				}
				if (reason != TextObject.Empty)
				{
					return reason;
				}
			}
			if (ShouldPeaceBeDeclared)
			{
				return new TextObject("{=THz06NQD}It is time to make peace");
			}
			return new TextObject("{=jQpeuHIE}We oppose making peace at this time");
		}

		public override string GetDecisionLink()
		{
			return null;
		}

		public override ImageIdentifier GetDecisionImageIdentifier()
		{
			return null;
		}
	}

	[SaveableField(101)]
	public readonly IFaction FactionToMakePeaceWith;

	[SaveableField(103)]
	private readonly bool _applyResults;

	[SaveableField(110)]
	public readonly int DailyTributeToBePaid;

	internal static void AutoGeneratedStaticCollectObjectsMakePeaceKingdomDecision(object o, List<object> collectedObjects)
	{
		((MakePeaceKingdomDecision)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(FactionToMakePeaceWith);
	}

	internal static object AutoGeneratedGetMemberValueFactionToMakePeaceWith(object o)
	{
		return ((MakePeaceKingdomDecision)o).FactionToMakePeaceWith;
	}

	internal static object AutoGeneratedGetMemberValueDailyTributeToBePaid(object o)
	{
		return ((MakePeaceKingdomDecision)o).DailyTributeToBePaid;
	}

	internal static object AutoGeneratedGetMemberValue_applyResults(object o)
	{
		return ((MakePeaceKingdomDecision)o)._applyResults;
	}

	public MakePeaceKingdomDecision(Clan proposerClan, IFaction kingdomToMakePeaceWith, int dailyTributeToBePaid = 0, bool applyResults = true)
		: base(proposerClan)
	{
		FactionToMakePeaceWith = kingdomToMakePeaceWith;
		DailyTributeToBePaid = dailyTributeToBePaid;
		_applyResults = applyResults;
	}

	public override bool IsAllowed()
	{
		TextObject reason;
		return Campaign.Current.Models.KingdomDecisionPermissionModel.IsPeaceDecisionAllowedBetweenKingdoms(base.Kingdom, FactionToMakePeaceWith as Kingdom, out reason);
	}

	public override int GetProposalInfluenceCost()
	{
		return Campaign.Current.Models.DiplomacyModel.GetInfluenceCostOfProposingPeace(base.ProposerClan);
	}

	public override TextObject GetGeneralTitle()
	{
		TextObject textObject = new TextObject("{=v3xdiFfD}Make Peace With {KINGDOM_NAME}");
		textObject.SetTextVariable("KINGDOM_NAME", FactionToMakePeaceWith.Name);
		return textObject;
	}

	public override TextObject GetSupportTitle()
	{
		TextObject textObject = ((DailyTributeToBePaid == 0) ? new TextObject("{=0aXG8dvJ}Make peace with the {KINGDOM_NAME}. No tribute will be paid.") : ((DailyTributeToBePaid <= 0) ? new TextObject("{=NjPMRWbW}Make peace with the {KINGDOM_NAME}. Our kingdom will receive {T} tribute daily.") : new TextObject("{=2b1xZGaQ}Make peace with the {KINGDOM_NAME}. Our kingdom will pay {T} tribute daily.")));
		textObject.SetTextVariable("T", MathF.Abs(DailyTributeToBePaid));
		textObject.SetTextVariable("KINGDOM_NAME", FactionToMakePeaceWith.InformalName);
		return textObject;
	}

	public override TextObject GetChooseTitle()
	{
		TextObject textObject = new TextObject("{=4GgfFDWG}Making peace with the {KINGDOM_NAME}");
		textObject.SetTextVariable("KINGDOM_NAME", FactionToMakePeaceWith.InformalName);
		return textObject;
	}

	public override TextObject GetSupportDescription()
	{
		TextObject empty = TextObject.Empty;
		if (DailyTributeToBePaid != 0)
		{
			empty = new TextObject("{=BlVjIlZF}{FACTION_LEADER} will decide if the {KINGDOM_CONSIDERING_PEACE_NAME} will make peace with the {KINGDOM_NAME} by paying {TRIBUTE_PERCENTAGE} percent of the kingdom's income as tribute. You can pick your stance regarding this decision.");
			empty.SetTextVariable("T", DailyTributeToBePaid);
		}
		else
		{
			empty = new TextObject("{=awoeb3br}{FACTION_LEADER} will decide if the {KINGDOM_CONSIDERING_PEACE_NAME} will make peace with the {KINGDOM_NAME}. You can pick your stance regarding this decision.");
		}
		empty.SetTextVariable("FACTION_LEADER", DetermineChooser().Leader.Name);
		empty.SetTextVariable("KINGDOM_NAME", FactionToMakePeaceWith.InformalName);
		empty.SetTextVariable("KINGDOM_CONSIDERING_PEACE_NAME", base.Kingdom.InformalName);
		return empty;
	}

	public override TextObject GetChooseDescription()
	{
		TextObject empty = TextObject.Empty;
		if (DailyTributeToBePaid != 0)
		{
			empty = new TextObject("{=n4I3pWOn}As the ruler, you must decide if peace will be made with the {KINGDOM_NAME} by paying {TRIBUTE_PERCENTAGE} percent of the kingdom's income as tribute.");
			empty.SetTextVariable("TRIBUTE_PERCENTAGE", DailyTributeToBePaid);
		}
		else
		{
			empty = new TextObject("{=KFHj7ckm}As the ruler, you must decide if peace will be made with the {KINGDOM_NAME}");
		}
		empty.SetTextVariable("IS_FEMALE", DetermineChooser().Leader.IsFemale ? 1 : 0);
		empty.SetTextVariable("KINGDOM_NAME", FactionToMakePeaceWith.InformalName);
		return empty;
	}

	public override IEnumerable<DecisionOutcome> DetermineInitialCandidates()
	{
		yield return new MakePeaceDecisionOutcome(shouldPeaceBeDeclared: true, base.Kingdom, FactionToMakePeaceWith);
		yield return new MakePeaceDecisionOutcome(shouldPeaceBeDeclared: false, base.Kingdom, FactionToMakePeaceWith);
	}

	public override Clan DetermineChooser()
	{
		return base.Kingdom.RulingClan;
	}

	protected override bool ShouldBeCancelledInternal()
	{
		if (!FactionToMakePeaceWith.IsEliminated)
		{
			return !base.Kingdom.IsAtWarWith(FactionToMakePeaceWith);
		}
		return true;
	}

	public override void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
	{
		foreach (DecisionOutcome possibleOutcome in possibleOutcomes)
		{
			if (((MakePeaceDecisionOutcome)possibleOutcome).ShouldPeaceBeDeclared)
			{
				possibleOutcome.SetSponsor(base.ProposerClan);
			}
			else
			{
				AssignDefaultSponsor(possibleOutcome);
			}
		}
	}

	public override void ApplyChosenOutcome(DecisionOutcome chosenOutcome)
	{
		if (_applyResults && ((MakePeaceDecisionOutcome)chosenOutcome).ShouldPeaceBeDeclared)
		{
			MakePeaceAction.ApplyByKingdomDecision(base.Kingdom, FactionToMakePeaceWith, DailyTributeToBePaid);
		}
	}

	public override bool OnShowDecision()
	{
		if (FactionToMakePeaceWith == Clan.PlayerClan.Kingdom && !Hero.MainHero.Clan.IsUnderMercenaryService)
		{
			if (!Hero.MainHero.IsPrisoner)
			{
				TextObject textObject = new TextObject("{=1V8f9vRM}A courier bearing a peace offer from the {PROPOSER_HERO_FACTION} has arrived at the court of your realm.");
				textObject.SetTextVariable("PROPOSER_HERO_FACTION", base.ProposerClan.Leader.MapFaction.InformalName);
				Campaign.Current.CampaignInformationManager.NewMapNoticeAdded(new PeaceOfferMapNotification(base.ProposerClan.MapFaction, DailyTributeToBePaid, textObject));
			}
			return false;
		}
		return true;
	}

	public override TextObject GetSecondaryEffects()
	{
		return new TextObject("{=!}All supporters gains some relation with each other.");
	}

	public override void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome)
	{
		_ = _applyResults;
	}

	public override TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, SupportStatus supportStatus, bool isShortVersion = false)
	{
		TextObject textObject = (((MakePeaceDecisionOutcome)chosenOutcome).ShouldPeaceBeDeclared ? (IsSingleClanDecision() ? new TextObject("{=CswzBb02}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided to make peace with the {KINGDOM}.") : (supportStatus switch
		{
			SupportStatus.Majority => new TextObject("{=17A2DDgD}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided to make peace with the {KINGDOM} with the support of {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council."), 
			SupportStatus.Minority => new TextObject("{=JDfnPFsW}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided to make peace with the {KINGDOM} despite the opposition of {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council."), 
			_ => new TextObject("{=aEt1kqxm}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided to make peace with the {KINGDOM}, with his {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council evenly divided on the matter."), 
		})) : (IsSingleClanDecision() ? new TextObject("{=wsDNxArW}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has chosen not to make peace with the {KINGDOM}.") : (supportStatus switch
		{
			SupportStatus.Majority => new TextObject("{=mRrYn2qm}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has chosen not to make peace with the {KINGDOM} with the support of {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council."), 
			SupportStatus.Minority => new TextObject("{=Ing5gFbO}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has chosen not to make peace with the {KINGDOM} over the objections of {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council."), 
			_ => new TextObject("{=AThZtg7U}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided against making peace with the {KINGDOM}, with his {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council evenly divided on the matter."), 
		})));
		StringHelpers.SetCharacterProperties("PEACEMAKER_RULER", base.Kingdom.Leader.CharacterObject, textObject);
		textObject.SetTextVariable("KINGDOM_CONSIDERING_PEACE", base.Kingdom.InformalName);
		textObject.SetTextVariable("KINGDOM", FactionToMakePeaceWith.InformalName);
		return textObject;
	}

	public override DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
	{
		return possibleOutcomes.FirstOrDefault((DecisionOutcome t) => ((MakePeaceDecisionOutcome)t).ShouldPeaceBeDeclared);
	}

	public float CalculateSupport(Clan clan)
	{
		return DetermineSupport(clan, new MakePeaceDecisionOutcome(shouldPeaceBeDeclared: true, base.Kingdom, FactionToMakePeaceWith));
	}

	public override float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome)
	{
		MakePeaceDecisionOutcome obj = (MakePeaceDecisionOutcome)possibleOutcome;
		int valueForFaction = new PeaceBarterable(base.Kingdom, FactionToMakePeaceWith, CampaignTime.Years(1f)).GetValueForFaction(clan);
		float num = ((clan.Leader == null) ? 1f : ((clan.Leader.Gold < 50000) ? (1f + 0.5f * ((50000f - (float)clan.Leader.Gold) / 50000f)) : ((clan.Leader.Gold > 200000) ? MathF.Max(0.66f, MathF.Pow(200000f / (float)clan.Leader.Gold, 0.4f)) : 1f)));
		int traitLevel = clan.Leader.GetTraitLevel(DefaultTraits.Generosity);
		float num2 = ((DailyTributeToBePaid > 0) ? (1f - 0.1f * (float)MathF.Max(-2, MathF.Min(2, traitLevel))) : 1f);
		float num3 = (float)(valueForFaction - (int)((float)Campaign.Current.Models.DiplomacyModel.GetValueOfDailyTribute(DailyTributeToBePaid) * num * num2)) * Campaign.Current.Models.DiplomacyModel.DenarsToInfluence();
		if (obj.ShouldPeaceBeDeclared)
		{
			int num4 = clan.Leader.GetTraitLevel(DefaultTraits.Mercy) * 10;
			return num3 + (float)num4;
		}
		float num5 = 0f - num3;
		int num6 = -clan.Leader.GetTraitLevel(DefaultTraits.Mercy) * 10;
		return num5 + (float)num6;
	}
}
