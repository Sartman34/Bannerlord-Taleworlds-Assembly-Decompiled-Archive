using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Siege;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.MapEvents;

public class MapEventSide
{
	[CachedData]
	private List<(FlattenedTroopRosterElement, MapEventParty, float)> _readyTroopsPriorityList;

	[CachedData]
	private Dictionary<UniqueTroopDescriptor, MapEventParty> _readyTroopsTemporaryCache;

	[CachedData]
	private bool _requiresTroopCacheUpdate;

	[CachedData]
	private Dictionary<UniqueTroopDescriptor, MapEventParty> _allocatedTroops;

	[CachedData]
	internal float LeaderSimulationModifier;

	[SaveableField(30)]
	private readonly MBList<MapEventParty> _battleParties;

	[SaveableField(9)]
	public float StrengthRatio = 1f;

	[SaveableField(10)]
	public float RenownValue;

	[SaveableField(11)]
	public float InfluenceValue;

	public float RenownAtMapEventEnd;

	[SaveableField(14)]
	public int Casualties;

	[SaveableField(16)]
	private readonly MapEvent _mapEvent;

	[CachedData]
	private List<UniqueTroopDescriptor> _simulationTroopList;

	[SaveableField(130)]
	private IFaction _mapFaction;

	[SaveableField(23)]
	private int _selectedSimulationTroopIndex;

	[SaveableField(24)]
	private UniqueTroopDescriptor _selectedSimulationTroopDescriptor;

	[SaveableField(25)]
	private CharacterObject _selectedSimulationTroop;

	private TroopUpgradeTracker _troopUpgradeTracker;

	[SaveableField(26)]
	internal bool IsSurrendered;

	[SaveableField(27)]
	private MBList<MobileParty> _nearbyPartiesAddedToPlayerMapEvent = new MBList<MobileParty>();

	[SaveableProperty(4)]
	public PartyBase LeaderParty { get; internal set; }

	public MBReadOnlyList<MapEventParty> Parties => _battleParties;

	[SaveableProperty(7)]
	public BattleSideEnum MissionSide { get; private set; }

	private IBattleObserver BattleObserver => _mapEvent.BattleObserver;

	public int TroopCount => RecalculateMemberCountOfSide();

	public int NumRemainingSimulationTroops => _simulationTroopList?.Count ?? 0;

	[SaveableProperty(15)]
	public float CasualtyStrength { get; private set; }

	public MapEvent MapEvent => _mapEvent;

	public MapEventSide OtherSide => _mapEvent.GetMapEventSide((MissionSide == BattleSideEnum.Defender) ? BattleSideEnum.Attacker : BattleSideEnum.Defender);

	public IFaction MapFaction => _mapFaction ?? LeaderParty.MapFaction;

	internal static void AutoGeneratedStaticCollectObjectsMapEventSide(object o, List<object> collectedObjects)
	{
		((MapEventSide)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_battleParties);
		collectedObjects.Add(_mapEvent);
		collectedObjects.Add(_mapFaction);
		UniqueTroopDescriptor.AutoGeneratedStaticCollectObjectsUniqueTroopDescriptor(_selectedSimulationTroopDescriptor, collectedObjects);
		collectedObjects.Add(_selectedSimulationTroop);
		collectedObjects.Add(_nearbyPartiesAddedToPlayerMapEvent);
		collectedObjects.Add(LeaderParty);
	}

	internal static object AutoGeneratedGetMemberValueLeaderParty(object o)
	{
		return ((MapEventSide)o).LeaderParty;
	}

	internal static object AutoGeneratedGetMemberValueMissionSide(object o)
	{
		return ((MapEventSide)o).MissionSide;
	}

	internal static object AutoGeneratedGetMemberValueCasualtyStrength(object o)
	{
		return ((MapEventSide)o).CasualtyStrength;
	}

	internal static object AutoGeneratedGetMemberValueStrengthRatio(object o)
	{
		return ((MapEventSide)o).StrengthRatio;
	}

	internal static object AutoGeneratedGetMemberValueRenownValue(object o)
	{
		return ((MapEventSide)o).RenownValue;
	}

	internal static object AutoGeneratedGetMemberValueInfluenceValue(object o)
	{
		return ((MapEventSide)o).InfluenceValue;
	}

	internal static object AutoGeneratedGetMemberValueCasualties(object o)
	{
		return ((MapEventSide)o).Casualties;
	}

	internal static object AutoGeneratedGetMemberValueIsSurrendered(object o)
	{
		return ((MapEventSide)o).IsSurrendered;
	}

	internal static object AutoGeneratedGetMemberValue_battleParties(object o)
	{
		return ((MapEventSide)o)._battleParties;
	}

	internal static object AutoGeneratedGetMemberValue_mapEvent(object o)
	{
		return ((MapEventSide)o)._mapEvent;
	}

	internal static object AutoGeneratedGetMemberValue_mapFaction(object o)
	{
		return ((MapEventSide)o)._mapFaction;
	}

	internal static object AutoGeneratedGetMemberValue_selectedSimulationTroopIndex(object o)
	{
		return ((MapEventSide)o)._selectedSimulationTroopIndex;
	}

	internal static object AutoGeneratedGetMemberValue_selectedSimulationTroopDescriptor(object o)
	{
		return ((MapEventSide)o)._selectedSimulationTroopDescriptor;
	}

	internal static object AutoGeneratedGetMemberValue_selectedSimulationTroop(object o)
	{
		return ((MapEventSide)o)._selectedSimulationTroop;
	}

	internal static object AutoGeneratedGetMemberValue_nearbyPartiesAddedToPlayerMapEvent(object o)
	{
		return ((MapEventSide)o)._nearbyPartiesAddedToPlayerMapEvent;
	}

	public int CountTroops(Func<FlattenedTroopRosterElement, bool> pred)
	{
		int num = 0;
		foreach (MapEventParty battleParty in _battleParties)
		{
			foreach (FlattenedTroopRosterElement troop in battleParty.Troops)
			{
				if (pred(troop))
				{
					num++;
				}
			}
		}
		return num;
	}

	public int GetTotalHealthyTroopCountOfSide()
	{
		int num = 0;
		foreach (MapEventParty battleParty in _battleParties)
		{
			num += battleParty.Party.MemberRoster.TotalHealthyCount;
		}
		return num;
	}

	public int GetTotalHealthyHeroCountOfSide()
	{
		int num = 0;
		foreach (MapEventParty battleParty in _battleParties)
		{
			TroopRoster memberRoster = battleParty.Party.MemberRoster;
			num += memberRoster.TotalHeroes - memberRoster.TotalWoundedHeroes;
		}
		return num;
	}

	internal MapEventSide(MapEvent mapEvent, BattleSideEnum missionSide, PartyBase leaderParty)
	{
		_mapEvent = mapEvent;
		LeaderParty = leaderParty;
		MissionSide = missionSide;
		_mapFaction = leaderParty.MapFaction;
		_battleParties = new MBList<MapEventParty>();
	}

	internal void CacheLeaderSimulationModifier()
	{
		LeaderSimulationModifier = Campaign.Current.Models.MilitaryPowerModel.GetLeaderModifierInMapEvent(_mapEvent, MissionSide);
	}

	internal void AddPartyInternal(PartyBase party)
	{
		_battleParties.Add(new MapEventParty(party));
		_mapEvent.AddInvolvedPartyInternal(party, MissionSide);
	}

	internal void RemovePartyInternal(PartyBase party)
	{
		int index = _battleParties.FindIndexQ((MapEventParty p) => p.Party == party);
		_battleParties.RemoveAt(index);
		_mapEvent.RemoveInvolvedPartyInternal(party);
		if (LeaderParty == party)
		{
			_mapFaction = LeaderParty.MapFaction;
			if (_battleParties.Count > 0)
			{
				LeaderParty = _battleParties[0].Party;
				CacheLeaderSimulationModifier();
			}
			else
			{
				MapEvent.FinalizeEvent();
			}
		}
	}

	public int RecalculateMemberCountOfSide()
	{
		int num = 0;
		foreach (MapEventParty party in Parties)
		{
			num += party.Party.NumberOfHealthyMembers;
		}
		return num;
	}

	public float RecalculateStrengthOfSide()
	{
		float num = 0f;
		foreach (MapEventParty party in Parties)
		{
			num += party.Party.TotalStrength;
		}
		return num;
	}

	internal void DistributeLootAmongWinners(LootCollector lootCollector)
	{
		int num = CalculateTotalContribution();
		lootCollector.MakeFreedHeroesEscape(lootCollector.LootedPrisoners, MapEvent.IsPlayerMapEvent && MapEvent.PlayerSide == MapEvent.WinningSide);
		if ((float)num > 1E-05f)
		{
			MapEventParty[] array = new MapEventParty[_battleParties.Count];
			_battleParties.CopyTo(array);
			MapEventParty[] array2 = array;
			foreach (MapEventParty partyRec in array2)
			{
				int num2 = CalculateContributionAndGiveShareToParty(lootCollector, partyRec, num);
				num -= num2;
			}
		}
		lootCollector.MakeRemainingPrisonerHeroesEscape();
	}

	private int CalculateContributionAndGiveShareToParty(LootCollector lootCollector, MapEventParty partyRec, int totalContribution)
	{
		if (partyRec.Party.MemberRoster.Count > 0)
		{
			float lootAmount = (float)partyRec.ContributionToBattle / (float)totalContribution;
			lootCollector.GiveShareOfLootToParty(partyRec.RosterToReceiveLootMembers, partyRec.RosterToReceiveLootPrisoners, partyRec.RosterToReceiveLootItems, partyRec.Party, lootAmount, _mapEvent);
			return partyRec.ContributionToBattle;
		}
		return 0;
	}

	public bool IsMainPartyAmongParties()
	{
		return Parties.AnyQ((MapEventParty party) => party.Party == PartyBase.MainParty);
	}

	public float GetPlayerPartyContributionRate()
	{
		int num = CalculateTotalContribution();
		if (num == 0)
		{
			return 0f;
		}
		int num2 = 0;
		foreach (MapEventParty battleParty in _battleParties)
		{
			if (battleParty.Party == PartyBase.MainParty)
			{
				num2 = battleParty.ContributionToBattle;
				break;
			}
		}
		return (float)num2 / (float)num;
	}

	internal int CalculateTotalContribution()
	{
		int num = 0;
		foreach (MapEventParty battleParty in _battleParties)
		{
			if (battleParty.Party.MemberRoster.Count > 0)
			{
				num += battleParty.ContributionToBattle;
			}
		}
		return num;
	}

	public void CalculateRenownAndInfluenceValues(float[] strengthOfSide)
	{
		int missionSide = (int)MissionSide;
		int oppositeSide = (int)MissionSide.GetOppositeSide();
		float x = 1f;
		float num = 1f;
		if (_mapEvent.IsSiegeAssault)
		{
			float settlementAdvantage = Campaign.Current.Models.CombatSimulationModel.GetSettlementAdvantage(_mapEvent.MapEventSettlement);
			if (MissionSide == BattleSideEnum.Defender)
			{
				num = settlementAdvantage;
			}
			else
			{
				x = settlementAdvantage;
			}
		}
		float num2 = (_mapEvent.IsSiegeAssault ? 0.7f : ((_mapEvent.IsSallyOut || _mapEvent.IsRaid || _mapEvent.MapEventSettlement != null) ? 0.6f : 0.5f));
		StrengthRatio = (strengthOfSide[oppositeSide] * TaleWorlds.Library.MathF.Sqrt(x) + 10f) / (strengthOfSide[missionSide] * num + 10f);
		StrengthRatio = ((StrengthRatio > 10f) ? 10f : StrengthRatio);
		if (strengthOfSide[missionSide] > 0f)
		{
			RenownValue = TaleWorlds.Library.MathF.Pow(strengthOfSide[oppositeSide] * TaleWorlds.Library.MathF.Sqrt(x), 0.75f) * TaleWorlds.Library.MathF.Pow(StrengthRatio, 0.45f) * num2 * 0.75f;
			InfluenceValue = TaleWorlds.Library.MathF.Pow(strengthOfSide[oppositeSide] * TaleWorlds.Library.MathF.Sqrt(x), 0.75f) * TaleWorlds.Library.MathF.Pow(StrengthRatio, 0.15f) * 0.6f;
		}
	}

	internal void CommitXpGains()
	{
		foreach (MapEventParty battleParty in _battleParties)
		{
			battleParty.CommitXpGain();
		}
	}

	public virtual void DistributeRenownAndInfluence(MapEventResultExplainer resultExplainers = null, bool forScoreboard = false)
	{
		int num = CalculateTotalContribution();
		float renownValue = RenownValue;
		float influenceValue = InfluenceValue;
		List<MobileParty> list = new List<MobileParty>();
		List<MobileParty> list2 = new List<MobileParty>();
		foreach (MapEventParty battleParty in _battleParties)
		{
			PartyBase party = battleParty.Party;
			if (party.IsMobile && party.MobileParty.IsVillager)
			{
				list.Add(party.MobileParty);
			}
			if (party.IsMobile && party.MobileParty.IsCaravan)
			{
				list2.Add(party.MobileParty);
			}
		}
		foreach (MapEventParty battleParty2 in _battleParties)
		{
			PartyBase party2 = battleParty2.Party;
			if (num <= 0)
			{
				continue;
			}
			float num2 = (float)battleParty2.ContributionToBattle / (float)num;
			ExplainedNumber explainedNumber = new ExplainedNumber(0f, includeDescriptions: true);
			ExplainedNumber explainedNumber2 = new ExplainedNumber(0f, includeDescriptions: true);
			ExplainedNumber explainedNumber3 = new ExplainedNumber(0f, includeDescriptions: true);
			explainedNumber3 = Campaign.Current.Models.BattleRewardModel.CalculateMoraleGainVictory(party2, renownValue, num2);
			battleParty2.MoraleChange = explainedNumber3.ResultNumber;
			if (resultExplainers != null && Hero.MainHero == party2.LeaderHero)
			{
				resultExplainers.MoraleExplainedNumber = explainedNumber3;
			}
			if (party2.LeaderHero != null)
			{
				foreach (MobileParty item in list)
				{
					if (item.HomeSettlement.OwnerClan == party2.LeaderHero.Clan || item.HomeSettlement.OwnerClan.IsEliminated || party2.LeaderHero.Clan.IsEliminated)
					{
						continue;
					}
					int num3 = MBRandom.RoundRandomized(4f * num2);
					if (num3 > 0)
					{
						ChangeRelationAction.ApplyRelationChangeBetweenHeroes(item.HomeSettlement.OwnerClan.Leader, party2.LeaderHero.Clan.Leader, num3);
					}
					num3 = MBRandom.RoundRandomized(2f * num2);
					foreach (Hero notable in item.HomeSettlement.Notables)
					{
						ChangeRelationAction.ApplyRelationChangeBetweenHeroes(notable, party2.LeaderHero.Clan.Leader, num3);
					}
				}
				foreach (MobileParty item2 in list2)
				{
					if (item2.HomeSettlement != null && item2.HomeSettlement.OwnerClan != null && party2.LeaderHero != null && item2.HomeSettlement.OwnerClan.Leader.Clan != party2.LeaderHero.Clan && item2.Party.Owner != null && item2.Party.Owner != Hero.MainHero && item2.Party.Owner.IsAlive && party2.LeaderHero.Clan.Leader != null && party2.LeaderHero.Clan.Leader.IsAlive && !item2.IsCurrentlyUsedByAQuest)
					{
						int relationChange = MBRandom.RoundRandomized(6f * num2);
						ChangeRelationAction.ApplyRelationChangeBetweenHeroes(item2.Party.Owner, party2.LeaderHero.Clan.Leader, relationChange);
					}
				}
				if (MapEvent.IsRaid && MissionSide == BattleSideEnum.Defender && this == MapEvent.Winner)
				{
					ChangeRelationAction.ApplyRelationChangeBetweenHeroes(MapEvent.MapEventSettlement.Notables.GetRandomElement(), party2.LeaderHero, 5);
				}
			}
			if (party2.LeaderHero == null)
			{
				continue;
			}
			explainedNumber = Campaign.Current.Models.BattleRewardModel.CalculateRenownGain(party2, renownValue, num2);
			explainedNumber2 = Campaign.Current.Models.BattleRewardModel.CalculateInfluenceGain(party2, influenceValue, num2);
			float num4 = _mapEvent.StrengthOfSide[(int)MissionSide.GetOppositeSide()];
			float num5 = num4;
			foreach (MapEventParty party3 in OtherSide.Parties)
			{
				num5 -= party3.Party.TotalStrength;
			}
			battleParty2.GainedRenown = explainedNumber.ResultNumber * num5 / num4;
			battleParty2.GainedInfluence = explainedNumber2.ResultNumber * num5 / num4;
			if (resultExplainers != null && Hero.MainHero == party2.LeaderHero)
			{
				resultExplainers.RenownExplainedNumber = new ExplainedNumber(battleParty2.GainedRenown);
				resultExplainers.InfluenceExplainedNumber = new ExplainedNumber(battleParty2.GainedInfluence);
			}
		}
		if (!forScoreboard)
		{
			_mapEvent.RecalculateStrengthOfSides();
			CalculateRenownAndInfluenceValues(_mapEvent.StrengthOfSide);
		}
		else
		{
			RenownAtMapEventEnd = RenownValue;
		}
	}

	public void ApplyRenownAndInfluenceChanges()
	{
		foreach (MapEventParty battleParty in _battleParties)
		{
			PartyBase party = battleParty.Party;
			Hero hero = ((party == PartyBase.MainParty) ? Hero.MainHero : party.LeaderHero);
			if (hero != null)
			{
				if (battleParty.GainedRenown > 0.001f)
				{
					GainRenownAction.Apply(hero, battleParty.GainedRenown, doNotNotify: true);
					battleParty.GainedRenown = 0f;
				}
				if (battleParty.GainedInfluence > 0.001f)
				{
					GainKingdomInfluenceAction.ApplyForBattle(hero, battleParty.GainedInfluence);
					battleParty.GainedInfluence = 0f;
				}
			}
		}
	}

	public void ApplyFinalRewardsAndChanges()
	{
		foreach (MapEventParty battleParty in _battleParties)
		{
			PartyBase party = battleParty.Party;
			Hero hero = ((party == PartyBase.MainParty) ? Hero.MainHero : party.LeaderHero);
			if (party.MobileParty != null)
			{
				party.MobileParty.RecentEventsMorale += battleParty.MoraleChange;
			}
			if (hero != null)
			{
				if ((float)battleParty.PlunderedGold > 0.001f)
				{
					if (hero == Hero.MainHero)
					{
						MBTextManager.SetTextVariable("GOLD", battleParty.PlunderedGold);
						MBInformationManager.AddQuickInformation(GameTexts.FindText("str_plunder_gain_message"));
					}
					GiveGoldAction.ApplyBetweenCharacters(null, hero, battleParty.PlunderedGold, disableNotification: true);
				}
				if ((float)battleParty.GoldLost > 0.001f)
				{
					GiveGoldAction.ApplyBetweenCharacters(hero, null, battleParty.GoldLost, disableNotification: true);
				}
			}
			else if (party.IsMobile && party.MobileParty.IsPartyTradeActive)
			{
				party.MobileParty.PartyTradeGold -= battleParty.GoldLost;
				party.MobileParty.PartyTradeGold += battleParty.PlunderedGold;
			}
		}
	}

	public virtual void CalculatePlunderedGoldShare(float totalPlunderedGold, MapEventResultExplainer resultExplainers = null)
	{
		int num = CalculateTotalContribution();
		foreach (MapEventParty battleParty in _battleParties)
		{
			if (num > 0)
			{
				float num2 = (float)battleParty.ContributionToBattle / (float)num;
				num -= battleParty.ContributionToBattle;
				int num3 = (int)(num2 * totalPlunderedGold);
				totalPlunderedGold -= (float)num3;
				battleParty.PlunderedGold = num3;
			}
		}
	}

	public void UpdatePartiesMoveState()
	{
		foreach (MapEventParty party in Parties)
		{
			if (party.Party.IsMobile && party.Party.MobileParty.IsActive && party.Party.MobileParty.CurrentSettlement == null && ((_mapEvent.IsRaid && _mapEvent.MapEventSettlement.SettlementHitPoints <= 0f) || _mapEvent.IsSiegeAssault) && party.Party.MobileParty.Army != null && party.Party.MobileParty.Army.AiBehaviorObject == _mapEvent.MapEventSettlement)
			{
				party.Party.MobileParty.Army.AIBehavior = Army.AIBehaviorFlags.Unassigned;
			}
		}
	}

	public void HandleMapEventEnd()
	{
		while (Parties.Count > 0)
		{
			MapEventParty mapEventParty = Parties.FirstOrDefault((MapEventParty x) => !x.Party.IsMobile || x.Party.MobileParty.Army == null || x.Party.MobileParty.Army.LeaderParty != x.Party.MobileParty) ?? Parties[Parties.Count - 1];
			HandleMapEventEndForPartyInternal(mapEventParty.Party);
		}
	}

	internal void HandleMapEventEndForPartyInternal(PartyBase party)
	{
		IEnumerable<TroopRosterElement> enumerable = party.MemberRoster.GetTroopRoster().WhereQ((TroopRosterElement x) => x.Character.IsHero && x.Character.HeroObject.IsAlive && x.Character.HeroObject.DeathMark == KillCharacterAction.KillCharacterActionDetail.DiedInBattle);
		PartyBase leaderParty = _mapEvent.GetLeaderParty(party.OpponentSide);
		bool flag = _mapEvent.IsWinnerSide(party.Side);
		bool attackersRanAway = _mapEvent.AttackersRanAway;
		party.MapEventSide = null;
		foreach (TroopRosterElement item in enumerable)
		{
			KillCharacterAction.ApplyByBattle(item.Character.HeroObject, OtherSide.LeaderParty.LeaderHero);
		}
		if (party.IsMobile && (party.NumberOfAllMembers == 0 || (!flag && !attackersRanAway && (party.NumberOfHealthyMembers == 0 || (_mapEvent.BattleState != 0 && party.MobileParty.IsMilitia)) && (party.MobileParty.Army == null || party.MobileParty.Army.LeaderParty.Party.NumberOfHealthyMembers == 0))) && party != PartyBase.MainParty && party.IsActive && (!party.MobileParty.IsDisbanding || party.MemberRoster.Count == 0))
		{
			DestroyPartyAction.Apply(leaderParty, party.MobileParty);
		}
		party.MemberRoster.RemoveZeroCounts();
		party.PrisonRoster.RemoveZeroCounts();
		if (party.IsMobile && party.MobileParty.IsActive && party.MobileParty.CurrentSettlement == null)
		{
			party.SetVisualAsDirty();
		}
	}

	public void AddHeroDamage(Hero character, int damage)
	{
		character.HitPoints -= damage;
	}

	public void AllocateTroops(ref List<UniqueTroopDescriptor> troopsList, int number = -1, Func<UniqueTroopDescriptor, MapEventParty, bool> customAllocationConditions = null)
	{
		if (troopsList == null)
		{
			troopsList = new List<UniqueTroopDescriptor>();
		}
		else
		{
			troopsList.Clear();
		}
		int num = ((number >= 0) ? number : 100000000);
		while (num > 0)
		{
			int num2 = -1;
			float num3 = float.MinValue;
			for (int j = 0; j < _readyTroopsPriorityList.Count; j++)
			{
				if (_readyTroopsPriorityList[j].Item3 > num3)
				{
					num3 = _readyTroopsPriorityList[j].Item3;
					num2 = j;
				}
			}
			if (num2 == -1)
			{
				break;
			}
			(FlattenedTroopRosterElement, MapEventParty, float) tuple = _readyTroopsPriorityList[num2];
			UniqueTroopDescriptor descriptor = tuple.Item1.Descriptor;
			MapEventParty item = tuple.Item2;
			_readyTroopsPriorityList[num2] = (FlattenedTroopRosterElement.DefaultFlattenedTroopRosterElement, null, float.MinValue);
			if (customAllocationConditions != null && !customAllocationConditions(descriptor, item))
			{
				continue;
			}
			troopsList.Add(descriptor);
			_allocatedTroops.Add(descriptor, item);
			num--;
			if (BattleObserver != null)
			{
				BattleObserver.TroopNumberChanged(MissionSide, item.Party, item.Troops[descriptor].Troop, 1);
				if (_troopUpgradeTracker == null)
				{
					_troopUpgradeTracker = new TroopUpgradeTracker();
				}
				_troopUpgradeTracker.AddTrackedTroop(item.Party, item.Troops[descriptor].Troop);
			}
		}
		_readyTroopsPriorityList.RemoveAll(((FlattenedTroopRosterElement, MapEventParty, float) i) => i.Item3 <= float.MinValue);
		_requiresTroopCacheUpdate = true;
	}

	public void GetAllTroops(ref List<UniqueTroopDescriptor> troopsList)
	{
		if (troopsList == null)
		{
			troopsList = new List<UniqueTroopDescriptor>();
		}
		else
		{
			troopsList.Clear();
		}
		foreach (var readyTroopsPriority in _readyTroopsPriorityList)
		{
			List<UniqueTroopDescriptor> obj = troopsList;
			var (flattenedTroopRosterElement, _, _) = readyTroopsPriority;
			obj.Add(flattenedTroopRosterElement.Descriptor);
		}
		foreach (UniqueTroopDescriptor key in _allocatedTroops.Keys)
		{
			troopsList.Add(key);
		}
	}

	public CharacterObject GetAllocatedTroop(UniqueTroopDescriptor troopDesc0)
	{
		if (_allocatedTroops.TryGetValue(troopDesc0, out var value))
		{
			return value.Troops[troopDesc0].Troop;
		}
		return null;
	}

	public CharacterObject GetReadyTroop(UniqueTroopDescriptor troopDesc0)
	{
		CheckReadyTroopsTemporaryCache();
		if (_readyTroopsTemporaryCache.TryGetValue(troopDesc0, out var value))
		{
			return value.Troops[troopDesc0].Troop;
		}
		return null;
	}

	public PartyBase GetAllocatedTroopParty(UniqueTroopDescriptor troopDescriptor)
	{
		if (_allocatedTroops.TryGetValue(troopDescriptor, out var value))
		{
			return value.Party;
		}
		return null;
	}

	public PartyBase GetReadyTroopParty(UniqueTroopDescriptor troopDescriptor)
	{
		CheckReadyTroopsTemporaryCache();
		if (_readyTroopsTemporaryCache.TryGetValue(troopDescriptor, out var value))
		{
			return value.Party;
		}
		return null;
	}

	public void OnTroopWounded(UniqueTroopDescriptor troopDesc1)
	{
		MapEventParty mapEventParty = _allocatedTroops[troopDesc1];
		mapEventParty.OnTroopWounded(troopDesc1);
		CharacterObject troop = mapEventParty.GetTroop(troopDesc1);
		float troopPower = Campaign.Current.Models.MilitaryPowerModel.GetTroopPower(troop, MissionSide, MapEvent.SimulationContext, LeaderSimulationModifier);
		CasualtyStrength += troopPower;
		Casualties++;
	}

	public void OnTroopKilled(UniqueTroopDescriptor troopDesc1)
	{
		MapEventParty mapEventParty = _allocatedTroops[troopDesc1];
		mapEventParty.OnTroopKilled(troopDesc1);
		CharacterObject troop = mapEventParty.GetTroop(troopDesc1);
		float troopPower = Campaign.Current.Models.MilitaryPowerModel.GetTroopPower(troop, MissionSide, MapEvent.SimulationContext, LeaderSimulationModifier);
		CasualtyStrength += troopPower;
		Casualties++;
	}

	public void OnTroopRouted(UniqueTroopDescriptor troopDesc1)
	{
		MapEventParty mapEventParty = _allocatedTroops[troopDesc1];
		mapEventParty.OnTroopRouted(troopDesc1);
		CharacterObject troop = mapEventParty.GetTroop(troopDesc1);
		float troopPower = Campaign.Current.Models.MilitaryPowerModel.GetTroopPower(troop, MissionSide, MapEvent.SimulationContext, LeaderSimulationModifier);
		CasualtyStrength += troopPower * 0.1f;
	}

	public void OnTroopScoreHit(UniqueTroopDescriptor troopDesc1, CharacterObject attackedTroop, int damage, bool isFatal, bool isTeamKill, WeaponComponentData attackerWeapon, bool isSimulatedHit)
	{
		_allocatedTroops[troopDesc1].OnTroopScoreHit(troopDesc1, attackedTroop, damage, isFatal, isTeamKill, attackerWeapon, isSimulatedHit);
	}

	private void MakeReady(bool includeHumanPlayers, FlattenedTroopRoster priorTroops = null, int sizeOfSide = -1)
	{
		if (_readyTroopsPriorityList == null || _allocatedTroops == null)
		{
			_readyTroopsPriorityList = new List<(FlattenedTroopRosterElement, MapEventParty, float)>();
			_allocatedTroops = new Dictionary<UniqueTroopDescriptor, MapEventParty>();
		}
		else
		{
			_readyTroopsPriorityList.Clear();
			_allocatedTroops.Clear();
		}
		if (sizeOfSide <= 0)
		{
			sizeOfSide = 0;
			foreach (MapEventParty battleParty in _battleParties)
			{
				sizeOfSide += battleParty.Party.NumberOfHealthyMembers;
			}
		}
		foreach (MapEventParty battleParty2 in _battleParties)
		{
			MakeReadyParty(battleParty2, priorTroops, includeHumanPlayers, sizeOfSide);
		}
		_requiresTroopCacheUpdate = true;
	}

	private void MakeReadyParty(MapEventParty battleParty, FlattenedTroopRoster priorityTroops, bool includePlayers, int sizeOfSide)
	{
		battleParty.Update();
		bool forcePriorityTroops = priorityTroops != null && _mapEvent.PlayerSide == MissionSide && (_mapEvent.IsHideoutBattle || (_mapEvent.IsSiegeAssault && PlayerSiege.BesiegedSettlement != null && PlayerSiege.BesiegedSettlement.CurrentSiegeState == Settlement.SiegeState.InTheLordsHall));
		Campaign.Current.Models.TroopSupplierProbabilityModel.EnqueueTroopSpawnProbabilitiesAccordingToUnitSpawnPrioritization(battleParty, priorityTroops, includePlayers, sizeOfSide, forcePriorityTroops, _readyTroopsPriorityList);
	}

	private void CheckReadyTroopsTemporaryCache()
	{
		if (_readyTroopsTemporaryCache == null)
		{
			_readyTroopsTemporaryCache = new Dictionary<UniqueTroopDescriptor, MapEventParty>();
		}
		if (!_requiresTroopCacheUpdate)
		{
			return;
		}
		_readyTroopsTemporaryCache.Clear();
		foreach (var readyTroopsPriority in _readyTroopsPriorityList)
		{
			Dictionary<UniqueTroopDescriptor, MapEventParty> readyTroopsTemporaryCache = _readyTroopsTemporaryCache;
			var (flattenedTroopRosterElement, _, _) = readyTroopsPriority;
			readyTroopsTemporaryCache.Add(flattenedTroopRosterElement.Descriptor, readyTroopsPriority.Item2);
		}
		_requiresTroopCacheUpdate = false;
	}

	public void MakeReadyForSimulation(FlattenedTroopRoster priorTroops, int sizeOfSide = -1)
	{
		MakeReady(includeHumanPlayers: false, priorTroops, sizeOfSide);
		AllocateTroops(ref _simulationTroopList, sizeOfSide);
	}

	public void MakeReadyForMission(FlattenedTroopRoster priorTroops)
	{
		MakeReady(includeHumanPlayers: true, priorTroops);
	}

	public void EndSimulation()
	{
		_simulationTroopList.Clear();
		_readyTroopsPriorityList.Clear();
		_requiresTroopCacheUpdate = true;
		_allocatedTroops.Clear();
	}

	internal void ResetContributionToBattleToStrength()
	{
		foreach (MapEventParty battleParty in _battleParties)
		{
			battleParty.ResetContributionToBattleToStrength();
		}
	}

	internal void CollectAll(LootCollector lootCollector, out bool playerCaptured)
	{
		playerCaptured = false;
		bool flag = false;
		ExplainedNumber bonuses = new ExplainedNumber(1f);
		float num = 0f;
		foreach (MapEventParty party2 in OtherSide.Parties)
		{
			if (party2 != null && party2.Party?.MobileParty?.HasPerk(DefaultPerks.Roguery.KnowHow) == true)
			{
				flag = true;
			}
			if (party2?.Party?.LeaderHero != null && party2.Party.LeaderHero.GetPerkValue(DefaultPerks.Roguery.RogueExtraordinaire) && num < (float)party2.Party.LeaderHero.GetSkillValue(DefaultSkills.Roguery))
			{
				num = party2.Party.LeaderHero.GetSkillValue(DefaultSkills.Roguery);
				PerkHelper.AddEpicPerkBonusForCharacter(DefaultPerks.Roguery.RogueExtraordinaire, party2.Party.LeaderHero.CharacterObject, DefaultSkills.Roguery, applyPrimaryBonus: true, ref bonuses, Campaign.Current.Models.CharacterDevelopmentModel.MinSkillRequiredForEpicPerkBonus);
			}
		}
		foreach (MapEventParty battleParty in _battleParties)
		{
			PartyBase party = battleParty.Party;
			CaptureWoundedTroops(lootCollector, party, IsSurrendered, ref playerCaptured);
			lootCollector.LootedPrisoners.Add(party.PrisonRoster);
			bool flag2 = false;
			for (int num2 = party.PrisonRoster.Count - 1; num2 >= 0; num2--)
			{
				TroopRosterElement troopRosterElement = party.PrisonRoster.data[num2];
				if (!troopRosterElement.Character.IsHero)
				{
					party.PrisonRoster.RemoveTroop(troopRosterElement.Character, troopRosterElement.Number);
					flag2 = true;
				}
			}
			if (flag2)
			{
				party.PrisonRoster.RemoveZeroCounts();
			}
			float num3 = 0.5f;
			num3 *= bonuses.ResultNumber;
			if (party.IsMobile)
			{
				if (flag && (party.MobileParty.IsCaravan || party.MobileParty.IsVillager))
				{
					num3 *= 1f + DefaultPerks.Roguery.KnowHow.PrimaryBonus;
				}
			}
			else if (party.IsSettlement)
			{
				Settlement settlement = party.Settlement;
				num3 = (settlement.IsTown ? 0f : ((!settlement.IsVillage) ? 1f : ((settlement.SettlementHitPoints > 0f) ? 0f : 1f)));
			}
			num3 = ((1f > num3) ? num3 : 1f);
			if (party == PartyBase.MainParty)
			{
				MBList<ItemRosterElement> mBList = party.ItemRoster.Where((ItemRosterElement x) => x.EquipmentElement.Item.IsMountable).ToMBList();
				mBList.Shuffle();
				Dictionary<ItemRosterElement, int> dictionary = new Dictionary<ItemRosterElement, int>();
				int num4 = 0;
				foreach (ItemRosterElement item in mBList)
				{
					int num5 = TaleWorlds.Library.MathF.Min(item.Amount, 3 - num4);
					dictionary.Add(item, num5);
					num4 += num5;
					if (num4 == 3)
					{
						break;
					}
				}
				ItemRoster itemRoster = new ItemRoster(party.ItemRoster);
				for (int i = 0; i < itemRoster.Count; i++)
				{
					ItemRosterElement key = itemRoster[i];
					if (!key.EquipmentElement.Item.NotMerchandise && !key.EquipmentElement.IsQuestItem && !key.EquipmentElement.Item.IsBannerItem)
					{
						dictionary.TryGetValue(key, out var value);
						int num6 = key.Amount - value;
						if (num6 > 0)
						{
							int number = MBRandom.RoundRandomized((float)num6 * num3);
							lootCollector.AddLootedItems(party, key.EquipmentElement, number);
							party.ItemRoster.AddToCounts(key.EquipmentElement, -num6);
						}
					}
				}
			}
			else
			{
				ItemRoster itemRoster2 = new ItemRoster(party.ItemRoster);
				for (int j = 0; j < itemRoster2.Count; j++)
				{
					ItemRosterElement itemRosterElement = itemRoster2[j];
					if (!itemRosterElement.EquipmentElement.Item.NotMerchandise && !itemRosterElement.EquipmentElement.IsQuestItem)
					{
						int num7 = MBRandom.RoundRandomized((float)itemRosterElement.Amount * num3 * (itemRosterElement.EquipmentElement.Item.IsMountable ? 0.33f : 1f));
						if (num7 > 0)
						{
							lootCollector.AddLootedItems(party, itemRosterElement.EquipmentElement, num7);
							party.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -num7);
						}
					}
				}
			}
			lootCollector.CasualtiesInBattle.Add(battleParty.DiedInBattle);
			lootCollector.CasualtiesInBattle.Add(battleParty.WoundedInBattle);
			OnPartyDefeated(party);
		}
	}

	private static void OnPartyDefeated(PartyBase defeatedParty)
	{
		if (!defeatedParty.IsMobile)
		{
			return;
		}
		defeatedParty.MobileParty.RecentEventsMorale += Campaign.Current.Models.PartyMoraleModel.GetDefeatMoraleChange(defeatedParty);
		if (defeatedParty.NumberOfHealthyMembers > 0 && (!defeatedParty.IsMobile || !defeatedParty.MobileParty.IsGarrison))
		{
			if (defeatedParty.MobileParty.CurrentSettlement != null)
			{
				defeatedParty.MobileParty.Position2D = defeatedParty.MobileParty.CurrentSettlement.GatePosition;
			}
			else
			{
				defeatedParty.MobileParty.Position2D = MobilePartyHelper.FindReachablePointAroundPosition(defeatedParty.MobileParty.Position2D, 4f, 3f);
			}
			defeatedParty.MobileParty.Ai.ForceDefaultBehaviorUpdate();
		}
	}

	private static void CaptureWoundedTroops(LootCollector lootCollector, PartyBase defeatedParty, bool isSurrender, ref bool playerCaptured)
	{
		CaptureRegularTroops(lootCollector, defeatedParty, isSurrender);
		if (defeatedParty == PartyBase.MainParty)
		{
			CaptureWoundedHeroesForMainParty(lootCollector, defeatedParty, isSurrender, out var playerCaptured2);
			if (playerCaptured2)
			{
				playerCaptured = true;
			}
		}
		else if (defeatedParty.LeaderHero != null)
		{
			CaptureWoundedHeroes(lootCollector, defeatedParty, isSurrender);
		}
		defeatedParty.MemberRoster.RemoveZeroCounts();
	}

	private static void CaptureWoundedHeroesForMainParty(LootCollector lootCollector, PartyBase defeatedParty, bool isSurrender, out bool playerCaptured)
	{
		playerCaptured = false;
		bool flag = false;
		if (defeatedParty != PartyBase.MainParty)
		{
			foreach (TroopRosterElement item in defeatedParty.MemberRoster.GetTroopRoster())
			{
				if (item.Character != null && item.Character.IsHero && !item.Character.HeroObject.IsWounded)
				{
					flag = true;
				}
			}
		}
		if (!(!flag || isSurrender))
		{
			return;
		}
		playerCaptured = true;
		for (int i = 0; i < defeatedParty.MemberRoster.Count; i++)
		{
			TroopRosterElement elementCopyAtIndex = defeatedParty.MemberRoster.GetElementCopyAtIndex(i);
			if (elementCopyAtIndex.Character.IsHero)
			{
				if (elementCopyAtIndex.Character.HeroObject.DeathMark != KillCharacterAction.KillCharacterActionDetail.DiedInBattle)
				{
					defeatedParty.MemberRoster.AddToCountsAtIndex(i, -1, 0, 0, removeDepleted: false);
					if (elementCopyAtIndex.Character.HeroObject != Hero.MainHero && MBRandom.RandomFloat < 0.5f)
					{
						MakeHeroFugitiveAction.Apply(elementCopyAtIndex.Character.HeroObject);
					}
					else if (!elementCopyAtIndex.Character.HeroObject.IsDead && elementCopyAtIndex.Character.HeroObject.DeathMark == KillCharacterAction.KillCharacterActionDetail.None)
					{
						lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, 1);
					}
					if (defeatedParty.LeaderHero == elementCopyAtIndex.Character.HeroObject && defeatedParty.IsMobile)
					{
						defeatedParty.MobileParty.RemovePartyLeader();
					}
				}
			}
			else if (elementCopyAtIndex.Number > 0)
			{
				defeatedParty.MemberRoster.AddToCountsAtIndex(i, -elementCopyAtIndex.Number, 0, 0, removeDepleted: false);
				lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, elementCopyAtIndex.Number);
			}
		}
	}

	private static void CaptureRegularTroops(LootCollector lootCollector, PartyBase defeatedParty, bool isSurrender)
	{
		for (int i = 0; i < defeatedParty.MemberRoster.Count; i++)
		{
			TroopRosterElement elementCopyAtIndex = defeatedParty.MemberRoster.GetElementCopyAtIndex(i);
			if (!elementCopyAtIndex.Character.IsHero && (elementCopyAtIndex.WoundedNumber > 0 || (isSurrender && elementCopyAtIndex.Number > 0)))
			{
				int num = (isSurrender ? elementCopyAtIndex.Number : elementCopyAtIndex.WoundedNumber);
				lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, num);
				defeatedParty.MemberRoster.AddToCountsAtIndex(i, -num, -elementCopyAtIndex.WoundedNumber, 0, removeDepleted: false);
			}
		}
	}

	private static void CaptureWoundedHeroes(LootCollector lootCollector, PartyBase defeatedParty, bool isSurrender)
	{
		if (!(defeatedParty.LeaderHero.IsWounded || isSurrender))
		{
			return;
		}
		for (int i = 0; i < defeatedParty.MemberRoster.Count; i++)
		{
			TroopRosterElement elementCopyAtIndex = defeatedParty.MemberRoster.GetElementCopyAtIndex(i);
			if (elementCopyAtIndex.Character.IsHero)
			{
				if (elementCopyAtIndex.Character.HeroObject.DeathMark != KillCharacterAction.KillCharacterActionDetail.DiedInBattle)
				{
					lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, 1);
					if (defeatedParty.LeaderHero == elementCopyAtIndex.Character.HeroObject && defeatedParty.IsMobile)
					{
						defeatedParty.MobileParty.RemovePartyLeader();
					}
					defeatedParty.MemberRoster.AddToCountsAtIndex(i, -1, 0, 0, removeDepleted: false);
				}
			}
			else if (elementCopyAtIndex.Number > 0)
			{
				lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, elementCopyAtIndex.Number);
				defeatedParty.MemberRoster.AddToCountsAtIndex(i, -elementCopyAtIndex.Number, 0, 0, removeDepleted: false);
			}
		}
	}

	public ItemRoster ItemRosterForPlayerLootShare(PartyBase playerParty)
	{
		int index = _battleParties.FindIndexQ((MapEventParty p) => p.Party == playerParty);
		return _battleParties[index].RosterToReceiveLootItems;
	}

	public TroopRoster MemberRosterForPlayerLootShare(PartyBase playerParty)
	{
		int index = _battleParties.FindIndexQ((MapEventParty p) => p.Party == playerParty);
		return _battleParties[index].RosterToReceiveLootMembers;
	}

	public TroopRoster PrisonerRosterForPlayerLootShare(PartyBase playerParty)
	{
		int index = _battleParties.FindIndexQ((MapEventParty p) => p.Party == playerParty);
		return _battleParties[index].RosterToReceiveLootPrisoners;
	}

	public void Clear()
	{
		_battleParties.Clear();
	}

	public UniqueTroopDescriptor SelectRandomSimulationTroop()
	{
		_selectedSimulationTroopIndex = MBRandom.RandomInt(NumRemainingSimulationTroops);
		_selectedSimulationTroopDescriptor = _simulationTroopList[_selectedSimulationTroopIndex];
		_selectedSimulationTroop = GetAllocatedTroop(_selectedSimulationTroopDescriptor);
		return _selectedSimulationTroopDescriptor;
	}

	private void RemoveSelectedTroopFromSimulationList()
	{
		_simulationTroopList[_selectedSimulationTroopIndex] = _simulationTroopList[_simulationTroopList.Count - 1];
		_simulationTroopList.RemoveAt(_simulationTroopList.Count - 1);
		_selectedSimulationTroopIndex = -1;
		_selectedSimulationTroopDescriptor = UniqueTroopDescriptor.Invalid;
		_selectedSimulationTroop = null;
	}

	internal bool ApplySimulationDamageToSelectedTroop(int damage, DamageTypes damageType, PartyBase strikerParty)
	{
		bool flag = false;
		if (_selectedSimulationTroop.IsHero)
		{
			AddHeroDamage(_selectedSimulationTroop.HeroObject, damage);
			if (_selectedSimulationTroop.HeroObject.IsWounded)
			{
				float survivalChance = Campaign.Current.Models.PartyHealingModel.GetSurvivalChance(_selectedSimulationTroop.HeroObject.PartyBelongedTo?.Party ?? null, _selectedSimulationTroop, damageType, canDamageKillEvenIfBlunt: false, strikerParty);
				if (MBRandom.RandomFloat > survivalChance && _selectedSimulationTroop.HeroObject.CanDie(KillCharacterAction.KillCharacterActionDetail.DiedInBattle))
				{
					OnTroopKilled(_selectedSimulationTroopDescriptor);
					BattleObserver?.TroopNumberChanged(MissionSide, GetAllocatedTroopParty(_selectedSimulationTroopDescriptor), _selectedSimulationTroop, -1, 1);
					KillCharacterAction.ApplyByBattle(_selectedSimulationTroop.HeroObject, null, showNotification: false);
				}
				else
				{
					OnTroopWounded(_selectedSimulationTroopDescriptor);
					BattleObserver?.TroopNumberChanged(MissionSide, GetAllocatedTroopParty(_selectedSimulationTroopDescriptor), _selectedSimulationTroop, -1, 0, 1);
				}
				flag = true;
			}
		}
		else if (MBRandom.RandomInt(_selectedSimulationTroop.MaxHitPoints()) < damage)
		{
			PartyBase party = _allocatedTroops[_selectedSimulationTroopDescriptor].Party;
			float survivalChance2 = Campaign.Current.Models.PartyHealingModel.GetSurvivalChance(party, _selectedSimulationTroop, damageType, canDamageKillEvenIfBlunt: false, strikerParty);
			if (MBRandom.RandomFloat < survivalChance2)
			{
				OnTroopWounded(_selectedSimulationTroopDescriptor);
				BattleObserver?.TroopNumberChanged(MissionSide, GetAllocatedTroopParty(_selectedSimulationTroopDescriptor), _selectedSimulationTroop, -1, 0, 1);
				SkillLevelingManager.OnSurgeryApplied(party.MobileParty, surgerySuccess: true, _selectedSimulationTroop.Tier);
				if (strikerParty?.MobileParty != null && strikerParty.MobileParty.HasPerk(DefaultPerks.Medicine.DoctorsOath))
				{
					SkillLevelingManager.OnSurgeryApplied(strikerParty.MobileParty, surgerySuccess: true, _selectedSimulationTroop.Tier);
				}
			}
			else
			{
				OnTroopKilled(_selectedSimulationTroopDescriptor);
				BattleObserver?.TroopNumberChanged(MissionSide, GetAllocatedTroopParty(_selectedSimulationTroopDescriptor), _selectedSimulationTroop, -1, 1);
				SkillLevelingManager.OnSurgeryApplied(party.MobileParty, surgerySuccess: false, _selectedSimulationTroop.Tier);
				if (strikerParty?.MobileParty != null && strikerParty.MobileParty.HasPerk(DefaultPerks.Medicine.DoctorsOath))
				{
					SkillLevelingManager.OnSurgeryApplied(strikerParty.MobileParty, surgerySuccess: false, _selectedSimulationTroop.Tier);
				}
			}
			flag = true;
		}
		if (flag)
		{
			RemoveSelectedTroopFromSimulationList();
		}
		return flag;
	}

	public void ApplySimulatedHitRewardToSelectedTroop(CharacterObject strikerTroop, CharacterObject attackedTroop, int damage, bool isFinishingStrike)
	{
		EquipmentElement equipmentElement = strikerTroop.FirstBattleEquipment[EquipmentIndex.WeaponItemBeginSlot];
		OnTroopScoreHit(_selectedSimulationTroopDescriptor, attackedTroop, damage, isFinishingStrike, isTeamKill: false, equipmentElement.Item?.PrimaryWeapon, isSimulatedHit: true);
		PartyBase party = _allocatedTroops[_selectedSimulationTroopDescriptor].Party;
		if (isFinishingStrike && (!attackedTroop.IsHero || !attackedTroop.HeroObject.IsDead))
		{
			SkillLevelingManager.OnSimulationCombatKill(_selectedSimulationTroop, attackedTroop, party, LeaderParty);
		}
		if (BattleObserver == null)
		{
			return;
		}
		if (isFinishingStrike)
		{
			BattleObserver.TroopNumberChanged(MissionSide, party, _selectedSimulationTroop, 0, 0, 0, 0, 1);
		}
		if (_selectedSimulationTroop.IsHero)
		{
			foreach (SkillObject item in _troopUpgradeTracker.CheckSkillUpgrades(_selectedSimulationTroop.HeroObject).ToList())
			{
				BattleObserver.HeroSkillIncreased(MissionSide, party, _selectedSimulationTroop, item);
			}
			return;
		}
		int num = _troopUpgradeTracker.CheckUpgradedCount(party, _selectedSimulationTroop);
		if (num != 0)
		{
			BattleObserver.TroopNumberChanged(MissionSide, party, _selectedSimulationTroop, 0, 0, 0, 0, 0, num);
		}
	}

	public void Surrender()
	{
		SurrenderParty(LeaderParty);
		IsSurrendered = true;
	}

	private static void SurrenderParty(PartyBase party)
	{
		for (int i = 0; i < party.MemberRoster.Count; i++)
		{
			TroopRosterElement elementCopyAtIndex = party.MemberRoster.GetElementCopyAtIndex(i);
			if (!elementCopyAtIndex.Character.IsHero)
			{
				party.MemberRoster.AddToCountsAtIndex(i, 0, elementCopyAtIndex.Number - elementCopyAtIndex.WoundedNumber);
			}
		}
	}

	internal void AddNearbyPartyToPlayerMapEvent(MobileParty party)
	{
		if (party.MapEventSide != this)
		{
			party.MapEventSide = this;
			_nearbyPartiesAddedToPlayerMapEvent.Add(party);
			CampaignEventDispatcher.Instance.OnNearbyPartyAddedToPlayerMapEvent(party);
		}
	}

	internal void RemoveNearbyPartiesFromPlayerMapEvent()
	{
		foreach (MobileParty item in _nearbyPartiesAddedToPlayerMapEvent)
		{
			item.MapEventSide = null;
		}
		_nearbyPartiesAddedToPlayerMapEvent.Clear();
	}
}
