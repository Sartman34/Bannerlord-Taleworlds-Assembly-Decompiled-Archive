using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.MapEvents;

public class MapEventParty
{
	[SaveableField(2)]
	private FlattenedTroopRoster _roster;

	[SaveableField(3)]
	private int _contributionToBattle = 1;

	[SaveableField(9)]
	private int _healthyManCountAtStart = 1;

	[SaveableField(7)]
	private TroopRoster _woundedInBattle = TroopRoster.CreateDummyTroopRoster();

	[SaveableField(8)]
	private TroopRoster _diedInBattle = TroopRoster.CreateDummyTroopRoster();

	[SaveableProperty(1)]
	public PartyBase Party { get; private set; }

	public int HealthyManCountAtStart => _healthyManCountAtStart;

	internal TroopRoster DiedInBattle => _diedInBattle;

	internal TroopRoster WoundedInBattle => _woundedInBattle;

	public int ContributionToBattle => _contributionToBattle;

	public FlattenedTroopRoster Troops => _roster;

	public bool IsNpcParty => Party != PartyBase.MainParty;

	public TroopRoster RosterToReceiveLootMembers
	{
		get
		{
			if (!IsNpcParty)
			{
				return PlayerEncounter.Current.RosterToReceiveLootMembers;
			}
			return Party.MemberRoster;
		}
	}

	public TroopRoster RosterToReceiveLootPrisoners
	{
		get
		{
			if (!IsNpcParty)
			{
				return PlayerEncounter.Current.RosterToReceiveLootPrisoners;
			}
			return Party.PrisonRoster;
		}
	}

	public ItemRoster RosterToReceiveLootItems
	{
		get
		{
			if (!IsNpcParty)
			{
				return PlayerEncounter.Current.RosterToReceiveLootItems;
			}
			return Party.ItemRoster;
		}
	}

	[SaveableProperty(7)]
	public float GainedRenown { get; set; }

	[SaveableProperty(8)]
	public float GainedInfluence { get; set; }

	[SaveableProperty(9)]
	public float MoraleChange { get; set; }

	[SaveableProperty(10)]
	public int PlunderedGold { get; set; }

	[SaveableProperty(11)]
	public int GoldLost { get; set; }

	internal static void AutoGeneratedStaticCollectObjectsMapEventParty(object o, List<object> collectedObjects)
	{
		((MapEventParty)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_roster);
		collectedObjects.Add(_woundedInBattle);
		collectedObjects.Add(_diedInBattle);
		collectedObjects.Add(Party);
	}

	internal static object AutoGeneratedGetMemberValueParty(object o)
	{
		return ((MapEventParty)o).Party;
	}

	internal static object AutoGeneratedGetMemberValueGainedRenown(object o)
	{
		return ((MapEventParty)o).GainedRenown;
	}

	internal static object AutoGeneratedGetMemberValueGainedInfluence(object o)
	{
		return ((MapEventParty)o).GainedInfluence;
	}

	internal static object AutoGeneratedGetMemberValueMoraleChange(object o)
	{
		return ((MapEventParty)o).MoraleChange;
	}

	internal static object AutoGeneratedGetMemberValuePlunderedGold(object o)
	{
		return ((MapEventParty)o).PlunderedGold;
	}

	internal static object AutoGeneratedGetMemberValueGoldLost(object o)
	{
		return ((MapEventParty)o).GoldLost;
	}

	internal static object AutoGeneratedGetMemberValue_roster(object o)
	{
		return ((MapEventParty)o)._roster;
	}

	internal static object AutoGeneratedGetMemberValue_contributionToBattle(object o)
	{
		return ((MapEventParty)o)._contributionToBattle;
	}

	internal static object AutoGeneratedGetMemberValue_healthyManCountAtStart(object o)
	{
		return ((MapEventParty)o)._healthyManCountAtStart;
	}

	internal static object AutoGeneratedGetMemberValue_woundedInBattle(object o)
	{
		return ((MapEventParty)o)._woundedInBattle;
	}

	internal static object AutoGeneratedGetMemberValue_diedInBattle(object o)
	{
		return ((MapEventParty)o)._diedInBattle;
	}

	internal void ResetContributionToBattleToStrength()
	{
		_contributionToBattle = (int)MathF.Sqrt(Party.TotalStrength);
	}

	internal MapEventParty(PartyBase party)
	{
		Party = party;
		Update();
		_healthyManCountAtStart = party.NumberOfHealthyMembers;
	}

	public void Update()
	{
		if (_roster == null)
		{
			_roster = new FlattenedTroopRoster(Party.MemberRoster.TotalManCount);
		}
		_roster.Clear();
		foreach (TroopRosterElement item in Party.MemberRoster.GetTroopRoster())
		{
			if (item.Character.IsHero)
			{
				if (!_woundedInBattle.Contains(item.Character) && !_diedInBattle.Contains(item.Character))
				{
					_roster.Add(item.Character, item.Character.HeroObject.IsWounded, item.Xp);
				}
			}
			else
			{
				_roster.Add(item.Character, item.Number, item.WoundedNumber);
			}
		}
	}

	public void OnTroopKilled(UniqueTroopDescriptor troopSeed)
	{
		FlattenedTroopRosterElement flattenedTroopRosterElement = _roster[troopSeed];
		CharacterObject troop = flattenedTroopRosterElement.Troop;
		Party.MemberRoster.AddTroopTempXp(troop, -flattenedTroopRosterElement.XpGained);
		if (!troop.IsHero && Party.IsActive)
		{
			Party.MemberRoster.RemoveTroop(troop, 1, troopSeed);
		}
		_roster.OnTroopKilled(troopSeed);
		DiedInBattle.AddToCounts(_roster[troopSeed].Troop, 1);
		_contributionToBattle++;
	}

	public void OnTroopWounded(UniqueTroopDescriptor troopSeed)
	{
		Party.MemberRoster.WoundTroop(_roster[troopSeed].Troop, 1, troopSeed);
		_roster.OnTroopWounded(troopSeed);
		WoundedInBattle.AddToCounts(_roster[troopSeed].Troop, 1, insertAtFront: false, 1);
	}

	public void OnTroopRouted(UniqueTroopDescriptor troopSeed)
	{
	}

	public CharacterObject GetTroop(UniqueTroopDescriptor troopSeed)
	{
		return _roster[troopSeed].Troop;
	}

	public void OnTroopScoreHit(UniqueTroopDescriptor attackerTroopDesc, CharacterObject attackedTroop, int damage, bool isFatal, bool isTeamKill, WeaponComponentData attackerWeapon, bool isSimulatedHit)
	{
		CharacterObject troop = _roster[attackerTroopDesc].Troop;
		if (isTeamKill)
		{
			return;
		}
		Campaign.Current.Models.CombatXpModel.GetXpFromHit(troop, null, attackedTroop, Party, damage, isFatal, isSimulatedHit ? CombatXpModel.MissionTypeEnum.SimulationBattle : CombatXpModel.MissionTypeEnum.Battle, out var xpAmount);
		xpAmount += MBRandom.RoundRandomized(xpAmount);
		if (!troop.IsHero)
		{
			if (xpAmount > 0)
			{
				int gainedXp = _roster.OnTroopGainXp(attackerTroopDesc, xpAmount);
				Party.MemberRoster.AddTroopTempXp(troop, gainedXp);
			}
		}
		else
		{
			CampaignEventDispatcher.Instance.OnHeroCombatHit(troop, attackedTroop, Party, attackerWeapon, isFatal, xpAmount);
		}
		_contributionToBattle += xpAmount;
	}

	public void CommitXpGain()
	{
		if (Party.MobileParty == null)
		{
			return;
		}
		int num = 0;
		foreach (FlattenedTroopRosterElement item in _roster)
		{
			CharacterObject troop = item.Troop;
			if (!item.IsKilled && item.XpGained > 0 && MobilePartyHelper.CanTroopGainXp(Party, troop, out var _))
			{
				int num2 = Campaign.Current.Models.PartyTrainingModel.CalculateXpGainFromBattles(item, Party);
				int num3 = Campaign.Current.Models.PartyTrainingModel.GenerateSharedXp(troop, num2, Party.MobileParty);
				if (num3 > 0)
				{
					num += num3;
					num2 -= num3;
				}
				if (!troop.IsHero)
				{
					Party.MemberRoster.AddXpToTroop(num2, troop);
				}
			}
		}
		MobilePartyHelper.PartyAddSharedXp(Party.MobileParty, num);
		SkillLevelingManager.OnBattleEnd(Party, _roster);
	}
}
