using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.Core;
using TaleWorlds.Library;

namespace TaleWorlds.CampaignSystem.MapEvents;

internal class LootCollector
{
	internal TroopRoster LootedMembers { get; private set; }

	internal TroopRoster LootedPrisoners { get; private set; }

	internal Dictionary<PartyBase, ItemRoster> LootedItems { get; private set; }

	public TroopRoster CasualtiesInBattle { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsLootCollector(object o, List<object> collectedObjects)
	{
		((LootCollector)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
	}

	internal LootCollector()
	{
		LootedMembers = TroopRoster.CreateDummyTroopRoster();
		LootedPrisoners = TroopRoster.CreateDummyTroopRoster();
		LootedItems = new Dictionary<PartyBase, ItemRoster>();
		CasualtiesInBattle = TroopRoster.CreateDummyTroopRoster();
	}

	internal void AddLootedItems(PartyBase lootedParty, EquipmentElement equipmentElement, int number)
	{
		if (LootedItems.TryGetValue(lootedParty, out var value))
		{
			value.AddToCounts(equipmentElement, number);
			return;
		}
		ItemRoster itemRoster = new ItemRoster();
		itemRoster.AddToCounts(equipmentElement, number);
		LootedItems.Add(lootedParty, itemRoster);
	}

	public void MakeRemainingPrisonerHeroesEscape()
	{
		foreach (TroopRosterElement item in LootedMembers.RemoveIf((TroopRosterElement lordElement) => lordElement.Character.IsHero && !lordElement.Character.HeroObject.IsHumanPlayerCharacter && !lordElement.Character.HeroObject.CanBecomePrisoner()))
		{
			MakeHeroFugitiveAction.Apply(item.Character.HeroObject);
		}
	}

	internal void MakeFreedHeroesEscape(TroopRoster freedTroops, bool wonByPlayer = false)
	{
		for (int num = freedTroops.Count - 1; num >= 0; num--)
		{
			CharacterObject characterAtIndex = freedTroops.GetCharacterAtIndex(num);
			if (characterAtIndex.IsHero && !wonByPlayer)
			{
				if (!characterAtIndex.IsPlayerCharacter)
				{
					EndCaptivityAction.ApplyByReleasedAfterBattle(characterAtIndex.HeroObject);
				}
				freedTroops.RemoveTroop(characterAtIndex);
			}
		}
	}

	internal void GiveShareOfLootToParty(TroopRoster memberRoster, TroopRoster prisonerRoster, ItemRoster itemRoster, PartyBase winnerParty, float lootAmount, MapEvent mapEvent)
	{
		bool flag = winnerParty == PartyBase.MainParty;
		bool flag2 = winnerParty.IsMobile && winnerParty.MobileParty.IsMilitia;
		bool flag3 = winnerParty.IsMobile && winnerParty.MobileParty.IsGarrison;
		bool flag4 = flag2 && winnerParty.MobileParty.CurrentSettlement != null && winnerParty.MobileParty.CurrentSettlement.IsVillage;
		bool flag5 = winnerParty.IsMobile && winnerParty.MobileParty.IsVillager;
		bool flag6 = winnerParty.IsMobile && winnerParty.MobileParty.IsCaravan;
		bool flag7 = winnerParty.IsMobile && winnerParty.MobileParty.IsBandit;
		List<TroopRosterElement> list = new List<TroopRosterElement>((int)((float)LootedMembers.TotalManCount * MathF.Min(lootAmount * 1.3f, 1f)));
		foreach (TroopRosterElement item4 in LootedMembers.GetTroopRoster())
		{
			int number = item4.Number;
			CharacterObject character = item4.Character;
			if (character.IsPlayerCharacter)
			{
				TroopRosterElement troopRosterElement = new TroopRosterElement(character);
				troopRosterElement.Number = 1;
				troopRosterElement.WoundedNumber = 1;
				TroopRosterElement item = troopRosterElement;
				list.Add(item);
				continue;
			}
			for (int i = 0; i < number; i++)
			{
				if (MBRandom.RandomFloat < lootAmount)
				{
					TroopRosterElement troopRosterElement = new TroopRosterElement(character);
					troopRosterElement.Number = 1;
					troopRosterElement.WoundedNumber = 1;
					TroopRosterElement item2 = troopRosterElement;
					list.Add(item2);
				}
			}
		}
		foreach (TroopRosterElement item5 in list)
		{
			LootedMembers.AddToCounts(item5.Character, -1);
		}
		foreach (TroopRosterElement item6 in list)
		{
			PartyBase partyBase = winnerParty;
			if (flag2 || flag3)
			{
				partyBase = winnerParty.MobileParty.HomeSettlement.Party;
				prisonerRoster = partyBase.PrisonRoster;
			}
			if (item6.Character.IsHero)
			{
				if (!flag && winnerParty.IsMobile)
				{
					TakePrisonerAction.Apply(partyBase, item6.Character.HeroObject);
					if ((flag4 || flag5 || flag6) && !item6.Character.IsPlayerCharacter)
					{
						EndCaptivityAction.ApplyByReleasedAfterBattle(item6.Character.HeroObject);
					}
				}
				else if (!flag4)
				{
					prisonerRoster.AddToCounts(item6.Character, item6.Number);
				}
			}
			else if (!(flag4 || flag5 || flag6))
			{
				prisonerRoster.AddToCounts(item6.Character, item6.Number);
			}
		}
		float partySavePrisonerAsMemberShareProbability = Campaign.Current.Models.BattleRewardModel.GetPartySavePrisonerAsMemberShareProbability(winnerParty, lootAmount);
		int num = (winnerParty.IsMobile ? winnerParty.MobileParty.LimitedPartySize : winnerParty.PartySizeLimit);
		if (partySavePrisonerAsMemberShareProbability > 0f)
		{
			for (int num2 = LootedPrisoners.Count - 1; num2 >= 0; num2--)
			{
				int elementNumber = LootedPrisoners.GetElementNumber(num2);
				CharacterObject characterAtIndex = LootedPrisoners.GetCharacterAtIndex(num2);
				int num3 = 0;
				for (int j = 0; j < elementNumber; j++)
				{
					bool num4 = characterAtIndex.IsHero && characterAtIndex.HeroObject.IsReleased;
					bool flag8 = flag7 && characterAtIndex.Occupation != Occupation.Bandit;
					bool flag9 = flag3 && characterAtIndex.Occupation == Occupation.Bandit;
					if (!(num4 || flag8 || flag9) && MBRandom.RandomFloat < partySavePrisonerAsMemberShareProbability)
					{
						if (!flag && memberRoster.TotalManCount + 1 > num)
						{
							break;
						}
						if (characterAtIndex.IsHero && !flag)
						{
							EndCaptivityAction.ApplyByReleasedAfterBattle(characterAtIndex.HeroObject);
						}
						else
						{
							memberRoster.AddToCounts(characterAtIndex, 1);
						}
						num3++;
					}
				}
				if (num3 > 0)
				{
					LootedPrisoners.AddToCounts(characterAtIndex, -num3);
				}
			}
		}
		MBList<TroopRosterElement> mBList = new MBList<TroopRosterElement>();
		for (int num5 = CasualtiesInBattle.Count - 1; num5 >= 0; num5--)
		{
			int elementNumber2 = CasualtiesInBattle.GetElementNumber(num5);
			CharacterObject characterAtIndex2 = CasualtiesInBattle.GetCharacterAtIndex(num5);
			int num6 = 0;
			TroopRosterElement item3 = new TroopRosterElement(characterAtIndex2);
			for (int k = 0; k < elementNumber2; k++)
			{
				if (MBRandom.RandomFloat < lootAmount)
				{
					mBList.Add(item3);
					num6++;
				}
			}
			if (num6 > 0)
			{
				CasualtiesInBattle.AddToCounts(characterAtIndex2, -num6);
			}
		}
		if (flag3 || flag2)
		{
			return;
		}
		ItemRoster itemRoster2 = new ItemRoster();
		CampaignEventDispatcher.Instance.CollectLoots(mapEvent, winnerParty, LootedItems, itemRoster2, mBList, lootAmount);
		for (int l = 0; l < itemRoster2.Count; l++)
		{
			itemRoster.Add(itemRoster2[l]);
		}
		CampaignEventDispatcher.Instance.OnLootDistributedToParty(mapEvent, winnerParty, LootedItems);
		ExplainedNumber stat = new ExplainedNumber(1f);
		if (winnerParty.IsMobile)
		{
			CharacterObject effectivePartyLeaderForSkill = SkillHelper.GetEffectivePartyLeaderForSkill(winnerParty);
			if (effectivePartyLeaderForSkill != null)
			{
				SkillHelper.AddSkillBonusForCharacter(DefaultSkills.Roguery, DefaultSkillEffects.RogueryLootBonus, effectivePartyLeaderForSkill, ref stat);
			}
		}
		if (winnerParty == PartyBase.MainParty)
		{
			IEnumerable<ItemRosterElement> rosterElementList = LootCasualties(mBList, stat.ResultNumber);
			itemRoster.Add(rosterElementList);
		}
		else if (winnerParty.LeaderHero != null)
		{
			int num7 = MathF.Round((float)LootCasualtiesToGold(mBList, stat.ResultNumber) * stat.ResultNumber);
			num7 = (int)((float)num7 * Campaign.Current.Models.BattleRewardModel.GetAITradePenalty());
			winnerParty.LeaderHero.Gold += num7;
		}
	}

	private IEnumerable<ItemRosterElement> LootCasualties(ICollection<TroopRosterElement> shareFromCasualties, float lootFactor)
	{
		ItemRoster itemRoster = new ItemRoster();
		List<EquipmentElement> list = new List<EquipmentElement>();
		foreach (TroopRosterElement shareFromCasualty in shareFromCasualties)
		{
			list.Clear();
			int num = MBRandom.RoundRandomized(lootFactor);
			for (int i = 0; i < num; i++)
			{
				float expectedLootedItemValue = Campaign.Current.Models.BattleRewardModel.GetExpectedLootedItemValue(shareFromCasualty.Character);
				expectedLootedItemValue *= MBRandom.RandomFloatRanged(0.75f, 1.25f);
				EquipmentElement lootedItem = Campaign.Current.Models.BattleRewardModel.GetLootedItemFromTroop(shareFromCasualty.Character, expectedLootedItemValue);
				if (lootedItem.Item != null && !lootedItem.Item.NotMerchandise && list.Count((EquipmentElement x) => x.Item.Type == lootedItem.Item.Type) == 0)
				{
					itemRoster.AddToCounts(lootedItem, 1);
				}
			}
		}
		return itemRoster;
	}

	private int LootCasualtiesToGold(ICollection<TroopRosterElement> shareFromCasualties, float lootFactor)
	{
		float num = 0f;
		foreach (TroopRosterElement shareFromCasualty in shareFromCasualties)
		{
			num += Campaign.Current.Models.BattleRewardModel.GetExpectedLootedItemValue(shareFromCasualty.Character) * lootFactor;
		}
		return (int)num;
	}
}
