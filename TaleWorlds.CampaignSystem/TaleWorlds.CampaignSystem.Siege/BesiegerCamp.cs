using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;
using TaleWorlds.SaveSystem.Load;

namespace TaleWorlds.CampaignSystem.Siege;

public class BesiegerCamp : ISiegeEventSide
{
	[SaveableField(8)]
	private readonly MBList<MobileParty> _besiegerParties;

	[SaveableField(9)]
	private MobileParty _leaderParty;

	[SaveableField(1)]
	private MBList<SiegeEvent.SiegeEngineMissile> _siegeEngineMissiles;

	[SaveableProperty(6)]
	public SiegeEvent SiegeEvent { get; private set; }

	[SaveableProperty(7)]
	public SiegeEvent.SiegeEnginesContainer SiegeEngines { get; private set; }

	public MobileParty LeaderParty => _leaderParty;

	public BattleSideEnum BattleSide => BattleSideEnum.Attacker;

	public MBReadOnlyList<SiegeEvent.SiegeEngineMissile> SiegeEngineMissiles => _siegeEngineMissiles;

	[SaveableProperty(10)]
	public SiegeStrategy SiegeStrategy { get; private set; }

	[SaveableProperty(11)]
	public int NumberOfTroopsKilledOnSide { get; private set; }

	private float PreparationProgress => SiegeEngines?.SiegePreparations?.Progress ?? 0f;

	public bool IsPreparationComplete => PreparationProgress >= 1f;

	public bool IsReadyToBesiege
	{
		get
		{
			if (IsPreparationComplete)
			{
				return StartingAssaultOnBesiegedSettlementIsLogical();
			}
			return false;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsBesiegerCamp(object o, List<object> collectedObjects)
	{
		((BesiegerCamp)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_besiegerParties);
		collectedObjects.Add(_leaderParty);
		collectedObjects.Add(_siegeEngineMissiles);
		collectedObjects.Add(SiegeEvent);
		collectedObjects.Add(SiegeEngines);
		collectedObjects.Add(SiegeStrategy);
	}

	internal static object AutoGeneratedGetMemberValueSiegeEvent(object o)
	{
		return ((BesiegerCamp)o).SiegeEvent;
	}

	internal static object AutoGeneratedGetMemberValueSiegeEngines(object o)
	{
		return ((BesiegerCamp)o).SiegeEngines;
	}

	internal static object AutoGeneratedGetMemberValueSiegeStrategy(object o)
	{
		return ((BesiegerCamp)o).SiegeStrategy;
	}

	internal static object AutoGeneratedGetMemberValueNumberOfTroopsKilledOnSide(object o)
	{
		return ((BesiegerCamp)o).NumberOfTroopsKilledOnSide;
	}

	internal static object AutoGeneratedGetMemberValue_besiegerParties(object o)
	{
		return ((BesiegerCamp)o)._besiegerParties;
	}

	internal static object AutoGeneratedGetMemberValue_leaderParty(object o)
	{
		return ((BesiegerCamp)o)._leaderParty;
	}

	internal static object AutoGeneratedGetMemberValue_siegeEngineMissiles(object o)
	{
		return ((BesiegerCamp)o)._siegeEngineMissiles;
	}

	public IEnumerable<PartyBase> GetInvolvedPartiesForEventType(MapEvent.BattleTypes mapEventType = MapEvent.BattleTypes.Siege)
	{
		foreach (MobileParty besiegerParty in _besiegerParties)
		{
			yield return besiegerParty.Party;
		}
	}

	public PartyBase GetNextInvolvedPartyForEventType(ref int partyIndex, MapEvent.BattleTypes mapEventType = MapEvent.BattleTypes.Siege)
	{
		partyIndex++;
		if (partyIndex >= _besiegerParties.Count)
		{
			return null;
		}
		return _besiegerParties[partyIndex].Party;
	}

	public bool HasInvolvedPartyForEventType(PartyBase party, MapEvent.BattleTypes mapEventType = MapEvent.BattleTypes.Siege)
	{
		foreach (MobileParty besiegerParty in _besiegerParties)
		{
			if (besiegerParty.Party == party)
			{
				return true;
			}
		}
		return false;
	}

	public BesiegerCamp(SiegeEvent siegeEvent)
	{
		_besiegerParties = new MBList<MobileParty>();
		SiegeEvent = siegeEvent;
	}

	public bool IsBesiegerSideParty(MobileParty mobileParty)
	{
		return GetInvolvedPartiesForEventType().Any((PartyBase t) => t == mobileParty.Party || t.MobileParty.AttachedParties.Any((MobileParty k) => k == mobileParty));
	}

	public void InitializeSiegeEventSide()
	{
		SiegeStrategy = DefaultSiegeStrategies.Custom;
		NumberOfTroopsKilledOnSide = 0;
		SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = null;
		siegeEngineConstructionProgress = new SiegeEvent.SiegeEngineConstructionProgress(DefaultSiegeEngineTypes.Preparations, PreparationProgress, DefaultSiegeEngineTypes.Preparations.BaseHitPoints);
		SiegeEngines = new SiegeEvent.SiegeEnginesContainer(BattleSideEnum.Attacker, siegeEngineConstructionProgress);
		_siegeEngineMissiles = new MBList<SiegeEvent.SiegeEngineMissile>();
		SetPrebuiltSiegeEngines();
	}

	public void OnTroopsKilledOnSide(int killCount)
	{
		NumberOfTroopsKilledOnSide += killCount;
	}

	public void SetSiegeStrategy(SiegeStrategy strategy)
	{
		SiegeStrategy = strategy;
	}

	internal void AddSiegePartyInternal(MobileParty mobileParty)
	{
		_besiegerParties.Add(mobileParty);
		if (_besiegerParties.Count == 1)
		{
			SiegeEvent.BesiegedSettlement.LastAttackerParty = mobileParty;
		}
		_leaderParty = Campaign.Current.Models.EncounterModel.GetLeaderOfSiegeEvent(SiegeEvent, BattleSideEnum.Attacker).PartyBelongedTo;
		ChangeSiegeStrategyIfNeeded();
	}

	internal void RemoveSiegePartyInternal(MobileParty mobileParty)
	{
		_besiegerParties.Remove(mobileParty);
		if (mobileParty != null)
		{
			OnPartyLeftSiege(mobileParty);
		}
		if (_besiegerParties.Count == 0)
		{
			SiegeEvent.FinalizeSiegeEvent();
		}
		else if (_leaderParty == mobileParty && (_leaderParty == null || _leaderParty.MapEvent == null || _leaderParty.MapEvent.State != MapEventState.WaitingRemoval))
		{
			_leaderParty = Campaign.Current.Models.EncounterModel.GetLeaderOfSiegeEvent(SiegeEvent, BattleSideEnum.Attacker)?.PartyBelongedTo;
			ChangeSiegeStrategyIfNeeded();
		}
	}

	public void RemoveAllSiegeParties()
	{
		MapEvent mapEvent = SiegeEvent.BesiegedSettlement.Party.MapEvent;
		if (mapEvent != null && mapEvent.IsSiegeAssault && !mapEvent.IsFinished)
		{
			Debug.FailedAssert("RemoveAllParties called before mapEvent is cleared", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Siege\\BesiegerCamp.cs", "RemoveAllSiegeParties", 168);
		}
		while (_besiegerParties.Count > 0)
		{
			_besiegerParties[0].BesiegerCamp = null;
		}
	}

	private void OnPartyLeftSiege(MobileParty mobileParty)
	{
		if (mobileParty == MobileParty.MainParty && PlayerSiege.PlayerSiegeEvent != null)
		{
			PlayerSiege.ClosePlayerSiege();
		}
		if (Campaign.Current.Models.PartyImpairmentModel.CanGetDisorganized(mobileParty.Party))
		{
			mobileParty.SetDisorganized(isDisorganized: true);
		}
		if (_besiegerParties.Contains(MobileParty.MainParty) && (MobileParty.MainParty.MapEvent == null || !MobileParty.MainParty.MapEvent.HasWinner))
		{
			Campaign.Current.TimeControlMode = CampaignTimeControlMode.Stop;
			Campaign.Current.CurrentMenuContext?.Refresh();
		}
		mobileParty.Ai.SetMoveModeHold();
	}

	private void ChangeSiegeStrategyIfNeeded()
	{
		if (SiegeStrategy != DefaultSiegeStrategies.Custom || _leaderParty.LeaderHero == Hero.MainHero)
		{
			return;
		}
		SiegeStrategy siegeStrategy = null;
		float num = float.MinValue;
		foreach (SiegeStrategy allAttackerStrategy in DefaultSiegeStrategies.AllAttackerStrategies)
		{
			float num2 = Campaign.Current.Models.SiegeEventModel.GetSiegeStrategyScore(SiegeEvent, BattleSideEnum.Attacker, allAttackerStrategy) * (0.5f + 0.5f * MBRandom.RandomFloat);
			if (num2 > num)
			{
				num = num2;
				siegeStrategy = allAttackerStrategy;
			}
		}
		SetSiegeStrategy(siegeStrategy);
	}

	internal void SetSiegeCampPartyPosition(MobileParty mobileParty)
	{
		MatrixFrame[] besiegerCampPositions = SiegeEvent.BesiegedSettlement.Town.BesiegerCampPositions1;
		MatrixFrame[] besiegerCampPositions2 = SiegeEvent.BesiegedSettlement.Town.BesiegerCampPositions2;
		int num = 0;
		Vec2 vec;
		bool flag;
		do
		{
			int num2 = MBRandom.RandomInt(besiegerCampPositions.Length);
			float randomFloat = MBRandom.RandomFloat;
			float randomFloat2 = MBRandom.RandomFloat;
			vec = besiegerCampPositions[num2].origin.AsVec2 + randomFloat * besiegerCampPositions[num2].rotation.s.AsVec2 + randomFloat2 * besiegerCampPositions[num2].rotation.f.AsVec2;
			flag = false;
			foreach (PartyBase item in SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType())
			{
				if ((vec - item.MobileParty.VisualPosition2DWithoutError).LengthSquared < 0.25f)
				{
					flag = true;
					break;
				}
			}
			num++;
		}
		while (flag && num < 20);
		if (num == 20 && besiegerCampPositions2 != null && besiegerCampPositions2.Length != 0)
		{
			num = 0;
			do
			{
				int num3 = MBRandom.RandomInt(besiegerCampPositions2.Length);
				float randomFloat3 = MBRandom.RandomFloat;
				float randomFloat4 = MBRandom.RandomFloat;
				vec = besiegerCampPositions2[num3].origin.AsVec2 + randomFloat3 * besiegerCampPositions2[num3].rotation.s.AsVec2 + randomFloat4 * besiegerCampPositions2[num3].rotation.f.AsVec2;
				flag = false;
				foreach (PartyBase item2 in SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType())
				{
					if ((vec - item2.MobileParty.VisualPosition2DWithoutError).LengthSquared < 0.25f)
					{
						flag = true;
						break;
					}
				}
				num++;
			}
			while (flag && num < 20);
		}
		mobileParty.Position2D = vec;
		mobileParty.Party.SetVisualAsDirty();
	}

	public void AddSiegeEngineMissile(SiegeEvent.SiegeEngineMissile missile)
	{
		_siegeEngineMissiles.Add(missile);
	}

	public void RemoveDeprecatedMissiles()
	{
		_siegeEngineMissiles.RemoveAll((SiegeEvent.SiegeEngineMissile missile) => missile.CollisionTime.IsPast);
	}

	private bool StartingAssaultOnBesiegedSettlementIsLogical()
	{
		float num = 0f;
		float num2 = ((MobileParty.MainParty.CurrentSettlement == SiegeEvent.BesiegedSettlement) ? 0.5f : 1f);
		foreach (PartyBase item in SiegeEvent.BesiegedSettlement.GetInvolvedPartiesForEventType())
		{
			if (item.IsMobile && item.MobileParty.CurrentSettlement == SiegeEvent.BesiegedSettlement && (item.MobileParty.Aggressiveness > 0.01f || item.MobileParty.IsMilitia || item.MobileParty.IsGarrison))
			{
				num += num2 * item.TotalStrength;
			}
		}
		float num3 = 0f;
		LocatableSearchData<MobileParty> data = Campaign.Current.MobilePartyLocator.StartFindingLocatablesAroundPosition(SiegeEvent.BesiegedSettlement.Position2D, 10f);
		for (MobileParty mobileParty = Campaign.Current.MobilePartyLocator.FindNextLocatable(ref data); mobileParty != null; mobileParty = Campaign.Current.MobilePartyLocator.FindNextLocatable(ref data))
		{
			if (mobileParty.Aggressiveness > 0f && mobileParty.MapFaction == SiegeEvent.BesiegedSettlement.MapFaction && mobileParty.CurrentSettlement == null)
			{
				num3 += mobileParty.Party.TotalStrength;
			}
		}
		float num4 = 0f;
		foreach (PartyBase item2 in SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType())
		{
			num4 += item2.TotalStrength;
		}
		float settlementAdvantage = Campaign.Current.Models.CombatSimulationModel.GetSettlementAdvantage(SiegeEvent.BesiegedSettlement);
		float maximumSiegeEquipmentProgress = Campaign.Current.Models.CombatSimulationModel.GetMaximumSiegeEquipmentProgress(SiegeEvent.BesiegedSettlement);
		float randomFloat = MBRandom.RandomFloat;
		float num5 = num4 / (num * MathF.Pow(settlementAdvantage, 0.67f));
		bool result = false;
		float num6 = 0.9f;
		if (num5 > num6)
		{
			float num7 = 0f;
			float num8 = 0f;
			foreach (PartyBase item3 in SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType())
			{
				num7 += item3.MobileParty.Food;
				num8 += 0f - item3.MobileParty.FoodChange;
			}
			float num9 = MathF.Max(0f, num7) / num8;
			float num10 = MathF.Min(1f, num3 / num4);
			float num11 = ((num9 < 3f) ? ((1f + (3f - num9) * (3f - num9)) * 0.2f) : 0f);
			float num12 = (MathF.Min(4f, MathF.Max(num5, 1f)) - 1f) * 0.2f;
			float totalStrength = SiegeEvent.BesiegerCamp.LeaderParty.MapFaction.TotalStrength;
			float totalStrength2 = SiegeEvent.BesiegedSettlement.MapFaction.TotalStrength;
			float num13 = ((totalStrength < totalStrength2) ? ((1f - (totalStrength + 0.01f) / (totalStrength2 + 0.01f)) * 0.6f) : 0f);
			float y = MathF.Max(0.5f, 3f - num12 - num10 - num11 - num13);
			float num14 = MathF.Pow(settlementAdvantage, y);
			int numberOfEquipmentsBuilt = Campaign.Current.Models.CombatSimulationModel.GetNumberOfEquipmentsBuilt(SiegeEvent.BesiegedSettlement);
			float num15 = (MathF.Min(9f, num5) - num6) / num14;
			num15 *= ((float)MathF.Min(2, numberOfEquipmentsBuilt) + 1f) / 3f;
			num15 *= 1f - 0.66f * (maximumSiegeEquipmentProgress * maximumSiegeEquipmentProgress);
			result = num == 0f || randomFloat < num15;
		}
		return result;
	}

	private void SetPrebuiltSiegeEngines()
	{
		foreach (SiegeEngineType item in Campaign.Current.Models.SiegeEventModel.GetPrebuiltSiegeEnginesOfSiegeCamp(this))
		{
			float siegeEngineHitPoints = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineHitPoints(SiegeEvent, item, BattleSideEnum.Attacker);
			SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = new SiegeEvent.SiegeEngineConstructionProgress(item, 1f, siegeEngineHitPoints);
			SiegeEngines.AddPrebuiltEngineToReserve(siegeEngineConstructionProgress);
			SiegeEvent.CreateSiegeObject(siegeEngineConstructionProgress, SiegeEvent.GetSiegeEventSide(BattleSideEnum.Defender));
		}
	}

	private float GetDistanceBetweenRangedEngineAndWall(int rangedEngine, int wallIndex)
	{
		float num = (float)rangedEngine * 1f;
		float num2 = 0.5f + 2f * (float)wallIndex;
		return MathF.Abs(num - num2) + 2f;
	}

	private float PriorityCalculationForWalls(float distance)
	{
		return 5f - distance;
	}

	private void FindAttackableWallSectionWithHighestPriority(int attackerSlotIndex, SiegeEngineType siegeEngine, out int targetIndex, out float targetPriority)
	{
		targetIndex = -1;
		targetPriority = 0f;
		if (siegeEngine.IsAntiPersonnel)
		{
			return;
		}
		float num = 9999f;
		MBReadOnlyList<float> settlementWallSectionHitPointsRatioList = SiegeEvent.BesiegedSettlement.SettlementWallSectionHitPointsRatioList;
		for (int i = 0; i < settlementWallSectionHitPointsRatioList.Count; i++)
		{
			if (settlementWallSectionHitPointsRatioList[i] > 0f)
			{
				float distanceBetweenRangedEngineAndWall = GetDistanceBetweenRangedEngineAndWall(attackerSlotIndex, i);
				float num2 = PriorityCalculationForWalls(distanceBetweenRangedEngineAndWall);
				if (num2 > targetPriority || (MathF.Abs(num2 - targetPriority) < 0.0001f && num > distanceBetweenRangedEngineAndWall))
				{
					targetIndex = i;
					targetPriority = num2;
					num = distanceBetweenRangedEngineAndWall;
				}
			}
		}
	}

	public void BombardHitWalls(SiegeEngineType attackerEngineType, int wallIndex)
	{
		MBReadOnlyList<float> settlementWallSectionHitPointsRatioList = SiegeEvent.BesiegedSettlement.SettlementWallSectionHitPointsRatioList;
		if (settlementWallSectionHitPointsRatioList[wallIndex] > 0f)
		{
			float num = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineDamage(SiegeEvent, BattleSideEnum.Attacker, attackerEngineType, SiegeBombardTargets.Wall) / SiegeEvent.BesiegedSettlement.MaxHitPointsOfOneWallSection;
			SiegeEvent.BesiegedSettlement.SetWallSectionHitPointsRatioAtIndex(wallIndex, MBMath.ClampFloat(settlementWallSectionHitPointsRatioList[wallIndex] - num, 0f, 1f));
			bool flag = settlementWallSectionHitPointsRatioList[wallIndex] <= 0f;
			if (flag)
			{
				SiegeEvent.BesiegedSettlement.Party.SetVisualAsDirty();
			}
			CampaignEventDispatcher.Instance.OnSiegeBombardmentWallHit(LeaderParty, SiegeEvent.BesiegedSettlement, BattleSideEnum.Attacker, attackerEngineType, flag);
		}
	}

	public void GetAttackTarget(ISiegeEventSide siegeEventSide, SiegeEngineType siegeEngine, int siegeEngineSlot, out SiegeBombardTargets targetType, out int targetIndex)
	{
		targetType = SiegeBombardTargets.None;
		targetIndex = -1;
		siegeEventSide.SiegeEvent.FindAttackableRangedEngineWithHighestPriority(this, siegeEngineSlot, out var targetIndex2, out var targetPriority);
		FindAttackableWallSectionWithHighestPriority(siegeEngineSlot, siegeEngine, out var targetIndex3, out var targetPriority2);
		if (targetIndex2 == -1 && targetIndex3 == -1)
		{
			return;
		}
		if (targetIndex2 == -1)
		{
			targetIndex = targetIndex3;
			targetType = SiegeBombardTargets.Wall;
			return;
		}
		if (targetIndex3 == -1)
		{
			targetIndex = targetIndex2;
			targetType = SiegeBombardTargets.RangedEngines;
			return;
		}
		float num = targetPriority + targetPriority2;
		if (MBRandom.RandomFloat * num < targetPriority)
		{
			targetIndex = targetIndex2;
			targetType = SiegeBombardTargets.RangedEngines;
		}
		else
		{
			targetIndex = targetIndex3;
			targetType = SiegeBombardTargets.Wall;
		}
	}

	public void FinalizeSiegeEvent()
	{
		if (!GetInvolvedPartiesForEventType().IsEmpty())
		{
			RemoveAllSiegeParties();
		}
	}

	[LateLoadInitializationCallback]
	private void OnLoad(MetaData metaData, ObjectLoadData objectLoadData)
	{
		if (_leaderParty == null && MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.0"))
		{
			_leaderParty = ((_besiegerParties.Count > 0) ? _besiegerParties[0] : null);
		}
	}
}
