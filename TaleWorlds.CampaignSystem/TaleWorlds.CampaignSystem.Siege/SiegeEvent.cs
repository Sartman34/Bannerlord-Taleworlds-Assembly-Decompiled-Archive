using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Siege;

public class SiegeEvent
{
	public class RangedSiegeEngine
	{
		[SaveableField(1)]
		public readonly SiegeEngineType EngineType;

		[SaveableProperty(2)]
		public CampaignTime NextTimeEngineCanBombard { get; private set; }

		[SaveableProperty(3)]
		public bool AlreadyFired { get; private set; }

		[SaveableProperty(4)]
		public SiegeBombardTargets CurrentTargetType { get; private set; }

		[SaveableProperty(5)]
		public int CurrentTargetIndex { get; private set; }

		[SaveableProperty(6)]
		public SiegeBombardTargets PreviousDamagedTargetType { get; private set; }

		[SaveableProperty(7)]
		public int PreviousTargetIndex { get; private set; }

		[SaveableProperty(8)]
		public CampaignTime LastBombardTime { get; private set; }

		public CampaignTime NextProjectileCollisionTime
		{
			get
			{
				if (LastBombardTime.IsFuture)
				{
					return CampaignTime.Never;
				}
				return NextTimeEngineCanBombard;
			}
		}

		public bool IsReadyToFire => NextTimeEngineCanBombard.IsPast;

		internal static void AutoGeneratedStaticCollectObjectsRangedSiegeEngine(object o, List<object> collectedObjects)
		{
			((RangedSiegeEngine)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(EngineType);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(NextTimeEngineCanBombard, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(LastBombardTime, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueNextTimeEngineCanBombard(object o)
		{
			return ((RangedSiegeEngine)o).NextTimeEngineCanBombard;
		}

		internal static object AutoGeneratedGetMemberValueAlreadyFired(object o)
		{
			return ((RangedSiegeEngine)o).AlreadyFired;
		}

		internal static object AutoGeneratedGetMemberValueCurrentTargetType(object o)
		{
			return ((RangedSiegeEngine)o).CurrentTargetType;
		}

		internal static object AutoGeneratedGetMemberValueCurrentTargetIndex(object o)
		{
			return ((RangedSiegeEngine)o).CurrentTargetIndex;
		}

		internal static object AutoGeneratedGetMemberValuePreviousDamagedTargetType(object o)
		{
			return ((RangedSiegeEngine)o).PreviousDamagedTargetType;
		}

		internal static object AutoGeneratedGetMemberValuePreviousTargetIndex(object o)
		{
			return ((RangedSiegeEngine)o).PreviousTargetIndex;
		}

		internal static object AutoGeneratedGetMemberValueLastBombardTime(object o)
		{
			return ((RangedSiegeEngine)o).LastBombardTime;
		}

		internal static object AutoGeneratedGetMemberValueEngineType(object o)
		{
			return ((RangedSiegeEngine)o).EngineType;
		}

		public RangedSiegeEngine(SiegeEngineType engineType, ISiegeEventSide siegeSide)
		{
			EngineType = engineType;
			CurrentTargetType = SiegeBombardTargets.None;
			CurrentTargetIndex = -1;
			PreviousDamagedTargetType = SiegeBombardTargets.None;
			PreviousTargetIndex = -1;
			AlreadyFired = false;
			LastBombardTime = CampaignTime.Never;
			CalculateNextFireTime(siegeSide.SiegeEvent, siegeSide.BattleSide);
		}

		public void Hold()
		{
			CurrentTargetType = SiegeBombardTargets.None;
			CurrentTargetIndex = -1;
		}

		public void Reload()
		{
			AlreadyFired = false;
		}

		public void OnFireDecisionTaken(SiegeEvent siegeEvent, BattleSideEnum battleSide, int targetSlotIndex, SiegeBombardTargets targetType)
		{
			PreviousDamagedTargetType = CurrentTargetType;
			PreviousTargetIndex = CurrentTargetIndex;
			CurrentTargetIndex = targetSlotIndex;
			CurrentTargetType = targetType;
			AlreadyFired = true;
			LastBombardTime = CampaignTime.Now;
			CalculateNextFireTime(siegeEvent, battleSide);
		}

		private void CalculateNextFireTime(SiegeEvent siegeEvent, BattleSideEnum battleSide)
		{
			CampaignTime campaignTime = CampaignTime.Minutes(Campaign.Current.Models.SiegeEventModel.GetRangedSiegeEngineReloadTime(siegeEvent, battleSide, EngineType));
			NextTimeEngineCanBombard = CampaignTime.Now + campaignTime;
		}
	}

	public class SiegeEngineConstructionProgress
	{
		[SaveableField(1)]
		public readonly SiegeEngineType SiegeEngine;

		public bool IsActive
		{
			get
			{
				if (IsConstructed)
				{
					return !IsBeingRedeployed;
				}
				return false;
			}
		}

		[SaveableProperty(3)]
		public float Hitpoints { get; private set; }

		[SaveableProperty(4)]
		public float Progress { get; private set; }

		[SaveableProperty(5)]
		public RangedSiegeEngine RangedSiegeEngine { get; private set; }

		[SaveableProperty(6)]
		public float RedeploymentProgress { get; private set; }

		[SaveableProperty(7)]
		public float MaxHitPoints { get; private set; }

		public bool IsConstructed => Progress >= 1f;

		public bool IsBeingRedeployed => RedeploymentProgress < 1f;

		internal static void AutoGeneratedStaticCollectObjectsSiegeEngineConstructionProgress(object o, List<object> collectedObjects)
		{
			((SiegeEngineConstructionProgress)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(SiegeEngine);
			collectedObjects.Add(RangedSiegeEngine);
		}

		internal static object AutoGeneratedGetMemberValueHitpoints(object o)
		{
			return ((SiegeEngineConstructionProgress)o).Hitpoints;
		}

		internal static object AutoGeneratedGetMemberValueProgress(object o)
		{
			return ((SiegeEngineConstructionProgress)o).Progress;
		}

		internal static object AutoGeneratedGetMemberValueRangedSiegeEngine(object o)
		{
			return ((SiegeEngineConstructionProgress)o).RangedSiegeEngine;
		}

		internal static object AutoGeneratedGetMemberValueRedeploymentProgress(object o)
		{
			return ((SiegeEngineConstructionProgress)o).RedeploymentProgress;
		}

		internal static object AutoGeneratedGetMemberValueMaxHitPoints(object o)
		{
			return ((SiegeEngineConstructionProgress)o).MaxHitPoints;
		}

		internal static object AutoGeneratedGetMemberValueSiegeEngine(object o)
		{
			return ((SiegeEngineConstructionProgress)o).SiegeEngine;
		}

		public SiegeEngineConstructionProgress(SiegeEngineType siegeEngine, float progress, float maxHitPoints)
		{
			SiegeEngine = siegeEngine;
			Progress = progress;
			RedeploymentProgress = 1f;
			RangedSiegeEngine = null;
			MaxHitPoints = maxHitPoints;
			Hitpoints = MaxHitPoints;
		}

		public void SetRedeploymentProgress(float redeploymentProgress)
		{
			RedeploymentProgress = redeploymentProgress;
		}

		public void SetHitpoints(float hitPoints)
		{
			Hitpoints = hitPoints;
		}

		public void SetProgress(float progress)
		{
			Progress = progress;
		}

		public void SetRangedSiegeEngine(RangedSiegeEngine rangedSiegeEngine)
		{
			RangedSiegeEngine = rangedSiegeEngine;
		}
	}

	public class SiegeEnginesContainer
	{
		public class RemovedSiegeEngine
		{
			[SaveableField(1)]
			public readonly SiegeEngineConstructionProgress SiegeEngine;

			[SaveableField(2)]
			public readonly CampaignTime RemovalTime;

			[SaveableField(3)]
			public readonly int SlotIndex;

			internal static void AutoGeneratedStaticCollectObjectsRemovedSiegeEngine(object o, List<object> collectedObjects)
			{
				((RemovedSiegeEngine)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(SiegeEngine);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(RemovalTime, collectedObjects);
			}

			internal static object AutoGeneratedGetMemberValueSiegeEngine(object o)
			{
				return ((RemovedSiegeEngine)o).SiegeEngine;
			}

			internal static object AutoGeneratedGetMemberValueRemovalTime(object o)
			{
				return ((RemovedSiegeEngine)o).RemovalTime;
			}

			internal static object AutoGeneratedGetMemberValueSlotIndex(object o)
			{
				return ((RemovedSiegeEngine)o).SlotIndex;
			}

			public RemovedSiegeEngine(SiegeEngineConstructionProgress siegeEngine, CampaignTime removalTime, int slotIndex)
			{
				SiegeEngine = siegeEngine;
				RemovalTime = removalTime;
				SlotIndex = slotIndex;
			}
		}

		public const int MaximumAttackerMeleeSiegeEngineCount = 3;

		public const int MaximumAttackerRangedSiegeEngineCount = 4;

		public const int MaximumDefenderMeleeSiegeEngineCount = 0;

		public const int MaximumDefenderRangedSiegeEngineCount = 4;

		[SaveableField(1)]
		public readonly SiegeEngineConstructionProgress SiegePreparations;

		[SaveableField(2)]
		private readonly MBList<SiegeEngineConstructionProgress> _deployedSiegeEngines;

		[SaveableField(3)]
		private readonly MBList<SiegeEngineConstructionProgress> _reservedSiegeEngines;

		[SaveableField(4)]
		public readonly SiegeEngineConstructionProgress[] DeployedRangedSiegeEngines;

		[SaveableField(5)]
		public readonly SiegeEngineConstructionProgress[] DeployedMeleeSiegeEngines;

		[SaveableField(6)]
		private readonly Dictionary<SiegeEngineType, int> _deployedSiegeEngineTypesCount;

		[SaveableField(7)]
		private readonly Dictionary<SiegeEngineType, int> _reservedSiegeEngineTypesCount;

		[SaveableField(8)]
		private readonly MBList<RemovedSiegeEngine> _removedSiegeEngines;

		public MBReadOnlyList<SiegeEngineConstructionProgress> DeployedSiegeEngines => _deployedSiegeEngines;

		public MBReadOnlyList<SiegeEngineConstructionProgress> ReservedSiegeEngines => _reservedSiegeEngines;

		public MBReadOnlyDictionary<SiegeEngineType, int> DeployedSiegeEngineTypesCount { get; private set; }

		public MBReadOnlyDictionary<SiegeEngineType, int> ReservedSiegeEngineTypesCount { get; private set; }

		public MBReadOnlyList<RemovedSiegeEngine> RemovedSiegeEngines => _removedSiegeEngines;

		internal static void AutoGeneratedStaticCollectObjectsSiegeEnginesContainer(object o, List<object> collectedObjects)
		{
			((SiegeEnginesContainer)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(SiegePreparations);
			collectedObjects.Add(DeployedRangedSiegeEngines);
			collectedObjects.Add(DeployedMeleeSiegeEngines);
			collectedObjects.Add(_deployedSiegeEngines);
			collectedObjects.Add(_reservedSiegeEngines);
			collectedObjects.Add(_deployedSiegeEngineTypesCount);
			collectedObjects.Add(_reservedSiegeEngineTypesCount);
			collectedObjects.Add(_removedSiegeEngines);
		}

		internal static object AutoGeneratedGetMemberValueSiegePreparations(object o)
		{
			return ((SiegeEnginesContainer)o).SiegePreparations;
		}

		internal static object AutoGeneratedGetMemberValueDeployedRangedSiegeEngines(object o)
		{
			return ((SiegeEnginesContainer)o).DeployedRangedSiegeEngines;
		}

		internal static object AutoGeneratedGetMemberValueDeployedMeleeSiegeEngines(object o)
		{
			return ((SiegeEnginesContainer)o).DeployedMeleeSiegeEngines;
		}

		internal static object AutoGeneratedGetMemberValue_deployedSiegeEngines(object o)
		{
			return ((SiegeEnginesContainer)o)._deployedSiegeEngines;
		}

		internal static object AutoGeneratedGetMemberValue_reservedSiegeEngines(object o)
		{
			return ((SiegeEnginesContainer)o)._reservedSiegeEngines;
		}

		internal static object AutoGeneratedGetMemberValue_deployedSiegeEngineTypesCount(object o)
		{
			return ((SiegeEnginesContainer)o)._deployedSiegeEngineTypesCount;
		}

		internal static object AutoGeneratedGetMemberValue_reservedSiegeEngineTypesCount(object o)
		{
			return ((SiegeEnginesContainer)o)._reservedSiegeEngineTypesCount;
		}

		internal static object AutoGeneratedGetMemberValue_removedSiegeEngines(object o)
		{
			return ((SiegeEnginesContainer)o)._removedSiegeEngines;
		}

		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			DeployedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(_deployedSiegeEngineTypesCount);
			ReservedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(_reservedSiegeEngineTypesCount);
			RefreshDeployedCounts();
			RefreshReservedCounts();
		}

		public IEnumerable<SiegeEngineConstructionProgress> AllSiegeEngines()
		{
			if (SiegePreparations != null)
			{
				yield return SiegePreparations;
			}
			foreach (SiegeEngineConstructionProgress deployedSiegeEngine in _deployedSiegeEngines)
			{
				yield return deployedSiegeEngine;
			}
			foreach (SiegeEngineConstructionProgress reservedSiegeEngine in _reservedSiegeEngines)
			{
				yield return reservedSiegeEngine;
			}
		}

		public SiegeEnginesContainer(BattleSideEnum side, SiegeEngineConstructionProgress siegePreparations)
		{
			SiegePreparations = siegePreparations;
			switch (side)
			{
			case BattleSideEnum.Attacker:
				_deployedSiegeEngines = new MBList<SiegeEngineConstructionProgress>(4);
				DeployedRangedSiegeEngines = new SiegeEngineConstructionProgress[4];
				DeployedMeleeSiegeEngines = new SiegeEngineConstructionProgress[3];
				break;
			case BattleSideEnum.Defender:
				_deployedSiegeEngines = new MBList<SiegeEngineConstructionProgress>(4);
				DeployedRangedSiegeEngines = new SiegeEngineConstructionProgress[4];
				DeployedMeleeSiegeEngines = new SiegeEngineConstructionProgress[0];
				break;
			default:
				Debug.FailedAssert("Invalid side", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Siege\\SiegeEvent.cs", ".ctor", 254);
				break;
			}
			_deployedSiegeEngineTypesCount = new Dictionary<SiegeEngineType, int>();
			DeployedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(_deployedSiegeEngineTypesCount);
			_reservedSiegeEngines = new MBList<SiegeEngineConstructionProgress>();
			_reservedSiegeEngineTypesCount = new Dictionary<SiegeEngineType, int>();
			ReservedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(_reservedSiegeEngineTypesCount);
			_removedSiegeEngines = new MBList<RemovedSiegeEngine>();
		}

		public void AddPrebuiltEngineToReserve(SiegeEngineConstructionProgress siegeEngine)
		{
			_reservedSiegeEngines.Add(siegeEngine);
			siegeEngine.SetProgress(1f);
			siegeEngine.SetRedeploymentProgress(0f);
			RefreshReservedCounts();
		}

		public void DeploySiegeEngineAtIndex(SiegeEngineConstructionProgress siegeEngine, int index)
		{
			SiegeEngineConstructionProgress[] obj = (siegeEngine.SiegeEngine.IsRanged ? DeployedRangedSiegeEngines : DeployedMeleeSiegeEngines);
			SiegeEngineConstructionProgress siegeEngineConstructionProgress = obj[index];
			if (siegeEngineConstructionProgress != null)
			{
				_deployedSiegeEngines.Remove(siegeEngineConstructionProgress);
				_reservedSiegeEngines.Add(siegeEngineConstructionProgress);
				siegeEngineConstructionProgress.SetRedeploymentProgress(0f);
			}
			_reservedSiegeEngines.Remove(siegeEngine);
			RefreshReservedCounts();
			obj[index] = siegeEngine;
			_deployedSiegeEngines.Add(siegeEngine);
			RefreshDeployedCounts();
		}

		public void RemoveDeployedSiegeEngine(int index, bool isRanged, bool moveToReserve)
		{
			SiegeEngineConstructionProgress[] array = (isRanged ? DeployedRangedSiegeEngines : DeployedMeleeSiegeEngines);
			SiegeEngineConstructionProgress siegeEngineConstructionProgress = array[index];
			if (siegeEngineConstructionProgress != null)
			{
				if (moveToReserve)
				{
					_reservedSiegeEngines.Add(siegeEngineConstructionProgress);
					RefreshReservedCounts();
					siegeEngineConstructionProgress.SetRedeploymentProgress(0f);
				}
				_deployedSiegeEngines.Remove(siegeEngineConstructionProgress);
				RefreshDeployedCounts();
				array[index] = null;
			}
		}

		public bool RemovedSiegeEngineFromReservedSiegeEngines(SiegeEngineConstructionProgress siegeEngine)
		{
			bool num = _reservedSiegeEngines.Remove(siegeEngine);
			if (num)
			{
				RefreshReservedCounts();
			}
			return num;
		}

		public int FindDeploymentIndexOfDeployedEngine(SiegeEngineConstructionProgress deployedEngine)
		{
			if (deployedEngine.SiegeEngine.IsRanged)
			{
				return DeployedRangedSiegeEngines.FindIndex((SiegeEngineConstructionProgress engine) => engine == deployedEngine);
			}
			return DeployedMeleeSiegeEngines.FindIndex((SiegeEngineConstructionProgress engine) => engine == deployedEngine);
		}

		public bool ClearRemovedEnginesIfNecessary()
		{
			return _removedSiegeEngines.RemoveAll((RemovedSiegeEngine engine) => !engine.RemovalTime.IsFuture) > 0;
		}

		private void RefreshDeployedCounts()
		{
			_deployedSiegeEngineTypesCount.Clear();
			foreach (SiegeEngineConstructionProgress deployedSiegeEngine in DeployedSiegeEngines)
			{
				SiegeEngineType siegeEngine = deployedSiegeEngine.SiegeEngine;
				if (_deployedSiegeEngineTypesCount.TryGetValue(siegeEngine, out var value))
				{
					_deployedSiegeEngineTypesCount[siegeEngine] = value + 1;
				}
				else
				{
					_deployedSiegeEngineTypesCount.Add(siegeEngine, 1);
				}
			}
		}

		private void RefreshReservedCounts()
		{
			_reservedSiegeEngineTypesCount.Clear();
			foreach (SiegeEngineConstructionProgress reservedSiegeEngine in ReservedSiegeEngines)
			{
				SiegeEngineType siegeEngine = reservedSiegeEngine.SiegeEngine;
				if (_reservedSiegeEngineTypesCount.TryGetValue(siegeEngine, out var value))
				{
					_reservedSiegeEngineTypesCount[siegeEngine] = value + 1;
				}
				else
				{
					_reservedSiegeEngineTypesCount.Add(siegeEngine, 1);
				}
			}
		}
	}

	public class SiegeEngineMissile
	{
		[SaveableField(1)]
		public readonly SiegeEngineType ShooterSiegeEngineType;

		[SaveableField(2)]
		public readonly int ShooterSlotIndex;

		[SaveableField(3)]
		public readonly SiegeBombardTargets TargetType;

		[SaveableField(4)]
		public readonly int TargetSlotIndex;

		[SaveableField(5)]
		public readonly SiegeEngineConstructionProgress TargetSiegeEngine;

		[SaveableField(6)]
		public readonly bool HitSuccessful;

		[SaveableField(7)]
		public readonly CampaignTime CollisionTime;

		[SaveableField(8)]
		public readonly CampaignTime FireDecisionTime;

		internal static void AutoGeneratedStaticCollectObjectsSiegeEngineMissile(object o, List<object> collectedObjects)
		{
			((SiegeEngineMissile)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(ShooterSiegeEngineType);
			collectedObjects.Add(TargetSiegeEngine);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(CollisionTime, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(FireDecisionTime, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueShooterSiegeEngineType(object o)
		{
			return ((SiegeEngineMissile)o).ShooterSiegeEngineType;
		}

		internal static object AutoGeneratedGetMemberValueShooterSlotIndex(object o)
		{
			return ((SiegeEngineMissile)o).ShooterSlotIndex;
		}

		internal static object AutoGeneratedGetMemberValueTargetType(object o)
		{
			return ((SiegeEngineMissile)o).TargetType;
		}

		internal static object AutoGeneratedGetMemberValueTargetSlotIndex(object o)
		{
			return ((SiegeEngineMissile)o).TargetSlotIndex;
		}

		internal static object AutoGeneratedGetMemberValueTargetSiegeEngine(object o)
		{
			return ((SiegeEngineMissile)o).TargetSiegeEngine;
		}

		internal static object AutoGeneratedGetMemberValueHitSuccessful(object o)
		{
			return ((SiegeEngineMissile)o).HitSuccessful;
		}

		internal static object AutoGeneratedGetMemberValueCollisionTime(object o)
		{
			return ((SiegeEngineMissile)o).CollisionTime;
		}

		internal static object AutoGeneratedGetMemberValueFireDecisionTime(object o)
		{
			return ((SiegeEngineMissile)o).FireDecisionTime;
		}

		public SiegeEngineMissile(SiegeEngineType shooterSiegeEngineType, int shooterSlotIndex, SiegeBombardTargets targetType, int targetSlotIndex, SiegeEngineConstructionProgress targetSiegeEngine, CampaignTime collisionTime, CampaignTime fireTime, bool hitSuccessful)
		{
			ShooterSiegeEngineType = shooterSiegeEngineType;
			ShooterSlotIndex = shooterSlotIndex;
			TargetType = targetType;
			TargetSlotIndex = targetSlotIndex;
			TargetSiegeEngine = targetSiegeEngine;
			CollisionTime = collisionTime;
			FireDecisionTime = fireTime;
			HitSuccessful = hitSuccessful;
		}
	}

	[SaveableField(6)]
	public readonly Settlement BesiegedSettlement;

	[SaveableField(10)]
	public readonly BesiegerCamp BesiegerCamp;

	[SaveableField(144)]
	private bool _isBesiegerDefeated;

	public int SiegeWallSeed => Common.GetDJB2(string.Concat(string.Concat(string.Concat(string.Concat("" + SiegeStartTime.NumTicks, "*"), BesiegedSettlement.StringId), "*"), (int)BesiegedSettlement.SettlementTotalWallHitPoints));

	public int SiegePeopleSeed => Common.GetDJB2(string.Concat(string.Concat(string.Concat(string.Concat(string.Concat(string.Concat("" + SiegeStartTime.NumTicks, "*"), BesiegedSettlement.StringId), "*"), BesiegerCamp.NumberOfTroopsKilledOnSide), "#"), BesiegedSettlement.NumberOfTroopsKilledOnSide));

	[SaveableProperty(5)]
	public CampaignTime SiegeStartTime { get; private set; }

	public bool IsPlayerSiegeEvent
	{
		get
		{
			if (!BesiegerCamp.LeaderParty.IsMainParty)
			{
				return PlayerSiege.PlayerSiegeEvent == this;
			}
			return true;
		}
	}

	public bool ReadyToBeRemoved => BesiegedSettlement.Party.SiegeEvent == null;

	internal static void AutoGeneratedStaticCollectObjectsSiegeEvent(object o, List<object> collectedObjects)
	{
		((SiegeEvent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(BesiegedSettlement);
		collectedObjects.Add(BesiegerCamp);
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(SiegeStartTime, collectedObjects);
	}

	internal static object AutoGeneratedGetMemberValueSiegeStartTime(object o)
	{
		return ((SiegeEvent)o).SiegeStartTime;
	}

	internal static object AutoGeneratedGetMemberValueBesiegedSettlement(object o)
	{
		return ((SiegeEvent)o).BesiegedSettlement;
	}

	internal static object AutoGeneratedGetMemberValueBesiegerCamp(object o)
	{
		return ((SiegeEvent)o).BesiegerCamp;
	}

	internal static object AutoGeneratedGetMemberValue_isBesiegerDefeated(object o)
	{
		return ((SiegeEvent)o)._isBesiegerDefeated;
	}

	public List<PartyBase> GetInvolvedPartiesForEventType(MapEvent.BattleTypes battleType)
	{
		List<PartyBase> list = new List<PartyBase>();
		foreach (PartyBase item in BesiegerCamp.GetInvolvedPartiesForEventType(battleType))
		{
			list.Add(item);
		}
		foreach (PartyBase item2 in BesiegedSettlement.GetInvolvedPartiesForEventType(battleType))
		{
			list.Add(item2);
		}
		return list;
	}

	public MapEvent.BattleTypes GetCurrentBattleType()
	{
		if (BesiegerCamp?.LeaderParty?.MapEvent != null)
		{
			return BesiegerCamp.LeaderParty.MapEvent.EventType;
		}
		return MapEvent.BattleTypes.Siege;
	}

	public SiegeEvent(Settlement settlement, MobileParty besiegerParty)
	{
		BesiegedSettlement = settlement;
		BesiegedSettlement.SiegeEvent = this;
		BesiegerCamp = new BesiegerCamp(this);
		besiegerParty.BesiegerCamp = BesiegerCamp;
		if (besiegerParty.LeaderHero != null && settlement.OwnerClan != null && settlement.OwnerClan != Clan.PlayerClan)
		{
			ChangeRelationAction.ApplyRelationChangeBetweenHeroes(settlement.OwnerClan.Leader, besiegerParty.LeaderHero, -5, besiegerParty.LeaderHero == Hero.MainHero);
		}
		BesiegerCamp.InitializeSiegeEventSide();
		BesiegedSettlement.InitializeSiegeEventSide();
		SiegeStartTime = CampaignTime.Now;
		foreach (MobileParty item in MobileParty.All)
		{
			if (item.DefaultBehavior == AiBehavior.GoToSettlement && item.TargetSettlement == settlement && item.CurrentSettlement != settlement)
			{
				item.Ai.SetMoveModeHold();
			}
		}
		foreach (MobileParty party in settlement.Parties)
		{
			if (party.MapFaction == settlement.MapFaction && !party.IsMilitia && !party.IsGarrison && (party.DefaultBehavior != AiBehavior.GoToSettlement || party.TargetSettlement != settlement) && party.DefaultBehavior != 0)
			{
				party.Ai.SetMoveGoToSettlement(party.CurrentSettlement);
			}
		}
		BesiegedSettlement.Party.SetLevelMaskIsDirty();
		CampaignEventDispatcher.Instance.OnSiegeEventStarted(this);
	}

	public ISiegeEventSide GetSiegeEventSide(BattleSideEnum side)
	{
		if (side != BattleSideEnum.Attacker)
		{
			return BesiegedSettlement;
		}
		return BesiegerCamp;
	}

	public bool CanPartyJoinSide(PartyBase party, BattleSideEnum side)
	{
		IFaction partyFaction = party.MapFaction;
		BattleSideEnum side2 = BattleSideEnum.None;
		switch (side)
		{
		case BattleSideEnum.Attacker:
			side2 = BattleSideEnum.Defender;
			break;
		case BattleSideEnum.Defender:
			side2 = BattleSideEnum.Attacker;
			break;
		}
		bool num = GetSiegeEventSide(side).GetInvolvedPartiesForEventType().All((PartyBase x) => !x.MapFaction.IsAtWarWith(partyFaction));
		bool flag = GetSiegeEventSide(side2).GetInvolvedPartiesForEventType().All((PartyBase x) => x.MapFaction.IsAtWarWith(partyFaction));
		return num && flag;
	}

	public void Tick(float dt)
	{
		if (!(CampaignTime.DeltaTime == CampaignTime.Zero) && BesiegerCamp.LeaderParty.MapEvent == null && BesiegedSettlement.Party.MapEvent == null)
		{
			TickSiegeEventSide(BesiegerCamp);
			TickSiegeEventSide(BesiegedSettlement);
		}
	}

	private void TickSiegeEventSide(ISiegeEventSide siegeEventSide)
	{
		AdvanceStrategy(siegeEventSide);
		ConstructionTick(siegeEventSide);
		BombardTick(siegeEventSide);
	}

	public void OnBeforeSiegeEventEnd(BattleState winnerSide, MapEvent.BattleTypes battleType)
	{
		switch (battleType)
		{
		case MapEvent.BattleTypes.SallyOut:
			_isBesiegerDefeated = winnerSide == BattleState.AttackerVictory;
			break;
		case MapEvent.BattleTypes.Siege:
		case MapEvent.BattleTypes.SiegeOutside:
			_isBesiegerDefeated = winnerSide == BattleState.DefenderVictory;
			break;
		}
	}

	public void FinalizeSiegeEvent()
	{
		CampaignEventDispatcher.Instance.OnSiegeEventEnded(this);
		if (PlayerSiege.PlayerSiegeEvent == this)
		{
			PlayerSiege.OnSiegeEventFinalized(_isBesiegerDefeated);
		}
		else if (PlayerSiege.PlayerSiegeEvent == null && MobileParty.MainParty.CurrentSettlement != null && MobileParty.MainParty.CurrentSettlement.SiegeEvent == this && !Hero.MainHero.IsPrisoner)
		{
			GameMenu.SwitchToMenu(_isBesiegerDefeated ? "siege_attacker_defeated" : "siege_attacker_left");
		}
		BesiegerCamp.FinalizeSiegeEvent();
		BesiegedSettlement.FinalizeSiegeEvent();
		if (BesiegedSettlement.Party.MapEvent != null && !BesiegedSettlement.Party.MapEvent.IsSallyOut)
		{
			BesiegedSettlement.Party.MapEvent.FinalizeEvent();
		}
		if (BesiegedSettlement.Town != null && BesiegedSettlement.Town.GarrisonParty != null && BesiegedSettlement.Town.GarrisonParty.DefaultBehavior == AiBehavior.EngageParty)
		{
			BesiegedSettlement.Town.GarrisonParty.Ai.SetMoveModeHold();
		}
		if (this == PlayerSiege.PlayerSiegeEvent)
		{
			PlayerSiege.ClosePlayerSiege();
		}
	}

	public bool IsPartyInvolved(PartyBase party)
	{
		return GetInvolvedPartiesForEventType(GetCurrentBattleType()).Contains(party);
	}

	public void DoSiegeAction(ISiegeEventSide siegeEventSide, SiegeStrategyActionModel.SiegeAction siegeAction, SiegeEngineType siegeEngineType, int deploymentIndex, int reserveIndex)
	{
		SiegeEnginesContainer siegeEngines = siegeEventSide.SiegeEngines;
		switch (siegeAction)
		{
		case SiegeStrategyActionModel.SiegeAction.ConstructNewSiegeEngine:
		{
			float siegeEngineHitPoints = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineHitPoints(siegeEventSide.SiegeEvent, siegeEngineType, siegeEventSide.BattleSide);
			SiegeEngineConstructionProgress siegeEngine2 = new SiegeEngineConstructionProgress(siegeEngineType, 0f, siegeEngineHitPoints);
			siegeEngines.DeploySiegeEngineAtIndex(siegeEngine2, deploymentIndex);
			BesiegedSettlement.Party.SetVisualAsDirty();
			break;
		}
		case SiegeStrategyActionModel.SiegeAction.DeploySiegeEngineFromReserve:
		{
			SiegeEngineConstructionProgress siegeEngine = siegeEngines.ReservedSiegeEngines[reserveIndex];
			siegeEngines.DeploySiegeEngineAtIndex(siegeEngine, deploymentIndex);
			BesiegedSettlement.Party.SetVisualAsDirty();
			break;
		}
		case SiegeStrategyActionModel.SiegeAction.MoveSiegeEngineToReserve:
			siegeEngines.RemoveDeployedSiegeEngine(deploymentIndex, siegeEngineType.IsRanged, moveToReserve: true);
			BesiegedSettlement.Party.SetVisualAsDirty();
			break;
		case SiegeStrategyActionModel.SiegeAction.RemoveDeployedSiegeEngine:
			siegeEngines.RemoveDeployedSiegeEngine(deploymentIndex, siegeEngineType.IsRanged, moveToReserve: false);
			BesiegedSettlement.Party.SetVisualAsDirty();
			break;
		default:
			throw new ArgumentOutOfRangeException();
		case SiegeStrategyActionModel.SiegeAction.Hold:
			break;
		}
	}

	public void AdvanceStrategy(ISiegeEventSide siegeEventSide)
	{
		Campaign.Current.Models.SiegeStrategyActionModel.GetLogicalActionForStrategy(siegeEventSide, out var siegeAction, out var siegeEngineType, out var deploymentIndex, out var reserveIndex);
		DoSiegeAction(siegeEventSide, siegeAction, siegeEngineType, deploymentIndex, reserveIndex);
	}

	public void BreakSiegeEngine(ISiegeEventSide siegeEventSide, SiegeEngineType siegeEngineType)
	{
		if (siegeEngineType == DefaultSiegeEngineTypes.Preparations)
		{
			if (siegeEventSide.BattleSide == BattleSideEnum.Attacker)
			{
				siegeEventSide.SiegeEngines.SiegePreparations.SetProgress(0f);
			}
			return;
		}
		if (siegeEngineType.IsRanged)
		{
			for (int num = siegeEventSide.SiegeEngines.DeployedRangedSiegeEngines.Length - 1; num >= 0; num--)
			{
				SiegeEngineConstructionProgress siegeEngineConstructionProgress = siegeEventSide.SiegeEngines.DeployedRangedSiegeEngines[num];
				if (siegeEngineConstructionProgress != null && siegeEngineConstructionProgress.SiegeEngine == siegeEngineType && siegeEngineConstructionProgress.IsActive)
				{
					siegeEventSide.SiegeEngines.RemoveDeployedSiegeEngine(num, isRanged: true, moveToReserve: false);
					BesiegedSettlement.Party.SetVisualAsDirty();
					break;
				}
			}
			return;
		}
		for (int num2 = siegeEventSide.SiegeEngines.DeployedMeleeSiegeEngines.Length - 1; num2 >= 0; num2--)
		{
			SiegeEngineConstructionProgress siegeEngineConstructionProgress2 = siegeEventSide.SiegeEngines.DeployedMeleeSiegeEngines[num2];
			if (siegeEngineConstructionProgress2 != null && siegeEngineConstructionProgress2.SiegeEngine == siegeEngineType && siegeEngineConstructionProgress2.IsActive)
			{
				siegeEventSide.SiegeEngines.RemoveDeployedSiegeEngine(num2, isRanged: false, moveToReserve: false);
				BesiegedSettlement.Party.SetVisualAsDirty();
				break;
			}
		}
	}

	public Dictionary<SiegeEngineType, int> GetPreparedSiegeEnginesAsDictionary(ISiegeEventSide siegeEventSide)
	{
		Dictionary<SiegeEngineType, int> dictionary = new Dictionary<SiegeEngineType, int>();
		foreach (SiegeEngineConstructionProgress item in siegeEventSide.SiegeEngines.AllSiegeEngines())
		{
			if (item.IsActive && item.Hitpoints > 0f && item.SiegeEngine != DefaultSiegeEngineTypes.Preparations)
			{
				if (dictionary.ContainsKey(item.SiegeEngine))
				{
					dictionary[item.SiegeEngine]++;
				}
				else
				{
					dictionary.Add(item.SiegeEngine, 1);
				}
			}
		}
		return dictionary;
	}

	public List<MissionSiegeWeapon> GetPreparedAndActiveSiegeEngines(ISiegeEventSide siegeEventSide)
	{
		List<MissionSiegeWeapon> list = new List<MissionSiegeWeapon>();
		MBReadOnlyList<SiegeEngineConstructionProgress> deployedSiegeEngines = siegeEventSide.SiegeEngines.DeployedSiegeEngines;
		for (int i = 0; i < deployedSiegeEngines.Count; i++)
		{
			SiegeEngineConstructionProgress siegeEngineConstructionProgress = deployedSiegeEngines[i];
			if (siegeEngineConstructionProgress.IsActive && siegeEngineConstructionProgress.Hitpoints > 0f && siegeEngineConstructionProgress.SiegeEngine != DefaultSiegeEngineTypes.Preparations)
			{
				list.Add(MissionSiegeWeapon.CreateCampaignWeapon(siegeEngineConstructionProgress.SiegeEngine, i, siegeEngineConstructionProgress.Hitpoints, siegeEngineConstructionProgress.MaxHitPoints));
			}
		}
		return list;
	}

	public void SetSiegeEngineStatesAfterSiegeMission(IEnumerable<IMissionSiegeWeapon> attackerMissionSiegeEngineData, IEnumerable<IMissionSiegeWeapon> defenderMissionSiegeEngineData)
	{
		SetSiegeEngineStatesForSiegeSide(BesiegerCamp, attackerMissionSiegeEngineData);
		SetSiegeEngineStatesForSiegeSide(BesiegedSettlement, defenderMissionSiegeEngineData);
	}

	private void SetSiegeEngineStatesForSiegeSide(ISiegeEventSide side, IEnumerable<IMissionSiegeWeapon> missionSiegeEngineData)
	{
		if (missionSiegeEngineData == null || !missionSiegeEngineData.Any())
		{
			return;
		}
		int num = missionSiegeEngineData.Count() - 1;
		bool flag = PlayerEncounter.Battle?.IsSiegeAmbush ?? false;
		for (int num2 = side.SiegeEngines.DeployedSiegeEngines.Count - 1; num2 >= 0; num2--)
		{
			SiegeEngineConstructionProgress siegeEngineConstructionProgress = side.SiegeEngines.DeployedSiegeEngines.ElementAt(num2);
			if (siegeEngineConstructionProgress.IsActive)
			{
				IMissionSiegeWeapon missionSiegeWeapon = missionSiegeEngineData.ElementAt(num);
				num--;
				if ((siegeEngineConstructionProgress.SiegeEngine.IsRanged || flag) && missionSiegeWeapon.Health > 0f)
				{
					siegeEngineConstructionProgress.SetHitpoints(missionSiegeWeapon.Health);
				}
				else if (!flag || missionSiegeWeapon.Health <= 0f)
				{
					BreakSiegeEngine(side, siegeEngineConstructionProgress.SiegeEngine);
				}
			}
		}
	}

	public void CreateSiegeObject(SiegeEngineConstructionProgress siegeEngineConstructionProgress, ISiegeEventSide siegeSide)
	{
		if (siegeEngineConstructionProgress.SiegeEngine.IsRanged)
		{
			siegeEngineConstructionProgress.SetRangedSiegeEngine(new RangedSiegeEngine(siegeEngineConstructionProgress.SiegeEngine, siegeSide));
		}
		SiegeEngineType siegeEngine = siegeEngineConstructionProgress.SiegeEngine;
		CampaignEventDispatcher.Instance.SiegeEngineBuilt(this, siegeSide.BattleSide, siegeEngine);
		BesiegedSettlement.Party.SetVisualAsDirty();
	}

	public override string ToString()
	{
		return "Siege of " + BesiegedSettlement.Name;
	}

	public void ConstructionTick(ISiegeEventSide siegeEventSide)
	{
		SiegeEngineConstructionProgress siegeEngineConstructionProgress = null;
		if (siegeEventSide.SiegeEngines.SiegePreparations != null && !siegeEventSide.SiegeEngines.SiegePreparations.IsActive)
		{
			siegeEngineConstructionProgress = siegeEventSide.SiegeEngines.SiegePreparations;
		}
		else
		{
			foreach (SiegeEngineConstructionProgress deployedSiegeEngine in siegeEventSide.SiegeEngines.DeployedSiegeEngines)
			{
				if (!deployedSiegeEngine.IsConstructed && !deployedSiegeEngine.IsBeingRedeployed)
				{
					siegeEngineConstructionProgress = deployedSiegeEngine;
					break;
				}
			}
		}
		if (siegeEngineConstructionProgress != null)
		{
			float num = (float)((double)Campaign.Current.Models.SiegeEventModel.GetConstructionProgressPerHour(siegeEngineConstructionProgress.SiegeEngine, this, siegeEventSide) * CampaignTime.DeltaTime.ToHours);
			siegeEngineConstructionProgress.SetProgress(MBMath.ClampFloat(siegeEngineConstructionProgress.Progress + num, 0f, 1f));
			if (siegeEngineConstructionProgress.IsActive)
			{
				CreateSiegeObject(siegeEngineConstructionProgress, siegeEventSide);
			}
		}
		float num2 = 2f;
		foreach (SiegeEngineConstructionProgress deployedSiegeEngine2 in siegeEventSide.SiegeEngines.DeployedSiegeEngines)
		{
			if (deployedSiegeEngine2.IsConstructed && deployedSiegeEngine2.IsBeingRedeployed)
			{
				float num3 = (float)((double)(1f / num2) * CampaignTime.DeltaTime.ToHours);
				deployedSiegeEngine2.SetRedeploymentProgress(MBMath.ClampFloat(deployedSiegeEngine2.RedeploymentProgress + num3, 0f, 1f));
				if (deployedSiegeEngine2.IsActive)
				{
					BesiegedSettlement.Party.SetVisualAsDirty();
				}
			}
		}
		if (siegeEventSide.SiegeEngines.ClearRemovedEnginesIfNecessary())
		{
			BesiegedSettlement.Party.SetVisualAsDirty();
		}
	}

	public void BombardTick(ISiegeEventSide siegeEventSide)
	{
		if (CampaignTime.DeltaTime == CampaignTime.Zero)
		{
			return;
		}
		SiegeEnginesContainer siegeEngines = GetSiegeEventSide(siegeEventSide.BattleSide.GetOppositeSide()).SiegeEngines;
		for (int i = 0; i < siegeEventSide.SiegeEngineMissiles.Count; i++)
		{
			SiegeEngineMissile siegeEngineMissile = siegeEventSide.SiegeEngineMissiles[i];
			if (!siegeEngineMissile.CollisionTime.IsPast || !siegeEngineMissile.HitSuccessful)
			{
				continue;
			}
			switch (siegeEngineMissile.TargetType)
			{
			case SiegeBombardTargets.Wall:
				BesiegerCamp.BombardHitWalls(siegeEngineMissile.ShooterSiegeEngineType, siegeEngineMissile.TargetSlotIndex);
				break;
			case SiegeBombardTargets.RangedEngines:
			{
				SiegeEngineConstructionProgress siegeEngineConstructionProgress = siegeEngines.DeployedRangedSiegeEngines[siegeEngineMissile.TargetSlotIndex];
				SiegeEngineConstructionProgress targetSiegeEngine = siegeEngineMissile.TargetSiegeEngine;
				if (siegeEngineConstructionProgress != null && siegeEngineConstructionProgress.IsActive && siegeEngineConstructionProgress.Hitpoints > 0f)
				{
					BombardHitEngine(siegeEventSide, siegeEngineMissile.ShooterSiegeEngineType, siegeEngineConstructionProgress);
				}
				else if (targetSiegeEngine != null && targetSiegeEngine != siegeEngineConstructionProgress && ((siegeEngines.DeployedRangedSiegeEngines.Contains(targetSiegeEngine) && targetSiegeEngine.IsActive) || siegeEngines.ReservedSiegeEngines.Contains(targetSiegeEngine)))
				{
					BombardHitEngine(siegeEventSide, siegeEngineMissile.ShooterSiegeEngineType, targetSiegeEngine);
				}
				break;
			}
			default:
				Debug.FailedAssert("Invalid target type on hit", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Siege\\SiegeEvent.cs", "BombardTick", 936);
				break;
			}
		}
		siegeEventSide.RemoveDeprecatedMissiles();
		foreach (SiegeEngineConstructionProgress deployedSiegeEngine in siegeEventSide.SiegeEngines.DeployedSiegeEngines)
		{
			if (!deployedSiegeEngine.IsActive)
			{
				continue;
			}
			SiegeEngineConstructionProgress attackerSiegeEngine = deployedSiegeEngine;
			SiegeEngineType siegeEngine = deployedSiegeEngine.SiegeEngine;
			RangedSiegeEngine rangedSiegeEngine = deployedSiegeEngine.RangedSiegeEngine;
			if (!siegeEngine.IsRanged || rangedSiegeEngine == null || !rangedSiegeEngine.IsReadyToFire)
			{
				continue;
			}
			rangedSiegeEngine.Reload();
			if (attackerSiegeEngine.Hitpoints <= 0f)
			{
				continue;
			}
			int num = (siegeEngine.IsRanged ? siegeEventSide.SiegeEngines.DeployedRangedSiegeEngines.FindIndex((SiegeEngineConstructionProgress engine) => engine == attackerSiegeEngine) : siegeEventSide.SiegeEngines.DeployedMeleeSiegeEngines.FindIndex((SiegeEngineConstructionProgress engine) => engine == attackerSiegeEngine));
			siegeEventSide.GetAttackTarget(siegeEventSide, attackerSiegeEngine.SiegeEngine, num, out var targetType, out var targetIndex);
			if (targetType != 0)
			{
				rangedSiegeEngine.OnFireDecisionTaken(this, siegeEventSide.BattleSide, targetIndex, targetType);
				bool flag = false;
				float siegeEngineHitChance = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineHitChance(siegeEngine, siegeEventSide.BattleSide, targetType, BesiegedSettlement.Town);
				flag = MBRandom.RandomFloat < siegeEngineHitChance;
				SiegeEngineConstructionProgress targetSiegeEngine2 = null;
				if (targetType == SiegeBombardTargets.RangedEngines)
				{
					targetSiegeEngine2 = siegeEngines.DeployedRangedSiegeEngines[targetIndex];
				}
				SiegeEngineMissile missile = new SiegeEngineMissile(siegeEngine, num, targetType, targetIndex, targetSiegeEngine2, rangedSiegeEngine.NextProjectileCollisionTime, CampaignTime.Now, flag);
				siegeEventSide.AddSiegeEngineMissile(missile);
			}
			else
			{
				rangedSiegeEngine.Hold();
			}
		}
	}

	private float GetDistanceBetweenTwoRangedEngine(int attackerSlotIndex, int defenderSlotIndex)
	{
		return (float)TaleWorlds.Library.MathF.Abs(attackerSlotIndex - defenderSlotIndex) * 1f + 3f;
	}

	private float PriorityCalculationForEngines(float distance)
	{
		return 7f - distance;
	}

	public void FindAttackableRangedEngineWithHighestPriority(ISiegeEventSide siegeEventSide, int attackerSlotIndex, out int targetIndex, out float targetPriority)
	{
		targetIndex = -1;
		targetPriority = 0f;
		float num = 9999f;
		SiegeEngineConstructionProgress[] deployedRangedSiegeEngines = GetSiegeEventSide(siegeEventSide.BattleSide.GetOppositeSide()).SiegeEngines.DeployedRangedSiegeEngines;
		for (int i = 0; i < deployedRangedSiegeEngines.Length; i++)
		{
			SiegeEngineConstructionProgress siegeEngineConstructionProgress = deployedRangedSiegeEngines[i];
			if (siegeEngineConstructionProgress != null && siegeEngineConstructionProgress.IsActive && siegeEngineConstructionProgress.Hitpoints > 0f)
			{
				float distanceBetweenTwoRangedEngine = GetDistanceBetweenTwoRangedEngine(attackerSlotIndex, i);
				float num2 = PriorityCalculationForEngines(distanceBetweenTwoRangedEngine);
				if (num2 > targetPriority || (TaleWorlds.Library.MathF.Abs(num2 - targetPriority) < 0.0001f && num > distanceBetweenTwoRangedEngine))
				{
					targetIndex = i;
					targetPriority = num2;
					num = distanceBetweenTwoRangedEngine;
				}
			}
		}
	}

	private void OnSiegeEngineDestroyed(ISiegeEventSide siegeEventSide, SiegeEngineConstructionProgress siegeEngine)
	{
		int num = siegeEventSide.SiegeEngines.FindDeploymentIndexOfDeployedEngine(siegeEngine);
		if (num == -1)
		{
			siegeEventSide.SiegeEngines.RemovedSiegeEngineFromReservedSiegeEngines(siegeEngine);
		}
		else
		{
			DoSiegeAction(siegeEventSide, SiegeStrategyActionModel.SiegeAction.RemoveDeployedSiegeEngine, siegeEngine.SiegeEngine, num, -1);
		}
		BesiegedSettlement.Party.SetVisualAsDirty();
		CampaignEventDispatcher.Instance.OnSiegeEngineDestroyed(BesiegerCamp.LeaderParty, BesiegedSettlement, siegeEventSide.BattleSide, siegeEngine.SiegeEngine);
	}

	private void BombardHitEngine(ISiegeEventSide siegeEventSide, SiegeEngineType attackerEngineType, SiegeEngineConstructionProgress damagedEngine)
	{
		ISiegeEventSide siegeEventSide2 = GetSiegeEventSide(siegeEventSide.BattleSide.GetOppositeSide());
		float siegeEngineDamage = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineDamage(this, siegeEventSide.BattleSide, attackerEngineType, SiegeBombardTargets.RangedEngines);
		damagedEngine.SetHitpoints(damagedEngine.Hitpoints - siegeEngineDamage);
		CampaignEventDispatcher.Instance.OnSiegeBombardmentHit(BesiegerCamp.LeaderParty, BesiegedSettlement, siegeEventSide.BattleSide, attackerEngineType, SiegeBombardTargets.RangedEngines);
		if (damagedEngine.Hitpoints <= 0f)
		{
			OnSiegeEngineDestroyed(siegeEventSide2, damagedEngine);
		}
		if (IsPlayerSiegeEvent)
		{
			Debug.Print(string.Concat(BesiegedSettlement.Name, " - ", siegeEventSide.BattleSide.ToString(), " ", attackerEngineType.Name, " hit the enemy ranged siege engine(", damagedEngine.SiegeEngine.Name, ") for ", siegeEngineDamage), 0, Debug.DebugColor.Purple, 137438953472uL);
		}
	}
}
