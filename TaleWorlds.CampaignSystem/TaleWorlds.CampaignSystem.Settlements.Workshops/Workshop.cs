using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Workshops;

public class Workshop : SettlementArea
{
	[SaveableField(100)]
	private readonly Settlement _settlement;

	[SaveableField(101)]
	private readonly string _tag;

	[SaveableField(102)]
	private Hero _owner;

	[SaveableField(103)]
	private TextObject _customName;

	[SaveableField(104)]
	private float[] _productionProgress;

	public override Settlement Settlement => _settlement;

	public override string Tag => _tag;

	public override Hero Owner => _owner;

	public override TextObject Name => _customName ?? WorkshopType?.Name ?? new TextObject("{=xWoXL2FG}Empty Workshop");

	[SaveableProperty(105)]
	public WorkshopType WorkshopType { get; private set; }

	public int ProfitMade => MathF.Max(Capital - InitialCapital, 0);

	public int Expense => Campaign.Current.Models.WorkshopModel.DailyExpense;

	[SaveableProperty(115)]
	public CampaignTime LastRunCampaignTime { get; private set; }

	[SaveableProperty(111)]
	public int Capital { get; private set; }

	[SaveableProperty(112)]
	public int InitialCapital { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsWorkshop(object o, List<object> collectedObjects)
	{
		((Workshop)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_settlement);
		collectedObjects.Add(_owner);
		collectedObjects.Add(_customName);
		collectedObjects.Add(_productionProgress);
		collectedObjects.Add(WorkshopType);
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(LastRunCampaignTime, collectedObjects);
	}

	internal static object AutoGeneratedGetMemberValueWorkshopType(object o)
	{
		return ((Workshop)o).WorkshopType;
	}

	internal static object AutoGeneratedGetMemberValueLastRunCampaignTime(object o)
	{
		return ((Workshop)o).LastRunCampaignTime;
	}

	internal static object AutoGeneratedGetMemberValueCapital(object o)
	{
		return ((Workshop)o).Capital;
	}

	internal static object AutoGeneratedGetMemberValueInitialCapital(object o)
	{
		return ((Workshop)o).InitialCapital;
	}

	internal static object AutoGeneratedGetMemberValue_settlement(object o)
	{
		return ((Workshop)o)._settlement;
	}

	internal static object AutoGeneratedGetMemberValue_tag(object o)
	{
		return ((Workshop)o)._tag;
	}

	internal static object AutoGeneratedGetMemberValue_owner(object o)
	{
		return ((Workshop)o)._owner;
	}

	internal static object AutoGeneratedGetMemberValue_customName(object o)
	{
		return ((Workshop)o)._customName;
	}

	internal static object AutoGeneratedGetMemberValue_productionProgress(object o)
	{
		return ((Workshop)o)._productionProgress;
	}

	public Workshop(Settlement settlement, string tag)
	{
		_customName = null;
		_settlement = settlement;
		_tag = tag;
		Capital = 0;
		InitialCapital = 0;
	}

	public override int GetHashCode()
	{
		return Settlement.GetHashCode() + _tag.GetHashCode();
	}

	public void InitializeWorkshop(Hero owner, WorkshopType type)
	{
		WorkshopType = type;
		_owner = owner;
		_owner.AddOwnedWorkshop(this);
		Capital = Campaign.Current.Models.WorkshopModel.InitialCapital;
		InitialCapital = Campaign.Current.Models.WorkshopModel.InitialCapital;
		_productionProgress = new float[type.Productions.Count];
	}

	public void ChangeOwnerOfWorkshop(Hero newOwner, WorkshopType type, int capital)
	{
		_owner.RemoveOwnedWorkshop(this);
		_owner = newOwner;
		_owner.AddOwnedWorkshop(this);
		Capital = capital;
		if (type != WorkshopType)
		{
			ChangeWorkshopProduction(type);
		}
	}

	public void ChangeWorkshopProduction(WorkshopType newWorkshopType)
	{
		WorkshopType = newWorkshopType;
		_productionProgress = new float[newWorkshopType.Productions.Count];
	}

	public void SetCustomName(TextObject customName)
	{
		_customName = customName;
	}

	public void UpdateLastRunTime()
	{
		LastRunCampaignTime = CampaignTime.Now;
	}

	public void SetProgress(int i, float value)
	{
		_productionProgress[i] = value;
	}

	internal void AfterLoad()
	{
		if (_productionProgress.Length != WorkshopType.Productions.Count)
		{
			_productionProgress = new float[WorkshopType.Productions.Count];
		}
		if (LastRunCampaignTime == CampaignTime.Zero)
		{
			LastRunCampaignTime = CampaignTime.Now;
		}
	}

	public void ChangeGold(int goldChange)
	{
		Capital += goldChange;
	}

	public float GetProductionProgress(int index)
	{
		return _productionProgress[index];
	}

	public override string ToString()
	{
		return Name.ToString() + " " + Settlement.ToString();
	}
}
