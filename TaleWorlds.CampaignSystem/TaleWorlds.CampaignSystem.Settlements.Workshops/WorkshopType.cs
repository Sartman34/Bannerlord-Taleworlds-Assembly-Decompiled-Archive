using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Workshops;

public sealed class WorkshopType : MBObjectBase
{
	public struct Production
	{
		private MBList<(ItemCategory, int)> _inputs;

		private MBList<(ItemCategory, int)> _outputs;

		private float _conversionSpeed;

		public MBReadOnlyList<(ItemCategory, int)> Inputs => _inputs;

		public MBReadOnlyList<(ItemCategory, int)> Outputs => _outputs;

		public float ConversionSpeed => _conversionSpeed;

		public Production(float conversionSpeed)
		{
			_inputs = new MBList<(ItemCategory, int)>();
			_outputs = new MBList<(ItemCategory, int)>();
			_conversionSpeed = conversionSpeed;
		}

		public void AddInput(ItemCategory item, int count = 1)
		{
			_inputs.Add((item, count));
		}

		public void AddOutput(ItemCategory outputCategory, int outputCount)
		{
			_outputs.Add((outputCategory, outputCount));
		}

		public override string ToString()
		{
			string text = "in: ";
			foreach (var input in _inputs)
			{
				text = string.Concat(text, input.Item1, ": ");
			}
			text += "out: ";
			foreach (var output in _outputs)
			{
				text = string.Concat(text, output.Item1, ": ");
			}
			return text;
		}
	}

	private MBList<Production> _productions;

	public int EquipmentCost { get; private set; }

	public int Frequency { get; private set; }

	public TextObject Name { get; private set; }

	public TextObject JobName { get; private set; }

	public bool IsHidden { get; private set; }

	public string SignMeshName { get; private set; }

	public string PropMeshName1 { get; private set; }

	public string PropMeshName2 { get; private set; }

	public List<string> PropMeshName3List { get; private set; }

	public string PropMeshName4 { get; private set; }

	public string PropMeshName5 { get; private set; }

	public string PropMeshName6 { get; private set; }

	public TextObject Description { get; private set; }

	public MBReadOnlyList<Production> Productions => _productions;

	public static MBReadOnlyList<WorkshopType> All => Campaign.Current.Workshops;

	internal static void AutoGeneratedStaticCollectObjectsWorkshopType(object o, List<object> collectedObjects)
	{
		((WorkshopType)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	public override string ToString()
	{
		return Name.ToString();
	}

	public override void Initialize()
	{
		base.Initialize();
		_productions = new MBList<Production>(0);
	}

	public override void Deserialize(MBObjectManager objectManager, XmlNode node)
	{
		base.Deserialize(objectManager, node);
		Name = new TextObject(node.Attributes["name"].Value);
		JobName = new TextObject(node.Attributes["jobname"].Value);
		Description = new TextObject(node.Attributes["description"].Value);
		EquipmentCost = int.Parse(node.Attributes["equipment_cost"].Value);
		Frequency = ((node.Attributes["frequency"] == null) ? 1 : int.Parse(node.Attributes["frequency"].Value));
		IsHidden = node.Attributes["isHidden"] != null && bool.Parse(node.Attributes["isHidden"].Value);
		_productions = new MBList<Production>();
		foreach (XmlNode childNode in node.ChildNodes)
		{
			if (childNode.Name == "Production")
			{
				objectManager.CreateObjectFromXmlNode(childNode);
				float conversionSpeed = ((childNode.Attributes["conversion_speed"] != null) ? float.Parse(childNode.Attributes["conversion_speed"].Value) : 0f);
				Production item = new Production(conversionSpeed);
				foreach (XmlNode item2 in childNode)
				{
					if (item2.Name == "Inputs")
					{
						foreach (XmlNode item3 in item2)
						{
							if (item3.Attributes == null || item3.Attributes.Count <= 0)
							{
								continue;
							}
							string value = item3.Attributes[0].Value;
							if (!string.IsNullOrEmpty(value))
							{
								ItemCategory @object = objectManager.GetObject<ItemCategory>(value);
								int count = ((item3.Attributes["input_count"] == null) ? 1 : int.Parse(item3.Attributes["input_count"].Value));
								if (@object != null)
								{
									item.AddInput(@object, count);
								}
								else
								{
									Debug.Print("While reading Workshop Node: " + node.ToString() + " Unable to Find Item Category:" + value);
								}
							}
							else
							{
								Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Workshops\\WorkshopType.cs", "Deserialize", 165);
							}
						}
					}
					if (!(item2.Name == "Outputs"))
					{
						continue;
					}
					foreach (XmlNode item4 in item2)
					{
						if (item4.Attributes.Count > 0)
						{
							objectManager.CreateObjectFromXmlNode(item4);
							ItemCategory outputCategory = objectManager.ReadObjectReferenceFromXml<ItemCategory>("output", item4);
							int outputCount = ((item4.Attributes["output_count"] == null) ? 1 : int.Parse(item4.Attributes["output_count"].Value));
							item.AddOutput(outputCategory, outputCount);
						}
					}
				}
				_productions.Add(item);
			}
			else
			{
				if (!(childNode.Name == "Meshes"))
				{
					continue;
				}
				SignMeshName = XmlHelper.ReadString(childNode, "sign_mesh_name");
				PropMeshName1 = XmlHelper.ReadString(childNode, "shop_prop_mesh_name_1");
				PropMeshName2 = XmlHelper.ReadString(childNode, "shop_prop_mesh_name_2");
				PropMeshName3List = new List<string>();
				for (int i = 1; i < 4; i++)
				{
					string name = "shop_prop_mesh_name_3_" + i;
					if (childNode.Attributes[name] != null)
					{
						PropMeshName3List.Add(childNode.Attributes[name].Value);
					}
				}
				PropMeshName4 = XmlHelper.ReadString(childNode, "shop_prop_mesh_name_4");
				PropMeshName5 = XmlHelper.ReadString(childNode, "shop_prop_mesh_name_5");
				PropMeshName6 = XmlHelper.ReadString(childNode, "shop_prop_mesh_name_6");
			}
		}
		_productions.Capacity = _productions.Count;
	}

	public static WorkshopType Find(string idString)
	{
		return MBObjectManager.Instance.GetObject<WorkshopType>(idString);
	}

	public static WorkshopType FindFirst(Func<WorkshopType, bool> predicate)
	{
		return All.FirstOrDefault(predicate);
	}
}
