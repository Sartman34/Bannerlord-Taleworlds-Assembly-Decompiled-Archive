using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.GameState;

public class MenuContext : MBObjectBase
{
	internal enum MenuContextState
	{
		None,
		RequiresCreation,
		RequiresInitialization,
		Finalized
	}

	[SaveableField(102)]
	private MenuContextState _currentState;

	public GameMenu GameMenu { get; private set; }

	public IMenuContextHandler Handler { get; set; }

	public string CurrentBackgroundMeshName { get; private set; }

	public string CurrentAmbientSoundID { get; private set; }

	public string CurrentPanelSoundID { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsMenuContext(object o, List<object> collectedObjects)
	{
		((MenuContext)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	internal static object AutoGeneratedGetMemberValue_currentState(object o)
	{
		return ((MenuContext)o)._currentState;
	}

	public void Refresh()
	{
		_currentState = MenuContextState.RequiresCreation;
		HandleStates();
	}

	public void SwitchToMenu(string menuId)
	{
		Campaign.Current.GameMenuManager.SetNextMenu(menuId);
		HandleStates();
	}

	private void HandleStates()
	{
		if (_currentState == MenuContextState.Finalized)
		{
			return;
		}
		if (!string.IsNullOrEmpty(Campaign.Current.GameMenuManager.NextGameMenuId))
		{
			_currentState = MenuContextState.RequiresCreation;
		}
		while (_currentState == MenuContextState.RequiresCreation)
		{
			if (GameMenu != null)
			{
				GameMenu.PreInit(this);
			}
			if (Campaign.Current.GameMenuManager.NextGameMenuId != null)
			{
				GameMenu = Campaign.Current.GameMenuManager.NextMenu;
				Campaign.Current.GameMenuManager.SetNextMenu(null);
				MapState mapState = Game.Current.GameStateManager.LastOrDefault<MapState>();
				if (mapState != null)
				{
					mapState.GameMenuId = GameMenu.StringId;
				}
			}
			if (GameMenu.AutoSelectFirst)
			{
				Campaign.Current.GameMenuManager.RunConsequenceOfVirtualMenuOption(this, 0);
			}
			GameMenu.RunOnInit(Game.Current, this);
			if (string.IsNullOrEmpty(Campaign.Current.GameMenuManager.NextGameMenuId) && _currentState != MenuContextState.Finalized)
			{
				_currentState = MenuContextState.RequiresInitialization;
			}
		}
		if (_currentState == MenuContextState.RequiresInitialization)
		{
			_currentState = MenuContextState.None;
			if (Handler != null)
			{
				Handler.OnMenuCreate();
			}
			Campaign.Current.GameMenuCallbackManager.InitializeState(GameMenu.StringId, this);
			if (Handler != null)
			{
				Handler.OnMenuActivate();
			}
		}
	}

	public void Destroy()
	{
		_currentState = MenuContextState.Finalized;
	}

	public void OnTick(float dt)
	{
		Campaign.Current.GameMenuManager.OnFrameTick(this, dt);
	}

	public void OnHourlyTick()
	{
		Handler?.OnHourlyTick();
	}

	public object GetCurrentRepeatableObject()
	{
		return Campaign.Current.GameMenuManager.ObjectGetCurrentRepeatableObject(this);
	}

	public object GetSelectedObject()
	{
		return Campaign.Current.GameMenuManager.GetSelectedRepeatableObject(this);
	}

	public object GetSelectedRepeatableObject()
	{
		return Campaign.Current.GameMenuManager.GetSelectedRepeatableObject(this);
	}

	public void SetRepeatObjectList(IEnumerable<object> list)
	{
		Campaign.Current.GameMenuManager.SetRepeatObjectList(this, list);
	}

	public void OnConsequence(GameMenuOption gameMenuOption)
	{
		if (Campaign.Current != null)
		{
			Campaign.Current.GameMenuCallbackManager.OnConsequence(GameMenu.StringId, gameMenuOption, this);
		}
	}

	public void InvokeConsequence(int index)
	{
		if (Campaign.Current.CurrentMenuContext == this)
		{
			Campaign.Current.GameMenuManager.RunConsequenceOfVirtualMenuOption(this, index);
		}
	}

	public void CloseEvent()
	{
		if (Settlement.CurrentSettlement != null)
		{
			Campaign.Current.MapEventManager.FinalizePlayerMapEvent();
			Campaign.Current.autoEnterTown = Settlement.CurrentSettlement.Party;
			Game.Current.GameStateManager.PopState();
		}
	}

	public void SetBackgroundMeshName(string name)
	{
		CurrentBackgroundMeshName = name;
		Handler?.OnBackgroundMeshNameSet(name);
	}

	public void SetPanelSound(string panelSoundID)
	{
		CurrentPanelSoundID = panelSoundID;
		Handler?.OnPanelSoundIDSet(panelSoundID);
	}

	public void SetAmbientSound(string ambientSoundID)
	{
		CurrentAmbientSoundID = ambientSoundID;
		Handler?.OnAmbientSoundIDSet(ambientSoundID);
	}

	public void OpenTownManagement()
	{
		Handler?.OnOpenTownManagement();
	}

	public void OpenRecruitVolunteers()
	{
		Handler?.OnOpenRecruitVolunteers();
	}

	public void OpenTournamentLeaderboards()
	{
		Handler?.OnOpenTournamentLeaderboard();
	}

	public void OpenTroopSelection(TroopRoster fullRoster, TroopRoster initialSelections, Func<CharacterObject, bool> canChangeStatusOfTroop, Action<TroopRoster> onDone, int maxSelectableTroopCount, int minSelectableTroopCount = 1)
	{
		Handler?.OnOpenTroopSelection(fullRoster, initialSelections, canChangeStatusOfTroop, onDone, maxSelectableTroopCount, minSelectableTroopCount);
	}
}
