using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables;

public class TransferPrisonerBarterable : Barterable
{
	[SaveableField(10)]
	private readonly Hero _prisonerCharacter;

	[SaveableField(20)]
	private readonly Hero _opponentHero;

	[SaveableField(30)]
	private readonly PartyBase _otherParty;

	public override string StringID => "transfer_prisoner_barterable";

	public override TextObject Name
	{
		get
		{
			TextObject textObject = new TextObject("{=g5bzJjd5}Transfer {PRISONER.NAME}");
			StringHelpers.SetCharacterProperties("PRISONER", _prisonerCharacter.CharacterObject, textObject);
			return textObject;
		}
	}

	public TransferPrisonerBarterable(Hero prisonerCharacter, Hero owner, PartyBase ownerParty, Hero opponentHero, PartyBase otherParty)
		: base(owner, ownerParty)
	{
		_prisonerCharacter = prisonerCharacter;
		_opponentHero = opponentHero;
		_otherParty = otherParty;
	}

	public override int GetUnitValueForFaction(IFaction faction)
	{
		int num = Campaign.Current.Models.RansomValueCalculationModel.PrisonerRansomValue(_prisonerCharacter.CharacterObject);
		if (faction == base.OriginalOwner?.Clan || faction == base.OriginalOwner?.MapFaction || faction == base.OriginalParty.MapFaction)
		{
			return -num;
		}
		return num;
	}

	public override ImageIdentifier GetVisualIdentifier()
	{
		return new ImageIdentifier(CharacterCode.CreateFrom(_prisonerCharacter.CharacterObject));
	}

	public override string GetEncyclopediaLink()
	{
		return _prisonerCharacter.EncyclopediaLink;
	}

	public override void Apply()
	{
		if (_otherParty != null && _otherParty.MapFaction.IsAtWarWith(_prisonerCharacter.MapFaction))
		{
			TransferPrisonerAction.Apply(_prisonerCharacter.CharacterObject, base.OriginalParty, _otherParty);
		}
		else
		{
			Debug.FailedAssert("Failed to transfer prisoner through barter", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\BarterSystem\\Barterables\\TransferPrisonerBarterable.cs", "Apply", 70);
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsTransferPrisonerBarterable(object o, List<object> collectedObjects)
	{
		((TransferPrisonerBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_prisonerCharacter);
		collectedObjects.Add(_opponentHero);
		collectedObjects.Add(_otherParty);
	}

	internal static object AutoGeneratedGetMemberValue_prisonerCharacter(object o)
	{
		return ((TransferPrisonerBarterable)o)._prisonerCharacter;
	}

	internal static object AutoGeneratedGetMemberValue_opponentHero(object o)
	{
		return ((TransferPrisonerBarterable)o)._opponentHero;
	}

	internal static object AutoGeneratedGetMemberValue_otherParty(object o)
	{
		return ((TransferPrisonerBarterable)o)._otherParty;
	}
}
