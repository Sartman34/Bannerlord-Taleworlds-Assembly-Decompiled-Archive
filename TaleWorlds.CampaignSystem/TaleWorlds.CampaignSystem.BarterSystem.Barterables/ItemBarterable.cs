using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables;

public class ItemBarterable : Barterable
{
	private readonly ItemRosterElement _itemElement;

	private readonly Hero _otherHero;

	private readonly PartyBase _otherParty;

	private readonly int _averageValueOfItemInNearbySettlements;

	public override string StringID => "item_barterable";

	public ItemRosterElement ItemRosterElement => _itemElement;

	public override int MaxAmount => _itemElement.Amount;

	public override TextObject Name => _itemElement.EquipmentElement.Item.Name;

	public int ItemValue => _averageValueOfItemInNearbySettlements;

	public ItemBarterable(Hero ownerHero, Hero otherHero, PartyBase ownerParty, PartyBase otherParty, ItemRosterElement itemRosterElement, int averageValueOfItemInNearbySettlements)
		: base(ownerHero, ownerParty)
	{
		_itemElement = itemRosterElement;
		_averageValueOfItemInNearbySettlements = averageValueOfItemInNearbySettlements;
		_otherParty = otherParty;
		_otherHero = otherHero;
	}

	public override int GetUnitValueForFaction(IFaction faction)
	{
		return MathF.Round(Campaign.Current.Models.BarterModel.GetBarterPenalty(faction, this, _otherHero, _otherParty).ResultNumber * (float)ItemValue);
	}

	public override void CheckBarterLink(Barterable parentLinkedBarterable)
	{
	}

	public override ImageIdentifier GetVisualIdentifier()
	{
		return new ImageIdentifier(_itemElement.EquipmentElement.Item);
	}

	public override string GetEncyclopediaLink()
	{
		return "";
	}

	public override void Apply()
	{
		if (_otherParty != null)
		{
			base.OriginalParty.ItemRoster.AddToCounts(_itemElement.EquipmentElement, -base.CurrentAmount);
			_otherParty.ItemRoster.AddToCounts(_itemElement.EquipmentElement, base.CurrentAmount);
		}
		else
		{
			ItemRosterElement itemRosterElement = new ItemRosterElement(_itemElement.EquipmentElement, base.CurrentAmount);
			GiveItemAction.ApplyForHeroes(base.OriginalOwner, _otherHero, in itemRosterElement);
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsItemBarterable(object o, List<object> collectedObjects)
	{
		((ItemBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}
}
