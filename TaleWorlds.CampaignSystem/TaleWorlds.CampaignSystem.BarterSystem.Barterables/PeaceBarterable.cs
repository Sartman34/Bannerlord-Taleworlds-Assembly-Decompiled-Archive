using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables;

public class PeaceBarterable : Barterable
{
	public readonly IFaction PeaceOfferingFaction;

	public readonly IFaction OfferedFaction;

	public CampaignTime Duration { get; }

	public override string StringID => "peace_barterable";

	public override TextObject Name
	{
		get
		{
			TextObject textObject = new TextObject("{=R0bJS0pn}Make peace with the {OTHER_FACTION}");
			textObject.SetTextVariable("OTHER_FACTION", OfferedFaction.InformalName);
			return textObject;
		}
	}

	public PeaceBarterable(Hero owner, IFaction peaceOfferingFaction, IFaction offeredFaction, CampaignTime duration)
		: base(owner, null)
	{
		Duration = duration;
		PeaceOfferingFaction = peaceOfferingFaction;
		OfferedFaction = offeredFaction;
	}

	public PeaceBarterable(IFaction peaceOfferingFaction, IFaction offeredFaction, CampaignTime duration)
		: base(peaceOfferingFaction.Leader, null)
	{
		Duration = duration;
		PeaceOfferingFaction = peaceOfferingFaction;
		OfferedFaction = offeredFaction;
	}

	public override int GetUnitValueForFaction(IFaction factionToEvaluateFor)
	{
		float num = 0f;
		IFaction faction = OfferedFaction;
		IFaction faction2 = PeaceOfferingFaction;
		if (factionToEvaluateFor.MapFaction == faction)
		{
			IFaction faction3 = faction;
			faction = faction2;
			faction2 = faction3;
		}
		if (faction == null || faction2 == null)
		{
			return 0;
		}
		num = (int)Campaign.Current.Models.DiplomacyModel.GetScoreOfDeclaringPeace(faction2, faction, factionToEvaluateFor, out var _);
		if (factionToEvaluateFor.IsKingdomFaction)
		{
			float num2 = 0f;
			int num3 = 0;
			foreach (Clan clan in ((Kingdom)factionToEvaluateFor).Clans)
			{
				float num4 = ((clan.Leader != null) ? ((clan.Leader.Gold < 50000) ? (1f + 0.5f * ((50000f - (float)clan.Leader.Gold) / 50000f)) : ((clan.Leader.Gold > 200000) ? MathF.Max(0.66f, MathF.Pow(200000f / (float)clan.Leader.Gold, 0.4f)) : 1f)) : 1f);
				num2 += num4;
				num3++;
			}
			float num5 = (num2 + 1f) / ((float)num3 + 1f);
			num /= num5;
		}
		return (int)num;
	}

	public override bool IsCompatible(Barterable barterable)
	{
		if (barterable is PeaceBarterable peaceBarterable)
		{
			return peaceBarterable.OfferedFaction != base.OriginalOwner.MapFaction;
		}
		return true;
	}

	public override ImageIdentifier GetVisualIdentifier()
	{
		return null;
	}

	public override string GetEncyclopediaLink()
	{
		return base.OriginalOwner.MapFaction.EncyclopediaLink;
	}

	public override void Apply()
	{
		if (!PeaceOfferingFaction.MapFaction.IsAtWarWith(OfferedFaction))
		{
			return;
		}
		MakePeaceAction.Apply(PeaceOfferingFaction.MapFaction, OfferedFaction);
		if (PlayerEncounter.Current == null || Hero.OneToOneConversationHero != base.OriginalOwner)
		{
			return;
		}
		PlayerEncounter.LeaveEncounter = true;
		if (base.OriginalParty?.MobileParty?.Ai.AiBehaviorPartyBase == null)
		{
			return;
		}
		LocatableSearchData<MobileParty> data = Campaign.Current.MobilePartyLocator.StartFindingLocatablesAroundPosition(MobileParty.MainParty.Position2D, 5f);
		for (MobileParty mobileParty = Campaign.Current.MobilePartyLocator.FindNextLocatable(ref data); mobileParty != null; mobileParty = Campaign.Current.MobilePartyLocator.FindNextLocatable(ref data))
		{
			if (!mobileParty.IsMainParty && mobileParty.MapFaction == base.OriginalOwner.MapFaction && (mobileParty.TargetParty == MobileParty.MainParty || mobileParty.Ai.AiBehaviorPartyBase == PartyBase.MainParty))
			{
				mobileParty.Ai.SetMoveModeHold();
			}
		}
		if (base.OriginalParty.MobileParty.Army != null && MobileParty.MainParty.Army != base.OriginalParty.MobileParty.Army)
		{
			base.OriginalParty.MobileParty.Army.LeaderParty.Ai.SetMoveModeHold();
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsPeaceBarterable(object o, List<object> collectedObjects)
	{
		((PeaceBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}
}
