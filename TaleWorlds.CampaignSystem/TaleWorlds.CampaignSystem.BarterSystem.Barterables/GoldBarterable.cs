using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables;

public class GoldBarterable : Barterable
{
	[SaveableField(200)]
	private readonly int _maxGold;

	[SaveableField(201)]
	private readonly Hero _ownerHero;

	[SaveableField(202)]
	private readonly Hero _otherHero;

	[SaveableField(203)]
	private readonly PartyBase _otherParty;

	public override string StringID => "gold_barterable";

	public override int MaxAmount => _maxGold;

	public override TextObject Name => GameTexts.FindText("str_char_denar_tooltip");

	public GoldBarterable(Hero owner, Hero other, PartyBase ownerParty, PartyBase otherParty, int val)
		: base(owner, ownerParty)
	{
		_ownerHero = owner;
		_otherHero = other;
		_otherParty = otherParty;
		_maxGold = val;
		base.CurrentAmount = 0;
	}

	public override int GetUnitValueForFaction(IFaction faction)
	{
		if (faction == base.OriginalOwner?.Clan || faction == base.OriginalOwner?.MapFaction || faction == base.OriginalParty?.MapFaction)
		{
			return -1;
		}
		if (faction == _otherHero?.Clan || faction == _otherHero?.MapFaction || faction == _otherParty?.MapFaction)
		{
			return 1;
		}
		return 0;
	}

	public override ImageIdentifier GetVisualIdentifier()
	{
		return null;
	}

	public override string GetEncyclopediaLink()
	{
		return "";
	}

	public override void Apply()
	{
		if (_ownerHero != null && _otherHero != null)
		{
			GiveGoldAction.ApplyBetweenCharacters(_ownerHero, _otherHero, base.CurrentAmount);
		}
		else if (base.OriginalParty != PartyBase.MainParty)
		{
			if (_otherParty != PartyBase.MainParty)
			{
				GiveGoldAction.ApplyForPartyToParty(base.OriginalParty, _otherParty, base.CurrentAmount);
			}
			else
			{
				GiveGoldAction.ApplyForPartyToCharacter(base.OriginalParty, Hero.MainHero, base.CurrentAmount);
			}
		}
		else
		{
			GiveGoldAction.ApplyForCharacterToParty(Hero.MainHero, _otherParty, base.CurrentAmount);
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsGoldBarterable(object o, List<object> collectedObjects)
	{
		((GoldBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_ownerHero);
		collectedObjects.Add(_otherHero);
		collectedObjects.Add(_otherParty);
	}

	internal static object AutoGeneratedGetMemberValue_maxGold(object o)
	{
		return ((GoldBarterable)o)._maxGold;
	}

	internal static object AutoGeneratedGetMemberValue_ownerHero(object o)
	{
		return ((GoldBarterable)o)._ownerHero;
	}

	internal static object AutoGeneratedGetMemberValue_otherHero(object o)
	{
		return ((GoldBarterable)o)._otherHero;
	}

	internal static object AutoGeneratedGetMemberValue_otherParty(object o)
	{
		return ((GoldBarterable)o)._otherParty;
	}
}
