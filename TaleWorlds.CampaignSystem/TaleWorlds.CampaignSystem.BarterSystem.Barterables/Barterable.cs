using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables;

public abstract class Barterable
{
	public enum BarterSide
	{
		Left,
		Right
	}

	private int _currentAmout;

	protected MBList<Barterable> _linkedBarterables;

	public abstract string StringID { get; }

	public Hero OriginalOwner { get; private set; }

	public PartyBase OriginalParty { get; private set; }

	public abstract TextObject Name { get; }

	public virtual int MaxAmount => 1;

	public int CurrentAmount
	{
		get
		{
			return _currentAmout;
		}
		set
		{
			_currentAmout = value;
			if (_currentAmout > MaxAmount)
			{
				_currentAmout = MaxAmount;
			}
		}
	}

	public bool IsOffered { get; protected set; }

	public bool IsContextDependent { get; protected set; }

	public BarterGroup Group { get; protected set; }

	public MBReadOnlyList<Barterable> LinkedBarterables => _linkedBarterables;

	public BarterSide Side { get; }

	protected Barterable(Hero originalOwner, PartyBase originalParty)
	{
		OriginalOwner = originalOwner;
		OriginalParty = originalParty;
		CurrentAmount = 1;
		_linkedBarterables = new MBList<Barterable>();
		Side = BarterSide.Left;
	}

	public int GetValueForFaction(IFaction faction)
	{
		return GetUnitValueForFaction(faction) * CurrentAmount;
	}

	public virtual void CheckBarterLink(Barterable linkedBarterable)
	{
	}

	public abstract int GetUnitValueForFaction(IFaction faction);

	public void SetIsOffered(bool value)
	{
		if (IsOffered == value)
		{
			return;
		}
		IsOffered = value;
		foreach (Barterable linkedBarterable in _linkedBarterables)
		{
			linkedBarterable.IsOffered = value;
		}
	}

	public void AddBarterLink(Barterable barterable)
	{
		_linkedBarterables.Add(barterable);
	}

	public void Initialize(BarterGroup barterGroup, bool isContextDependent)
	{
		Group = barterGroup;
		IsContextDependent = isContextDependent;
	}

	public virtual bool IsCompatible(Barterable barterable)
	{
		return true;
	}

	public abstract ImageIdentifier GetVisualIdentifier();

	public virtual string GetEncyclopediaLink()
	{
		return "";
	}

	public abstract void Apply();

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
	}
}
