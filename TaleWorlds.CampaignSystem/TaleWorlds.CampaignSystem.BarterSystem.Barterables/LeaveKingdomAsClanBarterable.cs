using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables;

public class LeaveKingdomAsClanBarterable : Barterable
{
	public override string StringID => "leave_faction_barterable";

	public override TextObject Name
	{
		get
		{
			TextObject textObject = new TextObject("{=x5POJVWw}Stop serving {FACTION}");
			textObject.SetTextVariable("FACTION", base.OriginalOwner.MapFaction.Name);
			return textObject;
		}
	}

	public LeaveKingdomAsClanBarterable(Hero owner, PartyBase ownerParty)
		: base(owner, ownerParty)
	{
	}

	public override int GetUnitValueForFaction(IFaction faction)
	{
		float num = 0f;
		_ = base.OriginalOwner.Clan.Leader;
		_ = base.OriginalOwner.MapFaction;
		if (faction == base.OriginalOwner.Clan)
		{
			if (base.OriginalOwner.Clan.IsMinorFaction)
			{
				return (int)Campaign.Current.Models.DiplomacyModel.GetScoreOfMercenaryToLeaveKingdom(base.OriginalOwner.Clan, base.OriginalOwner.Clan.Kingdom);
			}
			return (int)Campaign.Current.Models.DiplomacyModel.GetScoreOfClanToLeaveKingdom(base.OriginalOwner.Clan, base.OriginalOwner.Clan.Kingdom);
		}
		if (faction == base.OriginalOwner.MapFaction)
		{
			num = ((!base.OriginalOwner.Clan.IsUnderMercenaryService) ? Campaign.Current.Models.DiplomacyModel.GetScoreOfClanToLeaveKingdom(base.OriginalOwner.Clan, base.OriginalOwner.Clan.Kingdom) : Campaign.Current.Models.DiplomacyModel.GetScoreOfMercenaryToLeaveKingdom(base.OriginalOwner.Clan, base.OriginalOwner.Clan.Kingdom));
			num *= (float)((faction != base.OriginalOwner.Clan && faction != base.OriginalOwner.Clan.Kingdom) ? 1 : (-1));
		}
		else
		{
			float num2 = 0.5f;
			float num3 = 0.01f;
			float num4 = -0.5f;
			float clanStrength = Campaign.Current.Models.DiplomacyModel.GetClanStrength(base.OriginalOwner.Clan);
			num = ((faction.IsClan && FactionManager.IsAtWarAgainstFaction(faction, base.OriginalOwner.Clan.Kingdom)) ? (clanStrength * num2) : ((!FactionManager.IsAlliedWithFaction(faction, base.OriginalOwner.Clan.Kingdom)) ? (clanStrength * num3) : (clanStrength * num4)));
		}
		return (int)num;
	}

	public override void CheckBarterLink(Barterable linkedBarterable)
	{
	}

	public override bool IsCompatible(Barterable barterable)
	{
		if (barterable is JoinKingdomAsClanBarterable joinKingdomAsClanBarterable && joinKingdomAsClanBarterable.OriginalOwner == base.OriginalOwner)
		{
			return joinKingdomAsClanBarterable.TargetKingdom != base.OriginalOwner.MapFaction;
		}
		return true;
	}

	public override ImageIdentifier GetVisualIdentifier()
	{
		return new ImageIdentifier(BannerCode.CreateFrom(base.OriginalOwner.Clan.Banner));
	}

	public override string GetEncyclopediaLink()
	{
		return base.OriginalOwner.MapFaction.EncyclopediaLink;
	}

	public override void Apply()
	{
		if (base.OriginalOwner.Clan.IsUnderMercenaryService)
		{
			ChangeKingdomAction.ApplyByLeaveKingdomAsMercenary(base.OriginalOwner.Clan);
		}
		else
		{
			ChangeKingdomAction.ApplyByLeaveKingdom(base.OriginalOwner.Clan);
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsLeaveKingdomAsClanBarterable(object o, List<object> collectedObjects)
	{
		((LeaveKingdomAsClanBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}
}
