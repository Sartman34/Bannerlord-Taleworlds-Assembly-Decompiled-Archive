using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Locations;

public class Location
{
	[SaveableField(40)]
	private TextObject _overriddenName;

	[SaveableField(50)]
	private TextObject _overriddenDoorName;

	private List<LocationCharacter> _characterList;

	private LocationComplex _ownerComplex;

	private TextObject _name;

	private TextObject _doorName;

	public int ProsperityMax;

	private string[] _sceneNames;

	private string _aiCanExit;

	private string _aiCanEnter;

	private string _playerCanEnter;

	private string _playerCanSee;

	private CanUseDoor _aiCanExitDelegate;

	private CanUseDoor _aiCanEnterDelegate;

	private CanUseDoor _playerCanEnterDelegate;

	private CanUseDoor _playerCanSeeDelegate;

	[SaveableProperty(10)]
	public string StringId { get; private set; }

	[SaveableProperty(20)]
	public List<ItemObject> SpecialItems { get; private set; }

	[SaveableProperty(30)]
	public bool IsReserved { get; private set; }

	public List<Location> LocationsOfPassages { get; private set; }

	public TextObject Name
	{
		get
		{
			if (!TextObject.IsNullOrEmpty(_overriddenName))
			{
				return _overriddenName;
			}
			return _name;
		}
	}

	public TextObject DoorName
	{
		get
		{
			if (!TextObject.IsNullOrEmpty(_overriddenDoorName))
			{
				return _overriddenDoorName;
			}
			return _doorName;
		}
	}

	public bool IsIndoor { get; private set; }

	public bool CanBeReserved { get; private set; }

	[CachedData]
	public bool IsInitialized { get; private set; }

	public int CharacterCount => _characterList.Count;

	internal static void AutoGeneratedStaticCollectObjectsLocation(object o, List<object> collectedObjects)
	{
		((Location)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_overriddenName);
		collectedObjects.Add(_overriddenDoorName);
		collectedObjects.Add(SpecialItems);
	}

	internal static object AutoGeneratedGetMemberValueStringId(object o)
	{
		return ((Location)o).StringId;
	}

	internal static object AutoGeneratedGetMemberValueSpecialItems(object o)
	{
		return ((Location)o).SpecialItems;
	}

	internal static object AutoGeneratedGetMemberValueIsReserved(object o)
	{
		return ((Location)o).IsReserved;
	}

	internal static object AutoGeneratedGetMemberValue_overriddenName(object o)
	{
		return ((Location)o)._overriddenName;
	}

	internal static object AutoGeneratedGetMemberValue_overriddenDoorName(object o)
	{
		return ((Location)o)._overriddenDoorName;
	}

	public Location(string stringId, TextObject name, TextObject doorName, int prosperityMax, bool isIndoor, bool canBeReserved, string playerCanEnter, string playerCanSee, string aiCanExit, string aiCanEnter, string[] sceneNames, LocationComplex locationComplex)
	{
		ProsperityMax = prosperityMax;
		_characterList = new List<LocationCharacter>();
		LocationsOfPassages = new List<Location>();
		SpecialItems = new List<ItemObject>();
		StringId = stringId;
		_name = name;
		_doorName = doorName;
		IsIndoor = isIndoor;
		CanBeReserved = canBeReserved;
		IsReserved = false;
		_aiCanEnter = aiCanEnter;
		_playerCanEnter = playerCanEnter;
		_playerCanSee = playerCanSee;
		_aiCanExit = aiCanExit;
		_ownerComplex = locationComplex;
		_overriddenName = TextObject.Empty;
		_overriddenDoorName = TextObject.Empty;
		_sceneNames = new string[4];
		for (int i = 0; i < 4; i++)
		{
			_sceneNames[i] = sceneNames[i];
		}
	}

	public Location(Location location, LocationComplex locationComplex)
		: this(location.StringId, location.Name, location.DoorName, location.ProsperityMax, location.IsIndoor, location.CanBeReserved, location._playerCanEnter, location._playerCanSee, location._aiCanExit, location._aiCanEnter, location._sceneNames, locationComplex)
	{
	}

	public void Initialize(Location locationTemplate, LocationComplex ownerComplex)
	{
		ProsperityMax = locationTemplate.ProsperityMax;
		LocationsOfPassages = new List<Location>();
		_name = locationTemplate.Name;
		_doorName = locationTemplate.DoorName;
		IsIndoor = locationTemplate.IsIndoor;
		CanBeReserved = locationTemplate.CanBeReserved;
		_aiCanEnter = locationTemplate._aiCanEnter;
		_playerCanEnter = locationTemplate._playerCanEnter;
		_playerCanSee = locationTemplate._playerCanSee;
		_aiCanExit = locationTemplate._aiCanExit;
		_ownerComplex = ownerComplex;
		_characterList = new List<LocationCharacter>();
		_sceneNames = new string[4];
		IsInitialized = true;
		for (int i = 0; i < 4; i++)
		{
			_sceneNames[i] = locationTemplate._sceneNames[i];
		}
	}

	public bool CanAIExit(LocationCharacter character)
	{
		if (_aiCanExitDelegate == null)
		{
			_aiCanExitDelegate = DeserializeDelegate(_aiCanExit);
		}
		return _aiCanExitDelegate(character, this);
	}

	public bool CanAIEnter(LocationCharacter character)
	{
		if (_aiCanEnterDelegate == null)
		{
			_aiCanEnterDelegate = DeserializeDelegate(_aiCanEnter);
		}
		return _aiCanEnterDelegate(character, this);
	}

	public bool CanPlayerEnter()
	{
		if (_playerCanEnterDelegate == null)
		{
			_playerCanEnterDelegate = DeserializeDelegate(_playerCanEnter);
		}
		return _playerCanEnterDelegate(null, this);
	}

	public bool CanPlayerSee()
	{
		if (_playerCanSeeDelegate == null)
		{
			_playerCanSeeDelegate = DeserializeDelegate(_playerCanSee);
		}
		return _playerCanSeeDelegate(null, this);
	}

	public void ReserveLocation(TextObject locationName, TextObject doorName)
	{
		if (CanBeReserved)
		{
			IsReserved = true;
			_overriddenName = locationName;
			_overriddenDoorName = doorName;
		}
	}

	public void RemoveReservation()
	{
		if (CanBeReserved)
		{
			IsReserved = false;
			_overriddenName = TextObject.Empty;
			_overriddenDoorName = TextObject.Empty;
		}
	}

	public void SetOwnerComplex(LocationComplex locationComplex)
	{
		_ownerComplex = locationComplex;
	}

	public void AddCharacter(LocationCharacter locationCharacter)
	{
		if (_characterList == null)
		{
			_characterList = new List<LocationCharacter>();
		}
		if (locationCharacter.Character.IsHero)
		{
			_ownerComplex.RemoveCharacterIfExists(locationCharacter.Character.HeroObject);
		}
		_characterList.Add(locationCharacter);
	}

	public void AddLocationCharacters(CreateLocationCharacterDelegate createDelegate, CultureObject culture, LocationCharacter.CharacterRelations relation, int count)
	{
		for (int i = 0; i < count; i++)
		{
			LocationCharacter locationCharacter = createDelegate(culture, relation);
			AddCharacter(locationCharacter);
		}
	}

	public void AddSpecialItem(ItemObject itemObject)
	{
		SpecialItems.Add(itemObject);
	}

	public string GetSceneName(int upgradeLevel)
	{
		string text = _sceneNames[upgradeLevel];
		if (string.IsNullOrEmpty(text))
		{
			text = _sceneNames[0];
		}
		return text;
	}

	public void SetSceneName(int upgradeLevel, string sceneName)
	{
		_sceneNames[upgradeLevel] = sceneName;
	}

	public int GetSceneCount()
	{
		int num = 0;
		string[] sceneNames = _sceneNames;
		for (int i = 0; i < sceneNames.Length; i++)
		{
			if (!string.IsNullOrEmpty(sceneNames[i]))
			{
				num++;
			}
		}
		return num;
	}

	public void RemoveAllHeroCharactersFromPrison()
	{
		if (_characterList == null)
		{
			_characterList = new List<LocationCharacter>();
		}
		_characterList.RemoveAll((LocationCharacter x) => x.Character.HeroObject != null && x.Character.HeroObject != Hero.MainHero);
	}

	public void RemoveAllCharacters()
	{
		if (_characterList == null)
		{
			_characterList = new List<LocationCharacter>();
		}
		_characterList.Clear();
	}

	public void RemoveAllCharacters(Predicate<LocationCharacter> predicate)
	{
		_characterList.RemoveAll(predicate);
	}

	public void RemoveLocationCharacter(LocationCharacter locationCharacter)
	{
		_characterList.Remove(locationCharacter);
	}

	public void RemoveCharacter(Hero hero)
	{
		LocationCharacter locationCharacter = _characterList.First((LocationCharacter x) => x.Character.HeroObject == hero);
		RemoveLocationCharacter(locationCharacter);
	}

	public bool ContainsCharacter(LocationCharacter locationCharacter)
	{
		return _characterList.Contains(locationCharacter);
	}

	public bool ContainsCharacter(Hero hero)
	{
		if (_characterList == null)
		{
			return false;
		}
		return _characterList.Any((LocationCharacter x) => x.Character == hero.CharacterObject);
	}

	public void AddPassageToLocation(Location passageToLocation)
	{
		LocationsOfPassages.Add(passageToLocation);
	}

	public IEnumerable<LocationCharacter> GetCharacterList()
	{
		if (_characterList == null)
		{
			_characterList = new List<LocationCharacter>();
		}
		foreach (LocationCharacter character in _characterList)
		{
			yield return character;
		}
	}

	public Location GetPassageToLocation(string locationId)
	{
		return LocationsOfPassages.FirstOrDefault((Location location) => locationId == location.StringId);
	}

	public void OnAIChangeLocation(Location previousLocation)
	{
		if (IsIndoor && CampaignMission.Current != null && this != CampaignMission.Current.Location && CampaignMission.Current.Mode == MissionMode.Stealth)
		{
			_playerCanEnterDelegate = LocationComplex.CanNever;
		}
	}

	public LocationCharacter GetLocationCharacter(Hero hero)
	{
		return _characterList.Find((LocationCharacter x) => x.Character == hero.CharacterObject);
	}

	public LocationCharacter GetLocationCharacter(IAgentOriginBase agentOrigin)
	{
		foreach (LocationCharacter character in _characterList)
		{
			if (character.AgentOrigin == agentOrigin)
			{
				return character;
			}
		}
		return null;
	}

	private CanUseDoor DeserializeDelegate(string text)
	{
		int num = text.LastIndexOf('.');
		string name = ((num >= 0) ? text.Substring(0, num) : typeof(LocationComplex).FullName);
		string name2 = text.Substring(num + 1, text.Length - 1 - num);
		CanUseDoor result = null;
		Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
		for (int i = 0; i < assemblies.Length; i++)
		{
			Type type = assemblies[i].GetType(name);
			if (type != null)
			{
				MethodInfo method = type.GetMethod(name2);
				if (method != null)
				{
					result = Delegate.CreateDelegate(typeof(CanUseDoor), null, method) as CanUseDoor;
					break;
				}
			}
		}
		return result;
	}
}
