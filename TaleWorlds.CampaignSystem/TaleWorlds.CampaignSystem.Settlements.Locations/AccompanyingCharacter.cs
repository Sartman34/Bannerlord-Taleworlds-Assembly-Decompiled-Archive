using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Locations;

public class AccompanyingCharacter
{
	public LocationCharacter LocationCharacter;

	[SaveableField(2)]
	private List<Location> _disallowedLocations;

	[SaveableProperty(1)]
	public bool IsFollowingPlayerAtMissionStart { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsAccompanyingCharacter(object o, List<object> collectedObjects)
	{
		((AccompanyingCharacter)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_disallowedLocations);
	}

	internal static object AutoGeneratedGetMemberValueIsFollowingPlayerAtMissionStart(object o)
	{
		return ((AccompanyingCharacter)o).IsFollowingPlayerAtMissionStart;
	}

	internal static object AutoGeneratedGetMemberValue_disallowedLocations(object o)
	{
		return ((AccompanyingCharacter)o)._disallowedLocations;
	}

	public AccompanyingCharacter(LocationCharacter locationCharacter, bool isFollowingPlayerAtMissionStart)
	{
		_disallowedLocations = new List<Location>();
		LocationCharacter = locationCharacter;
		IsFollowingPlayerAtMissionStart = isFollowingPlayerAtMissionStart;
	}

	public bool CanEnterLocation(Location location)
	{
		return !_disallowedLocations.Contains(location);
	}

	public void AllowEntranceToLocations(Func<Location, bool> predicate)
	{
		foreach (Location listOfLocation in LocationComplex.Current.GetListOfLocations())
		{
			if (predicate(listOfLocation) && _disallowedLocations.Contains(listOfLocation))
			{
				_disallowedLocations.Remove(listOfLocation);
			}
		}
	}

	public void DisallowEntranceToLocations(Func<Location, bool> predicate)
	{
		foreach (Location listOfLocation in LocationComplex.Current.GetListOfLocations())
		{
			if (predicate(listOfLocation) && !_disallowedLocations.Contains(listOfLocation))
			{
				_disallowedLocations.Add(listOfLocation);
			}
		}
	}

	public void AllowEntranceToAllLocations()
	{
		_disallowedLocations.Clear();
	}

	public void DisallowEntranceToAllLocations()
	{
		AllowEntranceToAllLocations();
		_disallowedLocations.AddRange(LocationComplex.Current.GetListOfLocations());
	}
}
