using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public struct CampaignTime : IComparable<CampaignTime>
{
	public enum Seasons
	{
		Spring,
		Summer,
		Autumn,
		Winter
	}

	public const int SunRise = 2;

	public const int SunSet = 22;

	public const int MinutesInHour = 60;

	public const int HoursInDay = 24;

	public const int DaysInWeek = 7;

	public const int WeeksInSeason = 3;

	public const int SeasonsInYear = 4;

	public const int DaysInSeason = 21;

	public const int DaysInYear = 84;

	internal const long TimeTicksPerMillisecond = 10L;

	internal const long TimeTicksPerSecond = 10000L;

	internal const long TimeTicksPerMinute = 600000L;

	internal const long TimeTicksPerHour = 36000000L;

	internal const long TimeTicksPerDay = 864000000L;

	internal const long TimeTicksPerWeek = 6048000000L;

	internal const long TimeTicksPerSeason = 18144000000L;

	internal const long TimeTicksPerYear = 72576000000L;

	[SaveableField(2)]
	private readonly long _numTicks;

	internal long NumTicks => _numTicks;

	private static long CurrentTicks => Campaign.Current.MapTimeTracker.NumTicks;

	public static CampaignTime DeltaTime => new CampaignTime(Campaign.Current.MapTimeTracker.DeltaTimeInTicks);

	private static long DeltaTimeInTicks => Campaign.Current.MapTimeTracker.DeltaTimeInTicks;

	public static CampaignTime Now => Campaign.Current.MapTimeTracker.Now;

	public static CampaignTime Never => new CampaignTime(long.MaxValue);

	public bool IsFuture => CurrentTicks < _numTicks;

	public bool IsPast => CurrentTicks > _numTicks;

	public bool IsNow => CurrentTicks == _numTicks;

	public bool IsDayTime
	{
		get
		{
			int num = TaleWorlds.Library.MathF.Floor(CurrentHourInDay);
			if (num >= 2)
			{
				return num < 22;
			}
			return false;
		}
	}

	public float CurrentHourInDay => (float)(_numTicks % 864000000 / 10000) / 3600f;

	public bool IsNightTime => !IsDayTime;

	public float ElapsedMillisecondsUntilNow => (float)(CurrentTicks - _numTicks) / 10f;

	public float ElapsedSecondsUntilNow => (float)(CurrentTicks - _numTicks) / 10000f;

	public float ElapsedHoursUntilNow => (float)(CurrentTicks - _numTicks) / 36000000f;

	public float ElapsedDaysUntilNow => (float)(CurrentTicks - _numTicks) / 864000000f;

	public float ElapsedWeeksUntilNow => (float)(CurrentTicks - _numTicks) / 6.048E+09f;

	public float ElapsedSeasonsUntilNow => (float)(CurrentTicks - _numTicks) / 1.8144E+10f;

	public float ElapsedYearsUntilNow => (float)(CurrentTicks - _numTicks) / 7.2576E+10f;

	public float RemainingMillisecondsFromNow => (float)(_numTicks - CurrentTicks) / 10f;

	public float RemainingSecondsFromNow => (float)(_numTicks - CurrentTicks) / 10000f;

	public float RemainingHoursFromNow => (float)(_numTicks - CurrentTicks) / 36000000f;

	public float RemainingDaysFromNow => (float)(_numTicks - CurrentTicks) / 864000000f;

	public float RemainingWeeksFromNow => (float)(_numTicks - CurrentTicks) / 6.048E+09f;

	public float RemainingSeasonsFromNow => (float)(_numTicks - CurrentTicks) / 1.8144E+10f;

	public float RemainingYearsFromNow => (float)(_numTicks - CurrentTicks) / 7.2576E+10f;

	public double ToMilliseconds => (double)_numTicks / 10.0;

	public double ToSeconds => (double)_numTicks / 10000.0;

	public double ToMinutes => (double)_numTicks / 600000.0;

	public double ToHours => (double)_numTicks / 36000000.0;

	public double ToDays => (double)_numTicks / 864000000.0;

	public double ToWeeks => (double)_numTicks / 6048000000.0;

	public double ToSeasons => (double)_numTicks / 18144000000.0;

	public double ToYears => (double)_numTicks / 72576000000.0;

	public int GetHourOfDay => (int)(_numTicks / 36000000 % 24);

	public int GetDayOfWeek => (int)(_numTicks / 864000000 % 7);

	public int GetDayOfSeason => (int)(_numTicks / 864000000 % 21);

	public int GetDayOfYear => (int)(_numTicks / 864000000 % 84);

	public int GetWeekOfSeason => (int)(_numTicks / 6048000000L % 3);

	public Seasons GetSeasonOfYear => (Seasons)(_numTicks / 18144000000L % 4);

	public int GetYear => (int)(_numTicks / 72576000000L);

	public static CampaignTime Zero => new CampaignTime(0L);

	public static void AutoGeneratedStaticCollectObjectsCampaignTime(object o, List<object> collectedObjects)
	{
		((CampaignTime)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
	}

	internal static object AutoGeneratedGetMemberValue_numTicks(object o)
	{
		return ((CampaignTime)o)._numTicks;
	}

	internal CampaignTime(long numTicks)
	{
		_numTicks = numTicks;
	}

	public bool Equals(CampaignTime other)
	{
		return _numTicks == other._numTicks;
	}

	public override bool Equals(object obj)
	{
		if (obj == null)
		{
			return false;
		}
		if (obj is CampaignTime)
		{
			return Equals((CampaignTime)obj);
		}
		return false;
	}

	public override int GetHashCode()
	{
		return _numTicks.GetHashCode();
	}

	public int CompareTo(CampaignTime other)
	{
		if (_numTicks == other._numTicks)
		{
			return 0;
		}
		if (_numTicks > other._numTicks)
		{
			return 1;
		}
		return -1;
	}

	public static bool operator <(CampaignTime x, CampaignTime y)
	{
		return x._numTicks < y._numTicks;
	}

	public static bool operator >(CampaignTime x, CampaignTime y)
	{
		return x._numTicks > y._numTicks;
	}

	public static bool operator ==(CampaignTime x, CampaignTime y)
	{
		return x._numTicks == y._numTicks;
	}

	public static bool operator !=(CampaignTime x, CampaignTime y)
	{
		return !(x == y);
	}

	public static bool operator <=(CampaignTime x, CampaignTime y)
	{
		return x._numTicks <= y._numTicks;
	}

	public static bool operator >=(CampaignTime x, CampaignTime y)
	{
		return x._numTicks >= y._numTicks;
	}

	public static CampaignTime Milliseconds(long valueInMilliseconds)
	{
		return new CampaignTime(valueInMilliseconds * 10);
	}

	public static CampaignTime MillisecondsFromNow(long valueInMilliseconds)
	{
		return new CampaignTime(CurrentTicks + valueInMilliseconds * 10);
	}

	public static CampaignTime Seconds(long valueInSeconds)
	{
		return new CampaignTime(valueInSeconds * 10000);
	}

	public static CampaignTime SecondsFromNow(long valueInSeconds)
	{
		return new CampaignTime(CurrentTicks + valueInSeconds * 10000);
	}

	public static CampaignTime Minutes(long valueInMinutes)
	{
		return new CampaignTime(valueInMinutes * 600000);
	}

	public static CampaignTime MinutesFromNow(long valueInMinutes)
	{
		return new CampaignTime(CurrentTicks + valueInMinutes * 600000);
	}

	public static CampaignTime Hours(float valueInHours)
	{
		return new CampaignTime((long)(valueInHours * 36000000f));
	}

	public static CampaignTime HoursFromNow(float valueInHours)
	{
		return new CampaignTime(CurrentTicks + (long)(valueInHours * 36000000f));
	}

	public static CampaignTime Days(float valueInDays)
	{
		return new CampaignTime((long)(valueInDays * 864000000f));
	}

	public static CampaignTime DaysFromNow(float valueInDays)
	{
		return new CampaignTime(CurrentTicks + (long)(valueInDays * 864000000f));
	}

	public static CampaignTime Weeks(float valueInWeeeks)
	{
		return new CampaignTime((long)(valueInWeeeks * 6.048E+09f));
	}

	public static CampaignTime WeeksFromNow(float valueInWeeks)
	{
		return new CampaignTime(CurrentTicks + (long)(valueInWeeks * 6.048E+09f));
	}

	public static CampaignTime Years(float valueInYears)
	{
		return new CampaignTime((long)(valueInYears * 7.2576E+10f));
	}

	public static CampaignTime YearsFromNow(float valueInYears)
	{
		return new CampaignTime(CurrentTicks + (long)(valueInYears * 7.2576E+10f));
	}

	public static CampaignTime operator +(CampaignTime g1, CampaignTime g2)
	{
		return new CampaignTime(g1._numTicks + g2._numTicks);
	}

	public static CampaignTime operator -(CampaignTime g1, CampaignTime g2)
	{
		return new CampaignTime(g1._numTicks - g2._numTicks);
	}

	public bool StringSameAs(CampaignTime otherTime)
	{
		return _numTicks / 864000000 == otherTime.NumTicks / 864000000;
	}

	public override string ToString()
	{
		int getYear = GetYear;
		Seasons getSeasonOfYear = GetSeasonOfYear;
		int num = GetDayOfSeason + 1;
		TextObject textObject = GameTexts.FindText("str_date_format");
		textObject.SetTextVariable("SEASON", GameTexts.FindText("str_season_" + getSeasonOfYear));
		textObject.SetTextVariable("YEAR", getYear.ToString());
		textObject.SetTextVariable("DAY", num.ToString());
		return textObject.ToString();
	}
}
