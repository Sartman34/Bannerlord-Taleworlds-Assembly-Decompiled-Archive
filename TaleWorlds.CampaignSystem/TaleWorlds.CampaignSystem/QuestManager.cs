using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Issues;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class QuestManager : CampaignEventReceiver
{
	public const string QuestOfferToken = "quest_offer";

	public const string QuestDiscussToken = "quest_discuss";

	public const string HeroMainOptionsToken = "hero_main_options";

	public const string NpcLordStartToken = "lord_start";

	public const string CharacterTalkToken = "start";

	public static string PriorQuestName;

	private MBList<QuestBase> _currentHourlyTickQuestsToTimeout;

	[SaveableField(0)]
	private readonly MBList<QuestBase> _quests;

	[SaveableField(10)]
	private readonly Dictionary<ITrackableCampaignObject, List<QuestBase>> _trackedObjects;

	public MBReadOnlyList<QuestBase> Quests => _quests;

	public bool QuestDebugMode { get; set; }

	public MBReadOnlyDictionary<ITrackableCampaignObject, List<QuestBase>> TrackedObjects { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsQuestManager(object o, List<object> collectedObjects)
	{
		((QuestManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_quests);
		collectedObjects.Add(_trackedObjects);
	}

	internal static object AutoGeneratedGetMemberValue_quests(object o)
	{
		return ((QuestManager)o)._quests;
	}

	internal static object AutoGeneratedGetMemberValue_trackedObjects(object o)
	{
		return ((QuestManager)o)._trackedObjects;
	}

	public QuestManager()
	{
		_quests = new MBList<QuestBase>();
		_trackedObjects = new Dictionary<ITrackableCampaignObject, List<QuestBase>>();
		_currentHourlyTickQuestsToTimeout = new MBList<QuestBase>();
		Initialize();
	}

	[LoadInitializationCallback]
	private void OnLoad(MetaData metaData)
	{
		Initialize();
	}

	private void Initialize()
	{
		TrackedObjects = _trackedObjects.GetReadOnlyDictionary();
		_currentHourlyTickQuestsToTimeout = new MBList<QuestBase>();
	}

	public override void OnQuestStarted(QuestBase quest)
	{
		_quests.Add(quest);
	}

	public bool IsThereActiveQuestWithType(Type type)
	{
		foreach (QuestBase quest in Quests)
		{
			if (quest.IsOngoing && (type == quest.GetType() || quest.GetType().IsSubclassOf(type)))
			{
				return true;
			}
		}
		return false;
	}

	public bool IsQuestGiver(Hero offeringHero)
	{
		foreach (QuestBase quest in Quests)
		{
			if (quest.IsOngoing && quest.QuestGiver == offeringHero)
			{
				return true;
			}
		}
		return false;
	}

	public override void OnGameLoaded(CampaignGameStarter campaignGameStarter)
	{
		List<QuestBase> list = new List<QuestBase>();
		for (int num = Quests.Count - 1; num >= 0; num--)
		{
			QuestBase questBase = Quests[num];
			if (questBase == null)
			{
				_quests.Remove(questBase);
			}
			else if (!questBase.IsFinalized)
			{
				bool flag = false;
				foreach (KeyValuePair<Hero, IssueBase> issue in Campaign.Current.IssueManager.Issues)
				{
					if (issue.Value?.IssueQuest == questBase)
					{
						flag = true;
						break;
					}
				}
				if (flag || questBase.IsSpecialQuest)
				{
					questBase.InitializeQuestOnLoadWithQuestManager();
					foreach (QuestTaskBase task in questBase.TaskList)
					{
						if (task.IsActive)
						{
							task.SetReferences();
							task.AddTaskDialogs();
						}
					}
				}
				else
				{
					list.Add(questBase);
					Debug.FailedAssert(string.Concat("There is not active issue for quest: ", questBase.Title, " string id: ", questBase.StringId, ". Quest will be canceled."), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "OnGameLoaded", 127);
				}
			}
		}
		foreach (QuestBase item in list)
		{
			item.CompleteQuestWithCancel();
		}
	}

	public override void OnSessionStart(CampaignGameStarter campaignGameStarter)
	{
		CampaignEvents.MapEventStarted.AddNonSerializedListener(this, OnMapEventStarted);
	}

	public override void HourlyTick()
	{
		for (int num = Quests.Count - 1; num >= 0; num--)
		{
			QuestBase questBase = Quests[num];
			if (questBase.IsOngoing && questBase.QuestDueTime.IsPast)
			{
				_currentHourlyTickQuestsToTimeout.Add(questBase);
			}
		}
		foreach (QuestBase item in _currentHourlyTickQuestsToTimeout)
		{
			if (!item.IsFinalized)
			{
				item.CompleteQuestWithTimeOut();
			}
		}
		_currentHourlyTickQuestsToTimeout.Clear();
		for (int num2 = Quests.Count - 1; num2 >= 0; num2--)
		{
			Quests[num2].HourlyTickWithQuestManager();
		}
	}

	public override void DailyTick()
	{
	}

	public GameMenuOption.IssueQuestFlags CheckQuestForMenuLocations(List<Location> currentLocations)
	{
		GameMenuOption.IssueQuestFlags issueQuestFlags = GameMenuOption.IssueQuestFlags.None;
		foreach (Location currentLocation in currentLocations)
		{
			foreach (LocationCharacter character in currentLocation.GetCharacterList())
			{
				Hero hero = character.Character?.HeroObject;
				if (hero == null)
				{
					continue;
				}
				foreach (QuestBase quest in Quests)
				{
					if (quest != null && quest.IsOngoing)
					{
						if (quest.QuestGiver == hero)
						{
							issueQuestFlags |= (quest.IsSpecialQuest ? GameMenuOption.IssueQuestFlags.ActiveStoryQuest : GameMenuOption.IssueQuestFlags.ActiveIssue);
						}
						else if (quest.IsTracked(hero))
						{
							issueQuestFlags |= (quest.IsSpecialQuest ? GameMenuOption.IssueQuestFlags.TrackedStoryQuest : GameMenuOption.IssueQuestFlags.TrackedIssue);
						}
					}
				}
			}
		}
		foreach (Location currentLocation2 in currentLocations)
		{
			issueQuestFlags |= IsLocationsTracked(currentLocation2);
		}
		return issueQuestFlags;
	}

	private GameMenuOption.IssueQuestFlags IsLocationsTracked(Location location)
	{
		GameMenuOption.IssueQuestFlags issueQuestFlags = GameMenuOption.IssueQuestFlags.None;
		foreach (QuestBase quest in Quests)
		{
			issueQuestFlags |= quest.IsLocationTrackedByQuest(location);
		}
		return issueQuestFlags;
	}

	public void OnQuestFinalized(QuestBase quest)
	{
		_quests.Remove(quest);
	}

	public override void OnPlayerCharacterChanged(Hero oldPlayer, Hero newPlayer, MobileParty newPlayerParty, bool isMainPartyChanged)
	{
		for (int num = Quests.Count - 1; num >= 0; num--)
		{
			QuestBase questBase = Quests[num];
			if (questBase.IsOngoing && !questBase.IsSpecialQuest)
			{
				questBase.CompleteQuestWithFail();
			}
		}
	}

	public override void CanHaveQuestsOrIssues(Hero hero, ref bool result)
	{
		foreach (QuestBase quest in Quests)
		{
			if (quest.IsOngoing && quest.QuestGiver == hero)
			{
				result = false;
				break;
			}
			quest.OnHeroCanHaveQuestOrIssueInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanHeroDie(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
	{
		foreach (QuestBase quest in Quests)
		{
			quest.OnHeroCanDieInfoIsRequested(hero, causeOfDeath, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanHeroBecomePrisoner(Hero hero, ref bool result)
	{
		foreach (QuestBase quest in Quests)
		{
			quest.OnHeroCanBecomePrisonerInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanHeroEquipmentBeChanged(Hero hero, ref bool result)
	{
		foreach (QuestBase quest in Quests)
		{
			quest.OnHeroCanBeSelectedInInventoryInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanHeroLeadParty(Hero hero, ref bool result)
	{
		foreach (QuestBase quest in Quests)
		{
			quest.OnHeroCanLeadPartyInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanHeroMarry(Hero hero, ref bool result)
	{
		foreach (QuestBase quest in Quests)
		{
			quest.OnHeroCanMarryInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanMoveToSettlement(Hero hero, ref bool result)
	{
		foreach (QuestBase quest in Quests)
		{
			quest.OnHeroCanMoveToSettlementInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanBeGovernorOrHavePartyRole(Hero hero, ref bool result)
	{
		foreach (QuestBase quest in Quests)
		{
			quest.OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public void AddTrackedObjectForQuest(ITrackableCampaignObject trackedObject, QuestBase relatedQuest)
	{
		if (_trackedObjects.TryGetValue(trackedObject, out var value))
		{
			if (!value.Contains(relatedQuest))
			{
				value.Add(relatedQuest);
			}
			else
			{
				Debug.FailedAssert(string.Concat(trackedObject.GetName(), " already contains quest: ", relatedQuest.Title), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "AddTrackedObjectForQuest", 362);
			}
		}
		else
		{
			_trackedObjects.Add(trackedObject, new List<QuestBase> { relatedQuest });
		}
	}

	public void RemoveTrackedObjectForQuest(ITrackableCampaignObject trackedObject, QuestBase relatedQuest)
	{
		if (_trackedObjects.TryGetValue(trackedObject, out var value))
		{
			if (value.Contains(relatedQuest))
			{
				value.Remove(relatedQuest);
				if (value.Count == 0)
				{
					_trackedObjects.Remove(trackedObject);
					Campaign.Current.VisualTrackerManager.RemoveTrackedObject(trackedObject);
				}
			}
			else
			{
				Debug.FailedAssert(string.Concat(trackedObject.GetName(), " is not tracked by quest: ", relatedQuest.Title), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "RemoveTrackedObjectForQuest", 386);
			}
		}
		else
		{
			Debug.FailedAssert(string.Concat(trackedObject.GetName(), " does not track any quests."), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "RemoveTrackedObjectForQuest", 391);
		}
	}

	public void RemoveAllTrackedObjectsForQuest(QuestBase quest)
	{
		List<ITrackableCampaignObject> list = new List<ITrackableCampaignObject>();
		foreach (KeyValuePair<ITrackableCampaignObject, List<QuestBase>> trackedObject in TrackedObjects)
		{
			if (trackedObject.Value.Contains(quest))
			{
				list.Add(trackedObject.Key);
			}
		}
		foreach (ITrackableCampaignObject item in list)
		{
			RemoveTrackedObjectForQuest(item, quest);
		}
	}

	public List<ITrackableCampaignObject> GetAllTrackedObjectsOfAQuest(QuestBase quest)
	{
		List<ITrackableCampaignObject> list = new List<ITrackableCampaignObject>();
		foreach (KeyValuePair<ITrackableCampaignObject, List<QuestBase>> trackedObject in TrackedObjects)
		{
			if (trackedObject.Value.Contains(quest))
			{
				list.Add(trackedObject.Key);
			}
		}
		return list;
	}

	public IEnumerable<QuestBase> GetQuestGiverQuests(Hero hero)
	{
		foreach (QuestBase quest in Quests)
		{
			if (quest.IsOngoing && quest.QuestGiver == hero)
			{
				yield return quest;
			}
		}
	}

	public static bool QuestExistInSettlementNotables(QuestBase questBase, Settlement settlement)
	{
		foreach (Hero notable in settlement.Notables)
		{
			if (questBase.QuestGiver == notable)
			{
				return true;
			}
		}
		return false;
	}

	public static bool QuestExistInClan(QuestBase questBase, Clan clan)
	{
		foreach (Hero lord in clan.Lords)
		{
			if (questBase.QuestGiver == lord)
			{
				return true;
			}
		}
		return false;
	}
}
