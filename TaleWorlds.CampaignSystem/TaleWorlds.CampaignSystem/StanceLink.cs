using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class StanceLink
{
	[SaveableField(0)]
	private StanceType _stanceType;

	[SaveableField(1)]
	private bool _isAtConstantWar;

	[SaveableField(3)]
	public int BehaviorPriority;

	[SaveableField(40)]
	private CampaignTime _warStartDate;

	[SaveableField(50)]
	private CampaignTime _peaceDeclarationDate;

	[SaveableField(60)]
	private int _casualties1;

	[SaveableField(70)]
	private int _casualties2;

	[SaveableField(110)]
	private int _successfulSieges1;

	[SaveableField(120)]
	private int _successfulSieges2;

	[SaveableField(130)]
	private int _successfulRaids1;

	[SaveableField(140)]
	private int _successfulRaids2;

	[SaveableField(200)]
	private int _totalTributePaidby1;

	[SaveableField(210)]
	private int _totalTributePaidby2;

	[SaveableField(220)]
	private int _dailyTributeFrom1To2;

	public bool IsAtConstantWar
	{
		get
		{
			return _isAtConstantWar;
		}
		set
		{
			_isAtConstantWar = value;
			if (value)
			{
				IsAtWar = true;
			}
		}
	}

	internal StanceType StanceType
	{
		get
		{
			return _stanceType;
		}
		set
		{
			if (_stanceType != value)
			{
				if (_stanceType == StanceType.War)
				{
					ResetStats();
					PeaceDeclarationDate = CampaignTime.Now;
				}
				_stanceType = value;
				if (_stanceType == StanceType.War)
				{
					ResetStats();
					WarStartDate = CampaignTime.Now;
				}
				CampaignEventDispatcher.Instance.OnMapEventContinuityNeedsUpdate(Faction1);
			}
		}
	}

	public bool IsAtWar
	{
		get
		{
			return _stanceType == StanceType.War;
		}
		set
		{
			_stanceType = (value ? StanceType.War : StanceType.Neutral);
		}
	}

	public bool IsAllied
	{
		get
		{
			return _stanceType == StanceType.Alliance;
		}
		set
		{
			_stanceType = (value ? StanceType.Alliance : StanceType.Neutral);
		}
	}

	public bool IsNeutral => _stanceType == StanceType.Neutral;

	[SaveableProperty(20)]
	public IFaction Faction1 { get; private set; }

	[SaveableProperty(30)]
	public IFaction Faction2 { get; private set; }

	public CampaignTime WarStartDate
	{
		get
		{
			return _warStartDate;
		}
		private set
		{
			_warStartDate = value;
		}
	}

	public CampaignTime PeaceDeclarationDate
	{
		get
		{
			return _peaceDeclarationDate;
		}
		private set
		{
			_peaceDeclarationDate = value;
		}
	}

	public int Casualties1
	{
		get
		{
			return _casualties1;
		}
		set
		{
			_casualties1 = value;
		}
	}

	public int Casualties2
	{
		get
		{
			return _casualties2;
		}
		set
		{
			_casualties2 = value;
		}
	}

	public int SuccessfulSieges1
	{
		get
		{
			return _successfulSieges1;
		}
		set
		{
			_successfulSieges1 = value;
		}
	}

	public int SuccessfulSieges2
	{
		get
		{
			return _successfulSieges2;
		}
		set
		{
			_successfulSieges2 = value;
		}
	}

	public int SuccessfulRaids1
	{
		get
		{
			return _successfulRaids1;
		}
		set
		{
			_successfulRaids1 = value;
		}
	}

	public int SuccessfulRaids2
	{
		get
		{
			return _successfulRaids2;
		}
		set
		{
			_successfulRaids2 = value;
		}
	}

	public int TotalTributePaidby1
	{
		get
		{
			return _totalTributePaidby1;
		}
		set
		{
			_totalTributePaidby1 = value;
		}
	}

	public int TotalTributePaidby2
	{
		get
		{
			return _totalTributePaidby2;
		}
		set
		{
			_totalTributePaidby2 = value;
		}
	}

	private int DailyTributeFrom1To2
	{
		get
		{
			return _dailyTributeFrom1To2;
		}
		set
		{
			_dailyTributeFrom1To2 = value;
		}
	}

	private int DailyTributeFrom2To1
	{
		get
		{
			return -_dailyTributeFrom1To2;
		}
		set
		{
			_dailyTributeFrom1To2 = -value;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsStanceLink(object o, List<object> collectedObjects)
	{
		((StanceLink)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(_warStartDate, collectedObjects);
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(_peaceDeclarationDate, collectedObjects);
		collectedObjects.Add(Faction1);
		collectedObjects.Add(Faction2);
	}

	internal static object AutoGeneratedGetMemberValueFaction1(object o)
	{
		return ((StanceLink)o).Faction1;
	}

	internal static object AutoGeneratedGetMemberValueFaction2(object o)
	{
		return ((StanceLink)o).Faction2;
	}

	internal static object AutoGeneratedGetMemberValueBehaviorPriority(object o)
	{
		return ((StanceLink)o).BehaviorPriority;
	}

	internal static object AutoGeneratedGetMemberValue_stanceType(object o)
	{
		return ((StanceLink)o)._stanceType;
	}

	internal static object AutoGeneratedGetMemberValue_isAtConstantWar(object o)
	{
		return ((StanceLink)o)._isAtConstantWar;
	}

	internal static object AutoGeneratedGetMemberValue_warStartDate(object o)
	{
		return ((StanceLink)o)._warStartDate;
	}

	internal static object AutoGeneratedGetMemberValue_peaceDeclarationDate(object o)
	{
		return ((StanceLink)o)._peaceDeclarationDate;
	}

	internal static object AutoGeneratedGetMemberValue_casualties1(object o)
	{
		return ((StanceLink)o)._casualties1;
	}

	internal static object AutoGeneratedGetMemberValue_casualties2(object o)
	{
		return ((StanceLink)o)._casualties2;
	}

	internal static object AutoGeneratedGetMemberValue_successfulSieges1(object o)
	{
		return ((StanceLink)o)._successfulSieges1;
	}

	internal static object AutoGeneratedGetMemberValue_successfulSieges2(object o)
	{
		return ((StanceLink)o)._successfulSieges2;
	}

	internal static object AutoGeneratedGetMemberValue_successfulRaids1(object o)
	{
		return ((StanceLink)o)._successfulRaids1;
	}

	internal static object AutoGeneratedGetMemberValue_successfulRaids2(object o)
	{
		return ((StanceLink)o)._successfulRaids2;
	}

	internal static object AutoGeneratedGetMemberValue_totalTributePaidby1(object o)
	{
		return ((StanceLink)o)._totalTributePaidby1;
	}

	internal static object AutoGeneratedGetMemberValue_totalTributePaidby2(object o)
	{
		return ((StanceLink)o)._totalTributePaidby2;
	}

	internal static object AutoGeneratedGetMemberValue_dailyTributeFrom1To2(object o)
	{
		return ((StanceLink)o)._dailyTributeFrom1To2;
	}

	private void ResetStats()
	{
		Casualties1 = 0;
		Casualties2 = 0;
		SuccessfulRaids1 = 0;
		SuccessfulRaids2 = 0;
		SuccessfulSieges1 = 0;
		SuccessfulSieges2 = 0;
		TotalTributePaidby1 = 0;
		TotalTributePaidby2 = 0;
		_dailyTributeFrom1To2 = 0;
	}

	internal void ResetPeaceStats()
	{
		ResetStats();
		PeaceDeclarationDate = CampaignTime.Now;
	}

	public int GetCasualties(IFaction faction)
	{
		if (faction != Faction1)
		{
			if (faction != Faction2)
			{
				return 0;
			}
			return _casualties2;
		}
		return _casualties1;
	}

	public int GetSuccessfulSieges(IFaction faction)
	{
		if (faction != Faction1)
		{
			if (faction != Faction2)
			{
				return 0;
			}
			return _successfulSieges2;
		}
		return _successfulSieges1;
	}

	public int GetSuccessfulRaids(IFaction faction)
	{
		if (faction != Faction1)
		{
			if (faction != Faction2)
			{
				return 0;
			}
			return _successfulRaids2;
		}
		return _successfulRaids1;
	}

	public int GetTotalTributePaid(IFaction faction)
	{
		if (faction != Faction1)
		{
			if (faction != Faction2)
			{
				return 0;
			}
			return _totalTributePaidby2;
		}
		return _totalTributePaidby1;
	}

	public int GetDailyTributePaid(IFaction faction)
	{
		if (faction != Faction1)
		{
			if (faction != Faction2)
			{
				return 0;
			}
			return DailyTributeFrom2To1;
		}
		return DailyTributeFrom1To2;
	}

	public void SetDailyTributePaid(IFaction payer, int dailyTribute)
	{
		DailyTributeFrom1To2 = ((payer == Faction1) ? dailyTribute : ((payer == Faction2) ? (-dailyTribute) : 0));
	}

	internal StanceLink(StanceType stanceType, IFaction faction1, IFaction faction2, bool isAtConstantWar)
	{
		_stanceType = stanceType;
		Faction1 = faction1;
		Faction2 = faction2;
		_isAtConstantWar = isAtConstantWar;
	}
}
