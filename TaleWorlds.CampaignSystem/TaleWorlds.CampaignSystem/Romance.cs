using System.Collections.Generic;
using System.Linq;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class Romance
{
	public class RomanticState
	{
		[SaveableField(0)]
		public Hero Person1;

		[SaveableField(1)]
		public Hero Person2;

		[SaveableField(2)]
		public RomanceLevelEnum Level;

		[SaveableField(3)]
		public int ProgressToNextLevel;

		[SaveableField(5)]
		public float LastVisit;

		[SaveableField(6)]
		public float ScoreFromPersuasion;

		internal static void AutoGeneratedStaticCollectObjectsRomanticState(object o, List<object> collectedObjects)
		{
			((RomanticState)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(Person1);
			collectedObjects.Add(Person2);
		}

		internal static object AutoGeneratedGetMemberValuePerson1(object o)
		{
			return ((RomanticState)o).Person1;
		}

		internal static object AutoGeneratedGetMemberValuePerson2(object o)
		{
			return ((RomanticState)o).Person2;
		}

		internal static object AutoGeneratedGetMemberValueLevel(object o)
		{
			return ((RomanticState)o).Level;
		}

		internal static object AutoGeneratedGetMemberValueProgressToNextLevel(object o)
		{
			return ((RomanticState)o).ProgressToNextLevel;
		}

		internal static object AutoGeneratedGetMemberValueLastVisit(object o)
		{
			return ((RomanticState)o).LastVisit;
		}

		internal static object AutoGeneratedGetMemberValueScoreFromPersuasion(object o)
		{
			return ((RomanticState)o).ScoreFromPersuasion;
		}

		public Hero Partner(Hero hero)
		{
			if (Person1 == hero)
			{
				return Person2;
			}
			if (Person2 == hero)
			{
				return Person1;
			}
			return null;
		}
	}

	public enum RomanceLevelEnum
	{
		Ended = -2,
		Rejection,
		Untested,
		FailedInCompatibility,
		FailedInPracticalities,
		MatchMadeByFamily,
		CourtshipStarted,
		CoupleDecidedThatTheyAreCompatible,
		CoupleAgreedOnMarriage,
		Marriage
	}

	[SaveableField(7)]
	private readonly List<RomanticState> _romanticStateList;

	public static List<RomanticState> RomanticStateList => Campaign.Current.Romance._romanticStateList;

	internal static void AutoGeneratedStaticCollectObjectsRomance(object o, List<object> collectedObjects)
	{
		((Romance)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_romanticStateList);
	}

	internal static object AutoGeneratedGetMemberValue_romanticStateList(object o)
	{
		return ((Romance)o)._romanticStateList;
	}

	public Romance()
	{
		_romanticStateList = new List<RomanticState>();
	}

	public static Hero GetCourtedHeroInOtherClan(Hero person1, Hero person2)
	{
		foreach (Hero item in person2.Clan.Lords.Where((Hero x) => x != person2))
		{
			if (GetRomanticLevel(person1, item) >= RomanceLevelEnum.MatchMadeByFamily)
			{
				return person2;
			}
		}
		return null;
	}

	public static RomanceLevelEnum GetRomanticLevel(Hero person1, Hero person2)
	{
		return GetRomanticState(person1, person2)?.Level ?? RomanceLevelEnum.Untested;
	}

	public static RomanticState GetRomanticState(Hero person1, Hero person2)
	{
		if (RomanticStateList == null)
		{
			return null;
		}
		foreach (RomanticState romanticState in RomanticStateList)
		{
			if (romanticState != null && ((romanticState.Person1 == person1 && romanticState.Person2 == person2) || (romanticState.Person1 == person2 && romanticState.Person2 == person1)))
			{
				return romanticState;
			}
		}
		return null;
	}

	internal static void EndAllCourtships(Hero forHero)
	{
		foreach (RomanticState romanticState in RomanticStateList)
		{
			if (romanticState.Person1 == forHero || romanticState.Person2 == forHero)
			{
				romanticState.Level = RomanceLevelEnum.Ended;
			}
		}
	}

	internal static void SetRomanticState(Hero person1, Hero person2, RomanceLevelEnum romanceLevelEnum)
	{
		RomanticState romanticState = GetRomanticState(person1, person2);
		if (romanticState != null)
		{
			romanticState.Level = romanceLevelEnum;
			return;
		}
		RomanticState romanticState2 = new RomanticState();
		romanticState2.Person1 = person1;
		romanticState2.Person2 = person2;
		romanticState2.Level = romanceLevelEnum;
		romanticState2.ProgressToNextLevel = 0;
		RomanticStateList.Add(romanticState2);
	}
}
