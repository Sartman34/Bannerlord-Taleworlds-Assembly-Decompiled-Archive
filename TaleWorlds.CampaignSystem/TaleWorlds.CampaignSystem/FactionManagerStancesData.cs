using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

internal class FactionManagerStancesData
{
	[SaveableField(10)]
	private Dictionary<(IFaction, IFaction), StanceLink> _stances = new Dictionary<(IFaction, IFaction), StanceLink>();

	internal static void AutoGeneratedStaticCollectObjectsFactionManagerStancesData(object o, List<object> collectedObjects)
	{
		((FactionManagerStancesData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_stances);
	}

	internal static object AutoGeneratedGetMemberValue_stances(object o)
	{
		return ((FactionManagerStancesData)o)._stances;
	}

	public Dictionary<(IFaction, IFaction), StanceLink>.ValueCollection GetStanceLinks()
	{
		return _stances.Values;
	}

	internal StanceLink GetStance(IFaction faction1, IFaction faction2)
	{
		(IFaction, IFaction) key = GetKey(faction1, faction2);
		_stances.TryGetValue(key, out var value);
		return value;
	}

	public void AddStance(StanceLink stance)
	{
		(IFaction, IFaction) key = GetKey(stance);
		if (_stances.ContainsKey(key))
		{
			_stances[key] = stance;
		}
		else
		{
			_stances.Add(key, stance);
		}
	}

	public void RemoveStance(StanceLink stance)
	{
		(IFaction, IFaction) key = GetKey(stance);
		if (_stances.ContainsKey(key))
		{
			_stances.Remove(key);
		}
	}

	private (IFaction, IFaction) GetKey(IFaction faction1, IFaction faction2)
	{
		if (faction1.Id < faction2.Id)
		{
			return (faction1, faction2);
		}
		return (faction2, faction1);
	}

	private (IFaction, IFaction) GetKey(StanceLink stance)
	{
		return GetKey(stance.Faction1, stance.Faction2);
	}
}
