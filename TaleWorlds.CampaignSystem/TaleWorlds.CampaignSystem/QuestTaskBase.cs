using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class QuestTaskBase
{
	public enum FinishStates
	{
		Success,
		Fail,
		Cancel
	}

	protected Dictionary<EventDelegateType, TriggerDelegateType> EvenTriggerDelegates;

	private DialogFlow _dialogFlow;

	private Action _onSucceededAction;

	private Action _onFailedAction;

	private Action _onCanceledAction;

	[SaveableProperty(1)]
	public bool IsLogged { get; set; }

	[SaveableProperty(2)]
	public bool IsActive { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsQuestTaskBase(object o, List<object> collectedObjects)
	{
		((QuestTaskBase)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
	}

	internal static object AutoGeneratedGetMemberValueIsLogged(object o)
	{
		return ((QuestTaskBase)o).IsLogged;
	}

	internal static object AutoGeneratedGetMemberValueIsActive(object o)
	{
		return ((QuestTaskBase)o).IsActive;
	}

	public QuestTaskBase(DialogFlow dialogFlow = null, Action onSucceedAction = null, Action onFailedAction = null, Action onCanceledAction = null)
	{
		IsLogged = true;
		IsActive = true;
		_onSucceededAction = onSucceedAction;
		_onFailedAction = onFailedAction;
		_onCanceledAction = onCanceledAction;
		_dialogFlow = dialogFlow;
		if (_dialogFlow != null)
		{
			Campaign.Current.ConversationManager.AddDialogFlow(_dialogFlow, this);
		}
	}

	public void Finish(FinishStates finishState)
	{
		IsActive = false;
		if (_dialogFlow != null)
		{
			Campaign.Current.ConversationManager.RemoveRelatedLines(this);
			_dialogFlow = null;
		}
		switch (finishState)
		{
		case FinishStates.Success:
			if (_onSucceededAction != null)
			{
				_onSucceededAction();
			}
			break;
		case FinishStates.Fail:
			if (_onFailedAction != null)
			{
				_onFailedAction();
			}
			break;
		case FinishStates.Cancel:
			if (_onCanceledAction != null)
			{
				_onCanceledAction();
			}
			break;
		}
		_onSucceededAction = null;
		_onFailedAction = null;
		_onCanceledAction = null;
		CampaignEventDispatcher.Instance.RemoveListeners(this);
		OnFinished();
	}

	public void AddTaskDialogs()
	{
		if (_dialogFlow != null)
		{
			Campaign.Current.ConversationManager.AddDialogFlow(_dialogFlow, this);
		}
	}

	protected virtual void OnFinished()
	{
	}

	public virtual void SetReferences()
	{
	}

	public void AddTaskDialogOnGameLoaded(DialogFlow dialogFlow)
	{
		if (IsActive)
		{
			_dialogFlow = dialogFlow;
		}
	}

	public void AddTaskBehaviorsOnGameLoad(Action onSucceededAction = null, Action onFailedAction = null, Action onCanceledAction = null)
	{
		_onSucceededAction = onSucceededAction;
		_onFailedAction = onFailedAction;
		_onCanceledAction = onCanceledAction;
	}
}
