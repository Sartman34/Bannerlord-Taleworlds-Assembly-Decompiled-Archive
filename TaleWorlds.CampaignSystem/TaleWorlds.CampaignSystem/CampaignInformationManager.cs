using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.LogEntries;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class CampaignInformationManager
{
	public enum NoticeType
	{
		None,
		WarAnnouncement,
		PeaceAnnouncement,
		ChangeSettlementOwner,
		FortificationIsCaptured,
		HeroChangedFaction,
		BarterAnnouncement
	}

	[SaveableField(10)]
	private List<InformationData> _mapNotices;

	[CachedData]
	private bool _isSessionLaunched;

	private void MapNoticeRemoved(InformationData obj)
	{
		int num = -1;
		for (int i = 0; i < _mapNotices.Count; i++)
		{
			if (obj == _mapNotices[i])
			{
				num = i;
			}
		}
		if (num >= 0)
		{
			_mapNotices.RemoveAt(num);
		}
	}

	public CampaignInformationManager()
	{
		_mapNotices = new List<InformationData>();
	}

	internal void NewLogEntryAdded(LogEntry log)
	{
		if (_isSessionLaunched && log is IChatNotification { IsVisibleNotification: not false } chatNotification)
		{
			InformationManager.DisplayMessage(new InformationMessage
			{
				Information = chatNotification.GetNotificationText().ToString(),
				Color = Color.FromUint(Campaign.Current.Models.DiplomacyModel.GetNotificationColor(chatNotification.NotificationType))
			});
		}
	}

	private void AddInformationData(InformationData informationData)
	{
		_mapNotices?.Add(informationData);
		MBInformationManager.AddNotice(informationData);
	}

	internal void RegisterEvents()
	{
		_isSessionLaunched = true;
		MBInformationManager.OnRemoveMapNotice += MapNoticeRemoved;
	}

	internal void DeRegisterEvents()
	{
		_isSessionLaunched = false;
		MBInformationManager.OnRemoveMapNotice -= MapNoticeRemoved;
	}

	public void OnGameLoaded()
	{
		_mapNotices.RemoveAll((InformationData t) => t == null || !t.IsValid());
		foreach (InformationData mapNotice in _mapNotices)
		{
			MBInformationManager.AddNotice(mapNotice);
		}
	}

	public void NewMapNoticeAdded(InformationData informationData)
	{
		AddInformationData(informationData);
	}

	public bool InformationDataExists<T>(Func<T, bool> predicate) where T : InformationData
	{
		foreach (InformationData mapNotice in _mapNotices)
		{
			if (mapNotice is T arg && (predicate == null || predicate(arg)))
			{
				return true;
			}
		}
		return false;
	}

	internal static void AutoGeneratedStaticCollectObjectsCampaignInformationManager(object o, List<object> collectedObjects)
	{
		((CampaignInformationManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_mapNotices);
	}

	internal static object AutoGeneratedGetMemberValue_mapNotices(object o)
	{
		return ((CampaignInformationManager)o)._mapNotices;
	}
}
