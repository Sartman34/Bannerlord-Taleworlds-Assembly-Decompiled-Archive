using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class FactionManager
{
	[SaveableField(20)]
	private FactionManagerStancesData _stances;

	public static FactionManager Instance => Campaign.Current.FactionManager;

	internal static void AutoGeneratedStaticCollectObjectsFactionManager(object o, List<object> collectedObjects)
	{
		((FactionManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_stances);
	}

	internal static object AutoGeneratedGetMemberValue_stances(object o)
	{
		return ((FactionManager)o)._stances;
	}

	public FactionManager()
	{
		_stances = new FactionManagerStancesData();
	}

	internal void AfterLoad()
	{
		foreach (StanceLink item in _stances.GetStanceLinks().ToList())
		{
			if (item.Faction1 != item.Faction2)
			{
				if (!item.Faction1.IsEliminated && !item.Faction2.IsEliminated)
				{
					AddStanceToFaction(item.Faction1, item);
					AddStanceToFaction(item.Faction2, item);
				}
				else
				{
					RemoveStance(item);
				}
			}
		}
		if (!MBSaveLoad.LastLoadedGameVersion.IsOlderThan(ApplicationVersion.FromString("v1.2.9.35637")))
		{
			return;
		}
		foreach (StanceLink stanceLink in _stances.GetStanceLinks())
		{
			if (stanceLink.IsAtConstantWar && !stanceLink.IsAtWar)
			{
				stanceLink.StanceType = StanceType.War;
			}
		}
	}

	internal StanceLink GetStanceLinkInternal(IFaction faction1, IFaction faction2)
	{
		StanceLink stanceLink = _stances.GetStance(faction1, faction2);
		if (stanceLink == null)
		{
			bool flag = (faction1.IsBanditFaction && !faction2.IsBanditFaction) || (!faction1.IsBanditFaction && faction2.IsBanditFaction);
			stanceLink = new StanceLink(flag ? StanceType.War : StanceType.Neutral, faction1, faction2, flag);
			AddStance(faction1, faction2, stanceLink);
		}
		return stanceLink;
	}

	private void AddStance(IFaction faction1, IFaction faction2, StanceLink stanceLink)
	{
		if (!faction1.IsEliminated && !faction2.IsEliminated)
		{
			_stances.AddStance(stanceLink);
			AddStanceToFaction(faction1, stanceLink);
			AddStanceToFaction(faction2, stanceLink);
		}
	}

	private void RemoveStance(StanceLink stance)
	{
		_stances.RemoveStance(stance);
		RemoveStanceFromFaction(stance.Faction1, stance);
		RemoveStanceFromFaction(stance.Faction2, stance);
	}

	private static void AddStanceToFaction(IFaction faction1, StanceLink stanceLink)
	{
		if (faction1 is Kingdom kingdom)
		{
			kingdom.AddStanceInternal(stanceLink);
		}
		else
		{
			(faction1 as Clan).AddStanceInternal(stanceLink);
		}
	}

	private static void RemoveStanceFromFaction(IFaction faction1, StanceLink stanceLink)
	{
		if (faction1 is Kingdom kingdom)
		{
			kingdom.RemoveStanceInternal(stanceLink);
		}
		else
		{
			(faction1 as Clan).RemoveStanceInternal(stanceLink);
		}
	}

	private static StanceLink SetStance(IFaction faction1, IFaction faction2, StanceType stanceType)
	{
		StanceLink stanceLinkInternal = Instance.GetStanceLinkInternal(faction1, faction2);
		stanceLinkInternal.StanceType = stanceType;
		return stanceLinkInternal;
	}

	public static void DeclareAlliance(IFaction faction1, IFaction faction2)
	{
		if (faction1 != faction2 && !faction1.IsBanditFaction && !faction2.IsBanditFaction)
		{
			SetStance(faction1, faction2, StanceType.Neutral);
		}
	}

	public static void DeclareWar(IFaction faction1, IFaction faction2, bool isAtConstantWar = false)
	{
		if (faction1 != faction2 && !faction1.IsBanditFaction && !faction2.IsBanditFaction)
		{
			SetStance(faction1, faction2, StanceType.War).IsAtConstantWar = isAtConstantWar;
		}
	}

	public static void SetNeutral(IFaction faction1, IFaction faction2)
	{
		if (faction1 != faction2 && !faction1.IsBanditFaction && !faction2.IsBanditFaction)
		{
			Instance.GetStanceLinkInternal(faction1, faction2).StanceType = StanceType.Neutral;
		}
	}

	public static bool IsAtWarAgainstFaction(IFaction faction1, IFaction faction2)
	{
		if (faction1 == null || faction2 == null || faction1 == faction2 || faction1.IsEliminated || faction2.IsEliminated)
		{
			return false;
		}
		return Instance.GetStanceLinkInternal(faction1, faction2).IsAtWar;
	}

	public static bool IsAlliedWithFaction(IFaction faction1, IFaction faction2)
	{
		if (faction1 == null || faction2 == null || faction1.IsEliminated || faction2.IsEliminated)
		{
			return false;
		}
		if (faction1 == faction2)
		{
			return true;
		}
		return Instance.GetStanceLinkInternal(faction1, faction2)?.IsAllied ?? false;
	}

	public static bool IsNeutralWithFaction(IFaction faction1, IFaction faction2)
	{
		if (faction1 == null || faction2 == null || faction1 == faction2 || faction1.IsEliminated || faction2.IsEliminated)
		{
			return false;
		}
		StanceLink stanceLinkInternal = Instance.GetStanceLinkInternal(faction1, faction2);
		if (stanceLinkInternal == null && ((faction1.IsBanditFaction && !faction2.IsBanditFaction && !faction2.IsOutlaw) || (faction2.IsBanditFaction && !faction1.IsBanditFaction && !faction1.IsOutlaw)))
		{
			return false;
		}
		return stanceLinkInternal?.IsNeutral ?? true;
	}

	internal void RemoveFactionsFromCampaignWars(IFaction faction1)
	{
		if (faction1.MapFaction == faction1)
		{
			StanceLink[] array = faction1.Stances.ToArray();
			foreach (StanceLink stance in array)
			{
				RemoveStance(stance);
			}
		}
	}

	public static IEnumerable<IFaction> GetEnemyFactions(IFaction faction)
	{
		foreach (StanceLink stance in faction.Stances)
		{
			if (stance.IsAtWar)
			{
				IFaction faction2 = null;
				if (stance.Faction1 == faction)
				{
					faction2 = stance.Faction2;
				}
				else if (stance.Faction2 == faction)
				{
					faction2 = stance.Faction1;
				}
				if (faction2.IsMapFaction && !faction2.IsBanditFaction)
				{
					yield return faction2;
				}
			}
		}
	}

	public static IEnumerable<Kingdom> GetEnemyKingdoms(Kingdom faction)
	{
		foreach (StanceLink stance in faction.Stances)
		{
			if (stance.IsAtWar)
			{
				IFaction faction2 = null;
				if (stance.Faction1 == faction)
				{
					faction2 = stance.Faction2;
				}
				else if (stance.Faction2 == faction)
				{
					faction2 = stance.Faction1;
				}
				if (faction2 != null && faction2.IsKingdomFaction)
				{
					yield return faction2 as Kingdom;
				}
			}
		}
	}

	public static int GetRelationBetweenClans(Clan clan1, Clan clan2)
	{
		float num = 0f;
		float num2 = 1E-05f;
		if ((clan1.Lords.Count == 0 && clan1.IsBanditFaction && !clan2.IsBanditFaction) || (clan2.Lords.Count == 0 && clan2.IsBanditFaction && !clan1.IsBanditFaction))
		{
			return -10;
		}
		foreach (Hero lord in clan1.Lords)
		{
			if (!(lord.Age > (float)Campaign.Current.Models.AgeModel.HeroComesOfAge))
			{
				continue;
			}
			foreach (Hero lord2 in clan2.Lords)
			{
				if (lord2.Age > (float)Campaign.Current.Models.AgeModel.HeroComesOfAge)
				{
					float num3 = 0.1f;
					if (lord == clan1.Leader)
					{
						num3 += 0.2f;
					}
					else if (lord == clan1.Leader?.Spouse)
					{
						num3 += 0.05f;
					}
					if (lord2 == clan2.Leader)
					{
						num3 += 0.2f;
					}
					else if (lord2 == clan2.Leader?.Spouse)
					{
						num3 += 0.05f;
					}
					if (lord == clan1.Leader && lord2 == clan2.Leader)
					{
						num3 *= 20f;
					}
					int baseHeroRelation = lord.GetBaseHeroRelation(lord2);
					num += num3 * (float)baseHeroRelation;
					num2 += num3;
				}
			}
		}
		return (int)(num / num2);
	}
}
