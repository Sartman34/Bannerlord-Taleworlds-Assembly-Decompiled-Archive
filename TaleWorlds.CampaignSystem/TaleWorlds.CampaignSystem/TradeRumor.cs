using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class TradeRumor
{
	[SaveableField(0)]
	public readonly Settlement Settlement;

	[SaveableField(1)]
	public readonly ItemObject ItemCategory;

	[SaveableField(2)]
	public readonly int BuyPrice;

	[SaveableField(3)]
	public readonly int SellPrice;

	[SaveableProperty(4)]
	public CampaignTime RumorEndTime { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsTradeRumor(object o, List<object> collectedObjects)
	{
		((TradeRumor)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(Settlement);
		collectedObjects.Add(ItemCategory);
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(RumorEndTime, collectedObjects);
	}

	internal static object AutoGeneratedGetMemberValueRumorEndTime(object o)
	{
		return ((TradeRumor)o).RumorEndTime;
	}

	internal static object AutoGeneratedGetMemberValueSettlement(object o)
	{
		return ((TradeRumor)o).Settlement;
	}

	internal static object AutoGeneratedGetMemberValueItemCategory(object o)
	{
		return ((TradeRumor)o).ItemCategory;
	}

	internal static object AutoGeneratedGetMemberValueBuyPrice(object o)
	{
		return ((TradeRumor)o).BuyPrice;
	}

	internal static object AutoGeneratedGetMemberValueSellPrice(object o)
	{
		return ((TradeRumor)o).SellPrice;
	}

	public bool IsCompatable(ItemObject item)
	{
		if (item == ItemCategory)
		{
			return true;
		}
		return false;
	}

	public bool IsExpired()
	{
		return RumorEndTime.IsPast;
	}

	public TradeRumor(Settlement settlement, ItemObject itemCategory, int buyPrice, int sellPrice, int rumorLife)
	{
		Settlement = settlement;
		ItemCategory = itemCategory;
		BuyPrice = buyPrice;
		SellPrice = sellPrice;
		RumorEndTime = CampaignTime.DaysFromNow(rumorLife);
	}
}
