using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Election;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class KingdomManager
{
	[SaveableField(2)]
	public float PlayerMercenaryServiceNextRenewDay = -1f;

	[SaveableField(3)]
	public Hero PrisonerLordRansomOffered;

	public MBCampaignEvent QuarterHourlyTickEvent;

	internal static void AutoGeneratedStaticCollectObjectsKingdomManager(object o, List<object> collectedObjects)
	{
		((KingdomManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(PrisonerLordRansomOffered);
	}

	internal static object AutoGeneratedGetMemberValuePlayerMercenaryServiceNextRenewDay(object o)
	{
		return ((KingdomManager)o).PlayerMercenaryServiceNextRenewDay;
	}

	internal static object AutoGeneratedGetMemberValuePrisonerLordRansomOffered(object o)
	{
		return ((KingdomManager)o).PrisonerLordRansomOffered;
	}

	public void OnSessionStart()
	{
		foreach (Clan item in Clan.All)
		{
			item.UpdateStrength();
		}
		if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.0"))
		{
			for (int i = 0; i < Kingdom.All.Count; i++)
			{
				ExpelConstantWarClansFromKingdom(Kingdom.All[i]);
			}
		}
	}

	internal void RegisterEvents()
	{
		CampaignEvents.SiegeCompletedEvent.AddNonSerializedListener(this, SiegeCompleted);
		CampaignEvents.RaidCompletedEvent.AddNonSerializedListener(this, RaidCompleted);
		CampaignEvents.WarDeclared.AddNonSerializedListener(this, OnWarDeclared);
		CampaignEvents.DailyTickClanEvent.AddNonSerializedListener(this, DailyTickClan);
		CampaignEvents.HourlyTickClanEvent.AddNonSerializedListener(this, HourlyTickClan);
		QuarterHourlyTickEvent = CampaignPeriodicEventManager.CreatePeriodicEvent(CampaignTime.Hours(0.25f), CampaignTime.Zero);
		QuarterHourlyTickEvent.AddHandler(QuarterHourlyTick);
	}

	private void ExpelConstantWarClansFromKingdom(Kingdom kingdom)
	{
		for (int num = kingdom.Clans.Count - 1; num >= 0; num--)
		{
			Clan clan = kingdom.Clans[num];
			if (clan.GetStanceWith(kingdom).IsAtConstantWar)
			{
				for (int num2 = clan.WarPartyComponents.Count - 1; num2 >= 0; num2--)
				{
					WarPartyComponent warPartyComponent = clan.WarPartyComponents[num2];
					if (warPartyComponent.MobileParty.MapEvent != null)
					{
						warPartyComponent.MobileParty.MapEvent.FinalizeEvent();
					}
				}
				ChangeKingdomAction.ApplyByLeaveWithRebellionAgainstKingdom(clan, showNotification: false);
			}
		}
	}

	private void OnWarDeclared(IFaction factionDeclaringWar, IFaction factionDeclaredWarAgainst, DeclareWarAction.DeclareWarDetail detail)
	{
		if (factionDeclaringWar is Clan)
		{
			(factionDeclaringWar as Clan).Aggressiveness += (100f - factionDeclaredWarAgainst.Aggressiveness) * 0.5f;
		}
		else
		{
			(factionDeclaringWar as Kingdom).Aggressiveness += (100f - factionDeclaredWarAgainst.Aggressiveness) * 0.5f;
		}
	}

	private void HourlyTickClan(Clan clan)
	{
		clan.UpdateStrength();
	}

	private void DailyTickClan(Clan clan)
	{
		clan.Aggressiveness += -1f;
		if (clan.Kingdom != null && clan.Kingdom.RulingClan == clan)
		{
			DailyTickKingdom(clan.Kingdom);
		}
	}

	private void DailyTickKingdom(Kingdom kingdom)
	{
		kingdom.Aggressiveness += -1f;
	}

	public void CreateKingdom(TextObject kingdomName, TextObject informalName, CultureObject culture, Clan founderClan, MBReadOnlyList<PolicyObject> initialPolicies = null, TextObject encyclopediaText = null, TextObject encyclopediaTitle = null, TextObject encyclopediaRulerTitle = null)
	{
		Kingdom kingdom = Kingdom.CreateKingdom("new_kingdom");
		if (encyclopediaTitle == null)
		{
			encyclopediaTitle = new TextObject("{=ZOEamqUd}Kingdom of {NAME}");
			encyclopediaTitle.SetTextVariable("NAME", founderClan.Name);
		}
		if (encyclopediaText == null)
		{
			encyclopediaText = ((!founderClan.IsRebelClan) ? new TextObject("{=21yUheIy}The {KINGDOM_NAME} was created in {CREATION_YEAR} by {RULER.NAME}, a rising {CULTURE_ADJECTIVE} warlord.") : new TextObject("{=drZC1Frp}The {KINGDOM_NAME} was created in {CREATION_YEAR} by {RULER.NAME}, leader of a group of {CULTURE_ADJECTIVE} rebels."));
			encyclopediaText.SetTextVariable("KINGDOM_NAME", encyclopediaTitle);
			encyclopediaText.SetTextVariable("CREATION_YEAR", CampaignTime.Now.GetYear);
			encyclopediaText.SetTextVariable("CULTURE_ADJECTIVE", FactionHelper.GetAdjectiveForFactionCulture(culture));
			StringHelpers.SetCharacterProperties("RULER", founderClan.Leader.CharacterObject, encyclopediaText);
		}
		if (encyclopediaRulerTitle == null)
		{
			Kingdom kingdom2 = Kingdom.All.FirstOrDefault((Kingdom x) => x.Culture == culture);
			encyclopediaRulerTitle = ((kingdom2 != null) ? kingdom2.EncyclopediaRulerTitle : TextObject.Empty);
		}
		kingdom.InitializeKingdom(kingdomName, informalName, culture, founderClan.Banner, founderClan.Color, founderClan.Color2, founderClan.HomeSettlement, encyclopediaText, encyclopediaTitle, encyclopediaRulerTitle);
		List<IFaction> list = new List<IFaction>(FactionManager.GetEnemyFactions(founderClan));
		ChangeKingdomAction.ApplyByCreateKingdom(founderClan, kingdom, showNotification: false);
		foreach (IFaction item in list)
		{
			DeclareWarAction.ApplyByKingdomCreation(kingdom, item);
		}
		if (initialPolicies != null)
		{
			foreach (PolicyObject initialPolicy in initialPolicies)
			{
				kingdom.AddPolicy(initialPolicy);
			}
		}
		CampaignEventDispatcher.Instance.OnKingdomCreated(kingdom);
	}

	public void AbdicateTheThrone(Kingdom kingdom)
	{
		Clan rulingClan = kingdom.RulingClan;
		if (kingdom.Clans.Count((Clan x) => !x.IsUnderMercenaryService) > 1)
		{
			float num = float.MinValue;
			Clan clan = null;
			foreach (Clan clan2 in kingdom.Clans)
			{
				if (clan2 != rulingClan && clan2.Influence > num)
				{
					num = clan2.Influence;
					clan = clan2;
				}
			}
			ChangeRulingClanAction.Apply(kingdom, clan);
			KingSelectionKingdomDecision kingSelectionKingdomDecision = new KingSelectionKingdomDecision(rulingClan, rulingClan);
			kingSelectionKingdomDecision.IsEnforced = true;
			kingdom.AddDecision(kingSelectionKingdomDecision, ignoreInfluenceCost: true);
			return;
		}
		ChangeKingdomAction.ApplyByLeaveKingdom(kingdom.RulingClan);
		foreach (Kingdom item in Kingdom.All)
		{
			if (item.IsAtWarWith(kingdom))
			{
				if (!item.IsAtWarWith(rulingClan))
				{
					DeclareWarAction.ApplyByDefault(item, rulingClan);
				}
			}
			else if (item.IsAtWarWith(rulingClan))
			{
				Debug.FailedAssert("Deviation in peace states between ruling clan & kingdom in abdication", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\KingdomManager.cs", "AbdicateTheThrone", 224);
			}
		}
		if (!kingdom.IsEliminated)
		{
			DestroyKingdomAction.Apply(kingdom);
		}
	}

	public void RaidCompleted(BattleSideEnum winnerSide, RaidEventComponent raidEvent)
	{
		MapEvent mapEvent = raidEvent.MapEvent;
		switch (winnerSide)
		{
		case BattleSideEnum.Attacker:
		{
			foreach (PartyBase involvedParty in mapEvent.InvolvedParties)
			{
				if (involvedParty.MobileParty != null && involvedParty.MobileParty.DefaultBehavior == AiBehavior.RaidSettlement && (involvedParty.MobileParty.Army == null || involvedParty.MobileParty.Army.LeaderParty == involvedParty.MobileParty))
				{
					involvedParty.MobileParty.Ai.SetMoveModeHold();
				}
			}
			break;
		}
		case BattleSideEnum.Defender:
			foreach (PartyBase involvedParty2 in mapEvent.InvolvedParties)
			{
				if (involvedParty2.MobileParty != null && !involvedParty2.MobileParty.IsMilitia && involvedParty2.MobileParty.DefaultBehavior == AiBehavior.DefendSettlement && (involvedParty2.MobileParty.Army == null || involvedParty2.MobileParty.Army.LeaderParty == involvedParty2.MobileParty))
				{
					involvedParty2.MobileParty.Ai.SetMoveModeHold();
				}
			}
			ChangeVillageStateAction.ApplyBySettingToNormal(mapEvent.MapEventSettlement);
			break;
		}
	}

	public void SiegeCompleted(Settlement settlement, MobileParty capturerParty, bool isWin, MapEvent.BattleTypes battleType)
	{
		if (!((battleType == MapEvent.BattleTypes.SallyOut || battleType == MapEvent.BattleTypes.Siege) && isWin))
		{
			return;
		}
		Hero newOwner = ((capturerParty.MapFaction is Kingdom kingdom) ? kingdom.Leader : capturerParty.MapFaction.Leader);
		if (capturerParty.LeaderHero != null)
		{
			GainKingdomInfluenceAction.ApplyForCapturingEnemySettlement(capturerParty, Campaign.Current.Models.DiplomacyModel.GetInfluenceAwardForSettlementCapturer(settlement));
		}
		List<MobileParty> list = new List<MobileParty>();
		foreach (PartyBase item in settlement.SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType())
		{
			list.Add(item.MobileParty);
		}
		settlement.SiegeEvent.BesiegerCamp.RemoveAllSiegeParties();
		settlement.Party.MemberRoster.Clear();
		ChangeOwnerOfSettlementAction.ApplyBySiege(newOwner, capturerParty.Party.Owner, settlement);
		foreach (MobileParty item2 in list)
		{
			EnterSettlementAction.ApplyForParty(item2, settlement);
			if ((item2.Army == null || item2.Army.LeaderParty == item2) && item2 != MobileParty.MainParty)
			{
				item2.Ai.DisableForHours(10);
			}
		}
		if (list.ContainsQ(MobileParty.MainParty))
		{
			Debug.Print(string.Concat(capturerParty.StringId, ": ", capturerParty.Name, " has captured ", settlement, " successfully.\n"), 0, Debug.DebugColor.Green, 64uL);
		}
	}

	private static void UpdateLordPartyVariablesRelatedToSettlements()
	{
		TWParallel.For(0, Settlement.All.Count, delegate(int startInclusive, int endExclusive)
		{
			for (int i = startInclusive; i < endExclusive; i++)
			{
				Settlement.All[i].NumberOfLordPartiesTargeting = 0;
			}
		});
		foreach (MobileParty allLordParty in MobileParty.AllLordParties)
		{
			if (allLordParty.Army != null && allLordParty.Army.LeaderParty != allLordParty)
			{
				continue;
			}
			if (allLordParty.TargetSettlement != null && allLordParty.CurrentSettlement != allLordParty.TargetSettlement)
			{
				allLordParty.TargetSettlement.NumberOfLordPartiesTargeting += ((allLordParty.Army == null) ? 1 : (1 + allLordParty.Army.LeaderParty.AttachedParties.Count));
				continue;
			}
			Settlement lastVisitedSettlement = allLordParty.LastVisitedSettlement;
			if (lastVisitedSettlement != null && lastVisitedSettlement.IsVillage && allLordParty.LastVisitedSettlement.Position2D.DistanceSquared(allLordParty.Position2D) < 2f)
			{
				allLordParty.LastVisitedSettlement.NumberOfLordPartiesTargeting += ((allLordParty.Army == null) ? 1 : (1 + allLordParty.Army.LeaderParty.AttachedParties.Count));
			}
		}
	}

	public void RelinquishSettlementOwnership(Settlement settlement)
	{
		SettlementClaimantDecision kingdomDecision = new SettlementClaimantDecision(settlement.OwnerClan, settlement, null, settlement.OwnerClan);
		settlement.OwnerClan.Kingdom.AddDecision(kingdomDecision, ignoreInfluenceCost: true);
	}

	public void GiftSettlementOwnership(Settlement settlement, Clan receiverClan)
	{
		int relationChange = (settlement.IsTown ? Campaign.Current.Models.DiplomacyModel.GiftingTownRelationshipBonus : Campaign.Current.Models.DiplomacyModel.GiftingCastleRelationshipBonus);
		ChangeRelationAction.ApplyRelationChangeBetweenHeroes(settlement.OwnerClan.Leader, receiverClan.Leader, relationChange);
		ChangeOwnerOfSettlementAction.ApplyByGift(settlement, receiverClan.Leader);
	}

	public IEnumerable<Clan> GetEligibleClansForSettlementOwnershipGift(Settlement settlement)
	{
		Kingdom kingdom = settlement.OwnerClan.Kingdom;
		foreach (Clan clan in kingdom.Clans)
		{
			if (clan != kingdom.RulingClan)
			{
				yield return clan;
			}
		}
	}

	private static void QuarterHourlyTick(MBCampaignEvent campaignevent, object[] delegateparams)
	{
		UpdateLordPartyVariablesRelatedToSettlements();
	}

	public int GetMercenaryWageAmount(Hero hero)
	{
		return (int)hero.Clan.Influence * hero.Clan.MercenaryAwardMultiplier;
	}
}
