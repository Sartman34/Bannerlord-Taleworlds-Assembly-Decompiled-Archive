using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class CampaignPeriodicEventManager
{
	internal class PeriodicTicker<T>
	{
		private readonly List<T> _currentFrameToTickListFlattened = new List<T>();

		private bool _doParallel;

		private MBReadOnlyList<T> _list;

		private Action<T> _action;

		[SaveableProperty(1)]
		private double TickDebt { get; set; }

		[SaveableProperty(2)]
		private int Index { get; set; }

		internal PeriodicTicker()
		{
			TickDebt = 0.0;
			Index = -1;
		}

		internal void Initialize(MBReadOnlyList<T> list, Action<T> action, bool doParallel)
		{
			_list = list;
			_action = action;
			_doParallel = doParallel;
		}

		internal void PeriodicTickSome(double timeUnitsElapsed)
		{
			if (_list.Count == 0)
			{
				TickDebt = 0.0;
				return;
			}
			TickDebt += timeUnitsElapsed * (double)_list.Count;
			while (TickDebt > 1.0)
			{
				Index++;
				if (Index >= _list.Count)
				{
					Index = 0;
				}
				if (_doParallel)
				{
					_currentFrameToTickListFlattened.Add(_list[Index]);
				}
				else
				{
					_action(_list[Index]);
				}
				TickDebt -= 1.0;
			}
			if (!_doParallel || _currentFrameToTickListFlattened.Count <= 0)
			{
				return;
			}
			TWParallel.For(0, _currentFrameToTickListFlattened.Count, delegate(int startInclusive, int endExclusive)
			{
				for (int i = startInclusive; i < endExclusive; i++)
				{
					_action(_currentFrameToTickListFlattened[i]);
				}
			}, 1);
			_currentFrameToTickListFlattened.Clear();
		}

		public override string ToString()
		{
			return "PeriodicTicker  @" + ((Index == -1) ? "null" : _list[Index].ToString()) + "\t\t(" + Index + " / " + _list.Count + ")";
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}
	}

	[SaveableField(120)]
	private PeriodicTicker<MobileParty> _mobilePartyHourlyTicker;

	[SaveableField(130)]
	private PeriodicTicker<MobileParty> _mobilePartyDailyTicker;

	[SaveableField(140)]
	private PeriodicTicker<MobileParty> _dailyTickPartyTicker;

	[SaveableField(150)]
	private PeriodicTicker<MobileParty> _hourlyTickMobilePartyTicker;

	[SaveableField(160)]
	private PeriodicTicker<Settlement> _hourlyTickSettlementTicker;

	[SaveableField(170)]
	private PeriodicTicker<Clan> _hourlyTickClanTicker;

	[SaveableField(180)]
	private PeriodicTicker<Town> _dailyTickTownTicker;

	[SaveableField(190)]
	private PeriodicTicker<Settlement> _dailyTickSettlementTicker;

	[SaveableField(200)]
	private PeriodicTicker<Hero> _dailyTickHeroTicker;

	[SaveableField(210)]
	private PeriodicTicker<Clan> _dailyTickClanTicker;

	[SaveableField(320)]
	private PeriodicTicker<MobileParty> _quarterDailyPartyTicker;

	[SaveableField(230)]
	private PeriodicTicker<MobileParty> _caravanMobilePartyPartialHourlyAiEventTicker;

	[SaveableField(250)]
	private PeriodicTicker<MobileParty> _garrisonMobilePartyPartialHourlyAiEventTicker;

	[SaveableField(260)]
	private PeriodicTicker<MobileParty> _militiaMobilePartyPartialHourlyAiEventTicker;

	[SaveableField(270)]
	private PeriodicTicker<MobileParty> _villagerMobilePartyPartialHourlyAiEventTicker;

	[SaveableField(280)]
	private PeriodicTicker<MobileParty> _customMobilePartyPartialHourlyAiEventTicker;

	[SaveableField(290)]
	private PeriodicTicker<MobileParty> _banditMobilePartyPartialHourlyAiEventTicker;

	[SaveableField(300)]
	private PeriodicTicker<MobileParty> _lordMobilePartyPartialHourlyAiEventTicker;

	[SaveableField(310)]
	private PeriodicTicker<MobileParty> _partiesWithoutPartyComponentsPartialHourlyAiEventTicker;

	private static readonly CampaignTime MinimumPeriodicEventInterval = CampaignTime.Hours(0.05f);

	private CampaignTime _lastGameTime = CampaignTime.Zero;

	private double DeltaHours => CampaignTime.DeltaTime.ToHours;

	private double DeltaDays => CampaignTime.DeltaTime.ToDays;

	internal CampaignPeriodicEventManager()
	{
		_mobilePartyHourlyTicker = new PeriodicTicker<MobileParty>();
		_mobilePartyDailyTicker = new PeriodicTicker<MobileParty>();
		_hourlyTickMobilePartyTicker = new PeriodicTicker<MobileParty>();
		_hourlyTickSettlementTicker = new PeriodicTicker<Settlement>();
		_dailyTickSettlementTicker = new PeriodicTicker<Settlement>();
		_hourlyTickClanTicker = new PeriodicTicker<Clan>();
		_dailyTickPartyTicker = new PeriodicTicker<MobileParty>();
		_dailyTickTownTicker = new PeriodicTicker<Town>();
		_dailyTickHeroTicker = new PeriodicTicker<Hero>();
		_dailyTickClanTicker = new PeriodicTicker<Clan>();
		_quarterDailyPartyTicker = new PeriodicTicker<MobileParty>();
		_caravanMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
		_garrisonMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
		_militiaMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
		_villagerMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
		_customMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
		_banditMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
		_lordMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
		_partiesWithoutPartyComponentsPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
	}

	[LoadInitializationCallback]
	private void OnLoad(MetaData metaData)
	{
		if (_caravanMobilePartyPartialHourlyAiEventTicker == null)
		{
			_caravanMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
			_garrisonMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
			_militiaMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
			_villagerMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
			_customMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
			_banditMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
			_lordMobilePartyPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
			_partiesWithoutPartyComponentsPartialHourlyAiEventTicker = new PeriodicTicker<MobileParty>();
			_quarterDailyPartyTicker = new PeriodicTicker<MobileParty>();
		}
	}

	internal void InitializeTickers()
	{
		MBList<Settlement> list = ShuffleSettlements();
		_mobilePartyHourlyTicker.Initialize(MobileParty.All, delegate(MobileParty x)
		{
			x.HourlyTick();
		}, doParallel: false);
		_mobilePartyDailyTicker.Initialize(MobileParty.All, delegate(MobileParty x)
		{
			x.DailyTick();
		}, doParallel: false);
		_hourlyTickMobilePartyTicker.Initialize(MobileParty.All, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.HourlyTickParty(x);
		}, doParallel: false);
		_hourlyTickSettlementTicker.Initialize(list, delegate(Settlement x)
		{
			CampaignEventDispatcher.Instance.HourlyTickSettlement(x);
		}, doParallel: false);
		_dailyTickSettlementTicker.Initialize(list, delegate(Settlement x)
		{
			CampaignEventDispatcher.Instance.DailyTickSettlement(x);
		}, doParallel: false);
		_hourlyTickClanTicker.Initialize(Clan.All, delegate(Clan x)
		{
			CampaignEventDispatcher.Instance.HourlyTickClan(x);
		}, doParallel: false);
		_dailyTickPartyTicker.Initialize(MobileParty.All, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.DailyTickParty(x);
		}, doParallel: false);
		_dailyTickTownTicker.Initialize(Town.AllTowns, delegate(Town x)
		{
			CampaignEventDispatcher.Instance.DailyTickTown(x);
		}, doParallel: false);
		_dailyTickHeroTicker.Initialize(Hero.AllAliveHeroes, delegate(Hero x)
		{
			CampaignEventDispatcher.Instance.DailyTickHero(x);
		}, doParallel: false);
		_dailyTickClanTicker.Initialize(Clan.All, delegate(Clan x)
		{
			CampaignEventDispatcher.Instance.DailyTickClan(x);
		}, doParallel: false);
		bool doParallel = false;
		_caravanMobilePartyPartialHourlyAiEventTicker.Initialize(MobileParty.AllCaravanParties, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.TickPartialHourlyAi(x);
		}, doParallel);
		_garrisonMobilePartyPartialHourlyAiEventTicker.Initialize(MobileParty.AllGarrisonParties, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.TickPartialHourlyAi(x);
		}, doParallel);
		_militiaMobilePartyPartialHourlyAiEventTicker.Initialize(MobileParty.AllMilitiaParties, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.TickPartialHourlyAi(x);
		}, doParallel);
		_villagerMobilePartyPartialHourlyAiEventTicker.Initialize(MobileParty.AllVillagerParties, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.TickPartialHourlyAi(x);
		}, doParallel);
		_customMobilePartyPartialHourlyAiEventTicker.Initialize(MobileParty.AllCustomParties, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.TickPartialHourlyAi(x);
		}, doParallel);
		_banditMobilePartyPartialHourlyAiEventTicker.Initialize(MobileParty.AllBanditParties, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.TickPartialHourlyAi(x);
		}, doParallel);
		_lordMobilePartyPartialHourlyAiEventTicker.Initialize(MobileParty.AllLordParties, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.TickPartialHourlyAi(x);
		}, doParallel);
		_partiesWithoutPartyComponentsPartialHourlyAiEventTicker.Initialize(MobileParty.AllPartiesWithoutPartyComponent, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.TickPartialHourlyAi(x);
		}, doParallel);
		_quarterDailyPartyTicker.Initialize(MobileParty.All, delegate(MobileParty x)
		{
			CampaignEventDispatcher.Instance.QuarterDailyPartyTick(x);
		}, doParallel: false);
	}

	private MBList<Settlement> ShuffleSettlements()
	{
		Stack<Settlement> stack = new Stack<Settlement>();
		Stack<Settlement> stack2 = new Stack<Settlement>();
		Stack<Settlement> stack3 = new Stack<Settlement>();
		Stack<Settlement> stack4 = new Stack<Settlement>();
		foreach (Settlement item in Settlement.All)
		{
			if (item.IsVillage)
			{
				stack.Push(item);
			}
			else if (item.IsCastle)
			{
				stack2.Push(item);
			}
			else if (item.IsTown)
			{
				stack3.Push(item);
			}
			else
			{
				stack4.Push(item);
			}
		}
		float num = Settlement.All.Count;
		float num2 = (float)stack.Count / num;
		float num3 = (float)stack2.Count / num;
		float num4 = (float)stack3.Count / num;
		float num5 = (float)stack4.Count / num;
		float num6 = num2;
		float num7 = num3;
		float num8 = num4;
		float num9 = num5;
		MBList<Settlement> mBList = new MBList<Settlement>();
		while (mBList.Count != Settlement.All.Count)
		{
			num6 += num2;
			if (num6 >= 1f && !stack.IsEmpty())
			{
				mBList.Add(stack.Pop());
				num6 -= 1f;
			}
			num7 += num3;
			if (num7 >= 1f && !stack2.IsEmpty())
			{
				mBList.Add(stack2.Pop());
				num7 -= 1f;
			}
			num8 += num4;
			if (num8 >= 1f && !stack3.IsEmpty())
			{
				mBList.Add(stack3.Pop());
				num8 -= 1f;
			}
			num9 += num5;
			if (num9 >= 1f && !stack4.IsEmpty())
			{
				mBList.Add(stack4.Pop());
				num9 -= 1f;
			}
		}
		return mBList;
	}

	internal void TickPeriodicEvents()
	{
		PeriodicHourlyTick();
		PeriodicDailyTick();
		PeriodicQuarterDailyTick();
	}

	private void PeriodicQuarterDailyTick()
	{
		double deltaDays = DeltaDays;
		_quarterDailyPartyTicker.PeriodicTickSome(deltaDays * 4.0);
	}

	internal void MobilePartyHourlyTick()
	{
		_mobilePartyHourlyTicker.PeriodicTickSome(DeltaHours);
	}

	internal void TickPartialHourlyAi()
	{
		_caravanMobilePartyPartialHourlyAiEventTicker.PeriodicTickSome(DeltaHours * 0.99);
		_garrisonMobilePartyPartialHourlyAiEventTicker.PeriodicTickSome(DeltaHours * 0.99);
		_militiaMobilePartyPartialHourlyAiEventTicker.PeriodicTickSome(DeltaHours * 0.99);
		_villagerMobilePartyPartialHourlyAiEventTicker.PeriodicTickSome(DeltaHours * 0.99);
		_customMobilePartyPartialHourlyAiEventTicker.PeriodicTickSome(DeltaHours * 0.99);
		_banditMobilePartyPartialHourlyAiEventTicker.PeriodicTickSome(DeltaHours * 0.99);
		_lordMobilePartyPartialHourlyAiEventTicker.PeriodicTickSome(DeltaHours * 0.99);
		_partiesWithoutPartyComponentsPartialHourlyAiEventTicker.PeriodicTickSome(DeltaHours * 0.99);
	}

	private void PeriodicHourlyTick()
	{
		double deltaHours = DeltaHours;
		_hourlyTickMobilePartyTicker.PeriodicTickSome(deltaHours);
		_hourlyTickSettlementTicker.PeriodicTickSome(deltaHours);
		_hourlyTickClanTicker.PeriodicTickSome(deltaHours);
	}

	private void PeriodicDailyTick()
	{
		double deltaDays = DeltaDays;
		_dailyTickPartyTicker.PeriodicTickSome(deltaDays);
		_mobilePartyDailyTicker.PeriodicTickSome(deltaDays);
		_dailyTickTownTicker.PeriodicTickSome(deltaDays);
		_dailyTickSettlementTicker.PeriodicTickSome(deltaDays);
		_dailyTickHeroTicker.PeriodicTickSome(deltaDays);
		_dailyTickClanTicker.PeriodicTickSome(deltaDays);
	}

	public static MBCampaignEvent CreatePeriodicEvent(CampaignTime triggerPeriod, CampaignTime initialWait)
	{
		MBCampaignEvent mBCampaignEvent = new MBCampaignEvent(triggerPeriod, initialWait);
		Campaign.Current.CustomPeriodicCampaignEvents.Add(mBCampaignEvent);
		return mBCampaignEvent;
	}

	private void DeleteMarkedPeriodicEvents()
	{
		List<MBCampaignEvent> customPeriodicCampaignEvents = Campaign.Current.CustomPeriodicCampaignEvents;
		for (int num = customPeriodicCampaignEvents.Count - 1; num >= 0; num--)
		{
			if (customPeriodicCampaignEvents[num].isEventDeleted)
			{
				customPeriodicCampaignEvents.RemoveAt(num);
			}
		}
	}

	internal void OnTick(float dt)
	{
		SignalPeriodicEvents();
	}

	private void SignalPeriodicEvents()
	{
		if ((_lastGameTime + MinimumPeriodicEventInterval).IsPast)
		{
			_lastGameTime = CampaignTime.Now;
			List<MBCampaignEvent> customPeriodicCampaignEvents = Campaign.Current.CustomPeriodicCampaignEvents;
			for (int num = customPeriodicCampaignEvents.Count - 1; num >= 0; num--)
			{
				customPeriodicCampaignEvents[num].CheckUpdate();
			}
			DeleteMarkedPeriodicEvents();
			(Game.Current.GameStateManager.ActiveState as MapState)?.OnSignalPeriodicEvents();
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsCampaignPeriodicEventManager(object o, List<object> collectedObjects)
	{
		((CampaignPeriodicEventManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_mobilePartyHourlyTicker);
		collectedObjects.Add(_mobilePartyDailyTicker);
		collectedObjects.Add(_dailyTickPartyTicker);
		collectedObjects.Add(_hourlyTickMobilePartyTicker);
		collectedObjects.Add(_hourlyTickSettlementTicker);
		collectedObjects.Add(_hourlyTickClanTicker);
		collectedObjects.Add(_dailyTickTownTicker);
		collectedObjects.Add(_dailyTickSettlementTicker);
		collectedObjects.Add(_dailyTickHeroTicker);
		collectedObjects.Add(_dailyTickClanTicker);
		collectedObjects.Add(_quarterDailyPartyTicker);
		collectedObjects.Add(_caravanMobilePartyPartialHourlyAiEventTicker);
		collectedObjects.Add(_garrisonMobilePartyPartialHourlyAiEventTicker);
		collectedObjects.Add(_militiaMobilePartyPartialHourlyAiEventTicker);
		collectedObjects.Add(_villagerMobilePartyPartialHourlyAiEventTicker);
		collectedObjects.Add(_customMobilePartyPartialHourlyAiEventTicker);
		collectedObjects.Add(_banditMobilePartyPartialHourlyAiEventTicker);
		collectedObjects.Add(_lordMobilePartyPartialHourlyAiEventTicker);
		collectedObjects.Add(_partiesWithoutPartyComponentsPartialHourlyAiEventTicker);
	}

	internal static object AutoGeneratedGetMemberValue_mobilePartyHourlyTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._mobilePartyHourlyTicker;
	}

	internal static object AutoGeneratedGetMemberValue_mobilePartyDailyTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._mobilePartyDailyTicker;
	}

	internal static object AutoGeneratedGetMemberValue_dailyTickPartyTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._dailyTickPartyTicker;
	}

	internal static object AutoGeneratedGetMemberValue_hourlyTickMobilePartyTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._hourlyTickMobilePartyTicker;
	}

	internal static object AutoGeneratedGetMemberValue_hourlyTickSettlementTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._hourlyTickSettlementTicker;
	}

	internal static object AutoGeneratedGetMemberValue_hourlyTickClanTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._hourlyTickClanTicker;
	}

	internal static object AutoGeneratedGetMemberValue_dailyTickTownTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._dailyTickTownTicker;
	}

	internal static object AutoGeneratedGetMemberValue_dailyTickSettlementTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._dailyTickSettlementTicker;
	}

	internal static object AutoGeneratedGetMemberValue_dailyTickHeroTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._dailyTickHeroTicker;
	}

	internal static object AutoGeneratedGetMemberValue_dailyTickClanTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._dailyTickClanTicker;
	}

	internal static object AutoGeneratedGetMemberValue_quarterDailyPartyTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._quarterDailyPartyTicker;
	}

	internal static object AutoGeneratedGetMemberValue_caravanMobilePartyPartialHourlyAiEventTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._caravanMobilePartyPartialHourlyAiEventTicker;
	}

	internal static object AutoGeneratedGetMemberValue_garrisonMobilePartyPartialHourlyAiEventTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._garrisonMobilePartyPartialHourlyAiEventTicker;
	}

	internal static object AutoGeneratedGetMemberValue_militiaMobilePartyPartialHourlyAiEventTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._militiaMobilePartyPartialHourlyAiEventTicker;
	}

	internal static object AutoGeneratedGetMemberValue_villagerMobilePartyPartialHourlyAiEventTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._villagerMobilePartyPartialHourlyAiEventTicker;
	}

	internal static object AutoGeneratedGetMemberValue_customMobilePartyPartialHourlyAiEventTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._customMobilePartyPartialHourlyAiEventTicker;
	}

	internal static object AutoGeneratedGetMemberValue_banditMobilePartyPartialHourlyAiEventTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._banditMobilePartyPartialHourlyAiEventTicker;
	}

	internal static object AutoGeneratedGetMemberValue_lordMobilePartyPartialHourlyAiEventTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._lordMobilePartyPartialHourlyAiEventTicker;
	}

	internal static object AutoGeneratedGetMemberValue_partiesWithoutPartyComponentsPartialHourlyAiEventTicker(object o)
	{
		return ((CampaignPeriodicEventManager)o)._partiesWithoutPartyComponentsPartialHourlyAiEventTicker;
	}
}
