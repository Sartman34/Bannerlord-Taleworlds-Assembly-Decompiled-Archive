using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Overlay;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public abstract class QuestBase : MBObjectBase
{
	internal enum QuestStates
	{
		Ongoing,
		Finalized
	}

	public enum QuestCompleteDetails
	{
		Invalid,
		Success,
		Cancel,
		Fail,
		Timeout,
		FailWithBetrayal
	}

	[SaveableField(100)]
	private QuestStates _questState;

	protected DialogFlow OfferDialogFlow;

	protected DialogFlow DiscussDialogFlow;

	protected DialogFlow QuestCharacterDialogFlow;

	[SaveableField(102)]
	private MBList<QuestTaskBase> _taskList;

	[SaveableField(103)]
	private readonly MBList<JournalLog> _journalEntries;

	[SaveableField(106)]
	private Hero _questGiver;

	[SaveableField(107)]
	public readonly int RewardGold;

	[SaveableProperty(101)]
	public CampaignTime QuestDueTime { get; protected set; }

	public MBReadOnlyList<QuestTaskBase> TaskList => _taskList;

	public MBReadOnlyList<JournalLog> JournalEntries => _journalEntries;

	[SaveableProperty(104)]
	public bool IsTrackEnabled { get; private set; }

	public bool IsOngoing => _questState == QuestStates.Ongoing;

	public bool IsFinalized => _questState == QuestStates.Finalized;

	public bool IsThereDiscussDialogFlow => DiscussDialogFlow != null;

	public Hero QuestGiver
	{
		get
		{
			return _questGiver;
		}
		private set
		{
			_questGiver = value;
		}
	}

	public abstract TextObject Title { get; }

	public abstract bool IsRemainingTimeHidden { get; }

	public virtual int RelationshipChangeWithQuestGiver { get; protected set; }

	public virtual bool IsSpecialQuest => false;

	protected virtual TextObject TargetHeroDisappearedLogText => new TextObject("{=ZfRmHMJJ}{QUEST_TARGET.LINK} has lost the struggle against {?QUEST_TARGET.GENDER}her{?}his{\\?} rivals and decided to left the realm. Your agreement with {QUEST_GIVER.LINK} has been canceled and your service is no longer needed to solve the issue.");

	protected virtual TextObject TargetHeroDiedLogText => new TextObject("{=WKIqnKtu}{QUEST_TARGET.LINK} has died and your agreement with {QUEST_GIVER.LINK} has been canceled. Your service is no longer needed to solve the issue.");

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_taskList);
		collectedObjects.Add(_journalEntries);
		collectedObjects.Add(_questGiver);
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(QuestDueTime, collectedObjects);
	}

	internal static object AutoGeneratedGetMemberValueQuestDueTime(object o)
	{
		return ((QuestBase)o).QuestDueTime;
	}

	internal static object AutoGeneratedGetMemberValueIsTrackEnabled(object o)
	{
		return ((QuestBase)o).IsTrackEnabled;
	}

	internal static object AutoGeneratedGetMemberValueRewardGold(object o)
	{
		return ((QuestBase)o).RewardGold;
	}

	internal static object AutoGeneratedGetMemberValue_questState(object o)
	{
		return ((QuestBase)o)._questState;
	}

	internal static object AutoGeneratedGetMemberValue_taskList(object o)
	{
		return ((QuestBase)o)._taskList;
	}

	internal static object AutoGeneratedGetMemberValue_journalEntries(object o)
	{
		return ((QuestBase)o)._journalEntries;
	}

	internal static object AutoGeneratedGetMemberValue_questGiver(object o)
	{
		return ((QuestBase)o)._questGiver;
	}

	protected abstract void SetDialogs();

	protected QuestBase(string questId, Hero questGiver, CampaignTime duration, int rewardGold)
		: base(questId)
	{
		QuestGiver = questGiver;
		QuestDueTime = duration;
		IsTrackEnabled = true;
		RewardGold = rewardGold;
		_taskList = new MBList<QuestTaskBase>();
		_journalEntries = new MBList<JournalLog>();
	}

	public void StartQuest()
	{
		_questState = QuestStates.Ongoing;
		OnStartQuest();
		RegisterEvents();
		MapEventHelper.OnConversationEnd();
		if (QuestGiver != null && !Campaign.Current.QuestManager.TrackedObjects.ContainsKey(QuestGiver))
		{
			Campaign.Current.QuestManager.AddTrackedObjectForQuest(QuestGiver, this);
		}
		CampaignEventDispatcher.Instance.OnQuestStarted(this);
	}

	public void CompleteQuestWithSuccess()
	{
		OnCompleteWithSuccess();
		FinalizeQuest();
		CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestCompleteDetails.Success);
		AfterFinalize();
	}

	public void CompleteQuestWithTimeOut(TextObject timeOutLog = null)
	{
		bool completeWithSuccess = false;
		bool doNotResolveTheQuest = false;
		OnBeforeTimedOut(ref completeWithSuccess, ref doNotResolveTheQuest);
		if (doNotResolveTheQuest)
		{
			return;
		}
		if (!completeWithSuccess)
		{
			if (timeOutLog != null)
			{
				AddLog(timeOutLog);
			}
			OnTimedOut();
			FinalizeQuest();
			CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestCompleteDetails.Timeout);
			AfterFinalize();
		}
		else
		{
			CompleteQuestWithSuccess();
		}
	}

	public void CompleteQuestWithFail(TextObject cancelLog = null)
	{
		if (cancelLog != null)
		{
			AddLog(cancelLog);
		}
		OnFailed();
		FinalizeQuest();
		CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestCompleteDetails.Fail);
		AfterFinalize();
	}

	public void CompleteQuestWithBetrayal(TextObject betrayLog = null)
	{
		if (betrayLog != null)
		{
			AddLog(betrayLog);
		}
		OnBetrayal();
		FinalizeQuest();
		CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestCompleteDetails.FailWithBetrayal);
		AfterFinalize();
	}

	public void CompleteQuestWithCancel(TextObject cancelLog = null)
	{
		if (cancelLog != null)
		{
			AddLog(cancelLog);
		}
		OnCanceled();
		FinalizeQuest();
		CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestCompleteDetails.Cancel);
		AfterFinalize();
	}

	private void FinalizeQuest()
	{
		foreach (QuestTaskBase task in _taskList)
		{
			if (task.IsActive)
			{
				task.Finish(QuestTaskBase.FinishStates.Cancel);
			}
		}
		_questState = QuestStates.Finalized;
		OnFinalize();
		ClearRelatedFields();
		OfferDialogFlow = null;
		DiscussDialogFlow = null;
		QuestCharacterDialogFlow = null;
		Campaign.Current.QuestManager.OnQuestFinalized(this);
	}

	private void AfterFinalize()
	{
		RemoveAllTrackedObjects();
	}

	protected void InitializeQuestOnCreation()
	{
		AddDialogs();
	}

	public void InitializeQuestOnLoadWithQuestManager()
	{
		RegisterEvents();
		InitializeQuestOnGameLoad();
		AddDialogs();
	}

	internal void HourlyTickWithQuestManager()
	{
		HourlyTick();
	}

	protected void AddTask(QuestTaskBase task)
	{
		_taskList.Add(task);
		task.SetReferences();
	}

	public JournalLog AddLog(TextObject text, bool hideInformation = false)
	{
		JournalLog journalLog = new JournalLog(CampaignTime.Now, text);
		_journalEntries.Add(journalLog);
		CampaignEventDispatcher.Instance.OnQuestLogAdded(this, hideInformation);
		return journalLog;
	}

	public JournalLog AddDiscreteLog(TextObject text, TextObject taskName, int currentProgress, int targetProgress, TextObject shortText = null, bool hideInformation = false)
	{
		JournalLog journalLog = new JournalLog(CampaignTime.Now, text, taskName, currentProgress, targetProgress, LogType.Discreate);
		_journalEntries.Add(journalLog);
		CampaignEventDispatcher.Instance.OnQuestLogAdded(this, hideInformation);
		return journalLog;
	}

	public JournalLog AddTwoWayContinuousLog(TextObject text, TextObject taskName, int currentProgress, int range, bool hideInformation = false)
	{
		JournalLog journalLog = new JournalLog(CampaignTime.Now, text, taskName, currentProgress, range, LogType.TwoWayContinuous);
		_journalEntries.Add(journalLog);
		CampaignEventDispatcher.Instance.OnQuestLogAdded(this, hideInformation);
		return journalLog;
	}

	protected void RemoveLog(JournalLog logToRemove)
	{
		if (_journalEntries.Contains(logToRemove))
		{
			_journalEntries.Remove(logToRemove);
		}
		else
		{
			Debug.FailedAssert("Quest log requested to be removed cant be found.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestBase.cs", "RemoveLog", 276);
		}
	}

	protected void UpdateQuestTaskStage(JournalLog questLog, int currentProgress)
	{
		foreach (JournalLog journalEntry in _journalEntries)
		{
			if (journalEntry == questLog)
			{
				journalEntry.UpdateCurrentProgress(currentProgress);
			}
		}
	}

	public virtual GameMenuOption.IssueQuestFlags IsLocationTrackedByQuest(Location location)
	{
		return GameMenuOption.IssueQuestFlags.None;
	}

	public virtual int GetCurrentProgress()
	{
		return -1;
	}

	public virtual int GetMaxProgress()
	{
		return 1;
	}

	public override string ToString()
	{
		return base.StringId;
	}

	public virtual string GetPrefabName()
	{
		return "bd_target_board_2";
	}

	private void AddDialogs()
	{
		if (OfferDialogFlow != null)
		{
			Campaign.Current.ConversationManager.AddDialogFlow(OfferDialogFlow, this);
		}
		if (DiscussDialogFlow != null)
		{
			Campaign.Current.ConversationManager.AddDialogFlow(DiscussDialogFlow, this);
		}
		if (QuestCharacterDialogFlow != null)
		{
			Campaign.Current.ConversationManager.AddDialogFlow(QuestCharacterDialogFlow, this);
		}
	}

	private void ClearRelatedFields()
	{
		CampaignEventDispatcher.Instance.RemoveListeners(this);
		foreach (QuestTaskBase task in _taskList)
		{
			CampaignEventDispatcher.Instance.RemoveListeners(task);
		}
		Campaign.Current.ConversationManager.RemoveRelatedLines(this);
		Campaign.Current.GameMenuManager.RemoveRelatedGameMenus(this);
		Campaign.Current.GameMenuManager.RemoveRelatedGameMenuOptions(this);
	}

	private void RemoveAllTrackedObjects()
	{
		Campaign.Current.QuestManager.RemoveAllTrackedObjectsForQuest(this);
	}

	public void AddTrackedObject(ITrackableCampaignObject trackedObject)
	{
		Campaign.Current.QuestManager.AddTrackedObjectForQuest(trackedObject, this);
		if (IsTrackEnabled)
		{
			Campaign.Current.VisualTrackerManager.RegisterObject(trackedObject);
		}
	}

	public void RemoveTrackedObject(ITrackableCampaignObject trackedObject)
	{
		Campaign.Current.QuestManager.RemoveTrackedObjectForQuest(trackedObject, this);
	}

	public bool IsTracked(ITrackableCampaignObject o)
	{
		if (Campaign.Current.QuestManager.TrackedObjects.ContainsKey(o))
		{
			return Campaign.Current.QuestManager.TrackedObjects[o].Contains(this);
		}
		return false;
	}

	public void ToggleTrackedObjects()
	{
		IsTrackEnabled = !IsTrackEnabled;
		List<ITrackableCampaignObject> allTrackedObjectsOfAQuest = Campaign.Current.QuestManager.GetAllTrackedObjectsOfAQuest(this);
		if (IsTrackEnabled)
		{
			foreach (ITrackableCampaignObject item in allTrackedObjectsOfAQuest)
			{
				Campaign.Current.VisualTrackerManager.RegisterObject(item);
			}
			return;
		}
		foreach (ITrackableCampaignObject item2 in allTrackedObjectsOfAQuest)
		{
			Campaign.Current.VisualTrackerManager.RemoveTrackedObject(item2);
		}
	}

	public void AddGameMenu(string menuId, TextObject menuText, OnInitDelegate initDelegate, GameOverlays.MenuOverlayType overlay = GameOverlays.MenuOverlayType.None, GameMenu.MenuFlags menuFlags = GameMenu.MenuFlags.None)
	{
		GameMenu gameMenu = new GameMenu(menuId);
		gameMenu.Initialize(menuText, initDelegate, overlay, menuFlags, this);
		Campaign.Current.GameMenuManager.AddGameMenu(gameMenu);
	}

	public void AddGameMenuOption(string menuId, string optionId, TextObject optionText, GameMenuOption.OnConditionDelegate condition, GameMenuOption.OnConsequenceDelegate consequence, bool Isleave = false, int index = -1)
	{
		(Campaign.Current.GameMenuManager.GetGameMenu(menuId) ?? throw new KeyNotFoundException()).AddOption(optionId, optionText, condition, consequence, index, Isleave, isRepeatable: false, this);
	}

	public void ChangeQuestDueTime(CampaignTime questDueTime)
	{
		QuestDueTime = questDueTime;
	}

	protected abstract void InitializeQuestOnGameLoad();

	protected abstract void HourlyTick();

	protected virtual void RegisterEvents()
	{
	}

	protected virtual void OnStartQuest()
	{
	}

	protected virtual void OnCompleteWithSuccess()
	{
	}

	protected virtual void OnFinalize()
	{
	}

	public virtual void OnFailed()
	{
	}

	protected virtual void OnTimedOut()
	{
	}

	protected virtual void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
	{
	}

	protected virtual void OnBetrayal()
	{
	}

	public virtual void OnCanceled()
	{
	}

	public virtual bool QuestPreconditions()
	{
		return false;
	}

	public virtual void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
	{
	}

	public virtual void OnHeroCanMarryInfoIsRequested(Hero hero, ref bool result)
	{
	}

	public virtual void OnHeroCanLeadPartyInfoIsRequested(Hero hero, ref bool result)
	{
	}

	public virtual void OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(Hero hero, ref bool result)
	{
	}

	public virtual void OnHeroCanDieInfoIsRequested(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
	{
		result = !hero.IsNotable || hero != QuestGiver;
	}

	public virtual void OnHeroCanBecomePrisonerInfoIsRequested(Hero hero, ref bool result)
	{
	}

	public virtual void OnHeroCanBeSelectedInInventoryInfoIsRequested(Hero hero, ref bool result)
	{
	}

	public virtual void OnHeroCanMoveToSettlementInfoIsRequested(Hero hero, ref bool result)
	{
	}
}
