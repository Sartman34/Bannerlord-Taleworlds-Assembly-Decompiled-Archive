using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

public class VisualTrackerManager
{
	[SaveableField(0)]
	private readonly MBList<TrackedObject> _trackedObjects;

	public MBReadOnlyList<TrackedObject> TrackedObjects => _trackedObjects;

	[CachedData]
	public int TrackedObjectsVersion { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsVisualTrackerManager(object o, List<object> collectedObjects)
	{
		((VisualTrackerManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_trackedObjects);
	}

	internal static object AutoGeneratedGetMemberValue_trackedObjects(object o)
	{
		return ((VisualTrackerManager)o)._trackedObjects;
	}

	public VisualTrackerManager()
	{
		_trackedObjects = new MBList<TrackedObject>();
		Initialize();
	}

	[LoadInitializationCallback]
	private void OnLoad(MetaData metaData)
	{
		Initialize();
	}

	private void Initialize()
	{
		TrackedObjectsVersion = 0;
		CheckObjectValidities();
	}

	private void CheckObjectValidities()
	{
		foreach (TrackedObject item in TrackedObjects.ToList())
		{
			if (item.Object == null)
			{
				_trackedObjects.Remove(item);
			}
		}
		TrackedObjectsVersion++;
	}

	public void RegisterObject(ITrackableCampaignObject obj)
	{
		if (obj == null)
		{
			return;
		}
		bool flag = false;
		foreach (TrackedObject trackedObject in TrackedObjects)
		{
			if (trackedObject.Object == obj)
			{
				flag = true;
				trackedObject.TrackerCount++;
			}
		}
		if (!flag)
		{
			TrackedObject item = new TrackedObject(obj);
			_trackedObjects.Add(item);
			TrackedObjectsVersion++;
		}
	}

	public bool CheckTracked(ITrackableBase obj)
	{
		foreach (TrackedObject trackedObject in TrackedObjects)
		{
			if (trackedObject.Object == obj)
			{
				return true;
			}
		}
		return false;
	}

	public bool CheckTracked(BasicCharacterObject agentCharacter)
	{
		foreach (TrackedObject trackedObject in _trackedObjects)
		{
			if (trackedObject.Object.CheckTracked(agentCharacter))
			{
				return true;
			}
		}
		return false;
	}

	public void RemoveTrackedObject(ITrackableBase obj, bool forceRemove = false)
	{
		for (int num = _trackedObjects.Count - 1; num >= 0; num--)
		{
			TrackedObject trackedObject = _trackedObjects[num];
			if (trackedObject.Object == obj)
			{
				trackedObject.TrackerCount--;
				if (trackedObject.TrackerCount <= 0 || forceRemove)
				{
					_trackedObjects.RemoveAt(num);
					TrackedObjectsVersion++;
				}
			}
		}
	}

	private void ResetTracker()
	{
		_trackedObjects.Clear();
		TrackedObjectsVersion++;
	}
}
