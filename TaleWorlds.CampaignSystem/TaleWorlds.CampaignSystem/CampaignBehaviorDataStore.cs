using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem;

internal class CampaignBehaviorDataStore
{
	internal class BehaviorSaveData : IDataStore
	{
		[SaveableField(0)]
		private Dictionary<string, object> _records = new Dictionary<string, object>();

		private readonly bool _isSaving;

		public bool IsSaving => _isSaving;

		public bool IsLoading => !_isSaving;

		public BehaviorSaveData(bool isSaving)
		{
			_isSaving = isSaving;
		}

		public bool SyncData<T>(string key, ref T data)
		{
			if (IsSaving)
			{
				_records.Add(key, data);
				return true;
			}
			if (_records.TryGetValue(key, out var value))
			{
				data = (T)value;
				return true;
			}
			return false;
		}

		internal static void AutoGeneratedStaticCollectObjectsBehaviorSaveData(object o, List<object> collectedObjects)
		{
			((BehaviorSaveData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(_records);
		}

		internal static object AutoGeneratedGetMemberValue_records(object o)
		{
			return ((BehaviorSaveData)o)._records;
		}
	}

	[SaveableField(1)]
	private readonly Dictionary<string, BehaviorSaveData> _behaviorDict;

	internal CampaignBehaviorDataStore()
	{
		_behaviorDict = new Dictionary<string, BehaviorSaveData>();
	}

	internal void SaveBehaviorData(CampaignBehaviorBase campaignBehavior)
	{
		string stringId = campaignBehavior.StringId;
		BehaviorSaveData behaviorSaveData = new BehaviorSaveData(isSaving: true);
		campaignBehavior.SyncData(behaviorSaveData);
		if (_behaviorDict.ContainsKey(stringId))
		{
			Debug.FailedAssert("trying to save multiple behaviors with the same stringid: " + stringId, "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\CampaignBehaviorDataStore.cs", "SaveBehaviorData", 75);
			_behaviorDict[stringId] = behaviorSaveData;
		}
		else
		{
			_behaviorDict.Add(stringId, behaviorSaveData);
		}
	}

	internal void ClearBehaviorData()
	{
		_behaviorDict.Clear();
	}

	internal void LoadBehaviorData(CampaignBehaviorBase campaignBehavior)
	{
		string stringId = campaignBehavior.StringId;
		if (_behaviorDict.TryGetValue(stringId, out var value))
		{
			campaignBehavior.SyncData(value);
			return;
		}
		List<KeyValuePair<string, BehaviorSaveData>> list = _behaviorDict.ToList();
		string name = campaignBehavior.GetType().Name;
		foreach (KeyValuePair<string, BehaviorSaveData> item in list)
		{
			if (item.Key.Contains(name))
			{
				_behaviorDict.Remove(item.Key);
				_behaviorDict.Add(stringId, item.Value);
				campaignBehavior.SyncData(item.Value);
				break;
			}
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsCampaignBehaviorDataStore(object o, List<object> collectedObjects)
	{
		((CampaignBehaviorDataStore)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_behaviorDict);
	}

	internal static object AutoGeneratedGetMemberValue_behaviorDict(object o)
	{
		return ((CampaignBehaviorDataStore)o)._behaviorDict;
	}
}
