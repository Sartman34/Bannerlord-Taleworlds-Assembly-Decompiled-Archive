using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements;

public class VillageMarketData : IMarketData
{
	[SaveableField(1)]
	private Village _village;

	private Settlement _closestTown;

	private Settlement ClosestTown
	{
		get
		{
			if (_closestTown == null)
			{
				_closestTown = SettlementHelper.FindNearestTown(null, _village.Settlement);
			}
			return _closestTown;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsVillageMarketData(object o, List<object> collectedObjects)
	{
		((VillageMarketData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_village);
	}

	internal static object AutoGeneratedGetMemberValue_village(object o)
	{
		return ((VillageMarketData)o)._village;
	}

	public VillageMarketData(Village village)
	{
		_village = village;
	}

	public int GetPrice(ItemObject item, MobileParty tradingParty, bool isSelling, PartyBase merchantParty)
	{
		return GetPrice(new EquipmentElement(item), tradingParty, isSelling, merchantParty);
	}

	public int GetPrice(EquipmentElement itemRosterElement, MobileParty tradingParty, bool isSelling, PartyBase merchantParty)
	{
		ItemData categoryData = (_village.TradeBound ?? ClosestTown).Town.MarketData.GetCategoryData(itemRosterElement.Item.GetItemCategory());
		return Campaign.Current.Models.TradeItemPriceFactorModel.GetPrice(itemRosterElement, tradingParty, merchantParty, isSelling, categoryData.InStoreValue, categoryData.Supply, categoryData.Demand);
	}
}
