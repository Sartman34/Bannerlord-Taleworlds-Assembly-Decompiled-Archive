using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements;

public class Hideout : SettlementComponent, ISpottable
{
	[SaveableField(200)]
	private CampaignTime _nextPossibleAttackTime;

	[SaveableField(201)]
	private bool _isSpotted;

	public CampaignTime NextPossibleAttackTime => _nextPossibleAttackTime;

	public static MBReadOnlyList<Hideout> All => Campaign.Current.AllHideouts;

	public bool IsInfested => base.Owner.Settlement.Parties.CountQ((MobileParty x) => x.IsBandit) >= Campaign.Current.Models.BanditDensityModel.NumberOfMinimumBanditPartiesInAHideoutToInfestIt;

	public string SceneName { get; private set; }

	public IFaction MapFaction
	{
		get
		{
			foreach (MobileParty party in base.Settlement.Parties)
			{
				if (party.IsBandit)
				{
					return party.ActualClan;
				}
			}
			foreach (Clan item in Clan.All)
			{
				if (item.IsBanditFaction)
				{
					return item;
				}
			}
			return null;
		}
	}

	public bool IsSpotted
	{
		get
		{
			return _isSpotted;
		}
		set
		{
			_isSpotted = value;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsHideout(object o, List<object> collectedObjects)
	{
		((Hideout)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(_nextPossibleAttackTime, collectedObjects);
	}

	internal static object AutoGeneratedGetMemberValue_nextPossibleAttackTime(object o)
	{
		return ((Hideout)o)._nextPossibleAttackTime;
	}

	internal static object AutoGeneratedGetMemberValue_isSpotted(object o)
	{
		return ((Hideout)o)._isSpotted;
	}

	public void UpdateNextPossibleAttackTime()
	{
		_nextPossibleAttackTime = CampaignTime.Now + CampaignTime.Hours(12f);
	}

	public IEnumerable<PartyBase> GetDefenderParties(MapEvent.BattleTypes battleType)
	{
		yield return base.Settlement.Party;
		foreach (MobileParty party in base.Settlement.Parties)
		{
			if (party.IsBandit || party.IsBanditBossParty)
			{
				yield return party.Party;
			}
		}
	}

	public PartyBase GetNextDefenderParty(ref int partyIndex, MapEvent.BattleTypes battleType)
	{
		partyIndex++;
		if (partyIndex == 0)
		{
			return base.Settlement.Party;
		}
		for (int i = partyIndex - 1; i < base.Settlement.Parties.Count; i++)
		{
			MobileParty mobileParty = base.Settlement.Parties[i];
			if (mobileParty.IsBandit || mobileParty.IsBanditBossParty)
			{
				partyIndex = i + 1;
				return mobileParty.Party;
			}
		}
		return null;
	}

	public void SetScene(string sceneName)
	{
		SceneName = sceneName;
	}

	public Hideout()
	{
		IsSpotted = false;
	}

	public override void OnPartyEntered(MobileParty mobileParty)
	{
		base.OnPartyEntered(mobileParty);
		UpdateOwnership();
		if (mobileParty.MapFaction.IsBanditFaction)
		{
			mobileParty.BanditPartyComponent.SetHomeHideout(base.Owner.Settlement.Hideout);
		}
	}

	public override void OnPartyLeft(MobileParty mobileParty)
	{
		UpdateOwnership();
		if (base.Owner.Settlement.Parties.Count == 0)
		{
			OnHideoutIsEmpty();
		}
	}

	public override void OnRelatedPartyRemoved(MobileParty mobileParty)
	{
		if (base.Owner.Settlement.Parties.Count == 0)
		{
			OnHideoutIsEmpty();
		}
	}

	private void OnHideoutIsEmpty()
	{
		IsSpotted = false;
		base.Owner.Settlement.IsVisible = false;
		CampaignEventDispatcher.Instance.OnHideoutDeactivated(base.Settlement);
	}

	public override void OnInit()
	{
		base.Owner.Settlement.IsVisible = false;
	}

	public override void Deserialize(MBObjectManager objectManager, XmlNode node)
	{
		base.BackgroundCropPosition = float.Parse(node.Attributes["background_crop_position"].Value);
		base.BackgroundMeshName = node.Attributes["background_mesh"].Value;
		base.WaitMeshName = node.Attributes["wait_mesh"].Value;
		base.Deserialize(objectManager, node);
		if (node.Attributes["scene_name"] != null)
		{
			SceneName = node.Attributes["scene_name"].InnerText;
		}
	}

	private void UpdateOwnership()
	{
		if (base.Owner.MemberRoster.Count == 0 || base.Owner.Settlement.Parties.All((MobileParty x) => x.Party.Owner != base.Owner.Owner))
		{
			base.Owner.Settlement.Party.SetVisualAsDirty();
		}
	}

	protected override void OnInventoryUpdated(ItemRosterElement item, int count)
	{
	}
}
