using System.Collections.Generic;
using System.Linq;
using System.Xml;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements.Buildings;
using TaleWorlds.CampaignSystem.Settlements.Workshops;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements;

public class Town : Fief
{
	public struct SellLog
	{
		[SaveableProperty(200)]
		public ItemCategory Category { get; private set; }

		[SaveableProperty(201)]
		public int Number { get; private set; }

		public static void AutoGeneratedStaticCollectObjectsSellLog(object o, List<object> collectedObjects)
		{
			((SellLog)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(Category);
		}

		internal static object AutoGeneratedGetMemberValueCategory(object o)
		{
			return ((SellLog)o).Category;
		}

		internal static object AutoGeneratedGetMemberValueNumber(object o)
		{
			return ((SellLog)o).Number;
		}

		public SellLog(ItemCategory category, int count)
		{
			Category = category;
			Number = count;
		}
	}

	private const int InitialTownGold = 20000;

	private const int HighProsperityThreshold = 5000;

	private const int MidProsperityThreshold = 2000;

	[SaveableField(1017)]
	private float _prosperity;

	[CachedData]
	public MatrixFrame[] BesiegerCampPositions1;

	[CachedData]
	public MatrixFrame[] BesiegerCampPositions2;

	[SaveableField(1000)]
	private int _wallLevel;

	private bool _isCastle;

	[SaveableField(1016)]
	public bool GarrisonAutoRecruitmentIsEnabled = true;

	[SaveableField(1040)]
	private Clan _ownerClan;

	[SaveableField(1015)]
	private float _security;

	[SaveableField(1014)]
	private float _loyalty;

	[CachedData]
	private MBList<Village> _tradeBoundVillagesCache;

	[SaveableField(1006)]
	public MBList<Building> Buildings;

	[SaveableField(1007)]
	public Queue<Building> BuildingsInProgress;

	[SaveableField(1008)]
	public int BoostBuildingProcess;

	[SaveableField(1009)]
	private readonly TownMarketData _marketData;

	[SaveableField(1010)]
	private int _tradeTax;

	[SaveableField(1011)]
	public bool InRebelliousState;

	[SaveableField(1012)]
	private Hero _governor;

	[SaveableField(1013)]
	private SellLog[] _soldItems = new SellLog[0];

	public float Prosperity
	{
		get
		{
			return _prosperity;
		}
		set
		{
			_prosperity = value;
			if (_prosperity < 0f)
			{
				_prosperity = 0f;
			}
		}
	}

	public CultureObject Culture => base.Owner.Settlement.Culture;

	public float ProsperityChange => Campaign.Current.Models.SettlementProsperityModel.CalculateProsperityChange(this).ResultNumber;

	public ExplainedNumber ProsperityChangeExplanation => Campaign.Current.Models.SettlementProsperityModel.CalculateProsperityChange(this, includeDescriptions: true);

	public int GarrisonChange => (int)Campaign.Current.Models.SettlementGarrisonModel.CalculateGarrisonChange(base.Owner.Settlement).ResultNumber;

	public int GarrisonChangeAutoRecruitment => (int)Campaign.Current.Models.SettlementGarrisonModel.CalculateGarrisonChangeAutoRecruitment(base.Owner.Settlement).ResultNumber;

	public ExplainedNumber GarrisonChangeExplanation => Campaign.Current.Models.SettlementGarrisonModel.CalculateGarrisonChange(base.Owner.Settlement, includeDescriptions: true);

	public float FoodChange => Campaign.Current.Models.SettlementFoodModel.CalculateTownFoodStocksChange(this).ResultNumber;

	public float FoodChangeWithoutMarketStocks => Campaign.Current.Models.SettlementFoodModel.CalculateTownFoodStocksChange(this, includeMarketStocks: false).ResultNumber;

	public ExplainedNumber FoodChangeExplanation => Campaign.Current.Models.SettlementFoodModel.CalculateTownFoodStocksChange(this, includeMarketStocks: true, includeDescriptions: true);

	public float LoyaltyChange => Campaign.Current.Models.SettlementLoyaltyModel.CalculateLoyaltyChange(this).ResultNumber;

	public ExplainedNumber LoyaltyChangeExplanation => Campaign.Current.Models.SettlementLoyaltyModel.CalculateLoyaltyChange(this, includeDescriptions: true);

	public float SecurityChange => Campaign.Current.Models.SettlementSecurityModel.CalculateSecurityChange(this).ResultNumber;

	public ExplainedNumber SecurityChangeExplanation => Campaign.Current.Models.SettlementSecurityModel.CalculateSecurityChange(this, includeDescriptions: true);

	public float MilitiaChange => Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement).ResultNumber;

	public ExplainedNumber MilitiaChangeExplanation => Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement, includeDescriptions: true);

	public float Construction => Campaign.Current.Models.BuildingConstructionModel.CalculateDailyConstructionPower(this).ResultNumber;

	public ExplainedNumber ConstructionExplanation => Campaign.Current.Models.BuildingConstructionModel.CalculateDailyConstructionPower(this, includeDescriptions: true);

	public Clan OwnerClan
	{
		get
		{
			return _ownerClan;
		}
		set
		{
			if (_ownerClan != value)
			{
				ChangeClanInternal(value);
			}
		}
	}

	public float Security
	{
		get
		{
			return _security;
		}
		set
		{
			_security = value;
			if (_security < 0f)
			{
				_security = 0f;
			}
			else if (_security > 100f)
			{
				_security = 100f;
			}
		}
	}

	public float Loyalty
	{
		get
		{
			return _loyalty;
		}
		set
		{
			_loyalty = value;
			if (_loyalty < 0f)
			{
				_loyalty = 0f;
			}
			else if (_loyalty > 100f)
			{
				_loyalty = 100f;
			}
		}
	}

	public MBReadOnlyList<Village> TradeBoundVillages => _tradeBoundVillagesCache;

	[SaveableProperty(1005)]
	public Workshop[] Workshops { get; protected set; }

	public Building CurrentBuilding
	{
		get
		{
			if (!BuildingsInProgress.IsEmpty())
			{
				return BuildingsInProgress.Peek();
			}
			return CurrentDefaultBuilding;
		}
	}

	public Building CurrentDefaultBuilding => Buildings.Find((Building k) => k.IsCurrentlyDefault);

	public TownMarketData MarketData => _marketData;

	public int TradeTaxAccumulated
	{
		get
		{
			return _tradeTax;
		}
		set
		{
			_tradeTax = value;
		}
	}

	public Hero Governor
	{
		get
		{
			return _governor;
		}
		set
		{
			if (_governor != value)
			{
				if (_governor != null)
				{
					_governor.GovernorOf = null;
				}
				_governor = value;
				if (_governor != null)
				{
					_governor.GovernorOf = this;
				}
			}
		}
	}

	public static IEnumerable<Town> AllFiefs
	{
		get
		{
			foreach (Town allTown in Campaign.Current.AllTowns)
			{
				yield return allTown;
			}
			foreach (Town allCastle in Campaign.Current.AllCastles)
			{
				yield return allCastle;
			}
		}
	}

	public static MBReadOnlyList<Town> AllTowns => Campaign.Current.AllTowns;

	public static MBReadOnlyList<Town> AllCastles => Campaign.Current.AllCastles;

	public override bool IsTown => !_isCastle;

	public override bool IsCastle => _isCastle;

	public IReadOnlyCollection<SellLog> SoldItems => (IReadOnlyCollection<SellLog>)(object)_soldItems;

	public IFaction MapFaction => OwnerClan?.MapFaction;

	public bool IsUnderSiege => base.Settlement.IsUnderSiege;

	[CachedData]
	public MBReadOnlyList<Village> Villages => base.Settlement.BoundVillages;

	[SaveableProperty(1030)]
	public Clan LastCapturedBy { get; set; }

	public bool HasTournament
	{
		get
		{
			if (IsTown)
			{
				return Campaign.Current.TournamentManager.GetTournamentGame(this) != null;
			}
			return false;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsTown(object o, List<object> collectedObjects)
	{
		((Town)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Buildings);
		collectedObjects.Add(BuildingsInProgress);
		collectedObjects.Add(_ownerClan);
		collectedObjects.Add(_marketData);
		collectedObjects.Add(_governor);
		collectedObjects.Add(_soldItems);
		collectedObjects.Add(Workshops);
		collectedObjects.Add(LastCapturedBy);
	}

	internal static object AutoGeneratedGetMemberValueWorkshops(object o)
	{
		return ((Town)o).Workshops;
	}

	internal static object AutoGeneratedGetMemberValueLastCapturedBy(object o)
	{
		return ((Town)o).LastCapturedBy;
	}

	internal static object AutoGeneratedGetMemberValueGarrisonAutoRecruitmentIsEnabled(object o)
	{
		return ((Town)o).GarrisonAutoRecruitmentIsEnabled;
	}

	internal static object AutoGeneratedGetMemberValueBuildings(object o)
	{
		return ((Town)o).Buildings;
	}

	internal static object AutoGeneratedGetMemberValueBuildingsInProgress(object o)
	{
		return ((Town)o).BuildingsInProgress;
	}

	internal static object AutoGeneratedGetMemberValueBoostBuildingProcess(object o)
	{
		return ((Town)o).BoostBuildingProcess;
	}

	internal static object AutoGeneratedGetMemberValueInRebelliousState(object o)
	{
		return ((Town)o).InRebelliousState;
	}

	internal static object AutoGeneratedGetMemberValue_prosperity(object o)
	{
		return ((Town)o)._prosperity;
	}

	internal static object AutoGeneratedGetMemberValue_wallLevel(object o)
	{
		return ((Town)o)._wallLevel;
	}

	internal static object AutoGeneratedGetMemberValue_ownerClan(object o)
	{
		return ((Town)o)._ownerClan;
	}

	internal static object AutoGeneratedGetMemberValue_security(object o)
	{
		return ((Town)o)._security;
	}

	internal static object AutoGeneratedGetMemberValue_loyalty(object o)
	{
		return ((Town)o)._loyalty;
	}

	internal static object AutoGeneratedGetMemberValue_marketData(object o)
	{
		return ((Town)o)._marketData;
	}

	internal static object AutoGeneratedGetMemberValue_tradeTax(object o)
	{
		return ((Town)o)._tradeTax;
	}

	internal static object AutoGeneratedGetMemberValue_governor(object o)
	{
		return ((Town)o)._governor;
	}

	internal static object AutoGeneratedGetMemberValue_soldItems(object o)
	{
		return ((Town)o)._soldItems;
	}

	public IEnumerable<PartyBase> GetDefenderParties(MapEvent.BattleTypes battleType)
	{
		yield return base.Settlement.Party;
		foreach (MobileParty party in base.Settlement.Parties)
		{
			if (party.MapFaction.IsAtWarWith(base.Settlement.SiegeEvent.BesiegerCamp.LeaderParty.MapFaction) && party.IsActive && !party.IsVillager && !party.IsCaravan && (!party.IsMilitia || (!InRebelliousState && battleType != MapEvent.BattleTypes.SallyOut)))
			{
				yield return party.Party;
			}
		}
	}

	public PartyBase GetNextDefenderParty(ref int partyIndex, MapEvent.BattleTypes battleType)
	{
		partyIndex++;
		if (partyIndex == 0)
		{
			return base.Settlement.Party;
		}
		for (int i = partyIndex - 1; i < base.Settlement.Parties.Count; i++)
		{
			MobileParty mobileParty = base.Settlement.Parties[i];
			if (mobileParty.MapFaction.IsAtWarWith(base.Settlement.SiegeEvent.BesiegerCamp.LeaderParty.MapFaction) && mobileParty.IsActive && !mobileParty.IsVillager && !mobileParty.IsCaravan && (!mobileParty.IsMilitia || (!InRebelliousState && battleType != MapEvent.BattleTypes.SallyOut)))
			{
				partyIndex = i + 1;
				return mobileParty.Party;
			}
		}
		return null;
	}

	internal void SetTradeBoundVillageInternal(Village village)
	{
		_tradeBoundVillagesCache.Add(village);
	}

	internal void RemoveTradeBoundVillageInternal(Village village)
	{
		_tradeBoundVillagesCache.Remove(village);
	}

	public int FoodStocksUpperLimit()
	{
		return (int)((float)(Campaign.Current.Models.SettlementFoodModel.FoodStocksUpperLimit + (IsCastle ? Campaign.Current.Models.SettlementFoodModel.CastleFoodStockUpperLimitBonus : 0)) + GetEffectOfBuildings(BuildingEffectEnum.Foodstock));
	}

	public Town()
	{
		Buildings = new MBList<Building>();
		BuildingsInProgress = new Queue<Building>();
		Workshops = new Workshop[0];
		_marketData = new TownMarketData(this);
		_tradeBoundVillagesCache = new MBList<Village>();
	}

	public override void OnInit()
	{
		Loyalty = base.Owner.RandomIntWithSeed(1337u, 30, 70);
		Security = base.Owner.RandomIntWithSeed(1001u, 40, 60);
		TradeTaxAccumulated = (IsTown ? (1000 + MBRandom.RandomInt(1000)) : 0);
		ChangeGold(20000);
		Buildings.Add(new Building(IsTown ? DefaultBuildingTypes.Fortifications : DefaultBuildingTypes.Wall, this, 0f, _wallLevel));
	}

	public void InitializeWorkshops(int count)
	{
		if (count > 0)
		{
			Workshops = new Workshop[count];
			for (int i = 0; i < count; i++)
			{
				Workshops[i] = new Workshop(base.Owner.Settlement, "workshop_" + i);
			}
		}
	}

	[LoadInitializationCallback]
	private void OnLoad()
	{
		_tradeBoundVillagesCache = new MBList<Village>();
	}

	protected override void PreAfterLoad()
	{
		_ownerClan?.OnFortificationAdded(this);
	}

	protected override void AfterLoad()
	{
		Workshop[] workshops = Workshops;
		for (int i = 0; i < workshops.Length; i++)
		{
			workshops[i].AfterLoad();
		}
		bool flag = false;
		for (int num = Buildings.Count - 1; num >= 0; num--)
		{
			Building building = Buildings[num];
			if (building.BuildingType == null || !building.BuildingType.IsReady)
			{
				Buildings.RemoveAt(num);
				flag = true;
			}
		}
		if (!flag)
		{
			foreach (Building item in BuildingsInProgress)
			{
				if (item.BuildingType == null || !item.BuildingType.IsReady)
				{
					flag = true;
					break;
				}
			}
		}
		if (flag)
		{
			BuildingsInProgress.Clear();
		}
		if (Governor != null && Governor.GovernorOf == null)
		{
			Governor = null;
		}
	}

	private void ChangeClanInternal(Clan value)
	{
		if (_ownerClan != null)
		{
			RemoveOwnerClan();
		}
		_ownerClan = value;
		if (_ownerClan != null)
		{
			SetNewOwnerClan();
		}
	}

	public float GetEffectOfBuildings(BuildingEffectEnum buildingEffect)
	{
		float num = 0f;
		foreach (Building building in Buildings)
		{
			num += building.GetBuildingEffectAmount(buildingEffect);
		}
		return num;
	}

	private void SetNewOwnerClan()
	{
		_ownerClan.OnFortificationAdded(this);
		foreach (Village boundVillage in base.Settlement.BoundVillages)
		{
			boundVillage.Settlement.Party.SetVisualAsDirty();
			boundVillage.VillagerPartyComponent?.MobileParty.Party.SetVisualAsDirty();
		}
	}

	private void RemoveOwnerClan()
	{
		_ownerClan.OnFortificationRemoved(this);
	}

	internal void DailyTick()
	{
		Loyalty += LoyaltyChange;
		Security += SecurityChange;
		if (base.FoodStocks > 0f)
		{
			base.Owner.OnConsumedFood();
		}
		base.FoodStocks += FoodChange;
		if (base.FoodStocks < 0f)
		{
			base.FoodStocks = 0f;
			base.Owner.RemainingFoodPercentage = -100;
		}
		else
		{
			base.Owner.RemainingFoodPercentage = 0;
		}
		if (base.FoodStocks > (float)FoodStocksUpperLimit())
		{
			base.FoodStocks = FoodStocksUpperLimit();
		}
		if (!CurrentBuilding.BuildingType.IsDefaultProject)
		{
			TickCurrentBuilding();
		}
		else if (Governor != null && Governor.GetPerkValue(DefaultPerks.Charm.Virile) && MBRandom.RandomFloat <= DefaultPerks.Charm.Virile.SecondaryBonus)
		{
			Hero randomElement = base.Settlement.Notables.GetRandomElement();
			if (randomElement != null)
			{
				ChangeRelationAction.ApplyRelationChangeBetweenHeroes(Governor.Clan.Leader, randomElement, 1, showQuickNotification: false);
			}
		}
		if (Governor != null)
		{
			if (Governor.GetPerkValue(DefaultPerks.Roguery.WhiteLies) && MBRandom.RandomFloat <= DefaultPerks.Roguery.WhiteLies.SecondaryBonus)
			{
				Hero randomElement2 = base.Settlement.Notables.GetRandomElement();
				if (randomElement2 != null)
				{
					ChangeRelationAction.ApplyRelationChangeBetweenHeroes(Governor, randomElement2, 1);
				}
			}
			if (Governor.GetPerkValue(DefaultPerks.Roguery.Scarface) && MBRandom.RandomFloat <= DefaultPerks.Roguery.Scarface.SecondaryBonus)
			{
				Hero randomElementWithPredicate = base.Settlement.Notables.GetRandomElementWithPredicate((Hero x) => x.IsGangLeader);
				if (randomElementWithPredicate != null)
				{
					ChangeRelationAction.ApplyRelationChangeBetweenHeroes(Governor, randomElementWithPredicate, 1);
				}
			}
		}
		Prosperity += ProsperityChange;
		HandleMilitiaAndGarrisonOfSettlementDaily();
		RepairWallsOfSettlementDaily();
	}

	private void HandleMilitiaAndGarrisonOfSettlementDaily()
	{
		base.Owner.Settlement.Militia += MilitiaChange;
		if (GarrisonChange >= 1 && base.GarrisonParty == null)
		{
			base.Owner.Settlement.AddGarrisonParty();
		}
		if (base.GarrisonParty == null || !base.GarrisonParty.IsActive || base.GarrisonParty.MapEvent != null || base.GarrisonParty.CurrentSettlement == null)
		{
			return;
		}
		int num = Campaign.Current.Models.DailyTroopXpBonusModel.CalculateDailyTroopXpBonus(this);
		float num2 = Campaign.Current.Models.DailyTroopXpBonusModel.CalculateGarrisonXpBonusMultiplier(this);
		if (num > 0)
		{
			foreach (TroopRosterElement item in base.GarrisonParty.MemberRoster.GetTroopRoster())
			{
				base.GarrisonParty.MemberRoster.AddXpToTroop(MathF.Round((float)num * num2 * (float)item.Number), item.Character);
			}
		}
		DailyGarrisonAdjustment();
	}

	private void RepairWallsOfSettlementDaily()
	{
		Settlement settlement = base.Owner.Settlement;
		float maxWallHitPoints = settlement.MaxWallHitPoints;
		if (!settlement.SettlementWallSectionHitPointsRatioList.Any((float health) => health < 1f) || settlement.IsUnderSiege)
		{
			return;
		}
		float num = maxWallHitPoints * 0.02f;
		float effectOfBuildings = GetEffectOfBuildings(BuildingEffectEnum.WallRepairSpeed);
		if (effectOfBuildings > 0f)
		{
			num += num * effectOfBuildings * 0.01f;
		}
		float num2 = num / settlement.MaxHitPointsOfOneWallSection;
		for (int i = 0; i < settlement.SettlementWallSectionHitPointsRatioList.Count; i++)
		{
			float num3 = settlement.SettlementWallSectionHitPointsRatioList[i];
			float num4 = MathF.Min(1f - num3, num2);
			settlement.SetWallSectionHitPointsRatioAtIndex(i, num3 + num4);
			num2 -= num4;
			if (num2 <= 0f)
			{
				break;
			}
		}
	}

	private void DesertOneTroopFromGarrison()
	{
		if (base.GarrisonParty.MemberRoster.TotalManCount <= 0)
		{
			return;
		}
		int num = (int)(MBRandom.RandomFloat * (float)base.GarrisonParty.MemberRoster.TotalManCount);
		for (int i = 0; i < base.GarrisonParty.MemberRoster.Count; i++)
		{
			num -= base.GarrisonParty.MemberRoster.GetElementNumber(i);
			if (num < 0)
			{
				TroopRoster desertedTroopList = TroopRoster.CreateDummyTroopRoster();
				MobilePartyHelper.DesertTroopsFromParty(base.GarrisonParty, i, 1, 0, ref desertedTroopList);
				break;
			}
		}
	}

	private void DailyGarrisonAdjustment()
	{
		int garrisonChange = base.GarrisonParty.CurrentSettlement.Town.GarrisonChange;
		int num = (GarrisonAutoRecruitmentIsEnabled ? base.GarrisonParty.CurrentSettlement.Town.GarrisonChangeAutoRecruitment : 0);
		garrisonChange -= num;
		int limitedPartySize = base.GarrisonParty.LimitedPartySize;
		if (garrisonChange > 0)
		{
			garrisonChange = MBMath.ClampInt(garrisonChange, 0, limitedPartySize - base.GarrisonParty.Party.NumberOfAllMembers - num);
		}
		if (garrisonChange < 0)
		{
			for (int i = 0; i < MathF.Abs(garrisonChange); i++)
			{
				DesertOneTroopFromGarrison();
			}
		}
		else if (garrisonChange > 0)
		{
			base.GarrisonParty.MemberRoster.AddToCounts(base.GarrisonParty.MapFaction.BasicTroop, garrisonChange);
		}
		if (num > 0)
		{
			int num2 = SettlementHelper.NumberOfVolunteersCanBeRecruitedForGarrison(base.GarrisonParty.CurrentSettlement);
			Hero leader = base.GarrisonParty.CurrentSettlement.OwnerClan.Leader;
			if (num2 > 0)
			{
				float num3 = MBRandom.RandomFloat * (float)num2;
				foreach (Hero notable in base.GarrisonParty.CurrentSettlement.Notables)
				{
					if (num3 <= 0f)
					{
						break;
					}
					int num4 = Campaign.Current.Models.VolunteerModel.MaximumIndexHeroCanRecruitFromHero(leader, notable);
					for (int j = 0; j < num4; j++)
					{
						if (notable.IsAlive && notable.VolunteerTypes[j] != null)
						{
							num3 -= 1f;
							if (num3 <= 0f)
							{
								base.GarrisonParty.MemberRoster.AddToCounts(notable.VolunteerTypes[j], 1);
								leader.Clan.AutoRecruitmentExpenses += Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(notable.VolunteerTypes[j], leader);
								notable.VolunteerTypes[j] = null;
								break;
							}
						}
					}
				}
				if (num3 > 0f)
				{
					foreach (Village boundVillage in base.GarrisonParty.CurrentSettlement.BoundVillages)
					{
						if (num3 <= 0f)
						{
							break;
						}
						if (boundVillage.VillageState != 0)
						{
							continue;
						}
						foreach (Hero notable2 in boundVillage.Settlement.Notables)
						{
							if (num3 <= 0f)
							{
								break;
							}
							int num5 = Campaign.Current.Models.VolunteerModel.MaximumIndexHeroCanRecruitFromHero(leader, notable2);
							for (int k = 0; k < num5; k++)
							{
								if (notable2.IsAlive && notable2.VolunteerTypes[k] != null)
								{
									num3 -= 1f;
									if (num3 <= 0f)
									{
										base.GarrisonParty.MemberRoster.AddToCounts(notable2.VolunteerTypes[k], 1);
										leader.Clan.AutoRecruitmentExpenses += Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(notable2.VolunteerTypes[k], leader);
										notable2.VolunteerTypes[k] = null;
										break;
									}
								}
							}
						}
					}
				}
			}
		}
		if (base.GarrisonParty.Party.NumberOfAllMembers > limitedPartySize)
		{
			int num6 = MBRandom.RoundRandomized((float)(base.GarrisonParty.Party.NumberOfAllMembers - limitedPartySize) * 0.2f);
			for (int l = 0; l < num6; l++)
			{
				DesertOneTroopFromGarrison();
			}
		}
	}

	public int GetWallLevel()
	{
		int result = 0;
		foreach (Building building in Buildings)
		{
			if (building.BuildingType == DefaultBuildingTypes.Fortifications && IsTown)
			{
				result = building.CurrentLevel;
				break;
			}
			if (building.BuildingType == DefaultBuildingTypes.Wall && IsCastle)
			{
				result = building.CurrentLevel;
				break;
			}
		}
		return result;
	}

	public override string ToString()
	{
		return base.Name.ToString();
	}

	public override void Deserialize(MBObjectManager objectManager, XmlNode node)
	{
		if (!base.IsInitialized)
		{
			_wallLevel = ((node.Attributes["level"] != null) ? int.Parse(node.Attributes["level"].Value) : 0);
		}
		_isCastle = node.Attributes["is_castle"] != null && bool.Parse(node.Attributes["is_castle"].Value);
		base.BackgroundCropPosition = float.Parse(node.Attributes["background_crop_position"].Value);
		base.BackgroundMeshName = node.Attributes["background_mesh"].Value;
		base.WaitMeshName = node.Attributes["wait_mesh"].Value;
		if (!base.IsInitialized)
		{
			_prosperity = float.Parse(node.Attributes["prosperity"].Value);
		}
		BesiegerCampPositions1 = new MatrixFrame[1] { MatrixFrame.Identity };
		BesiegerCampPositions2 = new MatrixFrame[1] { MatrixFrame.Identity };
		base.Deserialize(objectManager, node);
	}

	public void SetSoldItems(IEnumerable<SellLog> logList)
	{
		_soldItems = logList.ToArray();
	}

	public override int GetItemPrice(ItemObject item, MobileParty tradingParty = null, bool isSelling = false)
	{
		return MarketData.GetPrice(item, tradingParty, isSelling);
	}

	public override int GetItemPrice(EquipmentElement itemRosterElement, MobileParty tradingParty = null, bool isSelling = false)
	{
		return MarketData.GetPrice(itemRosterElement, tradingParty, isSelling);
	}

	public override ProsperityLevel GetProsperityLevel()
	{
		if (_prosperity >= 5000f)
		{
			return ProsperityLevel.High;
		}
		if (_prosperity >= 2000f)
		{
			return ProsperityLevel.Mid;
		}
		return ProsperityLevel.Low;
	}

	private void TickCurrentBuilding()
	{
		if (BuildingsInProgress.Peek().CurrentLevel == 3)
		{
			BuildingsInProgress.Dequeue();
		}
		if (base.Owner.Settlement.IsUnderSiege || BuildingsInProgress.IsEmpty())
		{
			return;
		}
		BuildingConstructionModel buildingConstructionModel = Campaign.Current.Models.BuildingConstructionModel;
		Building building = BuildingsInProgress.Peek();
		building.BuildingProgress += Construction;
		int num = (IsCastle ? buildingConstructionModel.CastleBoostCost : buildingConstructionModel.TownBoostCost);
		if (BoostBuildingProcess > 0)
		{
			BoostBuildingProcess -= num;
			if (BoostBuildingProcess < 0)
			{
				BoostBuildingProcess = 0;
			}
		}
		if ((float)building.GetConstructionCost() <= building.BuildingProgress)
		{
			if (building.CurrentLevel < 3)
			{
				building.LevelUp();
			}
			if (building.CurrentLevel == 3)
			{
				building.BuildingProgress = building.GetConstructionCost();
			}
			BuildingsInProgress.Dequeue();
		}
	}

	protected override void OnInventoryUpdated(ItemRosterElement item, int count)
	{
		MarketData.OnTownInventoryUpdated(item, count);
	}

	public float GetItemCategoryPriceIndex(ItemCategory itemCategory)
	{
		return MarketData.GetPriceFactor(itemCategory);
	}
}
