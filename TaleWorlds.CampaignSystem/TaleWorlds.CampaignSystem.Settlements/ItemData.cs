using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements;

public struct ItemData
{
	[SaveableField(1)]
	public readonly float Supply;

	[SaveableField(2)]
	public readonly float Demand;

	[SaveableField(3)]
	public readonly int InStore;

	[SaveableField(4)]
	public readonly int InStoreValue;

	public static void AutoGeneratedStaticCollectObjectsItemData(object o, List<object> collectedObjects)
	{
		((ItemData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
	}

	internal static object AutoGeneratedGetMemberValueSupply(object o)
	{
		return ((ItemData)o).Supply;
	}

	internal static object AutoGeneratedGetMemberValueDemand(object o)
	{
		return ((ItemData)o).Demand;
	}

	internal static object AutoGeneratedGetMemberValueInStore(object o)
	{
		return ((ItemData)o).InStore;
	}

	internal static object AutoGeneratedGetMemberValueInStoreValue(object o)
	{
		return ((ItemData)o).InStoreValue;
	}

	public ItemData(float supply, float demand, int inStore, int inStoreValue)
	{
		Supply = supply;
		Demand = demand;
		InStore = inStore;
		InStoreValue = inStoreValue;
	}

	public ItemData Add(ItemData other)
	{
		return new ItemData(Supply + other.Supply, Demand + other.Demand, InStore + other.InStore, InStoreValue + other.InStoreValue);
	}

	internal ItemData AddDemand(float demandAmount)
	{
		return new ItemData(Supply, Demand + demandAmount, InStore, InStoreValue);
	}

	internal ItemData AddSupply(float supplyAmount)
	{
		return new ItemData(Supply + supplyAmount, Demand, InStore, InStoreValue);
	}

	internal ItemData AddInStore(int inStoreAmount, int value)
	{
		return new ItemData(Supply, Demand, InStore + inStoreAmount, InStoreValue + inStoreAmount * value);
	}

	internal ItemData AddSupplyDemand(float supply, float demand)
	{
		return new ItemData(Supply + supply, Demand + demand, InStore, InStoreValue);
	}
}
