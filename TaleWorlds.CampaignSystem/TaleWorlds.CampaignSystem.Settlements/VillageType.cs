using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem.Settlements;

public sealed class VillageType : MBObjectBase
{
	private MBList<(ItemObject, float)> _productions;

	public TextObject ShortName;

	public string MeshName;

	public string MeshNameUnderConstruction;

	public string MeshNameBurned;

	public static MBReadOnlyList<VillageType> All => Campaign.Current.AllVillageTypes;

	public MBReadOnlyList<(ItemObject, float)> Productions => _productions;

	public ItemObject PrimaryProduction
	{
		get
		{
			(ItemObject, float) tuple = _productions[0];
			float num = 0f;
			foreach (var production in _productions)
			{
				if (production.Item2 * (float)production.Item1.Value > num)
				{
					tuple = production;
					num = production.Item2 * (float)production.Item1.Value;
				}
			}
			return tuple.Item1;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsVillageType(object o, List<object> collectedObjects)
	{
		((VillageType)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	public VillageType(string stringId)
		: base(stringId)
	{
	}

	public VillageType Initialize(TextObject shortName, string meshName, string meshNameUnderConstruction, string meshNameBurned, (ItemObject, float)[] productions)
	{
		ShortName = shortName;
		MeshName = meshName;
		MeshNameUnderConstruction = meshNameUnderConstruction;
		MeshNameBurned = meshNameBurned;
		_productions = productions.ToMBList();
		AfterInitialized();
		return this;
	}

	public override string ToString()
	{
		return ShortName.ToString();
	}

	public void AddProductions(IEnumerable<(ItemObject, float)> productions)
	{
		_productions = productions.Concat(_productions).ToMBList();
	}

	public float GetProductionPerDay(ItemObject item)
	{
		foreach (var production in _productions)
		{
			if (production.Item1 == item)
			{
				return production.Item2;
			}
		}
		return 0f;
	}

	public float GetProductionPerDay(ItemCategory itemCategory)
	{
		float num = 0f;
		foreach (var production in _productions)
		{
			if (production.Item1 != null && production.Item1.ItemCategory == itemCategory)
			{
				num += production.Item2;
			}
		}
		return num;
	}
}
