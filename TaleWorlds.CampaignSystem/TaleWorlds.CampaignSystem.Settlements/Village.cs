using System.Collections.Generic;
using System.Xml;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements;

public class Village : SettlementComponent
{
	public enum VillageStates
	{
		Normal,
		BeingRaided,
		ForcedForVolunteers,
		ForcedForSupplies,
		Looted
	}

	public const int MidHearthThreshold = 600;

	public const int LowHearthThreshold = 200;

	private const int InitialVillageGold = 1000;

	public const int NumberOfDaysToFillVillageStocks = 5;

	[CachedData]
	public VillagerPartyComponent VillagerPartyComponent;

	[SaveableField(104)]
	private VillageStates _villageState;

	[SaveableField(106)]
	private Settlement _bound;

	public VillageType VillageType;

	private Settlement _tradeBound;

	[SaveableField(107)]
	private VillageMarketData _marketData;

	public static MBReadOnlyList<Village> All => Campaign.Current.AllVillages;

	public VillageStates VillageState
	{
		get
		{
			return _villageState;
		}
		set
		{
			if (_villageState != value)
			{
				_villageState = value;
				switch (_villageState)
				{
				case VillageStates.Normal:
					CampaignEventDispatcher.Instance.OnVillageBecomeNormal(this);
					break;
				case VillageStates.BeingRaided:
					CampaignEventDispatcher.Instance.OnVillageBeingRaided(this);
					break;
				case VillageStates.Looted:
					CampaignEventDispatcher.Instance.OnVillageLooted(this);
					break;
				case VillageStates.ForcedForVolunteers:
				case VillageStates.ForcedForSupplies:
					break;
				}
			}
		}
	}

	public bool IsDeserted => _villageState == VillageStates.Looted;

	[SaveableProperty(105)]
	public float LastDemandSatisfiedTime { get; private set; }

	public Settlement Bound
	{
		get
		{
			return _bound;
		}
		private set
		{
			if (_bound != value)
			{
				_bound?.RemoveBoundVillageInternal(this);
				_bound = value;
				_bound?.AddBoundVillageInternal(this);
			}
		}
	}

	public Settlement TradeBound
	{
		get
		{
			if (!_bound.IsTown)
			{
				return _tradeBound;
			}
			return _bound;
		}
		internal set
		{
			if (_tradeBound != value && !_bound.IsTown)
			{
				_tradeBound?.Town.RemoveTradeBoundVillageInternal(this);
				_tradeBound = value;
				_tradeBound?.Town.SetTradeBoundVillageInternal(this);
			}
		}
	}

	public VillageMarketData MarketData => _marketData;

	[SaveableProperty(108)]
	public float Hearth { get; set; }

	[SaveableProperty(110)]
	public int TradeTaxAccumulated { get; set; }

	public float HearthChange => Campaign.Current.Models.SettlementProsperityModel.CalculateHearthChange(this).ResultNumber;

	public float Militia => base.Owner.Settlement.Militia;

	public float MilitiaChange => Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement).ResultNumber;

	public ExplainedNumber MilitiaChangeExplanation => Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement, includeDescriptions: true);

	public ExplainedNumber HearthChangeExplanation => Campaign.Current.Models.SettlementProsperityModel.CalculateHearthChange(this, includeDescriptions: true);

	internal static void AutoGeneratedStaticCollectObjectsVillage(object o, List<object> collectedObjects)
	{
		((Village)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_bound);
		collectedObjects.Add(_marketData);
	}

	internal static object AutoGeneratedGetMemberValueLastDemandSatisfiedTime(object o)
	{
		return ((Village)o).LastDemandSatisfiedTime;
	}

	internal static object AutoGeneratedGetMemberValueHearth(object o)
	{
		return ((Village)o).Hearth;
	}

	internal static object AutoGeneratedGetMemberValueTradeTaxAccumulated(object o)
	{
		return ((Village)o).TradeTaxAccumulated;
	}

	internal static object AutoGeneratedGetMemberValue_villageState(object o)
	{
		return ((Village)o)._villageState;
	}

	internal static object AutoGeneratedGetMemberValue_bound(object o)
	{
		return ((Village)o)._bound;
	}

	internal static object AutoGeneratedGetMemberValue_marketData(object o)
	{
		return ((Village)o)._marketData;
	}

	public IEnumerable<PartyBase> GetDefenderParties(MapEvent.BattleTypes battleType)
	{
		yield return base.Settlement.Party;
		foreach (MobileParty party in base.Settlement.Parties)
		{
			if (party.MapFaction == base.Settlement.MapFaction && ((!party.IsMilitia && !party.IsVillager) || battleType == MapEvent.BattleTypes.Raid || battleType == MapEvent.BattleTypes.IsForcingSupplies || battleType == MapEvent.BattleTypes.IsForcingVolunteers) && !party.IsCaravan)
			{
				yield return party.Party;
			}
		}
	}

	public PartyBase GetNextDefenderParty(ref int partyIndex, MapEvent.BattleTypes battleType)
	{
		partyIndex++;
		if (partyIndex == 0)
		{
			return base.Settlement.Party;
		}
		for (int i = partyIndex - 1; i < base.Settlement.Parties.Count; i++)
		{
			MobileParty mobileParty = base.Settlement.Parties[i];
			if (mobileParty.MapFaction == base.Settlement.MapFaction && !mobileParty.IsCaravan)
			{
				partyIndex = i + 1;
				return mobileParty.Party;
			}
		}
		return null;
	}

	public Village()
	{
		LastDemandSatisfiedTime = -1f;
		_marketData = new VillageMarketData(this);
	}

	public void DailyTick()
	{
		int hearthLevel = GetHearthLevel();
		Hearth += HearthChange;
		if (hearthLevel != GetHearthLevel())
		{
			base.Settlement.Party.SetLevelMaskIsDirty();
		}
		if (Hearth < 10f)
		{
			Hearth = 10f;
		}
		base.Owner.Settlement.Militia += MilitiaChange;
		if (base.Gold > 1000)
		{
			ChangeGold(1000 - base.Gold);
		}
	}

	public override void OnInit()
	{
		ChangeVillageStateAction.ApplyBySettingToNormal(base.Settlement);
		ChangeGold(1000);
	}

	public int GetWerehouseCapacity()
	{
		float num = Campaign.Current.Models.VillageProductionCalculatorModel.CalculateDailyFoodProductionAmount(this);
		foreach (var production in VillageType.Productions)
		{
			float num2 = Campaign.Current.Models.VillageProductionCalculatorModel.CalculateDailyProductionAmount(this, production.Item1);
			num += num2;
		}
		return MathF.Ceiling(MathF.Max(1f, num) * 5f);
	}

	public override int GetItemPrice(ItemObject item, MobileParty tradingParty = null, bool isSelling = false)
	{
		if (TradeBound == null)
		{
			return 1;
		}
		return TradeBound.Town.MarketData.GetPrice(item, tradingParty, isSelling);
	}

	public override int GetItemPrice(EquipmentElement itemRosterElement, MobileParty tradingParty = null, bool isSelling = false)
	{
		if (TradeBound == null)
		{
			return 1;
		}
		return TradeBound.Town.MarketData.GetPrice(itemRosterElement, tradingParty, isSelling);
	}

	public override string ToString()
	{
		return base.Name.ToString();
	}

	public override void Deserialize(MBObjectManager objectManager, XmlNode node)
	{
		bool isInitialized = base.IsInitialized;
		base.Deserialize(objectManager, node);
		base.BackgroundCropPosition = float.Parse(node.Attributes["background_crop_position"].Value);
		base.BackgroundMeshName = node.Attributes["background_mesh"].Value;
		base.CastleBackgroundMeshName = node.Attributes["castle_background_mesh"].Value;
		base.WaitMeshName = node.Attributes["wait_mesh"].Value;
		if (!isInitialized)
		{
			Hearth = int.Parse(node.Attributes["hearth"].Value);
		}
		VillageType = (VillageType)objectManager.ReadObjectReferenceFromXml("village_type", typeof(VillageType), node);
		if (!isInitialized)
		{
			Bound = (Settlement)objectManager.ReadObjectReferenceFromXml("bound", typeof(Settlement), node);
			if (Bound.IsTown)
			{
				Bound.Town.SetTradeBoundVillageInternal(this);
			}
		}
	}

	public bool IsProducing(ItemObject item)
	{
		foreach (var production in VillageType.Productions)
		{
			if (production.Item1 == item)
			{
				return true;
			}
		}
		return false;
	}

	public int GetHearthLevel()
	{
		if (Hearth >= 600f)
		{
			return 2;
		}
		if (Hearth >= 200f)
		{
			return 1;
		}
		return 0;
	}

	public override ProsperityLevel GetProsperityLevel()
	{
		if (GetHearthLevel() >= 2)
		{
			return ProsperityLevel.High;
		}
		if (GetHearthLevel() >= 1)
		{
			return ProsperityLevel.Mid;
		}
		return ProsperityLevel.Low;
	}

	protected override void OnInventoryUpdated(ItemRosterElement item, int count)
	{
	}
}
