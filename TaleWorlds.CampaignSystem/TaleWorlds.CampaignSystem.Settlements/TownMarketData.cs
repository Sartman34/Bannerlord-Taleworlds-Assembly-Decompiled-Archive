using System.Collections.Generic;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements;

public class TownMarketData : IMarketData
{
	[SaveableField(1)]
	private Dictionary<ItemCategory, ItemData> _itemDict = new Dictionary<ItemCategory, ItemData>();

	[SaveableField(2)]
	private Town _town;

	internal static void AutoGeneratedStaticCollectObjectsTownMarketData(object o, List<object> collectedObjects)
	{
		((TownMarketData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_itemDict);
		collectedObjects.Add(_town);
	}

	internal static object AutoGeneratedGetMemberValue_itemDict(object o)
	{
		return ((TownMarketData)o)._itemDict;
	}

	internal static object AutoGeneratedGetMemberValue_town(object o)
	{
		return ((TownMarketData)o)._town;
	}

	public TownMarketData(Town town)
	{
		_town = town;
	}

	public ItemData GetCategoryData(ItemCategory itemCategory)
	{
		if (!_itemDict.TryGetValue(itemCategory, out var value))
		{
			value = default(ItemData);
		}
		return value;
	}

	public int GetItemCountOfCategory(ItemCategory itemCategory)
	{
		if (!_itemDict.TryGetValue(itemCategory, out var value))
		{
			return 0;
		}
		return value.InStore;
	}

	private void SetItemData(ItemCategory itemCategory, ItemData itemData)
	{
		_itemDict[itemCategory] = itemData;
	}

	public void OnTownInventoryUpdated(ItemRosterElement item, int count)
	{
		if (item.EquipmentElement.Item == null)
		{
			ClearStores();
		}
		else
		{
			AddNumberInStore(item.EquipmentElement.Item.GetItemCategory(), count, item.EquipmentElement.Item.Value);
		}
	}

	public void AddDemand(ItemCategory itemCategory, float demandAmount)
	{
		SettlementEconomyModel settlementConsumptionModel = Campaign.Current.Models.SettlementConsumptionModel;
		SetItemData(itemCategory, GetCategoryData(itemCategory).AddDemand(settlementConsumptionModel.GetDemandChangeFromValue(demandAmount)));
	}

	public void AddSupply(ItemCategory itemCategory, float supplyAmount)
	{
		SetItemData(itemCategory, GetCategoryData(itemCategory).AddSupply(supplyAmount));
	}

	public void AddNumberInStore(ItemCategory itemCategory, int number, int value)
	{
		SetItemData(itemCategory, GetCategoryData(itemCategory).AddInStore(number, value));
	}

	public void SetSupplyDemand(ItemCategory itemCategory, float supply, float demand)
	{
		ItemData categoryData = GetCategoryData(itemCategory);
		SetItemData(itemCategory, new ItemData(supply, demand, categoryData.InStore, categoryData.InStoreValue));
	}

	public void SetDemand(ItemCategory itemCategory, float demand)
	{
		ItemData categoryData = GetCategoryData(itemCategory);
		SetItemData(itemCategory, new ItemData(categoryData.Supply, demand, categoryData.InStore, categoryData.InStoreValue));
	}

	public float GetDemand(ItemCategory itemCategory)
	{
		return GetCategoryData(itemCategory).Demand;
	}

	public float GetSupply(ItemCategory itemCategory)
	{
		return GetCategoryData(itemCategory).Supply;
	}

	public float GetPriceFactor(ItemCategory itemCategory)
	{
		ItemData categoryData = GetCategoryData(itemCategory);
		return Campaign.Current.Models.TradeItemPriceFactorModel.GetBasePriceFactor(itemCategory, categoryData.InStoreValue, categoryData.Supply, categoryData.Demand, isSelling: false, 0);
	}

	public int GetPrice(ItemObject item, MobileParty tradingParty = null, bool isSelling = false, PartyBase merchantParty = null)
	{
		return GetPrice(new EquipmentElement(item), tradingParty, isSelling);
	}

	public int GetPrice(EquipmentElement itemRosterElement, MobileParty tradingParty = null, bool isSelling = false, PartyBase merchantParty = null)
	{
		ItemData categoryData = GetCategoryData(itemRosterElement.Item.GetItemCategory());
		return Campaign.Current.Models.TradeItemPriceFactorModel.GetPrice(itemRosterElement, tradingParty, merchantParty, isSelling, categoryData.InStoreValue, categoryData.Supply, categoryData.Demand);
	}

	public void UpdateStores()
	{
		ClearStores();
		ItemRoster itemRoster = _town.Owner.ItemRoster;
		for (int i = 0; i < itemRoster.Count; i++)
		{
			ItemRosterElement itemRosterElement = itemRoster[i];
			if (itemRosterElement.EquipmentElement.Item.ItemCategory != null)
			{
				ItemData categoryData = GetCategoryData(itemRosterElement.EquipmentElement.Item.GetItemCategory());
				SetItemData(itemRosterElement.EquipmentElement.Item.GetItemCategory(), categoryData.AddInStore(itemRosterElement.Amount, itemRosterElement.EquipmentElement.Item.Value));
			}
		}
	}

	private void ClearStores()
	{
		foreach (ItemCategory item in ItemCategories.All)
		{
			ItemData categoryData = GetCategoryData(item);
			SetItemData(item, new ItemData(categoryData.Supply, categoryData.Demand, 0, 0));
		}
	}
}
