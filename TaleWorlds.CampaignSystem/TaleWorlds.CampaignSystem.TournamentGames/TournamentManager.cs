using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.TournamentGames;

public class TournamentManager : ITournamentManager
{
	[SaveableField(1)]
	private List<TournamentGame> _activeTournaments;

	[SaveableField(4)]
	private readonly Dictionary<Hero, int> _worldWideTournamentLeaderboard;

	internal static void AutoGeneratedStaticCollectObjectsTournamentManager(object o, List<object> collectedObjects)
	{
		((TournamentManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_activeTournaments);
		collectedObjects.Add(_worldWideTournamentLeaderboard);
	}

	internal static object AutoGeneratedGetMemberValue_activeTournaments(object o)
	{
		return ((TournamentManager)o)._activeTournaments;
	}

	internal static object AutoGeneratedGetMemberValue_worldWideTournamentLeaderboard(object o)
	{
		return ((TournamentManager)o)._worldWideTournamentLeaderboard;
	}

	public TournamentManager()
	{
		_worldWideTournamentLeaderboard = new Dictionary<Hero, int>();
		_activeTournaments = new List<TournamentGame>();
	}

	public void AddTournament(TournamentGame game)
	{
		_activeTournaments.Add(game);
		CampaignEventDispatcher.Instance.OnTournamentStarted(game.Town);
	}

	public void RemoveTournament(TournamentGame game)
	{
		_activeTournaments.Remove(game);
	}

	public TournamentGame GetTournamentGame(Town town)
	{
		return _activeTournaments.Find((TournamentGame x) => x != null && x.Town == town);
	}

	public void OnPlayerJoinMatch(Type gameType)
	{
	}

	public void OnPlayerJoinTournament(Type gameType, Settlement settlement)
	{
		CampaignEventDispatcher.Instance.OnPlayerJoinedTournament(settlement.Town, isParticipant: true);
		TournamentGame tournamentGame = GetTournamentGame(settlement.Town);
		_activeTournaments.Remove(tournamentGame);
	}

	public void OnPlayerWatchTournament(Type gameType, Settlement settlement)
	{
		CampaignEventDispatcher.Instance.OnPlayerJoinedTournament(settlement.Town, isParticipant: false);
		TournamentGame tournamentGame = GetTournamentGame(settlement.Town);
		_activeTournaments.Remove(tournamentGame);
	}

	public void OnPlayerWinMatch(Type gameType)
	{
	}

	public void OnPlayerWinTournament(Type gameType)
	{
	}

	public List<KeyValuePair<Hero, int>> GetLeaderboard()
	{
		return _worldWideTournamentLeaderboard.OrderByDescending(delegate(KeyValuePair<Hero, int> pair)
		{
			KeyValuePair<Hero, int> keyValuePair = pair;
			return keyValuePair.Value;
		}).ToList();
	}

	public int GetLeaderBoardRank(Hero hero)
	{
		return GetLeaderboard().FindIndex((KeyValuePair<Hero, int> kvp) => kvp.Key == hero) + 1;
	}

	public Hero GetLeaderBoardLeader()
	{
		Dictionary<Hero, int> worldWideTournamentLeaderboard = _worldWideTournamentLeaderboard;
		Hero result = null;
		int num = -1;
		foreach (Hero key in worldWideTournamentLeaderboard.Keys)
		{
			int num2 = worldWideTournamentLeaderboard[key];
			if (num2 > num)
			{
				num = num2;
				result = key;
			}
		}
		return result;
	}

	public void InitializeLeaderboardEntry(Hero hero, int initialVictories = 0)
	{
		_worldWideTournamentLeaderboard[hero] = initialVictories;
	}

	public void AddLeaderboardEntry(Hero hero)
	{
		_worldWideTournamentLeaderboard.TryGetValue(hero, out var value);
		_worldWideTournamentLeaderboard[hero] = value + 1;
	}

	public void DeleteLeaderboardEntry(Hero hero)
	{
		if (_worldWideTournamentLeaderboard.ContainsKey(hero))
		{
			_worldWideTournamentLeaderboard.Remove(hero);
		}
	}

	public void ResolveTournament(TournamentGame tournament, Town town)
	{
		if (!town.IsUnderSiege)
		{
			MBList<CharacterObject> participantCharacters = tournament.GetParticipantCharacters(tournament.Town.Settlement, includePlayer: false);
			SimulateTournament(participantCharacters, tournament.Town, out var winner);
			if (winner.IsHero)
			{
				AddLeaderboardEntry(winner.HeroObject);
				GivePrizeToWinner(tournament, winner.HeroObject, isPlayerParticipated: false);
			}
			CampaignEventDispatcher.Instance.OnTournamentFinished(winner, participantCharacters, tournament.Town, tournament.Prize);
		}
		else
		{
			CampaignEventDispatcher.Instance.OnTournamentCancelled(town);
		}
		RemoveTournament(tournament);
	}

	private void SimulateTournament(MBList<CharacterObject> participants, Town town, out CharacterObject winner)
	{
		float num = -1f;
		winner = null;
		foreach (CharacterObject participant in participants)
		{
			if (participant.IsHero)
			{
				var (skill, num2) = Campaign.Current.Models.TournamentModel.GetSkillXpGainFromTournament(town);
				participant.HeroObject.HeroDeveloper.AddSkillXp(skill, num2);
			}
			float num3 = Campaign.Current.Models.TournamentModel.GetTournamentSimulationScore(participant) * (0.75f + 0.25f * MBRandom.RandomFloat);
			if (num3 > num)
			{
				winner = participant;
				num = num3;
			}
		}
	}

	public void GivePrizeToWinner(TournamentGame tournament, Hero winner, bool isPlayerParticipated)
	{
		if (!isPlayerParticipated)
		{
			tournament.UpdateTournamentPrize(isPlayerParticipated);
		}
		if (winner.PartyBelongedTo == MobileParty.MainParty)
		{
			winner.PartyBelongedTo.ItemRoster.AddToCounts(tournament.Prize, 1);
		}
		else if (winner.Clan != null)
		{
			GiveGoldAction.ApplyBetweenCharacters(null, winner.Clan.Leader, tournament.Town.MarketData.GetPrice(tournament.Prize));
		}
	}
}
