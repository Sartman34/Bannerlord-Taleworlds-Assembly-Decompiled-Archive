using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.TournamentGames;

public class FightTournamentGame : TournamentGame
{
	private const int LordLimitForEliteReward = 4;

	private const int EliteRewardLordCountToDivideRewards = 10;

	private const int EliteRewardGroupCount = 2;

	private const int RegularRewardMinimumValue = 1600;

	private const int RegularRewardMaximumValue = 5000;

	private const int ParticipateTournamentMinimumSkillLimit = 100;

	private const float RegularBannerRewardChance = 0.05f;

	public const int ParticipantTroopMinimumTierLimit = 3;

	private MBList<ItemObject> _possibleBannerRewardItemObjectsCache;

	private MBList<ItemObject> _possibleRegularRewardItemObjectsCache;

	private MBList<ItemObject> _possibleEliteRewardItemObjectsCache;

	public override int MaxTeamSize => 4;

	public override int MaxTeamNumberPerMatch => 4;

	public override int RemoveTournamentAfterDays => 15;

	public override int MaximumParticipantCount => 16;

	internal static void AutoGeneratedStaticCollectObjectsFightTournamentGame(object o, List<object> collectedObjects)
	{
		((FightTournamentGame)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	public FightTournamentGame(Town town)
		: base(town)
	{
		base.Mode = QualificationMode.TeamScore;
	}

	public override bool CanBeAParticipant(CharacterObject character, bool considerSkills)
	{
		if (!character.IsHero)
		{
			return character.Tier >= 3;
		}
		if (considerSkills)
		{
			if (character.HeroObject.GetSkillValue(DefaultSkills.OneHanded) < 100)
			{
				return character.HeroObject.GetSkillValue(DefaultSkills.TwoHanded) >= 100;
			}
			return true;
		}
		return true;
	}

	public override TextObject GetMenuText()
	{
		int num = GetParticipantCharacters(Settlement.CurrentSettlement, includePlayer: false).Count((CharacterObject p) => p.IsHero);
		TextObject textObject = new TextObject("{=!}{TOURNAMENT_EXPLANATION} {PRIZE_EXPLANATION}");
		textObject.SetTextVariable("TOURNAMENT_EXPLANATION", GameTexts.FindText("str_fighting_menu_text"));
		TextObject textObject2;
		if (num > 0)
		{
			textObject2 = new TextObject("{=GuWWKgEm}As you approach the arena, you overhear gossip about the contestants and prizes. Apparently there {?(NOBLE_COUNT > 1)}are {NOBLE_COUNT} lords{?}is 1 lord{\\?} with renowned fighting skills present in the city who plan to enter the tournament. Given this turnout, the organizers are offering {.a} \"{.%}{TOURNAMENT_PRIZE}{.%}\" for the victor.");
			textObject2.SetTextVariable("NOBLE_COUNT", num);
			textObject2.SetTextVariable("TOURNAMENT_PRIZE", base.Prize.Name);
		}
		else
		{
			textObject2 = new TextObject("{=mnAdqeGu}As you approach the arena, you overhear gossip about the contestants and prizes. Apparently there are no lords who plan to compete, but the winner will still receive a {TOURNAMENT_PRIZE}.");
			textObject2.SetTextVariable("TOURNAMENT_PRIZE", base.Prize.Name);
		}
		textObject.SetTextVariable("PRIZE_EXPLANATION", textObject2);
		return textObject;
	}

	public override void OpenMission(Settlement settlement, bool isPlayerParticipating)
	{
		int upgradeLevel = ((!settlement.IsTown) ? 1 : settlement.Town.GetWallLevel());
		SandBoxMission.OpenTournamentFightMission(LocationComplex.Current.GetScene("arena", upgradeLevel), this, settlement, settlement.Culture, isPlayerParticipating);
	}

	public override MBList<CharacterObject> GetParticipantCharacters(Settlement settlement, bool includePlayer = true)
	{
		MBList<CharacterObject> mBList = new MBList<CharacterObject>();
		if (includePlayer)
		{
			mBList.Add(CharacterObject.PlayerCharacter);
		}
		for (int i = 0; i < settlement.Parties.Count; i++)
		{
			if (mBList.Count >= MaximumParticipantCount)
			{
				break;
			}
			Hero leaderHero = settlement.Parties[i].LeaderHero;
			if (CanNpcJoinTournament(leaderHero, mBList, considerSkills: true))
			{
				if (leaderHero.CurrentSettlement != settlement)
				{
					Debug.Print(leaderHero.StringId + " is in settlement.Parties list but current settlement is not, tournament settlement: " + settlement.StringId);
				}
				mBList.Add(leaderHero.CharacterObject);
			}
		}
		for (int j = 0; j < settlement.HeroesWithoutParty.Count; j++)
		{
			if (mBList.Count >= MaximumParticipantCount)
			{
				break;
			}
			Hero hero = settlement.HeroesWithoutParty[j];
			if (CanNpcJoinTournament(hero, mBList, considerSkills: true) && hero.IsLord)
			{
				if (hero.CurrentSettlement != settlement)
				{
					Debug.Print(hero.StringId + " is in settlement.HeroesWithoutParty list but current settlement is not, tournament settlement: " + settlement.StringId);
				}
				mBList.Add(hero.CharacterObject);
			}
		}
		for (int k = 0; k < settlement.HeroesWithoutParty.Count; k++)
		{
			if (mBList.Count >= MaximumParticipantCount)
			{
				break;
			}
			Hero hero2 = settlement.HeroesWithoutParty[k];
			if (CanNpcJoinTournament(hero2, mBList, considerSkills: true) && !hero2.IsLord)
			{
				if (hero2.CurrentSettlement != settlement)
				{
					Debug.Print(hero2.StringId + " is in settlement.HeroesWithoutParty list but current settlement is not, tournament settlement: " + settlement.StringId);
				}
				mBList.Add(hero2.CharacterObject);
			}
		}
		for (int l = 0; l < settlement.Parties.Count; l++)
		{
			if (mBList.Count >= MaximumParticipantCount)
			{
				break;
			}
			foreach (TroopRosterElement item2 in settlement.Parties[l].MemberRoster.GetTroopRoster())
			{
				if (mBList.Count >= MaximumParticipantCount)
				{
					break;
				}
				CharacterObject character = item2.Character;
				if (character.IsHero && character.HeroObject.Clan == Clan.PlayerClan && CanNpcJoinTournament(character.HeroObject, mBList, considerSkills: true))
				{
					if (character.HeroObject.CurrentSettlement != settlement)
					{
						Debug.Print(character.HeroObject.StringId + " is in settlement.HeroesWithoutParty list but current settlement is not, tournament settlement: " + settlement.StringId);
					}
					mBList.Add(character);
				}
			}
		}
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		if (mBList.Count < MaximumParticipantCount && settlement.Town.GarrisonParty != null)
		{
			int num4 = MaximumParticipantCount - mBList.Count;
			foreach (TroopRosterElement item3 in settlement.Town.GarrisonParty.MemberRoster.GetTroopRoster())
			{
				if (CanBeAParticipant(item3.Character, considerSkills: false))
				{
					if (!mBList.Contains(item3.Character) && item3.Character.Tier == 3 && (float)num4 * 0.4f > (float)num)
					{
						mBList.Add(item3.Character);
						num++;
					}
					else if (!mBList.Contains(item3.Character) && item3.Character.Tier == 4 && (float)num4 * 0.4f > (float)num2)
					{
						mBList.Add(item3.Character);
						num2++;
					}
					else if (!mBList.Contains(item3.Character) && item3.Character.Tier == 5 && (float)num4 * 0.2f > (float)num3)
					{
						mBList.Add(item3.Character);
						num3++;
					}
				}
				if (mBList.Count >= MaximumParticipantCount)
				{
					break;
				}
			}
		}
		if (mBList.Count < MaximumParticipantCount)
		{
			List<CharacterObject> list = new List<CharacterObject>();
			CharacterObject basicTroop = ((settlement != null) ? settlement.Culture : Game.Current.ObjectManager.GetObject<CultureObject>("empire")).BasicTroop;
			GetUpgradeTargets(basicTroop, ref list);
			int num5 = MaximumParticipantCount - mBList.Count;
			foreach (CharacterObject item4 in list)
			{
				if (!mBList.Contains(item4) && item4.Tier == 3 && (float)num5 * 0.4f > (float)num)
				{
					mBList.Add(item4);
					num++;
				}
				else if (!mBList.Contains(item4) && item4.Tier == 4 && (float)num5 * 0.4f > (float)num2)
				{
					mBList.Add(item4);
					num2++;
				}
				else if (!mBList.Contains(item4) && item4.Tier == 5 && (float)num5 * 0.2f > (float)num3)
				{
					mBList.Add(item4);
					num3++;
				}
				if (mBList.Count >= MaximumParticipantCount)
				{
					break;
				}
			}
			if (!list.IsEmpty())
			{
				while (mBList.Count < MaximumParticipantCount)
				{
					list.Shuffle();
					for (int m = 0; m < list.Count; m++)
					{
						if (mBList.Count >= MaximumParticipantCount)
						{
							break;
						}
						mBList.Add(list[m]);
					}
				}
			}
		}
		while (mBList.Count < MaximumParticipantCount)
		{
			CultureObject cultureObject = ((settlement != null) ? settlement.Culture : Game.Current.ObjectManager.GetObject<CultureObject>("empire"));
			CharacterObject item = ((MBRandom.RandomFloat > 0.5f) ? cultureObject.BasicTroop : cultureObject.EliteBasicTroop);
			mBList.Add(item);
		}
		SortTournamentParticipants(mBList);
		return mBList;
	}

	private bool CanNpcJoinTournament(Hero hero, MBList<CharacterObject> participantCharacters, bool considerSkills)
	{
		if (hero != null && !hero.IsWounded && !hero.IsNoncombatant && !participantCharacters.Contains(hero.CharacterObject) && hero != Hero.MainHero && hero.Age >= (float)Campaign.Current.Models.AgeModel.HeroComesOfAge && (hero.IsLord || hero.IsWanderer))
		{
			return CanBeAParticipant(hero.CharacterObject, considerSkills);
		}
		return false;
	}

	private void GetUpgradeTargets(CharacterObject troop, ref List<CharacterObject> list)
	{
		if (!list.Contains(troop) && CanBeAParticipant(troop, considerSkills: false))
		{
			list.Add(troop);
		}
		CharacterObject[] upgradeTargets = troop.UpgradeTargets;
		foreach (CharacterObject troop2 in upgradeTargets)
		{
			GetUpgradeTargets(troop2, ref list);
		}
	}

	private void SortTournamentParticipants(MBList<CharacterObject> participantCharacters)
	{
		for (int i = 0; i < participantCharacters.Count - 1; i++)
		{
			for (int num = participantCharacters.Count - 1; num > i; num--)
			{
				if (GetTroopPriorityPointForTournament(participantCharacters[num]) > GetTroopPriorityPointForTournament(participantCharacters[i]))
				{
					CharacterObject value = participantCharacters[num];
					CharacterObject value2 = participantCharacters[i];
					participantCharacters[num] = value2;
					participantCharacters[i] = value;
				}
			}
		}
	}

	private int GetTroopPriorityPointForTournament(CharacterObject troop)
	{
		int num = 40000;
		if (troop == CharacterObject.PlayerCharacter)
		{
			num += 80000;
		}
		if (troop.IsHero)
		{
			num += 20000;
		}
		if (troop.IsHero && troop.HeroObject.IsPlayerCompanion)
		{
			return num + 10000;
		}
		if (troop.HeroObject?.Clan != null)
		{
			return num + (int)(troop.HeroObject.Clan?.Renown).Value;
		}
		return num + troop.Level;
	}

	protected override ItemObject GetTournamentPrize(bool includePlayer, int lastRecordedLordCountForTournamentPrize)
	{
		int num = GetParticipantCharacters(base.Town.Settlement, includePlayer).Count((CharacterObject p) => p.IsHero);
		if (lastRecordedLordCountForTournamentPrize != num || base.Prize == null)
		{
			_lastRecordedLordCountForTournamentPrize = num;
			if (num < 4)
			{
				ItemObject itemObject = null;
				if (MBRandom.RandomFloat < 0.05f)
				{
					if (_possibleBannerRewardItemObjectsCache == null || _possibleBannerRewardItemObjectsCache.IsEmpty())
					{
						CachePossibleBannerItems(isElite: false);
					}
					itemObject = _possibleBannerRewardItemObjectsCache.GetRandomElement();
				}
				if (itemObject == null)
				{
					if (_possibleRegularRewardItemObjectsCache == null || _possibleRegularRewardItemObjectsCache.IsEmpty())
					{
						CachePossibleRegularRewardItems();
					}
					int num2 = _possibleRegularRewardItemObjectsCache.Count / 4;
					int num3 = Math.Min(_possibleRegularRewardItemObjectsCache.Count, num2 * (num + 1));
					int minValue = Math.Max(0, num3 - num2);
					itemObject = _possibleRegularRewardItemObjectsCache[MBRandom.RandomInt(minValue, num3)];
				}
				if (itemObject != null)
				{
					return itemObject;
				}
				if (_possibleEliteRewardItemObjectsCache == null || _possibleEliteRewardItemObjectsCache.IsEmpty())
				{
					CachePossibleEliteRewardItems();
				}
				return _possibleEliteRewardItemObjectsCache.GetRandomElement();
			}
			if (_possibleEliteRewardItemObjectsCache == null || _possibleEliteRewardItemObjectsCache.IsEmpty())
			{
				CachePossibleEliteRewardItems();
				CachePossibleBannerItems(isElite: true);
			}
			int minValue2 = 0;
			int maxValue = _possibleEliteRewardItemObjectsCache.Count;
			if (num < 10)
			{
				maxValue = _possibleEliteRewardItemObjectsCache.Count / 2;
			}
			else
			{
				minValue2 = _possibleEliteRewardItemObjectsCache.Count / 2;
			}
			return _possibleEliteRewardItemObjectsCache[MBRandom.RandomInt(minValue2, maxValue)];
		}
		return base.Prize;
	}

	private void CachePossibleBannerItems(bool isElite)
	{
		if (_possibleBannerRewardItemObjectsCache == null)
		{
			_possibleBannerRewardItemObjectsCache = new MBList<ItemObject>();
		}
		foreach (ItemObject possibleRewardBannerItem in Campaign.Current.Models.BannerItemModel.GetPossibleRewardBannerItems())
		{
			if (isElite)
			{
				if (possibleRewardBannerItem.BannerComponent.BannerLevel == 3)
				{
					_possibleEliteRewardItemObjectsCache.Add(possibleRewardBannerItem);
				}
			}
			else if (possibleRewardBannerItem.BannerComponent.BannerLevel == 1 || possibleRewardBannerItem.BannerComponent.BannerLevel == 2)
			{
				_possibleBannerRewardItemObjectsCache.Add(possibleRewardBannerItem);
			}
		}
	}

	private void CachePossibleRegularRewardItems()
	{
		if (_possibleRegularRewardItemObjectsCache == null)
		{
			_possibleRegularRewardItemObjectsCache = new MBList<ItemObject>();
		}
		MBList<ItemObject> mBList = new MBList<ItemObject>();
		foreach (ItemObject item in Items.All)
		{
			if (item.Value > 1600 && item.Value < 5000 && !item.NotMerchandise && (item.IsCraftedWeapon || item.IsMountable || item.ArmorComponent != null) && !item.IsCraftedByPlayer)
			{
				if (item.Culture == base.Town.Culture)
				{
					_possibleRegularRewardItemObjectsCache.Add(item);
				}
				else
				{
					mBList.Add(item);
				}
			}
		}
		if (_possibleRegularRewardItemObjectsCache.IsEmpty())
		{
			_possibleRegularRewardItemObjectsCache.AddRange(mBList);
		}
		_possibleRegularRewardItemObjectsCache.Sort((ItemObject x, ItemObject y) => x.Value.CompareTo(y.Value));
	}

	private void CachePossibleEliteRewardItems()
	{
		if (_possibleEliteRewardItemObjectsCache == null)
		{
			_possibleEliteRewardItemObjectsCache = new MBList<ItemObject>();
		}
		string[] array = new string[31]
		{
			"winds_fury_sword_t3", "bone_crusher_mace_t3", "tyrhung_sword_t3", "pernach_mace_t3", "early_retirement_2hsword_t3", "black_heart_2haxe_t3", "knights_fall_mace_t3", "the_scalpel_sword_t3", "judgement_mace_t3", "dawnbreaker_sword_t3",
			"ambassador_sword_t3", "heavy_nasalhelm_over_imperial_mail", "sturgian_helmet_closed", "full_helm_over_laced_coif", "desert_mail_coif", "heavy_nasalhelm_over_imperial_mail", "plumed_nomad_helmet", "ridged_northernhelm", "noble_horse_southern", "noble_horse_imperial",
			"noble_horse_western", "noble_horse_eastern", "noble_horse_battania", "noble_horse_northern", "special_camel", "western_crowned_helmet", "northern_warlord_helmet", "battania_warlord_pauldrons", "aserai_armor_02_b", "white_coat_over_mail",
			"spiked_helmet_with_facemask"
		};
		foreach (string objectName in array)
		{
			_possibleEliteRewardItemObjectsCache.Add(Game.Current.ObjectManager.GetObject<ItemObject>(objectName));
		}
		_possibleEliteRewardItemObjectsCache.Sort((ItemObject x, ItemObject y) => x.Value.CompareTo(y.Value));
	}
}
