using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.TournamentGames;

public abstract class TournamentGame
{
	public enum QualificationMode
	{
		IndividualScore,
		TeamScore
	}

	[SaveableField(60)]
	protected int _lastRecordedLordCountForTournamentPrize;

	[SaveableProperty(10)]
	public Town Town { get; private set; }

	[SaveableProperty(20)]
	public CampaignTime CreationTime { get; private set; }

	[SaveableProperty(30)]
	public QualificationMode Mode { get; protected set; }

	public virtual int MaxTeamSize => 1;

	public virtual int MaxTeamNumberPerMatch => 2;

	[SaveableProperty(40)]
	public ItemObject Prize { get; private set; }

	public virtual float TournamentWinRenown => Campaign.Current.Models.TournamentModel.GetRenownReward(Hero.MainHero, Town);

	public virtual float TournamentWinInfluence => Campaign.Current.Models.TournamentModel.GetInfluenceReward(Hero.MainHero, Town);

	public abstract int RemoveTournamentAfterDays { get; }

	public abstract int MaximumParticipantCount { get; }

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(Town);
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(CreationTime, collectedObjects);
		collectedObjects.Add(Prize);
	}

	internal static object AutoGeneratedGetMemberValueTown(object o)
	{
		return ((TournamentGame)o).Town;
	}

	internal static object AutoGeneratedGetMemberValueCreationTime(object o)
	{
		return ((TournamentGame)o).CreationTime;
	}

	internal static object AutoGeneratedGetMemberValueMode(object o)
	{
		return ((TournamentGame)o).Mode;
	}

	internal static object AutoGeneratedGetMemberValuePrize(object o)
	{
		return ((TournamentGame)o).Prize;
	}

	internal static object AutoGeneratedGetMemberValue_lastRecordedLordCountForTournamentPrize(object o)
	{
		return ((TournamentGame)o)._lastRecordedLordCountForTournamentPrize;
	}

	public abstract TextObject GetMenuText();

	public abstract void OpenMission(Settlement settlement, bool isPlayerParticipating);

	public abstract MBList<CharacterObject> GetParticipantCharacters(Settlement settlement, bool includePlayer = true);

	protected abstract ItemObject GetTournamentPrize(bool includePlayer, int lastRecordedLordCountForTournamentPrize);

	protected TournamentGame(Town town, ItemObject prize = null)
	{
		Town = town;
		Prize = prize ?? GetTournamentPrize(includePlayer: false, _lastRecordedLordCountForTournamentPrize);
		CreationTime = CampaignTime.Now;
		_lastRecordedLordCountForTournamentPrize = 0;
	}

	public virtual bool CanBeAParticipant(CharacterObject character, bool considerSkills)
	{
		return true;
	}

	public void PrepareForTournamentGame(bool isPlayerParticipating)
	{
		OpenMission(Settlement.CurrentSettlement, isPlayerParticipating);
	}

	public void UpdateTournamentPrize(bool includePlayer, bool removeCurrentPrize = false)
	{
		if (removeCurrentPrize)
		{
			Prize = null;
		}
		Prize = GetTournamentPrize(includePlayer, _lastRecordedLordCountForTournamentPrize);
	}
}
