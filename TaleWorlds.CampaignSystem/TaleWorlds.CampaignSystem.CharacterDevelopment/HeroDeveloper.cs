using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment;

public class HeroDeveloper : PropertyOwnerF<PropertyObject>, IHeroDeveloper
{
	[SaveableField(100)]
	private CharacterSkills _newFocuses;

	[SaveableField(130)]
	private int _totalXp;

	[SaveableProperty(101)]
	public int UnspentFocusPoints { get; set; }

	[SaveableProperty(102)]
	public int UnspentAttributePoints { get; set; }

	public bool IsDeveloperInitialized => Hero != null;

	[SaveableProperty(103)]
	public Hero Hero { get; private set; }

	public int TotalXp
	{
		get
		{
			return _totalXp;
		}
		private set
		{
			_totalXp = value;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsHeroDeveloper(object o, List<object> collectedObjects)
	{
		((HeroDeveloper)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_newFocuses);
		collectedObjects.Add(Hero);
	}

	internal static object AutoGeneratedGetMemberValueUnspentFocusPoints(object o)
	{
		return ((HeroDeveloper)o).UnspentFocusPoints;
	}

	internal static object AutoGeneratedGetMemberValueUnspentAttributePoints(object o)
	{
		return ((HeroDeveloper)o).UnspentAttributePoints;
	}

	internal static object AutoGeneratedGetMemberValueHero(object o)
	{
		return ((HeroDeveloper)o).Hero;
	}

	internal static object AutoGeneratedGetMemberValue_newFocuses(object o)
	{
		return ((HeroDeveloper)o)._newFocuses;
	}

	internal static object AutoGeneratedGetMemberValue_totalXp(object o)
	{
		return ((HeroDeveloper)o)._totalXp;
	}

	public int GetSkillXpProgress(SkillObject skill)
	{
		int skillValue = Hero.GetSkillValue(skill);
		return TaleWorlds.Library.MathF.Round(GetPropertyValue(skill)) - Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(skillValue);
	}

	internal HeroDeveloper(Hero hero)
	{
		Hero = hero;
		_newFocuses = new CharacterSkills();
	}

	public void ClearUnspentPoints()
	{
		UnspentAttributePoints = 0;
		UnspentFocusPoints = 0;
	}

	public void ClearHero()
	{
		ClearAllProperty();
		ClearFocuses();
		Hero.ClearAttributes();
		Hero.ClearSkills();
		Hero.ClearPerks();
		UnspentFocusPoints = 0;
		UnspentAttributePoints = 0;
		Hero.ClearTraits();
		ClearHeroLevel();
	}

	public void InitializeHeroDeveloper(bool isByNaturalGrowth = false, CharacterObject template = null)
	{
		DeriveSkillsFromTraits(isByNaturalGrowth, template);
		SetInitialLevelFromSkills();
		CheckLevel();
		SetupDefaultPoints();
		SetInitialFocusAndAttributePoints();
		if (!Hero.IsChild)
		{
			DevelopCharacterStats();
		}
	}

	public void DevelopCharacterStats()
	{
		if (UnspentAttributePoints > 0)
		{
			DistributeUnspentAttributePoints();
		}
		if (UnspentFocusPoints > 0)
		{
			DistributeUnspentFocusPoints();
		}
		SelectPerks();
	}

	public int GetTotalSkillPoints()
	{
		int num = 0;
		foreach (SkillObject item in Skills.All)
		{
			num += Hero.GetSkillValue(item);
		}
		return num;
	}

	public void ChangeSkillLevel(SkillObject skill, int changeAmount, bool shouldNotify = true)
	{
		int skillValue = Hero.GetSkillValue(skill);
		int num = skillValue + changeAmount;
		float num2 = 0f;
		float propertyValue = GetPropertyValue(skill);
		num2 -= propertyValue - (float)Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(skillValue);
		for (int i = skillValue + 1; i <= num; i++)
		{
			num2 += (float)(Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(i) - Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(i - 1));
		}
		AddSkillXp(skill, num2 + 1f, isAffectedByFocusFactor: false, shouldNotify);
	}

	private void DeriveSkillsFromTraits(bool isByNaturalGrowth = false, CharacterObject template = null)
	{
		foreach (Tuple<SkillObject, int> skillsDerivedFromTrait in Campaign.Current.Models.CharacterDevelopmentModel.GetSkillsDerivedFromTraits(Hero, template, isByNaturalGrowth))
		{
			SkillObject item = skillsDerivedFromTrait.Item1;
			int item2 = skillsDerivedFromTrait.Item2;
			if (Hero.GetSkillValue(item) < item2)
			{
				SetInitialSkillLevel(item, item2);
			}
		}
	}

	public void SetInitialSkillLevel(SkillObject skill, int newSkillValue)
	{
		int xpRequiredForSkillLevel = Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(newSkillValue);
		SetPropertyValue(skill, xpRequiredForSkillLevel);
		Hero.SetSkillValue(skill, newSkillValue);
		InitializeSkillXp(skill);
	}

	public void AddSkillXp(SkillObject skill, float rawXp, bool isAffectedByFocusFactor = true, bool shouldNotify = true)
	{
		if (rawXp <= 0f)
		{
			return;
		}
		if (isAffectedByFocusFactor)
		{
			GainRawXp(rawXp, shouldNotify);
		}
		float num = rawXp * Campaign.Current.Models.GenericXpModel.GetXpMultiplier(Hero);
		if (!(num <= 0f))
		{
			float propertyValue = GetPropertyValue(skill);
			float focusFactor = GetFocusFactor(skill);
			float num2 = (isAffectedByFocusFactor ? (num * focusFactor) : num);
			float num3 = propertyValue + num2;
			int skillLevelChange = Campaign.Current.Models.CharacterDevelopmentModel.GetSkillLevelChange(Hero, skill, num3);
			SetPropertyValue(skill, num3);
			if (skillLevelChange > 0)
			{
				ChangeSkillLevelFromXpChange(skill, skillLevelChange, shouldNotify);
			}
		}
	}

	private void GainRawXp(float rawXp, bool shouldNotify)
	{
		if ((long)_totalXp + (long)TaleWorlds.Library.MathF.Round(rawXp) < Campaign.Current.Models.CharacterDevelopmentModel.GetMaxSkillPoint())
		{
			_totalXp += TaleWorlds.Library.MathF.Round(rawXp);
			CheckLevel(shouldNotify);
		}
		else
		{
			_totalXp = Campaign.Current.Models.CharacterDevelopmentModel.GetMaxSkillPoint();
		}
	}

	public float GetFocusFactor(SkillObject skill)
	{
		return Campaign.Current.Models.CharacterDevelopmentModel.CalculateLearningRate(Hero, skill);
	}

	private void ChangeSkillLevelFromXpChange(SkillObject skill, int changeAmount, bool shouldNotify = false)
	{
		if (changeAmount != 0)
		{
			int value = Hero.GetSkillValue(skill) + changeAmount;
			Hero.SetSkillValue(skill, value);
			CampaignEventDispatcher.Instance.OnHeroGainedSkill(Hero, skill, changeAmount, shouldNotify);
		}
	}

	void IHeroDeveloper.AfterLoad()
	{
		AfterLoadInternal();
	}

	internal void CheckLevel(bool shouldNotify = false)
	{
		bool flag = false;
		int totalXp = _totalXp;
		while (!flag)
		{
			int xpRequiredForLevel = GetXpRequiredForLevel(Hero.Level + 1);
			if (xpRequiredForLevel != Campaign.Current.Models.CharacterDevelopmentModel.GetMaxSkillPoint() && totalXp >= xpRequiredForLevel)
			{
				Hero.Level++;
				OnGainLevel(shouldNotify);
			}
			else
			{
				flag = true;
			}
		}
	}

	public void SetInitialLevel(int level)
	{
		int xpRequiredForLevel = GetXpRequiredForLevel(level);
		TotalXp = xpRequiredForLevel + 1;
	}

	private void SetupDefaultPoints()
	{
		UnspentFocusPoints = (Hero.Level - 1) * Campaign.Current.Models.CharacterDevelopmentModel.FocusPointsPerLevel + Campaign.Current.Models.CharacterDevelopmentModel.FocusPointsAtStart;
		UnspentAttributePoints = (Hero.Level - 1) / Campaign.Current.Models.CharacterDevelopmentModel.LevelsPerAttributePoint + Campaign.Current.Models.CharacterDevelopmentModel.AttributePointsAtStart;
	}

	private void SetInitialLevelFromSkills()
	{
		int b = (int)Skills.All.Sum((SkillObject s) => 2f * TaleWorlds.Library.MathF.Pow(Hero.GetSkillValue(s), 2.2f)) - 2000;
		TotalXp = TaleWorlds.Library.MathF.Max(1, b);
	}

	private void SetInitialFocusAndAttributePoints()
	{
		foreach (CharacterAttribute item in Attributes.All)
		{
			int attributeValue = Hero.GetAttributeValue(item);
			UnspentAttributePoints -= attributeValue;
			if (attributeValue == 0)
			{
				AddAttribute(item, 1);
			}
		}
		foreach (SkillObject item2 in Skills.All)
		{
			UnspentFocusPoints -= GetFocus(item2);
			InitializeSkillXp(item2);
		}
	}

	private void DistributeUnspentAttributePoints()
	{
		while (UnspentAttributePoints > 0)
		{
			CharacterAttribute nextAttributeToUpgrade = Campaign.Current.Models.CharacterDevelopmentModel.GetNextAttributeToUpgrade(Hero);
			if (nextAttributeToUpgrade != null)
			{
				AddAttribute(nextAttributeToUpgrade, 1);
				continue;
			}
			break;
		}
	}

	private void ClearHeroLevel()
	{
		Hero.Level = 0;
	}

	public void AddPerk(PerkObject perk)
	{
		Hero.SetPerkValueInternal(perk, value: true);
	}

	private void OnGainLevel(bool shouldNotify = true)
	{
		UnspentFocusPoints += Campaign.Current.Models.CharacterDevelopmentModel.FocusPointsPerLevel;
		if (Hero.Level % Campaign.Current.Models.CharacterDevelopmentModel.LevelsPerAttributePoint == 0)
		{
			UnspentAttributePoints++;
		}
		CampaignEventDispatcher.Instance.OnHeroLevelledUp(Hero, shouldNotify);
	}

	public int GetXpRequiredForLevel(int level)
	{
		return Campaign.Current.Models.CharacterDevelopmentModel.SkillsRequiredForLevel(level);
	}

	public void RemoveAttribute(CharacterAttribute attrib, int changeAmount)
	{
		if (changeAmount != 0)
		{
			int value = Hero.GetAttributeValue(attrib) - changeAmount;
			Hero.SetAttributeValueInternal(attrib, value);
		}
	}

	public void AddAttribute(CharacterAttribute attrib, int changeAmount, bool checkUnspentPoints = true)
	{
		if (changeAmount == 0)
		{
			return;
		}
		int attributeValue = Hero.GetAttributeValue(attrib);
		if (attributeValue + changeAmount <= Campaign.Current.Models.CharacterDevelopmentModel.MaxAttribute && !(UnspentAttributePoints < 1 && checkUnspentPoints))
		{
			int value = attributeValue + changeAmount;
			Hero.SetAttributeValueInternal(attrib, value);
			if (checkUnspentPoints)
			{
				UnspentAttributePoints--;
			}
		}
	}

	private void ClearFocuses()
	{
		_newFocuses.ClearAllProperty();
	}

	public void AddFocus(SkillObject skill, int changeAmount, bool checkUnspentFocusPoints = true)
	{
		int focus = GetFocus(skill);
		int requiredFocusPointsToAddFocus = GetRequiredFocusPointsToAddFocus(skill);
		int newAmount = focus + changeAmount;
		SetFocus(skill, newAmount);
		UnspentFocusPoints = (checkUnspentFocusPoints ? (UnspentFocusPoints - requiredFocusPointsToAddFocus) : UnspentFocusPoints);
	}

	public void RemoveFocus(SkillObject skill, int changeAmount)
	{
		int newAmount = GetFocus(skill) - changeAmount;
		SetFocus(skill, newAmount);
	}

	public bool CanAddFocusToSkill(SkillObject skill)
	{
		if (GetFocus(skill) < Campaign.Current.Models.CharacterDevelopmentModel.MaxFocusPerSkill)
		{
			return UnspentFocusPoints >= GetRequiredFocusPointsToAddFocus(skill);
		}
		return false;
	}

	public int GetRequiredFocusPointsToAddFocus(SkillObject skill)
	{
		return 1;
	}

	private void SetFocus(SkillObject focus, int newAmount)
	{
		_newFocuses.SetPropertyValue(focus, newAmount);
	}

	public int GetFocus(SkillObject skill)
	{
		return _newFocuses.GetPropertyValue(skill);
	}

	private void DistributeUnspentFocusPoints()
	{
		while (UnspentFocusPoints > 0)
		{
			SkillObject nextSkillToAddFocus = Campaign.Current.Models.CharacterDevelopmentModel.GetNextSkillToAddFocus(Hero);
			if (nextSkillToAddFocus != null)
			{
				AddFocus(nextSkillToAddFocus, 1);
				continue;
			}
			break;
		}
	}

	public bool GetPerkValue(PerkObject perk)
	{
		return Hero.GetPerkValue(perk);
	}

	private void SelectPerks()
	{
		foreach (PerkObject item in PerkObject.All)
		{
			if ((float)Hero.GetSkillValue(item.Skill) >= item.RequiredSkillValue && !Hero.GetPerkValue(item) && (item.AlternativePerk == null || !Hero.GetPerkValue(item.AlternativePerk)))
			{
				PerkObject nextPerkToChoose = Campaign.Current.Models.CharacterDevelopmentModel.GetNextPerkToChoose(Hero, item);
				if (nextPerkToChoose != null)
				{
					AddPerk(nextPerkToChoose);
				}
			}
		}
	}

	public void InitializeSkillXp(SkillObject skill)
	{
		int xpRequiredForSkillLevel = Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(Hero.GetSkillValue(skill));
		SetPropertyValue(skill, xpRequiredForSkillLevel);
	}

	protected override void AfterLoad()
	{
		if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.6"))
		{
			foreach (CharacterAttribute item in Attributes.All)
			{
				if (Hero.GetAttributeValue(item) == 0)
				{
					InitializeHeroDeveloper();
					break;
				}
			}
		}
		if (!MBSaveLoad.IsUpdatingGameVersion || !(MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.0")))
		{
			return;
		}
		if (Hero.Age >= (float)Campaign.Current.Models.AgeModel.HeroComesOfAge && Campaign.Current.Models.CharacterDevelopmentModel.SkillsRequiredForLevel(Hero.Level) > TotalXp)
		{
			TotalXp = Campaign.Current.Models.CharacterDevelopmentModel.SkillsRequiredForLevel(Hero.Level);
			CheckLevel();
		}
		foreach (SkillObject item2 in Skills.All)
		{
			if (GetSkillXpProgress(item2) < 0)
			{
				InitializeSkillXp(item2);
			}
		}
	}
}
