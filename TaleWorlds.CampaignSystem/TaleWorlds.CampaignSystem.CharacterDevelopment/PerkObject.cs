using System.Collections.Generic;
using Helpers;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment;

public sealed class PerkObject : PropertyObject
{
	public static MBReadOnlyList<PerkObject> All => Campaign.Current.AllPerks;

	public SkillObject Skill { get; private set; }

	public float RequiredSkillValue { get; private set; }

	public PerkObject AlternativePerk { get; private set; }

	public SkillEffect.PerkRole PrimaryRole { get; private set; }

	public SkillEffect.PerkRole SecondaryRole { get; private set; }

	public float PrimaryBonus { get; private set; }

	public float SecondaryBonus { get; private set; }

	public SkillEffect.EffectIncrementType PrimaryIncrementType { get; private set; }

	public SkillEffect.EffectIncrementType SecondaryIncrementType { get; private set; }

	public TroopUsageFlags PrimaryTroopUsageMask { get; private set; }

	public TroopUsageFlags SecondaryTroopUsageMask { get; private set; }

	public TextObject PrimaryDescription { get; private set; }

	public TextObject SecondaryDescription { get; private set; }

	public bool IsTrash
	{
		get
		{
			if (base.Name != null && base.Description != null)
			{
				return Skill == null;
			}
			return true;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsPerkObject(object o, List<object> collectedObjects)
	{
		((PerkObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	public PerkObject(string stringId)
		: base(stringId)
	{
	}

	public void Initialize(string name, SkillObject skill, int requiredSkillValue, PerkObject alternativePerk, string primaryDescription, SkillEffect.PerkRole primaryRole, float primaryBonus, SkillEffect.EffectIncrementType incrementType, string secondaryDescription = "", SkillEffect.PerkRole secondaryRole = SkillEffect.PerkRole.None, float secondaryBonus = 0f, SkillEffect.EffectIncrementType secondaryIncrementType = SkillEffect.EffectIncrementType.Invalid, TroopUsageFlags primaryTroopUsageMask = TroopUsageFlags.Undefined, TroopUsageFlags secondaryTroopUsageMask = TroopUsageFlags.Undefined)
	{
		PrimaryDescription = new TextObject(primaryDescription);
		SecondaryDescription = new TextObject(secondaryDescription);
		PerkHelper.SetDescriptionTextVariable(PrimaryDescription, primaryBonus, incrementType);
		TextObject textObject;
		if (secondaryDescription != "")
		{
			PerkHelper.SetDescriptionTextVariable(SecondaryDescription, secondaryBonus, secondaryIncrementType);
			textObject = GameTexts.FindText("str_string_newline_newline_string");
			textObject.SetTextVariable("STR1", PrimaryDescription);
			textObject.SetTextVariable("STR2", SecondaryDescription);
		}
		else
		{
			textObject = PrimaryDescription.CopyTextObject();
		}
		textObject.SetTextVariable("newline", "\n");
		Initialize(new TextObject(name), textObject);
		Skill = skill;
		RequiredSkillValue = requiredSkillValue;
		AlternativePerk = alternativePerk;
		if (alternativePerk != null)
		{
			alternativePerk.AlternativePerk = this;
		}
		PrimaryRole = primaryRole;
		SecondaryRole = secondaryRole;
		PrimaryBonus = primaryBonus;
		SecondaryBonus = secondaryBonus;
		PrimaryIncrementType = incrementType;
		SecondaryIncrementType = ((secondaryIncrementType == SkillEffect.EffectIncrementType.Invalid) ? PrimaryIncrementType : secondaryIncrementType);
		PrimaryTroopUsageMask = primaryTroopUsageMask;
		SecondaryTroopUsageMask = secondaryTroopUsageMask;
		AfterInitialized();
	}

	public override string ToString()
	{
		return base.Name.ToString();
	}
}
