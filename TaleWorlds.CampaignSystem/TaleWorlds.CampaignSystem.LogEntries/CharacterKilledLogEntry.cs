using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class CharacterKilledLogEntry : LogEntry, IEncyclopediaLog, IChatNotification, IWarLog
{
	[SaveableField(120)]
	public readonly Hero Victim;

	[SaveableField(121)]
	public readonly Hero Killer;

	[SaveableField(122)]
	private readonly KillCharacterAction.KillCharacterActionDetail _actionDetail;

	[SaveableField(124)]
	private readonly IFaction VictimMapFaction;

	[SaveableField(125)]
	private readonly IFaction KillerMapFaction;

	public bool IsVisibleNotification => true;

	public override ChatNotificationType NotificationType => CivilianNotification(Victim.Clan);

	public override CampaignTime KeepInHistoryTime => CampaignTime.Never;

	internal static void AutoGeneratedStaticCollectObjectsCharacterKilledLogEntry(object o, List<object> collectedObjects)
	{
		((CharacterKilledLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Victim);
		collectedObjects.Add(Killer);
		collectedObjects.Add(VictimMapFaction);
		collectedObjects.Add(KillerMapFaction);
	}

	internal static object AutoGeneratedGetMemberValueVictim(object o)
	{
		return ((CharacterKilledLogEntry)o).Victim;
	}

	internal static object AutoGeneratedGetMemberValueKiller(object o)
	{
		return ((CharacterKilledLogEntry)o).Killer;
	}

	internal static object AutoGeneratedGetMemberValue_actionDetail(object o)
	{
		return ((CharacterKilledLogEntry)o)._actionDetail;
	}

	internal static object AutoGeneratedGetMemberValueVictimMapFaction(object o)
	{
		return ((CharacterKilledLogEntry)o).VictimMapFaction;
	}

	internal static object AutoGeneratedGetMemberValueKillerMapFaction(object o)
	{
		return ((CharacterKilledLogEntry)o).KillerMapFaction;
	}

	public CharacterKilledLogEntry(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail)
	{
		Victim = victim;
		Killer = killer;
		VictimMapFaction = victim.MapFaction;
		KillerMapFaction = killer?.MapFaction;
		_actionDetail = detail;
	}

	public override int AsReasonForEnmity(Hero potentialKiller, Hero potentialRelative)
	{
		if (Killer != null && potentialKiller == Killer && !potentialRelative.Clan.IsMapFaction && potentialRelative.Clan == Victim.Clan)
		{
			return 10;
		}
		return 0;
	}

	public override string ToString()
	{
		return GetEncyclopediaText().ToString();
	}

	public override TextObject GetHistoricComment(Hero talkTroop)
	{
		if (Killer == null)
		{
			return TextObject.Empty;
		}
		ConversationHelper.HeroRefersToHero(talkTroop, Victim, uppercaseFirst: true);
		MBTextManager.SetTextVariable("HERO_1", Killer.Name);
		MBTextManager.SetTextVariable("HERO_2", Victim.Name);
		return GameTexts.FindText("str_responsible_of_death_news");
	}

	public TextObject GetNotificationText()
	{
		TextObject textObject = TextObject.Empty;
		if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.DiedOfOldAge)
		{
			textObject = new TextObject("{=5GSrvawr}{VICTIM.NAME} died of old age. {?VICTIM.GENDER}Her{?}His{\\?} family and friends will remember {?VICTIM.GENDER}her{?}him{\\?}.");
			StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.Murdered)
		{
			if (Killer != null)
			{
				textObject = GameTexts.FindText("str_responsible_of_death_link_news");
				StringHelpers.SetCharacterProperties("HERO_1", Killer.CharacterObject, textObject);
				StringHelpers.SetCharacterProperties("HERO_2", Victim.CharacterObject, textObject);
			}
			else
			{
				textObject = GameTexts.FindText("str_murdered_passive_news");
				StringHelpers.SetCharacterProperties("HERO_2", Victim.CharacterObject, textObject);
			}
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.DiedInBattle)
		{
			textObject = new TextObject("{=BhDWm78v}{VICTIM.NAME} has died in battle.");
			StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.DiedInLabor)
		{
			textObject = GameTexts.FindText("str_notification_maternal_death");
			StringHelpers.SetCharacterProperties("MOTHER", Victim.CharacterObject, textObject);
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.Executed)
		{
			if (Killer != null)
			{
				textObject = new TextObject("{=hB8CU9LP}{VICTIM.NAME} has been executed by {KILLER.NAME}.");
				StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
				StringHelpers.SetCharacterProperties("KILLER", Killer.CharacterObject, textObject);
			}
			else
			{
				textObject = new TextObject("{=mwbYdaJr}{VICTIM.NAME} has been executed.");
				StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
			}
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.Lost)
		{
			textObject = new TextObject("{=pVkchhqX}{VICTIM.NAME} was lost.");
			StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
		}
		return textObject;
	}

	public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
	{
		if (obj != Victim)
		{
			return obj == Killer;
		}
		return true;
	}

	public TextObject GetEncyclopediaText()
	{
		TextObject textObject = TextObject.Empty;
		if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.DiedOfOldAge)
		{
			textObject = new TextObject("{=KWBwCq1Y}{VICTIM.LINK} died of old age.");
			StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.Murdered)
		{
			if (Killer != null)
			{
				textObject = GameTexts.FindText("str_responsible_of_death_link_news");
				StringHelpers.SetCharacterProperties("HERO_1", Killer.CharacterObject, textObject);
				StringHelpers.SetCharacterProperties("HERO_2", Victim.CharacterObject, textObject);
			}
			else
			{
				textObject = GameTexts.FindText("str_murdered_passive_news");
				StringHelpers.SetCharacterProperties("HERO_2", Victim.CharacterObject, textObject);
			}
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.DiedInBattle)
		{
			if (KillerMapFaction != null)
			{
				textObject = new TextObject("{=kknvzzcG}{VICTIM.LINK} died in a battle against {FACTION_LINK}.");
				textObject.SetTextVariable("FACTION_LINK", KillerMapFaction.EncyclopediaLinkWithName);
			}
			else
			{
				textObject = new TextObject("{=mjSauU7P}{VICTIM.LINK} died in battle.");
			}
			StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.DiedInLabor)
		{
			textObject = GameTexts.FindText("str_notification_maternal_death");
			StringHelpers.SetCharacterProperties("MOTHER", Victim.CharacterObject, textObject);
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.Executed)
		{
			if (Killer != null)
			{
				textObject = new TextObject("{=b6Spbd9O}{VICTIM.LINK} has been executed by {KILLER.LINK}.");
				StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
				StringHelpers.SetCharacterProperties("KILLER", Killer.CharacterObject, textObject);
			}
			else
			{
				textObject = new TextObject("{=NacogXav}{VICTIM.LINK} has been executed.");
				StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
			}
		}
		else if (_actionDetail == KillCharacterAction.KillCharacterActionDetail.Lost)
		{
			textObject = new TextObject("{=NKTbhIoi}{VICTIM.LINK} was lost.");
			StringHelpers.SetCharacterProperties("VICTIM", Victim.CharacterObject, textObject);
		}
		return textObject;
	}

	public bool IsRelatedToWar(StanceLink stance, out IFaction effector, out IFaction effected)
	{
		IFaction faction = stance.Faction1;
		IFaction faction2 = stance.Faction2;
		effector = VictimMapFaction;
		effected = KillerMapFaction;
		if ((_actionDetail == KillCharacterAction.KillCharacterActionDetail.DiedInBattle || _actionDetail == KillCharacterAction.KillCharacterActionDetail.Executed) && effector != null && effected != null)
		{
			if (faction != VictimMapFaction || faction2 != KillerMapFaction)
			{
				if (faction2 == VictimMapFaction)
				{
					return faction == KillerMapFaction;
				}
				return false;
			}
			return true;
		}
		return false;
	}
}
