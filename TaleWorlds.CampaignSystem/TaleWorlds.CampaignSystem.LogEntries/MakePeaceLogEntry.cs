using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class MakePeaceLogEntry : LogEntry, IEncyclopediaLog, IChatNotification
{
	[SaveableField(240)]
	public readonly IFaction Faction1;

	[SaveableField(241)]
	public readonly IFaction Faction2;

	public bool IsVisibleNotification => true;

	public override CampaignTime KeepInHistoryTime => CampaignTime.Days(40f);

	public override ChatNotificationType NotificationType => DiplomaticNotification(Faction1, Faction2);

	internal static void AutoGeneratedStaticCollectObjectsMakePeaceLogEntry(object o, List<object> collectedObjects)
	{
		((MakePeaceLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Faction1);
		collectedObjects.Add(Faction2);
	}

	internal static object AutoGeneratedGetMemberValueFaction1(object o)
	{
		return ((MakePeaceLogEntry)o).Faction1;
	}

	internal static object AutoGeneratedGetMemberValueFaction2(object o)
	{
		return ((MakePeaceLogEntry)o).Faction2;
	}

	public MakePeaceLogEntry(IFaction faction1, IFaction faction2)
	{
		Faction1 = faction1;
		Faction2 = faction2;
	}

	public override int GetAsRumor(Settlement talkSettlement, ref TextObject comment)
	{
		if (Faction1 == talkSettlement.MapFaction)
		{
			comment = new TextObject("{=wfb0FnbW}At last they've made peace with {ENEMY_NAME}. Good. I hope it lasts.");
			comment.SetTextVariable("ENEMY_NAME", FactionHelper.GetTermUsedByOtherFaction(Faction2, talkSettlement.MapFaction, pejorative: false));
			return 10;
		}
		if (Faction2 == talkSettlement.MapFaction)
		{
			comment = new TextObject("{=94wCiGjB}So it seems as though {ENEMY_NAME} have had enough of war. Good. Peace is good.");
			comment.SetTextVariable("ENEMY_NAME", FactionHelper.GetTermUsedByOtherFaction(Faction1, talkSettlement.MapFaction, pejorative: false));
			return 10;
		}
		return 0;
	}

	public override string ToString()
	{
		return GetEncyclopediaText().ToString();
	}

	public TextObject GetNotificationText()
	{
		TextObject textObject = GameTexts.FindText("str_notification_secondary_peace");
		textObject.SetTextVariable("FACTION1", Faction1.InformalName);
		textObject.SetTextVariable("FACTION2", Faction2.InformalName);
		return textObject;
	}

	public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
	{
		if (obj != Faction1)
		{
			return obj == Faction2;
		}
		return true;
	}

	public TextObject GetEncyclopediaText()
	{
		TextObject textObject = GameTexts.FindText("str_factions_make_peace_news");
		textObject.SetTextVariable("FACTION1", Faction1.EncyclopediaLinkWithName);
		textObject.SetTextVariable("FACTION2", Faction2.EncyclopediaLinkWithName);
		return textObject;
	}
}
