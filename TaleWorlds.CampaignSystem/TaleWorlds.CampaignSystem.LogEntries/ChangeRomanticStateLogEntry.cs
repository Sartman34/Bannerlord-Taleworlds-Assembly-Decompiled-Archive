using System.Collections.Generic;
using Helpers;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class ChangeRomanticStateLogEntry : LogEntry
{
	[SaveableField(70)]
	public readonly Hero Hero1;

	[SaveableField(71)]
	public readonly Hero Hero2;

	[SaveableField(72)]
	public readonly Romance.RomanceLevelEnum Level;

	internal static void AutoGeneratedStaticCollectObjectsChangeRomanticStateLogEntry(object o, List<object> collectedObjects)
	{
		((ChangeRomanticStateLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Hero1);
		collectedObjects.Add(Hero2);
	}

	internal static object AutoGeneratedGetMemberValueHero1(object o)
	{
		return ((ChangeRomanticStateLogEntry)o).Hero1;
	}

	internal static object AutoGeneratedGetMemberValueHero2(object o)
	{
		return ((ChangeRomanticStateLogEntry)o).Hero2;
	}

	internal static object AutoGeneratedGetMemberValueLevel(object o)
	{
		return ((ChangeRomanticStateLogEntry)o).Level;
	}

	public ChangeRomanticStateLogEntry(Hero hero1, Hero hero2, Romance.RomanceLevelEnum level)
	{
		Hero1 = hero1;
		Hero2 = hero2;
		Level = level;
	}

	public override string ToString()
	{
		TextObject textObject = new TextObject("{=!}Relation between {HERO_1.NAME} and {HERO_2.NAME} : {RELATION}");
		textObject.SetTextVariable("RELATION", Level.ToString());
		StringHelpers.SetCharacterProperties("HERO_1", Hero1.CharacterObject, textObject);
		StringHelpers.SetCharacterProperties("HERO_2", Hero2.CharacterObject, textObject);
		return textObject.ToString();
	}

	public override ImportanceEnum GetImportanceForClan(Clan clan)
	{
		if (Hero1.Clan == clan || Hero2.Clan == clan)
		{
			if (Level >= Romance.RomanceLevelEnum.CourtshipStarted)
			{
				return ImportanceEnum.ExtremelyImportant;
			}
			return ImportanceEnum.Important;
		}
		return ImportanceEnum.Zero;
	}

	public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
	{
		score = ImportanceEnum.Zero;
		comment = "";
		if (Hero1 != Hero.MainHero && Hero2 != Hero.MainHero)
		{
			return;
		}
		Hero hero = Hero2;
		if (Hero2 == Hero.MainHero)
		{
			hero = Hero1;
		}
		hero.SetTextVariables();
		if ((Hero1 == Hero.OneToOneConversationHero || Hero2 == Hero.OneToOneConversationHero) && Level == Romance.RomanceLevelEnum.MatchMadeByFamily)
		{
			score = ImportanceEnum.MatterOfLifeAndDeath;
			if (findString)
			{
				comment = "str_comment_changeromanticstate_match_made_by_family";
			}
		}
		else if (Level >= Romance.RomanceLevelEnum.Marriage && hero == Hero.OneToOneConversationHero)
		{
			score = ImportanceEnum.Important;
			if (findString)
			{
				comment = "str_comment_changeromanticstate_congratulations_marriage_self";
			}
		}
		else if (Level >= Romance.RomanceLevelEnum.Marriage && hero != Hero.OneToOneConversationHero && hero.MapFaction == Hero.OneToOneConversationHero.MapFaction && Hero.OneToOneConversationHero.IsLord)
		{
			score = ImportanceEnum.Important;
			if (findString)
			{
				comment = "str_comment_changeromanticstate_congratulations_marriage";
			}
		}
		else if (Hero.OneToOneConversationHero.Spouse == hero && Level >= Romance.RomanceLevelEnum.CourtshipStarted)
		{
			score = ImportanceEnum.MatterOfLifeAndDeath;
			if (findString)
			{
				comment = "str_comment_changeromanticstate_stay_away_from_my_spouse";
			}
		}
		else if (Romance.GetRomanticLevel(hero, Hero.OneToOneConversationHero) >= Romance.RomanceLevelEnum.CourtshipStarted && Level >= Romance.RomanceLevelEnum.CourtshipStarted)
		{
			score = ImportanceEnum.MatterOfLifeAndDeath;
			if (findString)
			{
				comment = "str_comment_changeromanticstate_romantic_rival";
			}
		}
	}
}
