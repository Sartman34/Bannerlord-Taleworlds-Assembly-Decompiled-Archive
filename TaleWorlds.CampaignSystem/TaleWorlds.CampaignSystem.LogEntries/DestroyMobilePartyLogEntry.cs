using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class DestroyMobilePartyLogEntry : LogEntry
{
	[SaveableField(210)]
	public readonly Hero Hero;

	[SaveableField(211)]
	public readonly IFaction Faction;

	[SaveableField(212)]
	public readonly IFaction DestroyerPartyFaction;

	[SaveableField(213)]
	public readonly Hero DestroyerHero;

	[SaveableField(214)]
	private readonly TextObject _destroyerPartyName;

	internal static void AutoGeneratedStaticCollectObjectsDestroyMobilePartyLogEntry(object o, List<object> collectedObjects)
	{
		((DestroyMobilePartyLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Hero);
		collectedObjects.Add(Faction);
		collectedObjects.Add(DestroyerPartyFaction);
		collectedObjects.Add(DestroyerHero);
		collectedObjects.Add(_destroyerPartyName);
	}

	internal static object AutoGeneratedGetMemberValueHero(object o)
	{
		return ((DestroyMobilePartyLogEntry)o).Hero;
	}

	internal static object AutoGeneratedGetMemberValueFaction(object o)
	{
		return ((DestroyMobilePartyLogEntry)o).Faction;
	}

	internal static object AutoGeneratedGetMemberValueDestroyerPartyFaction(object o)
	{
		return ((DestroyMobilePartyLogEntry)o).DestroyerPartyFaction;
	}

	internal static object AutoGeneratedGetMemberValueDestroyerHero(object o)
	{
		return ((DestroyMobilePartyLogEntry)o).DestroyerHero;
	}

	internal static object AutoGeneratedGetMemberValue_destroyerPartyName(object o)
	{
		return ((DestroyMobilePartyLogEntry)o)._destroyerPartyName;
	}

	public DestroyMobilePartyLogEntry(MobileParty mobileParty, PartyBase destroyerParty)
	{
		Hero = mobileParty.LeaderHero;
		Faction = mobileParty.MapFaction;
		_destroyerPartyName = destroyerParty?.Name;
		DestroyerPartyFaction = destroyerParty?.MapFaction;
		DestroyerHero = destroyerParty?.LeaderHero;
	}

	public override int GetAsRumor(Settlement settlement, ref TextObject comment)
	{
		int result = 0;
		if (DestroyerPartyFaction == settlement.MapFaction && DestroyerHero != null && Hero != null)
		{
			comment = new TextObject("{=shihxzUN}Praise be... {LORD.LINK} met {OTHER_SIDE} and whipped them soundly. Maybe now there will be an end to this war.");
			StringHelpers.SetCharacterProperties("LORD", DestroyerHero.CharacterObject, comment);
			comment.SetTextVariable("OTHER_SIDE", FactionHelper.GetTermUsedByOtherFaction(Faction, settlement.MapFaction, pejorative: false));
			return 4;
		}
		if (Faction == settlement.MapFaction && DestroyerHero != null && Hero != null)
		{
			comment = new TextObject("{=O4dWdKZd}Ach... So they say {LORD.LINK} got {?LORD.GENDER}his{?}her{\\?} arse handed to {?LORD.GENDER}him{?}her{\\?} by {OTHER_SIDE}. Grim times, friend.");
			StringHelpers.SetCharacterProperties("LORD", Hero.CharacterObject, comment);
			comment.SetTextVariable("OTHER_SIDE", FactionHelper.GetTermUsedByOtherFaction(DestroyerPartyFaction, settlement.MapFaction, pejorative: false));
			return 4;
		}
		return result;
	}

	public override string ToString()
	{
		TextObject textObject = TextObject.Empty;
		if (Hero != null && _destroyerPartyName != null)
		{
			textObject = new TextObject("{=i90Cmb5e}Party of {HERO.NAME} is destroyed by {DESTROYER_PARTY}");
			StringHelpers.SetCharacterProperties("HERO", Hero.CharacterObject, textObject);
			textObject.SetTextVariable("DESTROYER_PARTY", _destroyerPartyName);
		}
		return textObject.ToString();
	}
}
