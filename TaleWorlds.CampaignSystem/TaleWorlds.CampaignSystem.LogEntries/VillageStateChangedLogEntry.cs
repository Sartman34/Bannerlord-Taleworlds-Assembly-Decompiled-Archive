using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class VillageStateChangedLogEntry : LogEntry, IWarLog
{
	[SaveableField(340)]
	public readonly Village Village;

	[SaveableField(341)]
	public readonly Village.VillageStates OldState;

	[SaveableField(342)]
	public readonly Village.VillageStates NewState;

	[SaveableField(343)]
	public readonly IFaction RaiderPartyMapFaction;

	[SaveableField(344)]
	public readonly IFaction VillageRealmWhenRaided;

	[SaveableField(345)]
	public readonly bool RealmsAtWarWhenRaided;

	[SaveableField(346)]
	private readonly MBReadOnlyDictionary<Hero, short> _witnesses;

	[SaveableField(347)]
	public readonly Hero RaidLeader;

	internal static void AutoGeneratedStaticCollectObjectsVillageStateChangedLogEntry(object o, List<object> collectedObjects)
	{
		((VillageStateChangedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Village);
		collectedObjects.Add(RaiderPartyMapFaction);
		collectedObjects.Add(VillageRealmWhenRaided);
		collectedObjects.Add(RaidLeader);
		collectedObjects.Add(_witnesses);
	}

	internal static object AutoGeneratedGetMemberValueVillage(object o)
	{
		return ((VillageStateChangedLogEntry)o).Village;
	}

	internal static object AutoGeneratedGetMemberValueOldState(object o)
	{
		return ((VillageStateChangedLogEntry)o).OldState;
	}

	internal static object AutoGeneratedGetMemberValueNewState(object o)
	{
		return ((VillageStateChangedLogEntry)o).NewState;
	}

	internal static object AutoGeneratedGetMemberValueRaiderPartyMapFaction(object o)
	{
		return ((VillageStateChangedLogEntry)o).RaiderPartyMapFaction;
	}

	internal static object AutoGeneratedGetMemberValueVillageRealmWhenRaided(object o)
	{
		return ((VillageStateChangedLogEntry)o).VillageRealmWhenRaided;
	}

	internal static object AutoGeneratedGetMemberValueRealmsAtWarWhenRaided(object o)
	{
		return ((VillageStateChangedLogEntry)o).RealmsAtWarWhenRaided;
	}

	internal static object AutoGeneratedGetMemberValueRaidLeader(object o)
	{
		return ((VillageStateChangedLogEntry)o).RaidLeader;
	}

	internal static object AutoGeneratedGetMemberValue_witnesses(object o)
	{
		return ((VillageStateChangedLogEntry)o)._witnesses;
	}

	public VillageStateChangedLogEntry(Village village, Village.VillageStates oldState, Village.VillageStates newState, MobileParty raiderParty)
	{
		Village = village;
		OldState = oldState;
		NewState = newState;
		RaiderPartyMapFaction = raiderParty.MapFaction;
		VillageRealmWhenRaided = village.Settlement.MapFaction;
		RealmsAtWarWhenRaided = RaiderPartyMapFaction.IsAtWarWith(VillageRealmWhenRaided);
		RaidLeader = raiderParty.LeaderHero;
		if (raiderParty.LeaderHero != Hero.MainHero)
		{
			return;
		}
		Dictionary<Hero, short> dictionary = new Dictionary<Hero, short>();
		foreach (TroopRosterElement item in MobileParty.MainParty.MemberRoster.GetTroopRoster())
		{
			if (item.Character.HeroObject != null && !dictionary.ContainsKey(item.Character.HeroObject))
			{
				dictionary.Add(item.Character.HeroObject, 1);
			}
		}
		_witnesses = dictionary.GetReadOnlyDictionary();
	}

	public bool IsRelatedToWar(StanceLink stance, out IFaction effector, out IFaction effected)
	{
		IFaction faction = stance.Faction1;
		IFaction faction2 = stance.Faction2;
		effector = RaiderPartyMapFaction?.MapFaction;
		effected = VillageRealmWhenRaided?.MapFaction;
		if (NewState == Village.VillageStates.Looted)
		{
			if (VillageRealmWhenRaided != faction || RaiderPartyMapFaction != faction2)
			{
				if (VillageRealmWhenRaided == faction2)
				{
					return RaiderPartyMapFaction == faction;
				}
				return false;
			}
			return true;
		}
		return false;
	}

	public override string ToString()
	{
		TextObject textObject = new TextObject("{=!}Village named {SETTLEMENT} state changed from {OLD_STATE} to {NEW_STATE}");
		textObject.SetTextVariable("SETTLEMENT", Village.Settlement.Name);
		textObject.SetTextVariable("OLD_STATE", OldState.ToString());
		textObject.SetTextVariable("NEW_STATE", NewState.ToString());
		return textObject.ToString();
	}

	public override int GetAsRumor(Settlement talkSettlement, ref TextObject comment)
	{
		int result = 0;
		if (NewState == Village.VillageStates.Looted && Village.Settlement.MapFaction == talkSettlement.MapFaction)
		{
			comment = new TextObject("{=nV1xbbM6}So I hear {ENEMY_NAME} burned and pillaged {VILLAGE_NAME}. Bastards...");
			comment.SetTextVariable("ENEMY_NAME", FactionHelper.GetTermUsedByOtherFaction(RaiderPartyMapFaction, talkSettlement.MapFaction, pejorative: false));
			comment.SetTextVariable("VILLAGE_NAME", Village.Name);
			result = 10;
		}
		return result;
	}

	public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
	{
		if (_witnesses == null || !_witnesses.TryGetValue(talkTroop, out var value))
		{
			value = -2;
		}
		score = ImportanceEnum.Zero;
		comment = "";
		if (talkTroop.MapFaction != Hero.MainHero.MapFaction && talkTroop.MapFaction == VillageRealmWhenRaided && Village.Settlement.OwnerClan == talkTroop.Clan && talkTroop.Clan.Leader == talkTroop && RaidLeader == Hero.MainHero)
		{
			score = ImportanceEnum.Important;
			comment = "str_comment_you_raided_my_village";
			MBTextManager.SetTextVariable("SETTLEMENT_NAME", Village.Name);
		}
		else if (value == 1 && NewState == Village.VillageStates.BeingRaided && Village.Settlement.Culture == talkTroop.Culture && RaiderPartyMapFaction.Culture != talkTroop.Culture)
		{
			score = ImportanceEnum.QuiteImportant;
			comment = "str_comment_we_raided_my_people";
			MBTextManager.SetTextVariable("VILLAGE_NAME", Village.Name);
		}
		else if (value == 1 && NewState == Village.VillageStates.BeingRaided && RaiderPartyMapFaction.MapFaction.IsKingdomFaction && RealmsAtWarWhenRaided)
		{
			score = ImportanceEnum.QuiteImportant;
			comment = "str_comment_we_raided_enemy_village";
			MBTextManager.SetTextVariable("VILLAGE_NAME", Village.Name);
			MBTextManager.SetTextVariable("ENEMY_NAME", VillageRealmWhenRaided.InformalName);
		}
		else if (value == 1 && NewState == Village.VillageStates.BeingRaided && !RealmsAtWarWhenRaided)
		{
			score = ImportanceEnum.QuiteImportant;
			comment = "str_comment_we_raided_neutral_village";
			MBTextManager.SetTextVariable("VILLAGE_NAME", Village.Name);
			MBTextManager.SetTextVariable("VILLAGE_FACTION", VillageRealmWhenRaided.InformalName);
		}
	}
}
