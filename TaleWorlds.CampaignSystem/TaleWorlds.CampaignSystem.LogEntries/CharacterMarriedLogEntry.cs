using System.Collections.Generic;
using Helpers;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class CharacterMarriedLogEntry : LogEntry, IEncyclopediaLog, IChatNotification
{
	[SaveableField(130)]
	public readonly Hero MarriedHero;

	[SaveableField(131)]
	public readonly Hero MarriedTo;

	public override CampaignTime KeepInHistoryTime => CampaignTime.Weeks(240f);

	public override ChatNotificationType NotificationType => DiplomaticNotification(MarriedHero.Clan, MarriedTo.Clan);

	public bool IsVisibleNotification
	{
		get
		{
			if (MarriedHero.CharacterObject.IsHero)
			{
				return MarriedTo.CharacterObject.IsHero;
			}
			return false;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsCharacterMarriedLogEntry(object o, List<object> collectedObjects)
	{
		((CharacterMarriedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(MarriedHero);
		collectedObjects.Add(MarriedTo);
	}

	internal static object AutoGeneratedGetMemberValueMarriedHero(object o)
	{
		return ((CharacterMarriedLogEntry)o).MarriedHero;
	}

	internal static object AutoGeneratedGetMemberValueMarriedTo(object o)
	{
		return ((CharacterMarriedLogEntry)o).MarriedTo;
	}

	public CharacterMarriedLogEntry(Hero marriedHero, Hero marriedTo)
	{
		MarriedHero = marriedHero;
		MarriedTo = marriedTo;
	}

	public override string ToString()
	{
		return GetEncyclopediaText().ToString();
	}

	public TextObject GetNotificationText()
	{
		TextObject textObject = GameTexts.FindText("str_hero_married_hero");
		StringHelpers.SetCharacterProperties("MARRIED_TO", MarriedTo.CharacterObject, textObject);
		StringHelpers.SetCharacterProperties("MARRIED_HERO", MarriedHero.CharacterObject, textObject);
		return textObject;
	}

	public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
	{
		if (obj != MarriedHero)
		{
			return obj == MarriedTo;
		}
		return true;
	}

	public TextObject GetEncyclopediaText()
	{
		return GetNotificationText();
	}
}
