using System.Collections.Generic;
using Helpers;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class DefeatCharacterLogEntry : LogEntry
{
	[SaveableField(200)]
	public readonly Hero WinnerHero;

	[SaveableField(201)]
	public readonly Hero LoserHero;

	internal static void AutoGeneratedStaticCollectObjectsDefeatCharacterLogEntry(object o, List<object> collectedObjects)
	{
		((DefeatCharacterLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(WinnerHero);
		collectedObjects.Add(LoserHero);
	}

	internal static object AutoGeneratedGetMemberValueWinnerHero(object o)
	{
		return ((DefeatCharacterLogEntry)o).WinnerHero;
	}

	internal static object AutoGeneratedGetMemberValueLoserHero(object o)
	{
		return ((DefeatCharacterLogEntry)o).LoserHero;
	}

	public DefeatCharacterLogEntry(Hero winner, Hero loser)
	{
		WinnerHero = winner;
		LoserHero = loser;
	}

	public override ImportanceEnum GetImportanceForClan(Clan clan)
	{
		if (WinnerHero.Clan == clan || LoserHero.Clan == clan)
		{
			return ImportanceEnum.SlightlyImportant;
		}
		return ImportanceEnum.Zero;
	}

	public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
	{
		score = ImportanceEnum.Zero;
		comment = "";
		if (WinnerHero == Hero.MainHero)
		{
			if (LoserHero == talkTroop)
			{
				score = ImportanceEnum.SlightlyImportant;
				if (findString)
				{
					comment = "str_comment_you_defeated_me_in_single_combat";
				}
			}
		}
		else if (LoserHero == Hero.MainHero && WinnerHero == talkTroop)
		{
			score = ImportanceEnum.SlightlyImportant;
			if (findString)
			{
				comment = "str_comment_i_defeated_you_in_single_combat";
			}
		}
	}

	public override string ToString()
	{
		TextObject textObject = new TextObject("{=!}{LOSER.NAME} defeated by {WINNER.NAME}.");
		StringHelpers.SetCharacterProperties("WINNER", WinnerHero.CharacterObject, textObject);
		StringHelpers.SetCharacterProperties("LOSER", LoserHero.CharacterObject, textObject);
		return textObject.ToString();
	}
}
