using System.Collections.Generic;
using Helpers;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class ClanChangeKingdomLogEntry : LogEntry, IChatNotification, IWarLog
{
	[SaveableField(150)]
	public readonly Clan Clan;

	[SaveableField(151)]
	public readonly Kingdom OldKingdom;

	[SaveableField(152)]
	public readonly Kingdom NewKingdom;

	[SaveableField(153)]
	private readonly bool _byRebellion;

	public bool IsVisibleNotification => true;

	public override ChatNotificationType NotificationType => MilitaryNotification(NewKingdom, OldKingdom);

	internal static void AutoGeneratedStaticCollectObjectsClanChangeKingdomLogEntry(object o, List<object> collectedObjects)
	{
		((ClanChangeKingdomLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Clan);
		collectedObjects.Add(OldKingdom);
		collectedObjects.Add(NewKingdom);
	}

	internal static object AutoGeneratedGetMemberValueClan(object o)
	{
		return ((ClanChangeKingdomLogEntry)o).Clan;
	}

	internal static object AutoGeneratedGetMemberValueOldKingdom(object o)
	{
		return ((ClanChangeKingdomLogEntry)o).OldKingdom;
	}

	internal static object AutoGeneratedGetMemberValueNewKingdom(object o)
	{
		return ((ClanChangeKingdomLogEntry)o).NewKingdom;
	}

	internal static object AutoGeneratedGetMemberValue_byRebellion(object o)
	{
		return ((ClanChangeKingdomLogEntry)o)._byRebellion;
	}

	public ClanChangeKingdomLogEntry(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, bool byRebellion)
	{
		Clan = clan;
		OldKingdom = oldKingdom;
		NewKingdom = newKingdom;
		_byRebellion = byRebellion;
	}

	public bool IsRelatedToWar(StanceLink stance, out IFaction effector, out IFaction effected)
	{
		IFaction faction = stance.Faction1;
		IFaction faction2 = stance.Faction2;
		effector = NewKingdom?.MapFaction;
		effected = OldKingdom?.MapFaction;
		if (OldKingdom != faction || NewKingdom != faction2)
		{
			if (OldKingdom == faction2)
			{
				return NewKingdom == faction;
			}
			return false;
		}
		return true;
	}

	public TextObject GetNotificationText()
	{
		if (NewKingdom != null)
		{
			TextObject textObject = GameTexts.FindText("str_notification_change_faction");
			textObject.SetTextVariable("FACTION", NewKingdom.InformalName);
			textObject.SetTextVariable("CLAN_NAME", Clan.Name);
			return textObject;
		}
		return TextObject.Empty;
	}

	public override ImportanceEnum GetImportanceForClan(Clan clan)
	{
		if (clan == Clan)
		{
			return ImportanceEnum.ReasonablyImportant;
		}
		if (clan.Kingdom != null && (clan.Kingdom == OldKingdom || clan.Kingdom == NewKingdom))
		{
			return ImportanceEnum.SomewhatImportant;
		}
		return ImportanceEnum.Zero;
	}

	public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
	{
		score = ImportanceEnum.Zero;
		comment = "";
		if (Clan != Clan.PlayerClan || !talkTroop.IsLord)
		{
			return;
		}
		StringHelpers.SetCharacterProperties("TT_LIEGE", talkTroop.MapFaction.Leader.CharacterObject);
		if (talkTroop.MapFaction == NewKingdom && Hero.MainHero.MapFaction == talkTroop.MapFaction && Hero.MainHero != NewKingdom.Leader && talkTroop != NewKingdom.Leader)
		{
			score = ImportanceEnum.ReasonablyImportant;
			if (findString)
			{
				if (Hero.MainHero.Clan.IsUnderMercenaryService)
				{
					comment = "str_comment_changeherofaction_you_joined_us_as_mercenary";
					return;
				}
				NewKingdom.Leader.SetTextVariables();
				comment = "str_comment_changeherofaction_you_joined_us";
			}
		}
		else if (talkTroop.MapFaction == OldKingdom && Hero.MainHero.MapFaction != talkTroop.MapFaction && _byRebellion)
		{
			score = ImportanceEnum.QuiteImportant;
			if (findString)
			{
				OldKingdom.Leader.SetTextVariables();
				if (OldKingdom.Leader == talkTroop)
				{
					comment = "str_comment_changeherofaction_you_rebelled_against_me";
					return;
				}
				comment = "str_comment_changeherofaction_you_rebelled_against_us";
				score = ImportanceEnum.VeryImportant;
			}
		}
		else if (talkTroop.MapFaction == OldKingdom && Hero.MainHero.MapFaction != talkTroop.MapFaction && talkTroop != OldKingdom.Leader)
		{
			score = ImportanceEnum.ReasonablyImportant;
			if (findString)
			{
				comment = "str_comment_changeherofaction_you_renounced_your_allegiance";
			}
		}
	}

	public override string ToString()
	{
		return GetNotificationText().ToString();
	}
}
