using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class BesiegeSettlementLogEntry : LogEntry, IEncyclopediaLog, IChatNotification, IWarLog
{
	[SaveableField(50)]
	public readonly Hero BesiegerHero;

	[SaveableField(51)]
	public readonly Settlement Settlement;

	[SaveableField(53)]
	public readonly IFaction BesiegerFaction;

	[SaveableField(54)]
	private readonly bool _isBesiegerArmy;

	public bool IsVisibleNotification => true;

	internal static void AutoGeneratedStaticCollectObjectsBesiegeSettlementLogEntry(object o, List<object> collectedObjects)
	{
		((BesiegeSettlementLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(BesiegerHero);
		collectedObjects.Add(Settlement);
		collectedObjects.Add(BesiegerFaction);
	}

	internal static object AutoGeneratedGetMemberValueBesiegerHero(object o)
	{
		return ((BesiegeSettlementLogEntry)o).BesiegerHero;
	}

	internal static object AutoGeneratedGetMemberValueSettlement(object o)
	{
		return ((BesiegeSettlementLogEntry)o).Settlement;
	}

	internal static object AutoGeneratedGetMemberValueBesiegerFaction(object o)
	{
		return ((BesiegeSettlementLogEntry)o).BesiegerFaction;
	}

	internal static object AutoGeneratedGetMemberValue_isBesiegerArmy(object o)
	{
		return ((BesiegeSettlementLogEntry)o)._isBesiegerArmy;
	}

	public BesiegeSettlementLogEntry(MobileParty besiegerParty, Settlement settlement)
	{
		BesiegerHero = besiegerParty.Party.Owner;
		Settlement = settlement;
		_isBesiegerArmy = besiegerParty.Army != null;
		BesiegerFaction = besiegerParty.MapFaction;
	}

	public override string ToString()
	{
		return GetEncyclopediaText().ToString();
	}

	public bool IsRelatedToWar(StanceLink stance, out IFaction effector, out IFaction effected)
	{
		IFaction faction = stance.Faction1;
		IFaction faction2 = stance.Faction2;
		effector = BesiegerFaction;
		effected = Settlement.MapFaction;
		if (BesiegerFaction != faction || Settlement.MapFaction != faction2)
		{
			if (BesiegerFaction == faction2)
			{
				return Settlement.MapFaction == faction;
			}
			return false;
		}
		return true;
	}

	public TextObject GetNotificationText()
	{
		TextObject textObject = new TextObject("{=E20BBKYo}{TOWN_NAME} has been besieged by {FACTION_NAME}.");
		textObject.SetTextVariable("TOWN_NAME", Settlement.EncyclopediaLinkWithName);
		textObject.SetTextVariable("FACTION_NAME", BesiegerFaction.EncyclopediaLinkWithName);
		return textObject;
	}

	public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
	{
		if (obj != BesiegerHero)
		{
			return obj == Settlement;
		}
		return true;
	}

	public TextObject GetEncyclopediaText()
	{
		TextObject textObject = ((!_isBesiegerArmy) ? GameTexts.FindText("str_party_besieging_news_with_link") : GameTexts.FindText("str_army_besieging_news_with_link"));
		textObject.SetTextVariable("TOWN_NAME", Settlement.EncyclopediaLinkWithName);
		textObject.SetTextVariable("FACTION_NAME", BesiegerFaction.EncyclopediaLinkWithName);
		StringHelpers.SetCharacterProperties("LORD", BesiegerHero.CharacterObject, textObject);
		return textObject;
	}
}
