using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class CharacterInsultedLogEntry : LogEntry, IEncyclopediaLog, IChatNotification
{
	[SaveableField(110)]
	public readonly Hero Insultee;

	[SaveableField(111)]
	public readonly Hero Insulter;

	[SaveableField(112)]
	private readonly CharacterObject _overWhat;

	[SaveableField(113)]
	private readonly ActionNotes _gameActionNote;

	public override CampaignTime KeepInHistoryTime => CampaignTime.Weeks(240f);

	public override ChatNotificationType NotificationType => CivilianNotification(Insulter.Clan);

	public bool IsVisibleNotification
	{
		get
		{
			if (_overWhat != null)
			{
				return _overWhat.IsHero;
			}
			return Insultee.CharacterObject.IsHero;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsCharacterInsultedLogEntry(object o, List<object> collectedObjects)
	{
		((CharacterInsultedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Insultee);
		collectedObjects.Add(Insulter);
		collectedObjects.Add(_overWhat);
	}

	internal static object AutoGeneratedGetMemberValueInsultee(object o)
	{
		return ((CharacterInsultedLogEntry)o).Insultee;
	}

	internal static object AutoGeneratedGetMemberValueInsulter(object o)
	{
		return ((CharacterInsultedLogEntry)o).Insulter;
	}

	internal static object AutoGeneratedGetMemberValue_overWhat(object o)
	{
		return ((CharacterInsultedLogEntry)o)._overWhat;
	}

	internal static object AutoGeneratedGetMemberValue_gameActionNote(object o)
	{
		return ((CharacterInsultedLogEntry)o)._gameActionNote;
	}

	public CharacterInsultedLogEntry(Hero insultee, Hero insulter, CharacterObject overWhat, ActionNotes note)
	{
		Insultee = insultee;
		Insulter = insulter;
		_overWhat = overWhat;
		_gameActionNote = note;
	}

	public override TextObject GetHistoricComment(Hero talkTroop)
	{
		MBTextManager.SetTextVariable("SIDE1TROOP", Insultee.Name);
		MBTextManager.SetTextVariable("SIDE2TROOP", Insulter.Name);
		if (talkTroop == Insultee)
		{
			return GameTexts.FindText("str_description_insultcharacter_I_insulted_y");
		}
		if (talkTroop == Insulter)
		{
			return GameTexts.FindText("str_description_insultcharacter_x_insulted_me");
		}
		if (talkTroop == null)
		{
			return GameTexts.FindText("str_description_insultcharacter_x_insulted_y");
		}
		MBTextManager.SetTextVariable("SIDE1TROOP", ConversationHelper.HeroRefersToHero(talkTroop, Insultee, uppercaseFirst: true));
		MBTextManager.SetTextVariable("SIDE2TROOP", ConversationHelper.HeroRefersToHero(talkTroop, Insulter, uppercaseFirst: false));
		if (_gameActionNote == ActionNotes.CourtshipQuarrel)
		{
			Hero heroObject = _overWhat.HeroObject;
			MBTextManager.SetTextVariable("SUBJECT", ConversationHelper.HeroRefersToHero(talkTroop, heroObject, uppercaseFirst: false));
			return GameTexts.FindText("str_description_insultcharacter_x_insulted_y_courtship");
		}
		return GameTexts.FindText("str_description_insultcharacter_x_insulted_y");
	}

	public override int AsReasonForEnmity(Hero referenceHero1, Hero referenceHero2)
	{
		if (referenceHero1 == Insultee && referenceHero2 == Insulter)
		{
			return 5;
		}
		if (referenceHero2 == Insultee && referenceHero1 == Insulter)
		{
			return 5;
		}
		return 0;
	}

	public override string ToString()
	{
		return GetEncyclopediaText().ToString();
	}

	public TextObject GetNotificationText()
	{
		TextObject textObject = GameTexts.FindText("str_notification_quarrel");
		StringHelpers.SetCharacterProperties("LORD", Insultee.CharacterObject, textObject);
		StringHelpers.SetCharacterProperties("OTHER_LORD", Insulter.CharacterObject, textObject);
		return textObject;
	}

	public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
	{
		if (obj != Insultee)
		{
			return obj == Insulter;
		}
		return true;
	}

	public TextObject GetEncyclopediaText()
	{
		TextObject textObject = TextObject.Empty;
		if (_gameActionNote == ActionNotes.CourtshipQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_courtship");
		}
		if (_gameActionNote == ActionNotes.ValorStrategyQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_setback_valor");
		}
		if (_gameActionNote == ActionNotes.CalculatingStrategyQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_setback_calculating");
		}
		if (_gameActionNote == ActionNotes.ResponsibilityStrategyQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_setback_responsibility");
		}
		if (_gameActionNote == ActionNotes.LandCheatingQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_land");
		}
		if (_gameActionNote == ActionNotes.TroublemakerQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_troublemaker");
		}
		if (_gameActionNote == ActionNotes.HereticQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_heretic");
		}
		if (_gameActionNote == ActionNotes.RuthlessBusinessQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_ruthless_business");
		}
		if (_gameActionNote == ActionNotes.DishonestBusinessQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_dishonest_business");
		}
		if (_gameActionNote == ActionNotes.ExtortingQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_extorting");
		}
		if (_gameActionNote == ActionNotes.VengeanceQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_vengeance");
		}
		if (_gameActionNote == ActionNotes.FiefQuarrel)
		{
			textObject = GameTexts.FindText("str_insult_news_fief");
		}
		if (textObject != TextObject.Empty)
		{
			StringHelpers.SetCharacterProperties("INSULTER", Insultee.CharacterObject, textObject);
			StringHelpers.SetCharacterProperties("INSULTEE", Insulter.CharacterObject, textObject);
			return textObject;
		}
		textObject = new TextObject("{=v7sfiv5m}{INSULT_NEWS} {GAME_ACTION_NOTES}");
		textObject.SetTextVariable("INSULT_NEWS", GameTexts.FindText("str_insult_news"));
		textObject.SetTextVariable("GAME_ACTION_NOTES", GameTexts.FindText("str_game_action_note", _gameActionNote.ToString()));
		return textObject;
	}
}
