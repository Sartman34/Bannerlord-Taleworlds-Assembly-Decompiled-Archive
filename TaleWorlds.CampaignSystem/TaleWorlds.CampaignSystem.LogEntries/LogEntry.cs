using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public abstract class LogEntry
{
	protected const uint NotificationDefaultTextColor = 0u;

	[SaveableProperty(0)]
	public long Id { get; private set; }

	[SaveableProperty(1)]
	public CampaignTime GameTime { get; private set; }

	public virtual CampaignTime KeepInHistoryTime => CampaignTime.Days(7f);

	public virtual ChatNotificationType NotificationType => ChatNotificationType.Default;

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(GameTime, collectedObjects);
	}

	internal static object AutoGeneratedGetMemberValueId(object o)
	{
		return ((LogEntry)o).Id;
	}

	internal static object AutoGeneratedGetMemberValueGameTime(object o)
	{
		return ((LogEntry)o).GameTime;
	}

	protected ChatNotificationType MilitaryNotification(IFaction benefiter, IFaction affected)
	{
		if (benefiter == Clan.PlayerClan)
		{
			return ChatNotificationType.PlayerClanPositive;
		}
		if (affected == Clan.PlayerClan)
		{
			return ChatNotificationType.PlayerClanNegative;
		}
		if (benefiter?.MapFaction == Clan.PlayerClan.MapFaction)
		{
			return ChatNotificationType.PlayerFactionPositive;
		}
		if (affected?.MapFaction == Clan.PlayerClan.MapFaction)
		{
			return ChatNotificationType.PlayerFactionNegative;
		}
		if (affected != null && affected.IsAtWarWith(Clan.PlayerClan.MapFaction))
		{
			return ChatNotificationType.PlayerFactionIndirectPositive;
		}
		if (benefiter != null && benefiter.IsAtWarWith(Clan.PlayerClan.MapFaction))
		{
			return ChatNotificationType.PlayerFactionIndirectNegative;
		}
		return ChatNotificationType.Neutral;
	}

	protected ChatNotificationType DiplomaticNotification(IFaction faction1, IFaction faction2)
	{
		if (faction1 == Clan.PlayerClan || faction2 == Clan.PlayerClan)
		{
			return ChatNotificationType.PlayerClanPositive;
		}
		if (faction1 == Clan.PlayerClan.MapFaction || faction2 == Clan.PlayerClan.MapFaction)
		{
			return ChatNotificationType.PlayerFactionPositive;
		}
		if (faction1 != null && Clan.PlayerClan.MapFaction.IsAtWarWith(faction1))
		{
			return ChatNotificationType.PlayerFactionIndirectNegative;
		}
		if (faction2 != null && Clan.PlayerClan.MapFaction.IsAtWarWith(faction2))
		{
			return ChatNotificationType.PlayerFactionIndirectNegative;
		}
		return ChatNotificationType.PlayerFactionIndirectPositive;
	}

	protected ChatNotificationType AdversityNotification(IFaction faction1, IFaction faction2)
	{
		if (faction1 == Clan.PlayerClan)
		{
			return ChatNotificationType.PlayerClanNegative;
		}
		if (faction2 == Clan.PlayerClan)
		{
			return ChatNotificationType.PlayerClanNegative;
		}
		if (faction1?.MapFaction == Clan.PlayerClan.MapFaction)
		{
			return ChatNotificationType.PlayerFactionNegative;
		}
		if (faction2?.MapFaction == Clan.PlayerClan.MapFaction)
		{
			return ChatNotificationType.PlayerFactionNegative;
		}
		return ChatNotificationType.Neutral;
	}

	protected ChatNotificationType PoliticalNotification(IFaction faction)
	{
		if (faction == Clan.PlayerClan)
		{
			return ChatNotificationType.PlayerClanPolitical;
		}
		if (faction?.MapFaction == Clan.PlayerClan.MapFaction)
		{
			return ChatNotificationType.PlayerFactionPolitical;
		}
		return ChatNotificationType.Political;
	}

	protected ChatNotificationType CivilianNotification(IFaction faction)
	{
		if (faction == Clan.PlayerClan)
		{
			return ChatNotificationType.PlayerClanCivilian;
		}
		if (faction?.MapFaction == Clan.PlayerClan.MapFaction)
		{
			return ChatNotificationType.PlayerFactionCivilian;
		}
		return ChatNotificationType.Civilian;
	}

	public static void AddLogEntry(LogEntry logEntry)
	{
		logEntry.GameTime = CampaignTime.Now;
		logEntry.Id = ++Campaign.Current.LogEntryHistory.LastAddedIndex;
		Campaign.Current.LogEntryHistory.AddActionLog(logEntry);
	}

	public static void AddLogEntry(LogEntry logEntry, CampaignTime gameTime)
	{
		logEntry.GameTime = gameTime;
		logEntry.Id = ++Campaign.Current.LogEntryHistory.LastAddedIndex;
		Campaign.Current.LogEntryHistory.AddActionLog(logEntry, checkSequenceAndInsert: true);
	}

	public virtual ImportanceEnum GetImportanceForClan(Clan clan)
	{
		return ImportanceEnum.Zero;
	}

	public virtual void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
	{
		comment = "";
		score = ImportanceEnum.Zero;
	}

	public virtual int GetAsRumor(Settlement settlement, ref TextObject comment)
	{
		return 0;
	}

	public virtual TextObject GetHistoricComment(Hero talkTroop)
	{
		return TextObject.Empty;
	}

	public virtual int AsReasonForEnmity(Hero referenceHero1, Hero referenceHero2)
	{
		return 0;
	}

	public virtual int GetValueAsPoliticsAbuseOfPower(Hero referenceTroop, Hero liege)
	{
		return 0;
	}

	public virtual int GetValueAsPoliticsSlightedClan(Hero referenceTroop, Hero liege)
	{
		return 0;
	}

	public virtual int GetValueAsPoliticsShowedWeakness(Hero referenceTroop, Hero liege)
	{
		return 0;
	}
}
