using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Issues;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class JournalLogEntry : LogEntry
{
	[SaveableField(10)]
	public readonly TextObject Title;

	[SaveableField(20)]
	public readonly Hero RelatedHero;

	[SaveableField(30)]
	public readonly Hero Antagonist;

	[SaveableField(40)]
	private List<JournalLog> _entries;

	[SaveableField(50)]
	public readonly bool IsSpecial;

	[SaveableField(61)]
	private IssueBase.IssueUpdateDetails _lastIssueStatus;

	[SaveableField(70)]
	private QuestBase.QuestCompleteDetails _questCompletionDetail;

	[SaveableField(80)]
	private readonly string[] _relatedObjectIds;

	public override CampaignTime KeepInHistoryTime
	{
		get
		{
			if (!IsSpecial)
			{
				return CampaignTime.Years(1f);
			}
			return CampaignTime.Years(10000f);
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsJournalLogEntry(object o, List<object> collectedObjects)
	{
		((JournalLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Title);
		collectedObjects.Add(RelatedHero);
		collectedObjects.Add(Antagonist);
		collectedObjects.Add(_entries);
		collectedObjects.Add(_relatedObjectIds);
	}

	internal static object AutoGeneratedGetMemberValueTitle(object o)
	{
		return ((JournalLogEntry)o).Title;
	}

	internal static object AutoGeneratedGetMemberValueRelatedHero(object o)
	{
		return ((JournalLogEntry)o).RelatedHero;
	}

	internal static object AutoGeneratedGetMemberValueAntagonist(object o)
	{
		return ((JournalLogEntry)o).Antagonist;
	}

	internal static object AutoGeneratedGetMemberValueIsSpecial(object o)
	{
		return ((JournalLogEntry)o).IsSpecial;
	}

	internal static object AutoGeneratedGetMemberValue_entries(object o)
	{
		return ((JournalLogEntry)o)._entries;
	}

	internal static object AutoGeneratedGetMemberValue_lastIssueStatus(object o)
	{
		return ((JournalLogEntry)o)._lastIssueStatus;
	}

	internal static object AutoGeneratedGetMemberValue_questCompletionDetail(object o)
	{
		return ((JournalLogEntry)o)._questCompletionDetail;
	}

	internal static object AutoGeneratedGetMemberValue_relatedObjectIds(object o)
	{
		return ((JournalLogEntry)o)._relatedObjectIds;
	}

	public JournalLogEntry(TextObject title, Hero relatedHero, Hero antagonist, bool isSpecial, params MBObjectBase[] relatedObjects)
	{
		Title = title;
		RelatedHero = relatedHero;
		Antagonist = antagonist;
		_lastIssueStatus = IssueBase.IssueUpdateDetails.None;
		_questCompletionDetail = QuestBase.QuestCompleteDetails.Invalid;
		IsSpecial = isSpecial;
		_relatedObjectIds = new string[relatedObjects.Length];
		for (int i = 0; i < relatedObjects.Length; i++)
		{
			_relatedObjectIds[i] = relatedObjects[i].StringId;
		}
	}

	public bool IsRelatedTo(MBObjectBase obj)
	{
		return _relatedObjectIds.Contains(obj.StringId);
	}

	public IEnumerable<JournalLog> GetEntries()
	{
		foreach (JournalLog entry in _entries)
		{
			yield return entry;
		}
	}

	public void Update(MBReadOnlyList<JournalLog> entries, IssueBase.IssueUpdateDetails issueStatus = IssueBase.IssueUpdateDetails.None)
	{
		_entries = entries.ToList();
		if (issueStatus != 0)
		{
			_lastIssueStatus = issueStatus;
		}
	}

	public void Update(MBReadOnlyList<JournalLog> entries, QuestBase.QuestCompleteDetails questCompletionDetail)
	{
		_entries = entries.ToList();
		_questCompletionDetail = questCompletionDetail;
	}

	public bool IsEndedUnsuccessfully()
	{
		if (_lastIssueStatus != 0)
		{
			if (_lastIssueStatus != IssueBase.IssueUpdateDetails.IssueCancel && _lastIssueStatus != IssueBase.IssueUpdateDetails.IssueFail && _lastIssueStatus != IssueBase.IssueUpdateDetails.IssueTimedOut && _lastIssueStatus != IssueBase.IssueUpdateDetails.SentTroopsFailedQuest)
			{
				return _lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedWithBetrayal;
			}
			return true;
		}
		if (_questCompletionDetail != QuestBase.QuestCompleteDetails.Cancel && _questCompletionDetail != QuestBase.QuestCompleteDetails.Fail && _questCompletionDetail != QuestBase.QuestCompleteDetails.FailWithBetrayal)
		{
			return _questCompletionDetail == QuestBase.QuestCompleteDetails.Timeout;
		}
		return true;
	}

	public bool IsEnded()
	{
		if (_lastIssueStatus != 0)
		{
			if (_lastIssueStatus != IssueBase.IssueUpdateDetails.IssueCancel && _lastIssueStatus != IssueBase.IssueUpdateDetails.IssueFail && _lastIssueStatus != IssueBase.IssueUpdateDetails.IssueTimedOut && _lastIssueStatus != IssueBase.IssueUpdateDetails.IssueFinishedWithBetrayal && _lastIssueStatus != IssueBase.IssueUpdateDetails.IssueFinishedByAILord && _lastIssueStatus != IssueBase.IssueUpdateDetails.SentTroopsFinishedQuest && _lastIssueStatus != IssueBase.IssueUpdateDetails.SentTroopsFailedQuest)
			{
				return _lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedWithSuccess;
			}
			return true;
		}
		return _questCompletionDetail != QuestBase.QuestCompleteDetails.Invalid;
	}

	public override string ToString()
	{
		return "Quest status change";
	}
}
