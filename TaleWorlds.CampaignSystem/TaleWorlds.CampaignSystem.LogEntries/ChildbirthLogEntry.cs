using System.Collections.Generic;
using Helpers;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class ChildbirthLogEntry : LogEntry, IEncyclopediaLog, IChatNotification
{
	[SaveableField(140)]
	public readonly Hero Mother;

	[SaveableProperty(143)]
	public Hero NewbornHero { get; private set; }

	public bool IsVisibleNotification => true;

	public override ChatNotificationType NotificationType => CivilianNotification(Mother.Clan);

	public override CampaignTime KeepInHistoryTime => CampaignTime.Days(Campaign.Current.Models.PregnancyModel.PregnancyDurationInDays * 2f);

	public bool NeedsNewLogEntryForTwin { get; private set; }

	public Hero NewLogTwin { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsChildbirthLogEntry(object o, List<object> collectedObjects)
	{
		((ChildbirthLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Mother);
		collectedObjects.Add(NewbornHero);
	}

	internal static object AutoGeneratedGetMemberValueNewbornHero(object o)
	{
		return ((ChildbirthLogEntry)o).NewbornHero;
	}

	internal static object AutoGeneratedGetMemberValueMother(object o)
	{
		return ((ChildbirthLogEntry)o).Mother;
	}

	public ChildbirthLogEntry(Hero mother, Hero newbornHero)
	{
		Mother = mother;
		NewbornHero = newbornHero;
	}

	public override string ToString()
	{
		return GetEncyclopediaText().ToString();
	}

	public TextObject GetNotificationText()
	{
		return GetEncyclopediaText();
	}

	public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
	{
		return obj == Mother;
	}

	public TextObject GetEncyclopediaText()
	{
		TextObject textObject = ((NewbornHero == null) ? GameTexts.FindText("str_notification_give_birth_single_stillborn") : GameTexts.FindText("str_notification_give_birth_single_child"));
		StringHelpers.SetCharacterProperties("MOTHER", Mother.CharacterObject, textObject);
		return textObject;
	}
}
