using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class DeclareWarLogEntry : LogEntry, IEncyclopediaLog, IChatNotification, IWarLog
{
	[SaveableField(190)]
	public readonly IFaction Faction1;

	[SaveableField(191)]
	public readonly IFaction Faction2;

	[SaveableField(192)]
	public readonly Hero Faction1Leader;

	public bool IsVisibleNotification => true;

	public override ChatNotificationType NotificationType => AdversityNotification(Faction1, Faction2);

	internal static void AutoGeneratedStaticCollectObjectsDeclareWarLogEntry(object o, List<object> collectedObjects)
	{
		((DeclareWarLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Faction1);
		collectedObjects.Add(Faction2);
		collectedObjects.Add(Faction1Leader);
	}

	internal static object AutoGeneratedGetMemberValueFaction1(object o)
	{
		return ((DeclareWarLogEntry)o).Faction1;
	}

	internal static object AutoGeneratedGetMemberValueFaction2(object o)
	{
		return ((DeclareWarLogEntry)o).Faction2;
	}

	internal static object AutoGeneratedGetMemberValueFaction1Leader(object o)
	{
		return ((DeclareWarLogEntry)o).Faction1Leader;
	}

	public DeclareWarLogEntry(IFaction faction1, IFaction faction2)
	{
		Faction1 = faction1;
		Faction2 = faction2;
		Faction1Leader = faction1.Leader;
	}

	public bool IsRelatedToWar(StanceLink stance, out IFaction effector, out IFaction effected)
	{
		IFaction faction = stance.Faction1;
		IFaction faction2 = stance.Faction2;
		effector = faction;
		effected = faction2;
		if (faction != Faction1 || faction2 != Faction2)
		{
			if (faction == Faction2)
			{
				return faction2 == Faction1;
			}
			return false;
		}
		return true;
	}

	public TextObject GetNotificationText()
	{
		TextObject textObject = null;
		Hero hero = Faction1Leader ?? Faction1.Leader;
		if (hero != null)
		{
			textObject = GameTexts.FindText("str_factions_declare_war_news");
			textObject.SetTextVariable("RULER_NAME", hero.Name);
		}
		else
		{
			textObject = GameTexts.FindText("str_factions_declare_war_news_direct");
		}
		textObject.SetTextVariable("FACTION1_NAME", Faction1.EncyclopediaLinkWithName);
		textObject.SetTextVariable("FACTION2_NAME", Faction2.EncyclopediaLinkWithName);
		return textObject;
	}

	public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
	{
		score = ImportanceEnum.Zero;
		comment = "";
		if (!Faction1.IsEliminated && Faction1.Leader.Clan.IsRebelClan && talkTroop.Clan == Faction1)
		{
			score = ImportanceEnum.MatterOfLifeAndDeath;
			if (findString)
			{
				comment = "str_comment_we_have_rebelled";
			}
		}
	}

	public override int GetAsRumor(Settlement talkSettlement, ref TextObject comment)
	{
		int result = 0;
		if (Faction1 == talkSettlement.MapFaction)
		{
			comment = new TextObject("{=mrmxEklL}So looks like it's war with {ENEMY_NAME}. Well, I don't deny they deserve it, but it will fall hardest on the poor folk like us.");
			comment.SetTextVariable("ENEMY_NAME", FactionHelper.GetTermUsedByOtherFaction(Faction2, talkSettlement.MapFaction, pejorative: false));
			return 10;
		}
		if (Faction2 == talkSettlement.MapFaction)
		{
			comment = new TextObject("{=SVebFiHQ}So looks like {ENEMY_NAME} want war with us. Well, I say we show the bastards who we are!");
			comment.SetTextVariable("ENEMY_NAME", FactionHelper.GetTermUsedByOtherFaction(Faction1, talkSettlement.MapFaction, pejorative: false));
			return 10;
		}
		return result;
	}

	public override string ToString()
	{
		return GetEncyclopediaText().ToString();
	}

	public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
	{
		if (obj != Faction1)
		{
			return obj == Faction2;
		}
		return true;
	}

	public TextObject GetEncyclopediaText()
	{
		return GetNotificationText();
	}
}
