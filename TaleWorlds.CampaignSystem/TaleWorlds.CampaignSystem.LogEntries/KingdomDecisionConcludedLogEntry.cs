using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Election;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class KingdomDecisionConcludedLogEntry : LogEntry, IChatNotification
{
	[SaveableField(1)]
	public readonly Kingdom Kingdom;

	[SaveableField(3)]
	private readonly bool _isVisibleNotification;

	[SaveableField(4)]
	private readonly TextObject _notificationText;

	public override CampaignTime KeepInHistoryTime => CampaignTime.Weeks(1f);

	public bool IsVisibleNotification => _isVisibleNotification;

	public override ChatNotificationType NotificationType => PoliticalNotification(Kingdom);

	internal static void AutoGeneratedStaticCollectObjectsKingdomDecisionConcludedLogEntry(object o, List<object> collectedObjects)
	{
		((KingdomDecisionConcludedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Kingdom);
		collectedObjects.Add(_notificationText);
	}

	internal static object AutoGeneratedGetMemberValueKingdom(object o)
	{
		return ((KingdomDecisionConcludedLogEntry)o).Kingdom;
	}

	internal static object AutoGeneratedGetMemberValue_isVisibleNotification(object o)
	{
		return ((KingdomDecisionConcludedLogEntry)o)._isVisibleNotification;
	}

	internal static object AutoGeneratedGetMemberValue_notificationText(object o)
	{
		return ((KingdomDecisionConcludedLogEntry)o)._notificationText;
	}

	public KingdomDecisionConcludedLogEntry(KingdomDecision decision, DecisionOutcome chosenOutcome, bool isPlayerInvolved)
	{
		Kingdom = decision.Kingdom;
		_isVisibleNotification = !isPlayerInvolved;
		_notificationText = decision.GetChosenOutcomeText(chosenOutcome, decision.SupportStatusOfFinalDecision, isShortVersion: true);
	}

	public override string ToString()
	{
		return GetNotificationText().ToString();
	}

	public TextObject GetNotificationText()
	{
		return _notificationText;
	}
}
