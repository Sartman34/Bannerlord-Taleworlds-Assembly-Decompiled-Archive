using System.Collections.Generic;
using Helpers;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class ArmyCreationLogEntry : LogEntry, IEncyclopediaLog, IWarLog
{
	[SaveableField(20)]
	private readonly CharacterObject _armyLeader;

	public override CampaignTime KeepInHistoryTime => CampaignTime.Weeks(1f);

	internal static void AutoGeneratedStaticCollectObjectsArmyCreationLogEntry(object o, List<object> collectedObjects)
	{
		((ArmyCreationLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_armyLeader);
	}

	internal static object AutoGeneratedGetMemberValue_armyLeader(object o)
	{
		return ((ArmyCreationLogEntry)o)._armyLeader;
	}

	public ArmyCreationLogEntry(Army army)
	{
		_armyLeader = army.LeaderParty.LeaderHero.CharacterObject;
	}

	public override string ToString()
	{
		return GetEncyclopediaText().ToString();
	}

	public bool IsRelatedToWar(StanceLink stance, out IFaction effector, out IFaction effected)
	{
		IFaction faction = stance.Faction1;
		IFaction faction2 = stance.Faction2;
		effector = _armyLeader.HeroObject.MapFaction;
		effected = null;
		if (_armyLeader.HeroObject.MapFaction != faction)
		{
			return _armyLeader.HeroObject.MapFaction == faction2;
		}
		return true;
	}

	public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
	{
		return obj == _armyLeader.HeroObject;
	}

	public TextObject GetEncyclopediaText()
	{
		TextObject textObject = new TextObject("{=aXhPvVud}{HERO.LINK} created an army.");
		StringHelpers.SetCharacterProperties("HERO", _armyLeader, textObject);
		return textObject;
	}
}
