using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class PlayerReputationChangesLogEntry : LogEntry
{
	[SaveableField(410)]
	private readonly TraitObject _trait;

	[SaveableField(411)]
	private readonly List<Hero> _companionsInParty;

	[SaveableField(412)]
	private readonly ActionNotes _note;

	[SaveableField(413)]
	private readonly Hero _referenceHero;

	internal static void AutoGeneratedStaticCollectObjectsPlayerReputationChangesLogEntry(object o, List<object> collectedObjects)
	{
		((PlayerReputationChangesLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_trait);
		collectedObjects.Add(_companionsInParty);
		collectedObjects.Add(_referenceHero);
	}

	internal static object AutoGeneratedGetMemberValue_trait(object o)
	{
		return ((PlayerReputationChangesLogEntry)o)._trait;
	}

	internal static object AutoGeneratedGetMemberValue_companionsInParty(object o)
	{
		return ((PlayerReputationChangesLogEntry)o)._companionsInParty;
	}

	internal static object AutoGeneratedGetMemberValue_note(object o)
	{
		return ((PlayerReputationChangesLogEntry)o)._note;
	}

	internal static object AutoGeneratedGetMemberValue_referenceHero(object o)
	{
		return ((PlayerReputationChangesLogEntry)o)._referenceHero;
	}

	public PlayerReputationChangesLogEntry(TraitObject trait, Hero referenceHero, ActionNotes note)
	{
		_trait = trait;
		_referenceHero = referenceHero;
		_companionsInParty = Hero.MainHero.CompanionsInParty.ToList();
		_note = note;
	}

	public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
	{
		score = ImportanceEnum.Zero;
		comment = "";
		if (!_companionsInParty.Contains(talkTroop))
		{
			return;
		}
		if (talkTroop.GetTraitLevel(DefaultTraits.Honor) > 0 && _trait == DefaultTraits.Honor)
		{
			if (_note == ActionNotes.QuestSuccess)
			{
				MBTextManager.SetTextVariable("COMMENT_REFERENCE_HERO", _referenceHero.Name);
				comment = "str_comment_companion_on_honor_for_quest_success";
				score = ImportanceEnum.SomewhatImportant;
			}
			else if (_note == ActionNotes.QuestBetrayal)
			{
				MBTextManager.SetTextVariable("COMMENT_REFERENCE_HERO", _referenceHero.Name);
				comment = "str_comment_companion_on_honor_for_quest_betrayal";
				score = ImportanceEnum.SomewhatImportant;
			}
		}
		if (talkTroop.GetTraitLevel(DefaultTraits.Generosity) > 0 && _trait == DefaultTraits.Generosity && _note == ActionNotes.PartyTakenCareOf)
		{
			comment = "str_comment_companion_on_generosity_for_party_morale";
			score = ImportanceEnum.SomewhatImportant;
		}
	}

	public override string ToString()
	{
		return "PlayerReputationChangesLogEntry";
	}
}
