using System;
using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class LogEntryHistory
{
	[SaveableField(0)]
	internal long LastAddedIndex = -1L;

	[SaveableField(1)]
	private readonly MBList<LogEntry> _logs = new MBList<LogEntry>();

	public MBReadOnlyList<LogEntry> GameActionLogs => _logs;

	internal static void AutoGeneratedStaticCollectObjectsLogEntryHistory(object o, List<object> collectedObjects)
	{
		((LogEntryHistory)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_logs);
	}

	internal static object AutoGeneratedGetMemberValueLastAddedIndex(object o)
	{
		return ((LogEntryHistory)o).LastAddedIndex;
	}

	internal static object AutoGeneratedGetMemberValue_logs(object o)
	{
		return ((LogEntryHistory)o)._logs;
	}

	internal void AddActionLog(LogEntry actionLog, bool checkSequenceAndInsert = false)
	{
		if (_logs.Count > 0 && _logs[_logs.Count - 1].Id > actionLog.Id)
		{
			Debug.FailedAssert("Log ids should always get bigger", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\LogEntries\\LogEntry.cs", "AddActionLog", 209);
			int num = _logs.FindIndex((LogEntry l) => l.Id > actionLog.Id);
			if (num >= 0)
			{
				_logs.Insert(num, actionLog);
			}
		}
		else
		{
			_logs.Add(actionLog);
		}
		Campaign.Current.CampaignInformationManager.NewLogEntryAdded(actionLog);
	}

	internal void DeleteLogAtIndex(int i)
	{
		_logs.RemoveAt(i);
	}

	public void DeleteOutdatedLogs()
	{
		int num = -1;
		for (int i = 0; i < _logs.Count; i++)
		{
			LogEntry logEntry = _logs[i];
			if (!(logEntry.KeepInHistoryTime + logEntry.GameTime).IsPast)
			{
				num++;
				if (i != num)
				{
					_logs[num] = logEntry;
				}
			}
		}
		if (num < _logs.Count)
		{
			_logs.RemoveRange(num + 1, _logs.Count - num - 1);
		}
	}

	public IEnumerable<T> GetGameActionLogs<T>(Func<T, bool> predicate) where T : LogEntry
	{
		foreach (LogEntry log in _logs)
		{
			if (log is T val && predicate(val))
			{
				yield return val;
			}
		}
	}

	public T FindLastGameActionLog<T>(Func<T, bool> predicate) where T : LogEntry
	{
		for (int num = _logs.Count - 1; num >= 0; num--)
		{
			if (_logs[num] is T val && predicate(val))
			{
				return val;
			}
		}
		return null;
	}

	private int BinarySearchFirst(long target)
	{
		int num = 0;
		int num2 = _logs.Count - 1;
		while (num < num2)
		{
			int num3 = (num + num2 + 1) / 2;
			if (_logs[num3].Id > target)
			{
				num2 = num3 - 1;
			}
			else
			{
				num = num3;
			}
		}
		return num2;
	}

	private int BinarySearchFirst(CampaignTime target)
	{
		int num = 0;
		int num2 = _logs.Count - 1;
		while (num < num2)
		{
			int num3 = (num + num2 + 1) / 2;
			if (_logs[num3].GameTime > target)
			{
				num2 = num3 - 1;
			}
			else
			{
				num = num3;
			}
		}
		return num2;
	}

	public int GetStartIndexForComments()
	{
		for (int i = TaleWorlds.Library.MathF.Max(0, _logs.Count - 10000); i < _logs.Count; i++)
		{
			if (_logs[i].Id > Hero.OneToOneConversationHero.LastExaminedLogEntryID)
			{
				return i;
			}
		}
		return _logs.Count;
	}

	public LogEntry GetRelevantComment(Hero conversationHero, out int bestScore, out string bestRelatedLogEntryTag)
	{
		int num = -1;
		bestRelatedLogEntryTag = "";
		int startIndexForComments = GetStartIndexForComments();
		bestScore = 0;
		if (startIndexForComments < _logs.Count)
		{
			for (int i = startIndexForComments; i < _logs.Count; i++)
			{
				_logs[i].GetConversationScoreAndComment(conversationHero, findString: false, out var _, out var score);
				int num2 = (int)score;
				if (num2 > bestScore)
				{
					bestScore = num2;
					num = i;
				}
			}
			Hero.OneToOneConversationHero.LastExaminedLogEntryID = _logs[_logs.Count - 1].Id;
		}
		if (num > -1)
		{
			_logs[num].GetConversationScoreAndComment(conversationHero, findString: true, out var comment2, out var _);
			bestRelatedLogEntryTag = comment2;
			return _logs[num];
		}
		return null;
	}

	internal void OnAfterLoad()
	{
		for (int num = _logs.Count - 1; num >= 0; num--)
		{
			if (_logs[num] == null)
			{
				_logs.RemoveAt(num);
			}
		}
	}
}
