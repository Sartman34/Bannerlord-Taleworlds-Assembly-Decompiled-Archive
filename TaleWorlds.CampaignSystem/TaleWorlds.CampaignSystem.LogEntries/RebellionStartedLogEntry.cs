using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class RebellionStartedLogEntry : LogEntry, IChatNotification
{
	[SaveableField(310)]
	public readonly Settlement Settlement;

	[SaveableField(311)]
	private readonly bool _isVisibleNotification;

	public bool IsVisibleNotification => _isVisibleNotification;

	public override ChatNotificationType NotificationType => MilitaryNotification(null, Settlement.OwnerClan);

	internal static void AutoGeneratedStaticCollectObjectsRebellionStartedLogEntry(object o, List<object> collectedObjects)
	{
		((RebellionStartedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(Settlement);
	}

	internal static object AutoGeneratedGetMemberValueSettlement(object o)
	{
		return ((RebellionStartedLogEntry)o).Settlement;
	}

	internal static object AutoGeneratedGetMemberValue_isVisibleNotification(object o)
	{
		return ((RebellionStartedLogEntry)o)._isVisibleNotification;
	}

	public RebellionStartedLogEntry(Settlement settlement, Clan oldOwnerCLan)
	{
		Settlement = settlement;
		_isVisibleNotification = oldOwnerCLan == Clan.PlayerClan || (oldOwnerCLan.Kingdom != null && oldOwnerCLan.Kingdom == Clan.PlayerClan.Kingdom);
	}

	public override string ToString()
	{
		return GetNotificationText().ToString();
	}

	public TextObject GetNotificationText()
	{
		TextObject textObject = new TextObject("{=fbsFZWhb}Rebels in {SETTLEMENT} have taken the ownership of the settlement.");
		textObject.SetTextVariable("SETTLEMENT", Settlement.Name);
		return textObject;
	}
}
