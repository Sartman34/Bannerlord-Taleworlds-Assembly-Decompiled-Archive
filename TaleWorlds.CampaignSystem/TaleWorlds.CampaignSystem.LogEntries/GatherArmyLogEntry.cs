using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries;

public class GatherArmyLogEntry : LogEntry, IChatNotification
{
	[SaveableField(220)]
	public readonly Hero ArmyLeader;

	[SaveableField(221)]
	public readonly IFaction ArmyMapFaction;

	[SaveableField(222)]
	public readonly Settlement GatheringSettlement;

	public override ChatNotificationType NotificationType => MilitaryNotification(ArmyLeader.Clan, null);

	public bool IsVisibleNotification => ArmyMapFaction == Hero.MainHero.MapFaction;

	internal static void AutoGeneratedStaticCollectObjectsGatherArmyLogEntry(object o, List<object> collectedObjects)
	{
		((GatherArmyLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(ArmyLeader);
		collectedObjects.Add(ArmyMapFaction);
		collectedObjects.Add(GatheringSettlement);
	}

	internal static object AutoGeneratedGetMemberValueArmyLeader(object o)
	{
		return ((GatherArmyLogEntry)o).ArmyLeader;
	}

	internal static object AutoGeneratedGetMemberValueArmyMapFaction(object o)
	{
		return ((GatherArmyLogEntry)o).ArmyMapFaction;
	}

	internal static object AutoGeneratedGetMemberValueGatheringSettlement(object o)
	{
		return ((GatherArmyLogEntry)o).GatheringSettlement;
	}

	public GatherArmyLogEntry(Army army, Settlement gatheringSettlement)
	{
		ArmyLeader = army.LeaderParty.LeaderHero;
		ArmyMapFaction = army.Kingdom;
		GatheringSettlement = gatheringSettlement;
	}

	public override string ToString()
	{
		return GetNotificationText().ToString();
	}

	public TextObject GetNotificationText()
	{
		TextObject textObject = new TextObject("{=Vi5Ylvr1}{LORD.NAME} is gathering army near {SETTLEMENT}");
		StringHelpers.SetCharacterProperties("LORD", ArmyLeader.CharacterObject, textObject);
		textObject.SetTextVariable("SETTLEMENT", GatheringSettlement.ToString());
		return textObject;
	}
}
