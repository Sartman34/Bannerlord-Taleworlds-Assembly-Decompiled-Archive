using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Roster;

public struct TroopRosterElement : ISerializableObject, ISavedStruct
{
	private static readonly TroopRosterElement StaticInvalidElement = new TroopRosterElement(null);

	[SaveableField(0)]
	private int _number;

	[SaveableField(1)]
	private int _woundedNumber;

	[SaveableField(2)]
	private int _xp;

	[SaveableField(4)]
	public CharacterObject Character;

	public static TroopRosterElement Invalid => StaticInvalidElement;

	public int Number
	{
		get
		{
			return _number;
		}
		set
		{
			if (value < 0)
			{
				throw new MBUnderFlowException("ItemRosterElement::Character");
			}
			_number = value;
		}
	}

	public int WoundedNumber
	{
		get
		{
			if (Character.IsHero)
			{
				if (!Character.HeroObject.IsWounded)
				{
					return 0;
				}
				return 1;
			}
			return _woundedNumber;
		}
		set
		{
			if (value < 0)
			{
				throw new MBUnderFlowException("ItemRosterElement::WoundedNumber");
			}
			_woundedNumber = value;
		}
	}

	public int Xp
	{
		get
		{
			return _xp;
		}
		set
		{
			if (value < 0)
			{
				Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\TroopRosterElement.cs", "Xp", 77);
				_xp = 0;
			}
			else
			{
				_xp = value;
			}
		}
	}

	[SaveableProperty(5)]
	public int DeltaXp { get; internal set; }

	public static void AutoGeneratedStaticCollectObjectsTroopRosterElement(object o, List<object> collectedObjects)
	{
		((TroopRosterElement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(Character);
	}

	internal static object AutoGeneratedGetMemberValueDeltaXp(object o)
	{
		return ((TroopRosterElement)o).DeltaXp;
	}

	internal static object AutoGeneratedGetMemberValueCharacter(object o)
	{
		return ((TroopRosterElement)o).Character;
	}

	internal static object AutoGeneratedGetMemberValue_number(object o)
	{
		return ((TroopRosterElement)o)._number;
	}

	internal static object AutoGeneratedGetMemberValue_woundedNumber(object o)
	{
		return ((TroopRosterElement)o)._woundedNumber;
	}

	internal static object AutoGeneratedGetMemberValue_xp(object o)
	{
		return ((TroopRosterElement)o)._xp;
	}

	public TroopRosterElement(CharacterObject character)
	{
		Character = character;
		_number = 0;
		_woundedNumber = 0;
		_xp = 0;
		DeltaXp = 0;
	}

	internal void Clear()
	{
		Character = null;
		_number = 0;
	}

	void ISerializableObject.SerializeTo(IWriter writer)
	{
		writer.WriteUInt((Character != null) ? Character.Id.InternalValue : 0u);
		writer.WriteInt(_number);
		writer.WriteInt(_woundedNumber);
		writer.WriteInt(_xp);
	}

	void ISerializableObject.DeserializeFrom(IReader reader)
	{
		uint num = reader.ReadUInt();
		Character = null;
		if (num != 0)
		{
			MBGUID objectId = new MBGUID(num);
			Character = MBObjectManager.Instance.GetObject(objectId) as CharacterObject;
		}
		_number = reader.ReadInt();
		_woundedNumber = reader.ReadInt();
	}

	public override string ToString()
	{
		return Number + " " + Character;
	}

	public override bool Equals(object obj)
	{
		if (!(obj is TroopRosterElement other))
		{
			return false;
		}
		return Equals(other);
	}

	public bool Equals(TroopRosterElement other)
	{
		return Character == other.Character;
	}

	public override int GetHashCode()
	{
		if (Character == null)
		{
			return 0;
		}
		return Character.GetHashCode();
	}

	bool ISavedStruct.IsDefault()
	{
		if (Character == null && _number == 0 && _woundedNumber == 0 && _xp == 0)
		{
			return DeltaXp == 0;
		}
		return false;
	}
}
