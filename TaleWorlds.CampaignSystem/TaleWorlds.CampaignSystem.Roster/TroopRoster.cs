using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Roster;

public class TroopRoster : ISerializableObject
{
	private static readonly List<TroopRoster> InstanceListForLoadGame = new List<TroopRoster>();

	[SaveableField(0)]
	internal TroopRosterElement[] data;

	[SaveableField(1)]
	internal int _count;

	[CachedData]
	private int _totalRegulars;

	[CachedData]
	private int _totalWoundedRegulars;

	[CachedData]
	private int _totalWoundedHeroes;

	[CachedData]
	private int _totalHeroes;

	[SaveableField(8)]
	private bool _isPrisonRoster;

	[CachedData]
	private MBList<TroopRosterElement> _troopRosterElements;

	[CachedData]
	private int _troopRosterElementsVersion;

	[CachedData]
	private bool _isInitialized;

	[CachedData]
	internal NumberChangedCallback NumberChangedCallback { get; set; }

	[SaveableProperty(2)]
	internal PartyBase OwnerParty { get; private set; }

	public int Count => _count;

	[CachedData]
	public int VersionNo { get; private set; }

	public int TotalRegulars => _totalRegulars;

	public int TotalWoundedRegulars => _totalWoundedRegulars;

	public int TotalWoundedHeroes => _totalWoundedHeroes;

	public int TotalHeroes => _totalHeroes;

	public int TotalWounded => _totalWoundedRegulars + _totalWoundedHeroes;

	public int TotalManCount => _totalRegulars + _totalHeroes;

	public int TotalHealthyCount => _totalRegulars + _totalHeroes - (_totalWoundedRegulars + _totalWoundedHeroes);

	public bool IsPrisonRoster
	{
		get
		{
			return _isPrisonRoster;
		}
		set
		{
			_isPrisonRoster = value;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsTroopRoster(object o, List<object> collectedObjects)
	{
		((TroopRoster)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(data);
		collectedObjects.Add(OwnerParty);
	}

	internal static object AutoGeneratedGetMemberValueOwnerParty(object o)
	{
		return ((TroopRoster)o).OwnerParty;
	}

	internal static object AutoGeneratedGetMemberValuedata(object o)
	{
		return ((TroopRoster)o).data;
	}

	internal static object AutoGeneratedGetMemberValue_count(object o)
	{
		return ((TroopRoster)o)._count;
	}

	internal static object AutoGeneratedGetMemberValue_isPrisonRoster(object o)
	{
		return ((TroopRoster)o)._isPrisonRoster;
	}

	public TroopRoster(PartyBase ownerParty)
		: this()
	{
		OwnerParty = ownerParty;
	}

	private TroopRoster()
	{
		data = new TroopRosterElement[4];
		_count = 0;
		_troopRosterElements = new MBList<TroopRosterElement>();
		InitializeCachedData();
	}

	public static TroopRoster CreateDummyTroopRoster()
	{
		return new TroopRoster();
	}

	public override int GetHashCode()
	{
		return base.GetHashCode();
	}

	[LoadInitializationCallback]
	private void OnLoad(MetaData metaData)
	{
		_troopRosterElementsVersion = -1;
		_troopRosterElements = new MBList<TroopRosterElement>();
		InstanceListForLoadGame.Add(this);
	}

	private void EnsureLength(int length)
	{
		if (length > 0 && (data == null || length > data.Length))
		{
			int num = 4;
			if (data != null)
			{
				num = data.Length * 2;
			}
			TroopRosterElement[] array = new TroopRosterElement[num];
			for (int i = 0; i < _count; i++)
			{
				array[i] = data[i];
			}
			data = array;
		}
	}

	public static void CalculateCachedStatsOnLoad()
	{
		foreach (TroopRoster item in InstanceListForLoadGame)
		{
			item.InitializeCachedData();
		}
		InstanceListForLoadGame.Clear();
	}

	private void InitializeCachedData()
	{
		_isInitialized = true;
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		for (int i = 0; i < _count; i++)
		{
			TroopRosterElement troopRosterElement = data[i];
			if (troopRosterElement.Character.IsHero)
			{
				num++;
				if (troopRosterElement.Character.HeroObject.IsWounded)
				{
					num2++;
				}
			}
			else
			{
				num3 += data[i].Number;
				num4 += data[i].WoundedNumber;
			}
		}
		_totalWoundedHeroes = num2;
		_totalWoundedRegulars = num4;
		_totalHeroes = num;
		_totalRegulars = num3;
	}

	public FlattenedTroopRoster ToFlattenedRoster()
	{
		return new FlattenedTroopRoster(TotalManCount) { GetTroopRoster() };
	}

	public void Add(IEnumerable<FlattenedTroopRosterElement> elementList)
	{
		foreach (FlattenedTroopRosterElement element in elementList)
		{
			AddToCounts(element.Troop, 1, insertAtFront: false, element.IsWounded ? 1 : 0, element.Xp);
		}
	}

	public void Add(TroopRoster troopRoster)
	{
		foreach (TroopRosterElement item in troopRoster.GetTroopRoster())
		{
			Add(item);
		}
	}

	public void Add(TroopRosterElement troopRosterElement)
	{
		AddToCounts(troopRosterElement.Character, troopRosterElement.Number, insertAtFront: false, troopRosterElement.WoundedNumber, troopRosterElement.Xp);
	}

	public ICollection<TroopRosterElement> RemoveIf(Predicate<TroopRosterElement> match)
	{
		List<TroopRosterElement> list = new List<TroopRosterElement>();
		bool flag = false;
		for (int i = 0; i < _count; i++)
		{
			if (match(data[i]))
			{
				TroopRosterElement elementCopyAtIndex = GetElementCopyAtIndex(i);
				list.Add(elementCopyAtIndex);
				AddToCountsAtIndex(i, -elementCopyAtIndex.Number, -elementCopyAtIndex.WoundedNumber, -elementCopyAtIndex.Xp);
				i--;
				flag = true;
			}
		}
		if (flag)
		{
			UpdateVersion();
		}
		return list;
	}

	public int FindIndexOfTroop(CharacterObject character)
	{
		for (int i = 0; i < _count; i++)
		{
			if (data[i].Character == character)
			{
				return i;
			}
		}
		return -1;
	}

	public CharacterObject GetManAtIndexFromFlattenedRosterWithFilter(int indexOfTroop, bool includeHeroes = false, bool countOnlyHealthyOnes = false)
	{
		for (int i = 0; i < _count; i++)
		{
			if (includeHeroes || !data[i].Character.IsHero)
			{
				indexOfTroop -= (countOnlyHealthyOnes ? (data[i].Number - data[i].WoundedNumber) : data[i].Number);
				if (indexOfTroop < 0)
				{
					return data[i].Character;
				}
			}
		}
		return null;
	}

	private bool KillOneNonHeroTroopRandomly()
	{
		CharacterObject characterObject = null;
		int num = _totalRegulars - _totalWoundedRegulars;
		bool flag = num > 0;
		while (flag)
		{
			int indexOfTroop = MBRandom.RandomInt(num);
			characterObject = GetManAtIndexFromFlattenedRosterWithFilter(indexOfTroop, includeHeroes: false, countOnlyHealthyOnes: true);
			flag = characterObject == null;
		}
		if (characterObject != null)
		{
			AddToCounts(characterObject, -1);
			return true;
		}
		return false;
	}

	public void KillNumberOfNonHeroTroopsRandomly(int numberOfMen)
	{
		bool flag = true;
		for (int i = 0; i < numberOfMen && flag; i++)
		{
			flag = KillOneNonHeroTroopRandomly();
		}
	}

	public void WoundNumberOfTroopsRandomly(int numberOfMen)
	{
		for (int i = 0; i < numberOfMen; i++)
		{
			CharacterObject characterObject = null;
			int num = _totalRegulars - _totalWoundedRegulars;
			bool flag = num > 0;
			while (flag)
			{
				flag = false;
				int indexOfTroop = MBRandom.RandomInt(num);
				characterObject = GetManAtIndexFromFlattenedRosterWithFilter(indexOfTroop, includeHeroes: true);
				if (characterObject == null || characterObject.IsHero)
				{
					flag = true;
				}
			}
			if (characterObject != null)
			{
				WoundTroop(characterObject);
			}
		}
	}

	public void SwapTroopsAtIndices(int firstIndex, int secondIndex)
	{
		if (firstIndex < 0 || firstIndex >= Count || secondIndex < 0 || secondIndex >= Count)
		{
			TaleWorlds.Library.Debug.FailedAssert("Troop roster swap indices are out of bounds.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\TroopRoster.cs", "SwapTroopsAtIndices", 395);
		}
		else if (firstIndex != secondIndex)
		{
			TroopRosterElement troopRosterElement = data[firstIndex];
			data[firstIndex] = data[secondIndex];
			data[secondIndex] = troopRosterElement;
		}
	}

	public void ShiftTroopToIndex(int troopIndex, int targetIndex)
	{
		if (troopIndex < 0 || troopIndex >= Count || targetIndex < 0 || targetIndex >= Count)
		{
			TaleWorlds.Library.Debug.FailedAssert("Troop roster swap indices are out of bounds.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\TroopRoster.cs", "ShiftTroopToIndex", 413);
		}
		else if (troopIndex != targetIndex)
		{
			int num = ((troopIndex < targetIndex) ? 1 : (-1));
			TroopRosterElement troopRosterElement = data[troopIndex];
			for (int i = troopIndex; i != targetIndex; i += num)
			{
				data[i] = data[i + num];
			}
			data[targetIndex] = troopRosterElement;
		}
	}

	public int AddToCountsAtIndex(int index, int countChange, int woundedCountChange = 0, int xpChange = 0, bool removeDepleted = true)
	{
		UpdateVersion();
		bool heroCountChanged = false;
		CharacterObject character = data[index].Character;
		bool isHero = character.IsHero;
		data[index].Number += countChange;
		int num = data[index].WoundedNumber + woundedCountChange;
		if (num > data[index].Number)
		{
			woundedCountChange += data[index].Number - num;
		}
		else if (num < 0)
		{
			TaleWorlds.Library.Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\TroopRoster.cs", "AddToCountsAtIndex", 455);
		}
		data[index].WoundedNumber += woundedCountChange;
		if (xpChange != 0)
		{
			data[index].Xp += xpChange;
		}
		if (IsPrisonRoster)
		{
			ClampConformity(index);
		}
		else
		{
			ClampXp(index);
		}
		if (isHero)
		{
			_totalHeroes += countChange;
			if (character.HeroObject.IsWounded)
			{
				_totalWoundedHeroes += countChange;
			}
			if (countChange != 0)
			{
				heroCountChanged = true;
			}
		}
		else
		{
			_totalWoundedRegulars += woundedCountChange;
			_totalRegulars += countChange;
		}
		if (removeDepleted && data[index].Number == 0)
		{
			RemoveRange(index, index + 1);
			index = -1;
		}
		if (OwnerParty != null && isHero)
		{
			if (countChange > 0)
			{
				if (!IsPrisonRoster)
				{
					OwnerParty.OnHeroAdded(character.HeroObject);
				}
				else
				{
					OwnerParty.OnHeroAddedAsPrisoner(character.HeroObject);
				}
			}
			else if (countChange < 0)
			{
				if (!IsPrisonRoster)
				{
					OwnerParty.OnHeroRemoved(character.HeroObject);
				}
				else
				{
					OwnerParty.OnHeroRemovedAsPrisoner(character.HeroObject);
				}
			}
		}
		if (countChange != 0 || woundedCountChange != 0)
		{
			OnNumberChanged(countChange != 0, woundedCountChange != 0, heroCountChanged);
		}
		return index;
	}

	private void RemoveRange(int p, int p2)
	{
		int num = p2 - p;
		for (int i = p2; i < _count; i++)
		{
			data[i - num] = data[i];
		}
		for (int j = _count - num; j < _count; j++)
		{
			data[j].Clear();
		}
		UpdateVersion();
		_count -= num;
	}

	private int AddNewElement(CharacterObject character, bool insertAtFront = false, int insertionIndex = -1)
	{
		int num = _count + 1;
		EnsureLength(num);
		int num2 = ((insertionIndex == -1) ? _count : insertionIndex);
		if (insertAtFront)
		{
			num2 = 0;
		}
		if (_count > num2)
		{
			for (int num3 = _count; num3 > num2; num3--)
			{
				data[num3] = data[num3 - 1];
			}
		}
		data[num2] = new TroopRosterElement(character);
		_count = num;
		UpdateVersion();
		return num2;
	}

	[Conditional("DEBUG_MORE")]
	public void CheckValidity()
	{
		if (data == null)
		{
			return;
		}
		int num = 0;
		for (int i = 0; i < data.Length; i++)
		{
			TroopRosterElement troopRosterElement = data[i];
			if (troopRosterElement.Character != null)
			{
				_ = troopRosterElement.Number;
				_ = troopRosterElement.WoundedNumber;
				num++;
			}
		}
	}

	private void OnNumberChanged(bool numberChanged, bool woundedNumberChanged, bool heroCountChanged)
	{
		NumberChangedCallback?.Invoke(numberChanged, woundedNumberChanged, heroCountChanged);
	}

	public int AddToCounts(CharacterObject character, int count, bool insertAtFront = false, int woundedCount = 0, int xpChange = 0, bool removeDepleted = true, int index = -1)
	{
		int num = FindIndexOfTroop(character);
		if (num < 0)
		{
			if (index >= 0)
			{
				if (count + woundedCount <= 0)
				{
					TaleWorlds.Library.Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\TroopRoster.cs", "AddToCounts", 630);
					return -1;
				}
				num = AddNewElement(character, insertAtFront, index);
			}
			else
			{
				if (count + woundedCount <= 0)
				{
					return -1;
				}
				num = AddNewElement(character, insertAtFront);
			}
		}
		if (AddToCountsAtIndex(num, count, woundedCount, xpChange, removeDepleted) != -1)
		{
			return num;
		}
		return -1;
	}

	public int GetTroopCount(CharacterObject troop)
	{
		int num = FindIndexOfTroop(troop);
		if (num >= 0)
		{
			return data[num].Number;
		}
		return 0;
	}

	public void RemoveZeroCounts()
	{
		int num = 0;
		for (int i = 0; i < _count; i++)
		{
			if (data[i].Number > 0)
			{
				if (num != i)
				{
					data[num] = data[i];
				}
				num++;
			}
		}
		for (int j = num; j < _count; j++)
		{
			data[j].Clear();
		}
		_count = num;
		UpdateVersion();
	}

	public TroopRosterElement GetElementCopyAtIndex(int index)
	{
		return data[index];
	}

	public void SetElementNumber(int index, int number)
	{
		if (index < _count)
		{
			data[index].Number = number;
			UpdateVersion();
			return;
		}
		throw new IndexOutOfRangeException();
	}

	public int GetElementNumber(int index)
	{
		if (index >= 0 && index < _count)
		{
			return data[index].Number;
		}
		return 0;
	}

	public int GetElementNumber(CharacterObject character)
	{
		return GetElementNumber(FindIndexOfTroop(character));
	}

	public void SetElementWoundedNumber(int index, int number)
	{
		if (index < _count)
		{
			data[index].WoundedNumber = number;
			UpdateVersion();
			return;
		}
		throw new IndexOutOfRangeException();
	}

	public int GetElementWoundedNumber(int index)
	{
		if (index < _count)
		{
			return data[index].WoundedNumber;
		}
		throw new IndexOutOfRangeException();
	}

	public void SetElementXp(int index, int number)
	{
		if (index < _count)
		{
			data[index].Xp = number;
			UpdateVersion();
			return;
		}
		throw new IndexOutOfRangeException();
	}

	public int GetElementXp(int index)
	{
		if (index < _count && index >= 0)
		{
			return data[index].Xp;
		}
		return 0;
	}

	public int GetElementXp(CharacterObject character)
	{
		return GetElementXp(FindIndexOfTroop(character));
	}

	public CharacterObject GetCharacterAtIndex(int index)
	{
		if (index < _count)
		{
			return data[index].Character;
		}
		throw new IndexOutOfRangeException();
	}

	public void FillMembersOfRoster(int neededNumber, CharacterObject basicTroop = null)
	{
		int num2;
		for (int i = (from element in GetTroopRoster()
			where !element.Character.IsHero
			select element).Sum((TroopRosterElement element) => element.Number); i != neededNumber; i += num2)
		{
			float num = MBRandom.RandomFloat * (float)i;
			CharacterObject character = basicTroop;
			foreach (TroopRosterElement item in from element in GetTroopRoster()
				where !element.Character.IsHero
				select element)
			{
				num -= (float)item.Number;
				if (num < 0f)
				{
					character = item.Character;
					break;
				}
			}
			num2 = ((i <= neededNumber) ? 1 : (-1));
			AddToCounts(character, num2);
		}
	}

	public void WoundMembersOfRoster(float woundedRatio)
	{
		for (int i = 0; i < data.Length; i++)
		{
			TroopRosterElement troopRosterElement = data[i];
			if (troopRosterElement.Character != null)
			{
				if (troopRosterElement.Character.IsHero && MBRandom.RandomFloat < woundedRatio)
				{
					data[i].Character.HeroObject.MakeWounded();
					continue;
				}
				int woundedCount = (int)((float)troopRosterElement.Number * woundedRatio);
				AddToCounts(data[i].Character, 0, insertAtFront: false, woundedCount);
			}
		}
	}

	public void Reset()
	{
		Clear();
		UpdateVersion();
	}

	public override bool Equals(object obj)
	{
		return this == obj;
	}

	public static bool operator ==(TroopRoster a, TroopRoster b)
	{
		if ((object)a == b)
		{
			return true;
		}
		if ((object)a == null || (object)b == null)
		{
			return false;
		}
		if (a.Count != b.Count)
		{
			return false;
		}
		for (int i = 0; i < a.Count; i++)
		{
			TroopRosterElement elementCopyAtIndex = a.GetElementCopyAtIndex(i);
			int num = b.FindIndexOfTroop(elementCopyAtIndex.Character);
			if (num == -1)
			{
				return false;
			}
			TroopRosterElement elementCopyAtIndex2 = b.GetElementCopyAtIndex(num);
			if (elementCopyAtIndex.Character != elementCopyAtIndex2.Character || elementCopyAtIndex.Number != elementCopyAtIndex2.Number)
			{
				return false;
			}
		}
		return true;
	}

	public static bool operator !=(TroopRoster a, TroopRoster b)
	{
		return !(a == b);
	}

	public bool Contains(CharacterObject character)
	{
		for (int i = 0; i < Count; i++)
		{
			if (character == GetElementCopyAtIndex(i).Character)
			{
				return true;
			}
		}
		return false;
	}

	public void ValidateTroopListCache()
	{
		if (_troopRosterElementsVersion == VersionNo)
		{
			return;
		}
		lock (this)
		{
			if (_troopRosterElementsVersion != VersionNo)
			{
				_troopRosterElements.Clear();
				_troopRosterElements.Capacity = Math.Max(_troopRosterElements.Capacity, Count);
				for (int i = 0; i < Count; i++)
				{
					_troopRosterElements.Add(GetElementCopyAtIndex(i));
				}
				_troopRosterElementsVersion = VersionNo;
			}
		}
	}

	public MBList<TroopRosterElement> GetTroopRoster()
	{
		ValidateTroopListCache();
		return _troopRosterElements;
	}

	public void Clear()
	{
		for (int num = _count - 1; num >= 0; num--)
		{
			AddToCountsAtIndex(num, -data[num].Number, -data[num].WoundedNumber);
		}
		UpdateVersion();
	}

	private void ClampConformity(int index)
	{
		CharacterObject character = data[index].Character;
		if (!character.IsHero)
		{
			int maxValue = data[index].Number * character.ConformityNeededToRecruitPrisoner;
			int xp = data[index].Xp;
			data[index].Xp = MBMath.ClampInt(xp, 0, maxValue);
		}
		else
		{
			data[index].Xp = TaleWorlds.Library.MathF.Max(data[index].Xp, 0);
		}
	}

	private void ClampXp(int index)
	{
		CharacterObject character = data[index].Character;
		if (!character.IsHero)
		{
			int num = 0;
			for (int i = 0; i < character.UpgradeTargets.Length; i++)
			{
				int upgradeXpCost = character.GetUpgradeXpCost(OwnerParty, i);
				if (num < upgradeXpCost)
				{
					num = upgradeXpCost;
				}
			}
			int xp = MBMath.ClampInt(data[index].Xp, 0, data[index].Number * num);
			data[index].Xp = xp;
		}
		else
		{
			data[index].Xp = TaleWorlds.Library.MathF.Max(data[index].Xp, 0);
		}
	}

	public int AddXpToTroop(int xpAmount, CharacterObject attackerTroop)
	{
		int num = FindIndexOfTroop(attackerTroop);
		if (num >= 0)
		{
			return AddXpToTroopAtIndex(xpAmount, num);
		}
		return 0;
	}

	public int AddXpToTroopAtIndex(int xpAmount, int index)
	{
		int xp = data[index].Xp;
		data[index].Xp += xpAmount;
		if (IsPrisonRoster)
		{
			ClampConformity(index);
		}
		else
		{
			ClampXp(index);
		}
		return data[index].Xp - xp;
	}

	public void RemoveTroop(CharacterObject troop, int numberToRemove = 1, UniqueTroopDescriptor troopSeed = default(UniqueTroopDescriptor), int xp = 0)
	{
		int index = FindIndexOfTroop(troop);
		bool removeDepleted = true;
		if (PlayerEncounter.CurrentBattleSimulation != null && !troop.IsHero)
		{
			removeDepleted = false;
		}
		AddToCountsAtIndex(index, -numberToRemove, 0, (!troop.IsHero) ? (-xp) : 0, removeDepleted);
	}

	public void WoundTroop(CharacterObject troop, int numberToWound = 1, UniqueTroopDescriptor troopSeed = default(UniqueTroopDescriptor))
	{
		int index = FindIndexOfTroop(troop);
		AddToCountsAtIndex(index, 0, numberToWound);
	}

	void ISerializableObject.SerializeTo(IWriter writer)
	{
		writer.WriteInt(Count);
		writer.WriteInt(VersionNo);
		if (data != null)
		{
			writer.WriteInt(data.Length);
			TroopRosterElement[] array = data;
			foreach (TroopRosterElement troopRosterElement in array)
			{
				writer.WriteSerializableObject(troopRosterElement);
			}
		}
		else
		{
			writer.WriteInt(0);
		}
	}

	void ISerializableObject.DeserializeFrom(IReader reader)
	{
		_count = reader.ReadInt();
		VersionNo = reader.ReadInt();
		int num = reader.ReadInt();
		data = new TroopRosterElement[num];
		for (int i = 0; i < num; i++)
		{
			data[i] = (TroopRosterElement)(object)reader.ReadSerializableObject();
		}
	}

	public int Sum(Func<TroopRosterElement, int> selector)
	{
		int num = 0;
		for (int i = 0; i < _count; i++)
		{
			num += selector(data[i]);
		}
		return num;
	}

	public void OnHeroHealthStatusChanged(Hero hero)
	{
		UpdateVersion();
		_totalWoundedHeroes += (hero.IsWounded ? 1 : (-1));
		OnNumberChanged(numberChanged: false, woundedNumberChanged: true, heroCountChanged: false);
	}

	internal void AddTroopTempXp(CharacterObject troop, int gainedXp)
	{
		int num = FindIndexOfTroop(troop);
		if (num >= 0)
		{
			data[num].DeltaXp += gainedXp;
		}
	}

	public void ClearTempXp()
	{
		for (int i = 0; i < _count; i++)
		{
			data[i].DeltaXp = 0;
		}
	}

	public void UpdateVersion()
	{
		OwnerParty?.MobileParty?.UpdateVersionNo();
		VersionNo++;
	}

	public TroopRoster CloneRosterData()
	{
		TroopRoster troopRoster = new TroopRoster();
		if (data != null)
		{
			for (int i = 0; i < data.Length; i++)
			{
				TroopRosterElement troopRosterElement = data[i];
				if (troopRosterElement.Character != null)
				{
					troopRoster.AddToCounts(data[i].Character, troopRosterElement.Number, insertAtFront: false, troopRosterElement.WoundedNumber);
				}
			}
		}
		return troopRoster;
	}
}
