using System;
using System.Collections;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Roster;

public class ItemRoster : IReadOnlyList<ItemRosterElement>, IEnumerable<ItemRosterElement>, IEnumerable, IReadOnlyCollection<ItemRosterElement>, ISerializableObject
{
	public delegate void RosterUpdatedEventDelegate(ItemRosterElement item, int count);

	[SaveableField(0)]
	private ItemRosterElement[] _data;

	[SaveableField(1)]
	private int _count;

	private static readonly List<ItemRoster> InstanceListForLoadGame = new List<ItemRoster>();

	public ItemRosterElement this[int index] => _data[index];

	public int Count => _count;

	[CachedData]
	public int VersionNo { get; private set; }

	[CachedData]
	public float TotalWeight { get; private set; }

	[CachedData]
	public int TotalFood { get; internal set; }

	[CachedData]
	public int FoodVariety { get; internal set; }

	[CachedData]
	public int TotalValue { get; internal set; }

	[CachedData]
	public int TradeGoodsTotalValue { get; internal set; }

	[CachedData]
	public int NumberOfPackAnimals { get; private set; }

	[CachedData]
	public int NumberOfLivestockAnimals { get; private set; }

	[CachedData]
	public int NumberOfMounts { get; private set; }

	private event RosterUpdatedEventDelegate _rosterUpdatedEvent;

	public event RosterUpdatedEventDelegate RosterUpdatedEvent
	{
		add
		{
			_rosterUpdatedEvent += value;
		}
		remove
		{
			_rosterUpdatedEvent -= value;
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsItemRoster(object o, List<object> collectedObjects)
	{
		((ItemRoster)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_data);
	}

	internal static object AutoGeneratedGetMemberValue_data(object o)
	{
		return ((ItemRoster)o)._data;
	}

	internal static object AutoGeneratedGetMemberValue_count(object o)
	{
		return ((ItemRoster)o)._count;
	}

	public ItemRoster()
	{
		_data = new ItemRosterElement[4];
		_count = 0;
	}

	public ItemRoster(ItemRoster other)
	{
		_data = new ItemRosterElement[other.Count];
		_count = 0;
		Add(other);
		CalculateCachedStats();
	}

	private void EnsureLength(int length)
	{
		if (length > 0 && (_data == null || length > _data.Length))
		{
			int num = 4;
			if (_data != null)
			{
				num = _data.Length * 2;
			}
			ItemRosterElement[] array = new ItemRosterElement[num];
			for (int i = 0; i < _count; i++)
			{
				array[i] = _data[i];
			}
			_data = array;
		}
	}

	public int FindIndexOfItem(ItemObject item)
	{
		for (int i = 0; i < _count; i++)
		{
			if (_data[i].EquipmentElement.Item == item)
			{
				return i;
			}
		}
		return -1;
	}

	public int FindIndex(Predicate<ItemObject> predicate)
	{
		for (int i = 0; i < _count; i++)
		{
			if (predicate(_data[i].EquipmentElement.Item))
			{
				return i;
			}
		}
		return -1;
	}

	public int FindIndexFirstAfterXthElement(Predicate<ItemObject> predicate, int x)
	{
		for (int i = 0; i < x + _count; i++)
		{
			if (predicate(_data[i % _count].EquipmentElement.Item))
			{
				return i;
			}
		}
		return -1;
	}

	public int FindIndexOfElement(EquipmentElement rosterElement)
	{
		for (int i = 0; i < _count; i++)
		{
			if (rosterElement.IsEqualTo(_data[i].EquipmentElement))
			{
				return i;
			}
		}
		return -1;
	}

	private int AddNewElement(ItemRosterElement rosterElement, bool insertAtFront = false)
	{
		int num = _count + 1;
		EnsureLength(num);
		int num2 = _count;
		OnRosterUpdated(ref rosterElement, rosterElement.Amount);
		if (insertAtFront)
		{
			for (int num3 = _count; num3 > 0; num3--)
			{
				_data[num3] = _data[num3 - 1];
			}
			num2 = 0;
		}
		_data[num2] = rosterElement;
		_count = num;
		UpdateVersion();
		return num2;
	}

	public int AddToCounts(ItemObject item, int number)
	{
		if (number == 0)
		{
			return -1;
		}
		return AddToCounts(new EquipmentElement(item), number);
	}

	public int AddToCounts(EquipmentElement rosterElement, int number)
	{
		if (number == 0)
		{
			return -1;
		}
		int num = FindIndexOfElement(rosterElement);
		if (num < 0)
		{
			if (number < 0)
			{
				Debug.FailedAssert("Trying to delete an element from Item Roster that does not exist!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "AddToCounts", 174);
				return -1;
			}
			num = AddNewElement(new ItemRosterElement(rosterElement, 0));
		}
		OnRosterUpdated(ref _data[num], number);
		_data[num].Amount += number;
		if (_data[num].Amount <= 0)
		{
			_data[num] = _data[_count - 1];
			_data[_count - 1] = ItemRosterElement.Invalid;
			_count--;
		}
		UpdateVersion();
		return num;
	}

	public ItemRosterElement GetElementCopyAtIndex(int index)
	{
		if (index < _count && index >= 0)
		{
			return _data[index];
		}
		Debug.FailedAssert("GetElementCopyAtIndex can't find the element in ItemRoster", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "GetElementCopyAtIndex", 206);
		return ItemRosterElement.Invalid;
	}

	public ItemObject GetItemAtIndex(int index)
	{
		if (index < _count && index >= 0)
		{
			return _data[index].EquipmentElement.Item;
		}
		Debug.FailedAssert("Given index for GetItemAtIndex is not valid in ItemRoster", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "GetItemAtIndex", 217);
		return null;
	}

	public int GetElementNumber(int index)
	{
		if (index < _count && index >= 0)
		{
			return _data[index].Amount;
		}
		Debug.FailedAssert("Given index for GetElementNumber is not valid in ItemRoster", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "GetElementNumber", 228);
		return 0;
	}

	public int GetElementUnitCost(int index)
	{
		if (index < _count && index >= 0)
		{
			return _data[index].EquipmentElement.ItemValue;
		}
		Debug.FailedAssert("Given index for GetElementUnitCost is not valid in ItemRoster", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "GetElementUnitCost", 239);
		return 0;
	}

	public int GetItemNumber(ItemObject item)
	{
		int num = FindIndexOfItem(item);
		if (num >= 0)
		{
			return _data[num].Amount;
		}
		return 0;
	}

	public void Clear()
	{
		for (int i = 0; i < _count; i++)
		{
			_data[i].Clear();
			_data[i] = ItemRosterElement.Invalid;
		}
		_count = 0;
		CalculateCachedStats();
		this._rosterUpdatedEvent?.Invoke(default(ItemRosterElement), 0);
		UpdateVersion();
	}

	public static bool RostersAreIdentical(ItemRoster a, ItemRoster b)
	{
		if (a == b)
		{
			return true;
		}
		if (a == null || b == null)
		{
			return false;
		}
		if (a.Count != b.Count)
		{
			return false;
		}
		for (int i = 0; i < a.Count; i++)
		{
			ItemRosterElement elementCopyAtIndex = a.GetElementCopyAtIndex(i);
			int num = b.FindIndexOfItem(elementCopyAtIndex.EquipmentElement.Item);
			if (num == -1)
			{
				return false;
			}
			ItemRosterElement elementCopyAtIndex2 = b.GetElementCopyAtIndex(num);
			if (elementCopyAtIndex.EquipmentElement.Item != elementCopyAtIndex2.EquipmentElement.Item || elementCopyAtIndex.Amount != elementCopyAtIndex2.Amount || elementCopyAtIndex.EquipmentElement.ItemModifier != elementCopyAtIndex2.EquipmentElement.ItemModifier)
			{
				return false;
			}
		}
		return true;
	}

	public IEnumerator<ItemRosterElement> GetEnumerator()
	{
		for (int i = 0; i < Count; i++)
		{
			yield return _data[i];
		}
	}

	public int SelectRandomIndex(Func<ItemRosterElement, float> weightFunction)
	{
		List<(int, float)> list = new List<(int, float)>();
		float num = 0f;
		for (int i = 0; i < Count; i++)
		{
			float num2 = weightFunction(_data[i]);
			if (num2 > 1E-05f)
			{
				list.Add((i, num2));
				num += num2;
			}
		}
		if (list.Count > 0)
		{
			float num3 = MBRandom.RandomFloat * num;
			float num4 = 0f;
			for (int j = 0; j < list.Count; j++)
			{
				num4 += list[j].Item2;
				if (num4 >= num3)
				{
					return list[j].Item1;
				}
			}
			return list[list.Count - 1].Item1;
		}
		return -1;
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}

	public IEnumerable<ItemRosterElement> RemoveIf(Func<ItemRosterElement, int> match)
	{
		List<ItemRosterElement> list = new List<ItemRosterElement>();
		for (int i = 0; i < _count; i++)
		{
			int num = match(_data[i]);
			if (num > 0)
			{
				if (num > _data[i].Amount)
				{
					num = _data[i].Amount;
				}
				list.Add(new ItemRosterElement(_data[i].EquipmentElement.Item, num, _data[i].EquipmentElement.ItemModifier));
				AddToCounts(_data[i].EquipmentElement, -num);
			}
		}
		return list;
	}

	public void Add(IEnumerable<ItemRosterElement> rosterElementList)
	{
		foreach (ItemRosterElement rosterElement in rosterElementList)
		{
			AddToCounts(rosterElement.EquipmentElement, rosterElement.Amount);
		}
	}

	public void Add(ItemRosterElement itemRosterElement)
	{
		AddToCounts(itemRosterElement.EquipmentElement, itemRosterElement.Amount);
	}

	public void Remove(ItemRosterElement itemRosterElement)
	{
		AddToCounts(itemRosterElement.EquipmentElement, -itemRosterElement.Amount);
	}

	void ISerializableObject.SerializeTo(IWriter writer)
	{
		writer.WriteInt(Count);
		if (_data != null)
		{
			writer.WriteInt(_data.Length);
			ItemRosterElement[] data = _data;
			foreach (ItemRosterElement itemRosterElement in data)
			{
				writer.WriteSerializableObject(itemRosterElement);
			}
		}
		else
		{
			writer.WriteInt(0);
		}
	}

	void ISerializableObject.DeserializeFrom(IReader reader)
	{
		_count = reader.ReadInt();
		int num = reader.ReadInt();
		_data = new ItemRosterElement[num];
		for (int i = 0; i < num; i++)
		{
			_data[i] = (ItemRosterElement)(object)reader.ReadSerializableObject();
		}
		CalculateCachedStats();
	}

	public void UpdateVersion()
	{
		VersionNo++;
	}

	private void OnRosterUpdated(ref ItemRosterElement itemRosterElement, int count)
	{
		ItemObject item = itemRosterElement.EquipmentElement.Item;
		TotalValue += item.Value * count;
		if (item.IsTradeGood)
		{
			TradeGoodsTotalValue += item.Value * count;
		}
		if (item.HasHorseComponent)
		{
			if (item.HorseComponent.IsPackAnimal && itemRosterElement.EquipmentElement.ItemModifier == null)
			{
				NumberOfPackAnimals += count;
			}
			else if (item.HorseComponent.IsMount && itemRosterElement.EquipmentElement.ItemModifier == null)
			{
				NumberOfMounts += count;
			}
			else if (item.HorseComponent.IsLiveStock)
			{
				NumberOfLivestockAnimals += count;
				TotalFood += count * item.HorseComponent.MeatCount;
			}
		}
		else
		{
			if (item.IsFood)
			{
				TotalFood += count;
				if (itemRosterElement.Amount == 0 && count > 0)
				{
					FoodVariety++;
				}
				else if (itemRosterElement.Amount > 0 && itemRosterElement.Amount + count <= 0)
				{
					FoodVariety--;
				}
			}
			TotalWeight += item.Weight * (float)count;
		}
		this._rosterUpdatedEvent?.Invoke(itemRosterElement, count);
	}

	[LoadInitializationCallback]
	public void OnLoadStarted(MetaData metaData)
	{
		InstanceListForLoadGame.Add(this);
	}

	public static void CalculateCachedStatsOnLoad()
	{
		foreach (ItemRoster item in InstanceListForLoadGame)
		{
			ReplaceInvalidItemsWithTrash(item);
			RemoveZeroCountsFromRoster(item);
			item.CalculateCachedStats();
		}
		InstanceListForLoadGame.Clear();
	}

	private static void RemoveZeroCountsFromRoster(ItemRoster itemRoster)
	{
		int num = 0;
		int i = 0;
		if (itemRoster._count != 0 && itemRoster._count > itemRoster._data.Length)
		{
			itemRoster._count = itemRoster._data.Length;
		}
		for (; i < itemRoster._count; i++)
		{
			ItemRosterElement itemRosterElement = itemRoster._data[i];
			if (itemRosterElement.Amount > 0)
			{
				if (num != i)
				{
					itemRoster._data[num] = itemRosterElement;
				}
				num++;
			}
		}
		for (int j = num; j < itemRoster._count; j++)
		{
			itemRoster._data[j].Clear();
			itemRoster._data[j] = ItemRosterElement.Invalid;
		}
		itemRoster._count = num;
	}

	private static void ReplaceInvalidItemsWithTrash(ItemRoster itemRoster)
	{
		if (itemRoster._data == null)
		{
			return;
		}
		for (int num = itemRoster._data.Length - 1; num >= 0; num--)
		{
			ItemModifier itemModifier = itemRoster._data[num].EquipmentElement.ItemModifier;
			if (itemModifier != null && !itemModifier.IsReady)
			{
				itemRoster.AddToCounts(itemRoster._data[num].EquipmentElement.Item, itemRoster._data[num].Amount);
				itemRoster._data[num].Clear();
			}
			ItemObject item = itemRoster._data[num].EquipmentElement.Item;
			if (item != null && !item.IsReady)
			{
				ItemObject item2 = itemRoster._data[num].EquipmentElement.Item;
				itemRoster.AddToCounts(DefaultItems.Trash, itemRoster._data[num].Amount);
				itemRoster._data[num].Clear();
				if (MBObjectManager.Instance.GetObject(item2.Id) == item2)
				{
					MBObjectManager.Instance.UnregisterObject(item2);
				}
			}
		}
	}

	private void CalculateCachedStats()
	{
		TotalWeight = 0f;
		NumberOfPackAnimals = 0;
		NumberOfMounts = 0;
		NumberOfLivestockAnimals = 0;
		TotalValue = 0;
		TradeGoodsTotalValue = 0;
		TotalFood = 0;
		FoodVariety = 0;
		for (int i = 0; i < Count; i++)
		{
			ItemObject item = _data[i].EquipmentElement.Item;
			int amount = _data[i].Amount;
			TotalValue += item.Value * amount;
			if (item.IsTradeGood)
			{
				TradeGoodsTotalValue += item.Value * amount;
			}
			if (item.HasHorseComponent)
			{
				if (item.HorseComponent.IsPackAnimal)
				{
					NumberOfPackAnimals += amount;
				}
				else if (item.HorseComponent.IsMount)
				{
					NumberOfMounts += amount;
				}
				else if (item.HorseComponent.IsLiveStock)
				{
					NumberOfLivestockAnimals += amount;
					TotalFood += amount * item.HorseComponent.MeatCount;
				}
			}
			else
			{
				if (item.IsFood)
				{
					TotalFood += amount;
					FoodVariety++;
				}
				TotalWeight += item.Weight * (float)amount;
			}
		}
	}
}
