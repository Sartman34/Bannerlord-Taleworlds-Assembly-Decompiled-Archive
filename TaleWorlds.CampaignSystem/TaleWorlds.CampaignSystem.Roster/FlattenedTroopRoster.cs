using System;
using System.Collections;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Roster;

public class FlattenedTroopRoster : IEnumerable<FlattenedTroopRosterElement>, IEnumerable
{
	[SaveableField(1)]
	private readonly Dictionary<UniqueTroopDescriptor, FlattenedTroopRosterElement> _elementDictionary;

	public FlattenedTroopRosterElement this[UniqueTroopDescriptor index]
	{
		get
		{
			return _elementDictionary[index];
		}
		set
		{
			_elementDictionary[index] = value;
		}
	}

	public IEnumerable<CharacterObject> Troops
	{
		get
		{
			foreach (FlattenedTroopRosterElement value in _elementDictionary.Values)
			{
				yield return value.Troop;
			}
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsFlattenedTroopRoster(object o, List<object> collectedObjects)
	{
		((FlattenedTroopRoster)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_elementDictionary);
	}

	internal static object AutoGeneratedGetMemberValue_elementDictionary(object o)
	{
		return ((FlattenedTroopRoster)o)._elementDictionary;
	}

	public FlattenedTroopRoster(int count = 4)
	{
		_elementDictionary = new Dictionary<UniqueTroopDescriptor, FlattenedTroopRosterElement>(count);
	}

	public FlattenedTroopRoster(TroopRoster roster)
		: this(roster.Count)
	{
		Add(roster.GetTroopRoster());
	}

	public FlattenedTroopRoster(FlattenedTroopRoster other)
	{
		_elementDictionary = new Dictionary<UniqueTroopDescriptor, FlattenedTroopRosterElement>(other._elementDictionary);
	}

	public void Add(MBList<TroopRosterElement> roster)
	{
		foreach (TroopRosterElement item in roster)
		{
			if (item.Number <= 0)
			{
				continue;
			}
			int num = item.Xp / item.Number;
			int num2 = item.Xp % item.Number;
			for (int i = 0; i < item.Number; i++)
			{
				bool isWounded = i < item.WoundedNumber;
				int num3 = num;
				if (i < num2)
				{
					num3++;
				}
				Add(item.Character, isWounded, num3);
			}
		}
	}

	public void Add(TroopRosterElement troop)
	{
		int num = troop.Xp / troop.Number;
		int num2 = troop.Xp % troop.Number;
		for (int i = 0; i < troop.Number; i++)
		{
			bool isWounded = i < troop.WoundedNumber;
			int num3 = num;
			if (i < num2)
			{
				num3++;
			}
			Add(troop.Character, isWounded, num3);
		}
	}

	public void Add(CharacterObject troop, int number, int woundedNumber = 0)
	{
		for (int i = 0; i < number; i++)
		{
			Add(troop, woundedNumber > 0);
			woundedNumber--;
		}
	}

	public UniqueTroopDescriptor Add(CharacterObject troop, bool isWounded = false, int xp = 0)
	{
		FlattenedTroopRosterElement value = new FlattenedTroopRosterElement(troop, isWounded ? RosterTroopState.Wounded : RosterTroopState.Active, xp);
		_elementDictionary.Add(value.Descriptor, value);
		return value.Descriptor;
	}

	public static int GenerateUniqueNoFromParty(MobileParty party, int troopIndex)
	{
		return (party.Party.Index * 999983 + troopIndex * 100003) % 616841;
	}

	public void Remove(UniqueTroopDescriptor descriptor)
	{
		_elementDictionary.Remove(descriptor);
	}

	public void Clear()
	{
		_elementDictionary.Clear();
	}

	public ICollection<FlattenedTroopRosterElement> RemoveIf(Predicate<FlattenedTroopRosterElement> match)
	{
		List<FlattenedTroopRosterElement> list = new List<FlattenedTroopRosterElement>();
		foreach (KeyValuePair<UniqueTroopDescriptor, FlattenedTroopRosterElement> item in _elementDictionary)
		{
			if (match(item.Value))
			{
				list.Add(item.Value);
			}
		}
		foreach (FlattenedTroopRosterElement item2 in list)
		{
			_elementDictionary.Remove(item2.Descriptor);
		}
		return list;
	}

	public UniqueTroopDescriptor FindIndexOfCharacter(CharacterObject character)
	{
		foreach (KeyValuePair<UniqueTroopDescriptor, FlattenedTroopRosterElement> item in _elementDictionary)
		{
			if (item.Value.Troop == character)
			{
				return item.Value.Descriptor;
			}
		}
		return UniqueTroopDescriptor.Invalid;
	}

	public IEnumerator<FlattenedTroopRosterElement> GetEnumerator()
	{
		foreach (FlattenedTroopRosterElement value in _elementDictionary.Values)
		{
			yield return value;
		}
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}

	public void OnTroopKilled(UniqueTroopDescriptor troopSeed)
	{
		FlattenedTroopRosterElement flattenedTroopRosterElement = _elementDictionary[troopSeed];
		_elementDictionary[troopSeed] = new FlattenedTroopRosterElement(flattenedTroopRosterElement.Troop, RosterTroopState.Killed, 0, flattenedTroopRosterElement.Descriptor);
	}

	public void OnTroopWounded(UniqueTroopDescriptor troopSeed)
	{
		FlattenedTroopRosterElement flattenedTroopRosterElement = _elementDictionary[troopSeed];
		_elementDictionary[troopSeed] = new FlattenedTroopRosterElement(flattenedTroopRosterElement.Troop, RosterTroopState.WoundedInThisBattle, flattenedTroopRosterElement.Xp, flattenedTroopRosterElement.Descriptor, flattenedTroopRosterElement.XpGained);
	}

	public void OnTroopRouted(UniqueTroopDescriptor troopSeed)
	{
		FlattenedTroopRosterElement flattenedTroopRosterElement = _elementDictionary[troopSeed];
		_elementDictionary[troopSeed] = new FlattenedTroopRosterElement(flattenedTroopRosterElement.Troop, RosterTroopState.Routed, flattenedTroopRosterElement.Xp, flattenedTroopRosterElement.Descriptor);
	}

	public int OnTroopGainXp(UniqueTroopDescriptor troopSeed, int xpAmount)
	{
		FlattenedTroopRosterElement flattenedTroopRosterElement = _elementDictionary[troopSeed];
		int num = flattenedTroopRosterElement.XpGained + xpAmount;
		int num2 = num - flattenedTroopRosterElement.XpGained;
		if (num2 != 0)
		{
			_elementDictionary[troopSeed] = new FlattenedTroopRosterElement(flattenedTroopRosterElement.Troop, flattenedTroopRosterElement.State, flattenedTroopRosterElement.Xp, flattenedTroopRosterElement.Descriptor, num);
		}
		return num2;
	}
}
