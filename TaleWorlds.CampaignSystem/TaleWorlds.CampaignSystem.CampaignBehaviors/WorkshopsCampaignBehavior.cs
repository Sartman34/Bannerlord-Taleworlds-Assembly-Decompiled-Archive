using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Inventory;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Workshops;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CampaignBehaviors;

public class WorkshopsCampaignBehavior : CampaignBehaviorBase, IWorkshopWarehouseCampaignBehavior
{
	public class WorkshopsCampaignBehaviorTypeDefiner : SaveableTypeDefiner
	{
		public WorkshopsCampaignBehaviorTypeDefiner()
			: base(155828)
		{
		}

		protected override void DefineClassTypes()
		{
			AddClassDefinition(typeof(WorkshopData), 10);
		}

		protected override void DefineContainerDefinitions()
		{
			ConstructContainerDefinition(typeof(Dictionary<Workshop, WorkshopData>));
			ConstructContainerDefinition(typeof(WorkshopData[]));
		}
	}

	internal class WorkshopData
	{
		[SaveableField(1)]
		public Workshop Workshop;

		[SaveableField(2)]
		public bool IsGettingInputsFromWarehouse;

		[SaveableField(3)]
		public float ProductionProgressForWarehouse;

		[SaveableField(4)]
		public float ProductionProgressForTown;

		[SaveableField(5)]
		public float StockProductionInWarehouseRatio;

		public WorkshopData(Workshop workshop)
		{
			Workshop = workshop;
		}

		public override string ToString()
		{
			return Workshop.WorkshopType.ToString() + " in " + Workshop.Settlement.GetName();
		}

		internal static void AutoGeneratedStaticCollectObjectsWorkshopData(object o, List<object> collectedObjects)
		{
			((WorkshopData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(Workshop);
		}

		internal static object AutoGeneratedGetMemberValueWorkshop(object o)
		{
			return ((WorkshopData)o).Workshop;
		}

		internal static object AutoGeneratedGetMemberValueIsGettingInputsFromWarehouse(object o)
		{
			return ((WorkshopData)o).IsGettingInputsFromWarehouse;
		}

		internal static object AutoGeneratedGetMemberValueProductionProgressForWarehouse(object o)
		{
			return ((WorkshopData)o).ProductionProgressForWarehouse;
		}

		internal static object AutoGeneratedGetMemberValueProductionProgressForTown(object o)
		{
			return ((WorkshopData)o).ProductionProgressForTown;
		}

		internal static object AutoGeneratedGetMemberValueStockProductionInWarehouseRatio(object o)
		{
			return ((WorkshopData)o).StockProductionInWarehouseRatio;
		}
	}

	private KeyValuePair<Settlement, ItemRoster>[] _warehouseRosterPerSettlement;

	private WorkshopData[] _workshopData;

	private readonly Dictionary<ItemCategory, List<ItemObject>> _itemsInCategory = new Dictionary<ItemCategory, List<ItemObject>>();

	public override void RegisterEvents()
	{
		CampaignEvents.OnNewGameCreatedPartialFollowUpEvent.AddNonSerializedListener(this, OnNewGameCreatedPartialFollowUp);
		CampaignEvents.OnAfterSessionLaunchedEvent.AddNonSerializedListener(this, OnAfterSessionLaunched);
		CampaignEvents.OnGameLoadedEvent.AddNonSerializedListener(this, OnGameLoaded);
		CampaignEvents.DailyTickTownEvent.AddNonSerializedListener(this, DailyTickTown);
		CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, OnSettlementOwnerChanged);
		CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, OnHeroKilled);
		CampaignEvents.WarDeclared.AddNonSerializedListener(this, OnWarDeclared);
		CampaignEvents.OnClanChangedKingdomEvent.AddNonSerializedListener(this, OnClanChangedKingdom);
		CampaignEvents.WorkshopOwnerChangedEvent.AddNonSerializedListener(this, OnWorkshopOwnerChanged);
		CampaignEvents.WorkshopTypeChangedEvent.AddNonSerializedListener(this, OnWorkshopTypeChanged);
	}

	public override void SyncData(IDataStore dataStore)
	{
		dataStore.SyncData("_warehouseRosterPerSettlement", ref _warehouseRosterPerSettlement);
		dataStore.SyncData("_workshopData", ref _workshopData);
	}

	private void OnNewGameCreatedPartialFollowUp(CampaignGameStarter starter, int i)
	{
		if (i >= 10)
		{
			if (i == 10)
			{
				InitializeBehaviorData();
				FillItemsInAllCategories();
				InitializeWorkshops();
				BuildWorkshopsAtGameStart();
			}
			if (i % 20 == 0)
			{
				RunTownShopsAtGameStart();
			}
		}
	}

	private void InitializeBehaviorData()
	{
		if (_workshopData == null)
		{
			_workshopData = new WorkshopData[Campaign.Current.Models.WorkshopModel.MaximumWorkshopsPlayerCanHave];
		}
		if (_warehouseRosterPerSettlement == null)
		{
			_warehouseRosterPerSettlement = new KeyValuePair<Settlement, ItemRoster>[Campaign.Current.Models.WorkshopModel.MaximumWorkshopsPlayerCanHave];
		}
	}

	private void OnGameLoaded(CampaignGameStarter campaignGameStarter)
	{
		InitializeBehaviorData();
		if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.0"))
		{
			foreach (Workshop ownedWorkshop in Hero.MainHero.OwnedWorkshops)
			{
				AddNewWorkshopData(ownedWorkshop);
				AddNewWarehouseDataIfNeeded(ownedWorkshop.Settlement);
			}
		}
		EnsureBehaviorDataSize();
		FillItemsInAllCategories();
	}

	private void EnsureBehaviorDataSize()
	{
		if (_workshopData.Length < Campaign.Current.Models.WorkshopModel.MaximumWorkshopsPlayerCanHave)
		{
			WorkshopData[] array = new WorkshopData[Campaign.Current.Models.WorkshopModel.MaximumWorkshopsPlayerCanHave];
			for (int i = 0; i < Campaign.Current.Models.WorkshopModel.MaximumWorkshopsPlayerCanHave; i++)
			{
				if (i < _workshopData.Length)
				{
					array[i] = _workshopData[i];
				}
				else
				{
					array[i] = null;
				}
			}
			_workshopData = array;
		}
		if (_warehouseRosterPerSettlement.Length >= Campaign.Current.Models.WorkshopModel.MaximumWorkshopsPlayerCanHave)
		{
			return;
		}
		KeyValuePair<Settlement, ItemRoster>[] array2 = new KeyValuePair<Settlement, ItemRoster>[Campaign.Current.Models.WorkshopModel.MaximumWorkshopsPlayerCanHave];
		for (int j = 0; j < Campaign.Current.Models.WorkshopModel.MaximumWorkshopsPlayerCanHave; j++)
		{
			if (j < _warehouseRosterPerSettlement.Length && _warehouseRosterPerSettlement[j].Key != null && _warehouseRosterPerSettlement[j].Value != null)
			{
				array2[j] = _warehouseRosterPerSettlement[j];
			}
		}
		_warehouseRosterPerSettlement = array2;
	}

	private void OnWorkshopTypeChanged(Workshop workshop)
	{
		if (workshop.Owner == Hero.MainHero)
		{
			RemoveWorkshopData(workshop);
			AddNewWorkshopData(workshop);
		}
	}

	private void OnWorkshopOwnerChanged(Workshop workshop, Hero oldOwner)
	{
		Hero owner = workshop.Owner;
		if (owner == Hero.MainHero)
		{
			AddNewWarehouseDataIfNeeded(workshop.Settlement);
			AddNewWorkshopData(workshop);
		}
		else
		{
			if (oldOwner != Hero.MainHero || Clan.PlayerClan.Leader == owner)
			{
				return;
			}
			if (Hero.MainHero.OwnedWorkshops.All((Workshop x) => x.Settlement != workshop.Settlement))
			{
				if (Settlement.CurrentSettlement != null && Settlement.CurrentSettlement == workshop.Settlement)
				{
					TransferWarehouseToPlayerParty(Settlement.CurrentSettlement);
				}
				RemoveWarehouseData(workshop.Settlement);
			}
			RemoveWorkshopData(workshop);
		}
	}

	private void DailyTickTown(Town town)
	{
		if (!town.InRebelliousState)
		{
			Workshop[] workshops = town.Workshops;
			foreach (Workshop workshop in workshops)
			{
				RunTownWorkshop(town, workshop);
				HandleDailyExpense(workshop);
			}
		}
	}

	private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification = true)
	{
		if (victim.IsHumanPlayerCharacter)
		{
			return;
		}
		foreach (Workshop item in victim.OwnedWorkshops.ToList())
		{
			Hero notableOwnerForWorkshop = Campaign.Current.Models.WorkshopModel.GetNotableOwnerForWorkshop(item);
			ChangeOwnerOfWorkshopAction.ApplyByDeath(item, notableOwnerForWorkshop);
		}
	}

	private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
	{
		TransferPlayerWorkshopsIfNeeded();
	}

	private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
	{
		TransferPlayerWorkshopsIfNeeded();
	}

	private void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newSettlementOwner, Hero oldSettlementOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
	{
		if (!settlement.IsTown)
		{
			return;
		}
		Workshop[] workshops = settlement.Town.Workshops;
		foreach (Workshop workshop in workshops)
		{
			if (workshop.Owner != null && workshop.Owner.MapFaction.IsAtWarWith(newSettlementOwner.MapFaction) && workshop.Owner.GetPerkValue(DefaultPerks.Trade.RapidDevelopment))
			{
				GiveGoldAction.ApplyBetweenCharacters(null, workshop.Owner, TaleWorlds.Library.MathF.Round(DefaultPerks.Trade.RapidDevelopment.PrimaryBonus));
			}
		}
		TransferPlayerWorkshopsIfNeeded();
	}

	private void OnAfterSessionLaunched(CampaignGameStarter campaignGameStarter)
	{
		InitializeGameMenus(campaignGameStarter);
	}

	protected void InitializeGameMenus(CampaignGameStarter campaignGameStarter)
	{
		campaignGameStarter.AddGameMenuOption("town", "manage_warehouse", "{=LK4kNZkb}Enter the warehouse", warehouse_manage_on_condition, warehouse_manage_on_consequence, isLeave: false, 8);
		campaignGameStarter.AddPlayerLine("workshop_worker_manage_warehouse", "player_options", "warehouse", "{=mBnoWa8R}I would like to access the Warehouse.", null, null);
		campaignGameStarter.AddDialogLine("workshop_worker_manage_warehouse_answer", "warehouse", "player_options", "{=Y4LhmAdi}Sure, boss. Go ahead.", null, warehouse_manage_on_consequence);
	}

	private void warehouse_manage_on_consequence()
	{
		InventoryLogic.CapacityData otherSideCapacity = new InventoryLogic.CapacityData(CapacityDelegate, CapacityExceededWarningDelegate, CapacityExceededHintDelegate);
		InventoryManager.OpenScreenAsWarehouse(GetWarehouseRoster(Settlement.CurrentSettlement), otherSideCapacity);
		Campaign.Current.ConversationManager.ContinueConversation();
		static int CapacityDelegate()
		{
			return Campaign.Current.Models.WorkshopModel.WarehouseCapacity;
		}
		static TextObject CapacityExceededHintDelegate()
		{
			return new TextObject("{=Drj5gIZu}Warehouse Capacity Exceeded");
		}
		static TextObject CapacityExceededWarningDelegate()
		{
			return new TextObject("{=Drj5gIZu}Warehouse Capacity Exceeded");
		}
	}

	private void warehouse_manage_on_consequence(MenuCallbackArgs args)
	{
		InventoryLogic.CapacityData otherSideCapacity = new InventoryLogic.CapacityData(CapacityDelegate, CapacityExceededWarningDelegate, CapacityExceededHintDelegate);
		InventoryManager.OpenScreenAsWarehouse(GetWarehouseRoster(Settlement.CurrentSettlement), otherSideCapacity);
		static int CapacityDelegate()
		{
			return Campaign.Current.Models.WorkshopModel.WarehouseCapacity;
		}
		static TextObject CapacityExceededHintDelegate()
		{
			return new TextObject("{=Drj5gIZu}Warehouse Capacity Exceeded");
		}
		static TextObject CapacityExceededWarningDelegate()
		{
			return new TextObject("{=Drj5gIZu}Warehouse Capacity Exceeded");
		}
	}

	private bool warehouse_manage_on_condition(MenuCallbackArgs args)
	{
		args.optionLeaveType = GameMenuOption.LeaveType.Warehouse;
		return GetWarehouseRoster(Settlement.CurrentSettlement) != null;
	}

	bool IWorkshopWarehouseCampaignBehavior.IsGettingInputsFromWarehouse(Workshop workshop)
	{
		return GetDataOfWorkshop(workshop)?.IsGettingInputsFromWarehouse ?? false;
	}

	void IWorkshopWarehouseCampaignBehavior.SetIsGettingInputsFromWarehouse(Workshop workshop, bool isActive)
	{
		WorkshopData dataOfWorkshop = GetDataOfWorkshop(workshop);
		if (dataOfWorkshop != null)
		{
			dataOfWorkshop.IsGettingInputsFromWarehouse = isActive;
		}
	}

	float IWorkshopWarehouseCampaignBehavior.GetStockProductionInWarehouseRatio(Workshop workshop)
	{
		return GetDataOfWorkshop(workshop)?.StockProductionInWarehouseRatio ?? 0f;
	}

	void IWorkshopWarehouseCampaignBehavior.SetStockProductionInWarehouseRatio(Workshop workshop, float ratio)
	{
		WorkshopData dataOfWorkshop = GetDataOfWorkshop(workshop);
		if (dataOfWorkshop != null)
		{
			dataOfWorkshop.StockProductionInWarehouseRatio = ratio;
		}
	}

	int IWorkshopWarehouseCampaignBehavior.GetInputCount(Workshop workshop)
	{
		ItemRoster warehouseRoster = GetWarehouseRoster(workshop.Settlement);
		int num = 0;
		List<ItemCategory> list = new List<ItemCategory>();
		foreach (WorkshopType.Production production in workshop.WorkshopType.Productions)
		{
			foreach (var input in production.Inputs)
			{
				ItemCategory item = input.Item1;
				if (!list.Contains(item))
				{
					list.Add(item);
				}
			}
		}
		foreach (ItemCategory item2 in list)
		{
			foreach (ItemRosterElement item3 in warehouseRoster)
			{
				if (item3.EquipmentElement.Item.ItemCategory == item2)
				{
					num += item3.Amount;
					break;
				}
			}
		}
		return num;
	}

	ExplainedNumber IWorkshopWarehouseCampaignBehavior.GetInputDailyChange(Workshop workshop)
	{
		ItemRoster warehouseRoster = GetWarehouseRoster(workshop.Settlement);
		ExplainedNumber result = new ExplainedNumber(0f, includeDescriptions: true);
		Dictionary<ItemCategory, float> dictionary = new Dictionary<ItemCategory, float>();
		foreach (WorkshopType.Production production in workshop.WorkshopType.Productions)
		{
			foreach (var input in production.Inputs)
			{
				float num = Campaign.Current.Models.WorkshopModel.GetEffectiveConversionSpeedOfProduction(workshop, production.ConversionSpeed, includeDescriptions: false).ResultNumber * (float)input.Item2;
				var (key, _) = input;
				if (!dictionary.TryGetValue(key, out var value))
				{
					dictionary.Add(key, num);
				}
				else
				{
					dictionary[key] = value + num;
				}
			}
		}
		foreach (KeyValuePair<ItemCategory, float> item in dictionary)
		{
			int num2 = 0;
			foreach (ItemRosterElement item2 in warehouseRoster)
			{
				if (item2.EquipmentElement.Item.ItemCategory == item.Key)
				{
					num2 += item2.Amount;
				}
			}
			if (num2 > 0)
			{
				TextObject textObject = GameTexts.FindText("str_RANK_with_NUM_between_parenthesis");
				textObject.SetTextVariable("RANK", item.Key.GetName());
				textObject.SetTextVariable("NUMBER", num2);
				result.Add(0f - item.Value, textObject);
			}
		}
		return result;
	}

	int IWorkshopWarehouseCampaignBehavior.GetOutputCount(Workshop workshop)
	{
		ItemRoster warehouseRoster = GetWarehouseRoster(workshop.Settlement);
		int num = 0;
		List<ItemCategory> list = new List<ItemCategory>();
		foreach (WorkshopType.Production production in workshop.WorkshopType.Productions)
		{
			foreach (var output in production.Outputs)
			{
				ItemCategory item = output.Item1;
				if (!list.Contains(item))
				{
					list.Add(item);
				}
			}
		}
		foreach (ItemCategory item2 in list)
		{
			foreach (ItemRosterElement item3 in warehouseRoster)
			{
				if (item3.EquipmentElement.Item.ItemCategory == item2)
				{
					num += item3.Amount;
					break;
				}
			}
		}
		return num;
	}

	ExplainedNumber IWorkshopWarehouseCampaignBehavior.GetOutputDailyChange(Workshop workshop)
	{
		ExplainedNumber result = new ExplainedNumber(0f, includeDescriptions: true);
		ItemRoster warehouseRoster = GetWarehouseRoster(workshop.Settlement);
		Dictionary<ItemCategory, float> dictionary = new Dictionary<ItemCategory, float>();
		foreach (WorkshopType.Production production in workshop.WorkshopType.Productions)
		{
			foreach (var output in production.Outputs)
			{
				var (itemCategory, _) = output;
				if (itemCategory.IsTradeGood)
				{
					int item = output.Item2;
					float num = Campaign.Current.Models.WorkshopModel.GetEffectiveConversionSpeedOfProduction(workshop, production.ConversionSpeed, includeDescriptions: false).ResultNumber * (float)item * GetDataOfWorkshop(workshop).StockProductionInWarehouseRatio;
					if (!dictionary.TryGetValue(itemCategory, out var value))
					{
						dictionary.Add(itemCategory, num);
					}
					else
					{
						dictionary[itemCategory] = value + num;
					}
				}
			}
		}
		foreach (KeyValuePair<ItemCategory, float> item2 in dictionary)
		{
			int num2 = 0;
			foreach (ItemRosterElement item3 in warehouseRoster)
			{
				if (item3.EquipmentElement.Item.ItemCategory == item2.Key)
				{
					num2 += item3.Amount;
				}
			}
			TextObject textObject = GameTexts.FindText("str_RANK_with_NUM_between_parenthesis");
			textObject.SetTextVariable("RANK", item2.Key.GetName());
			textObject.SetTextVariable("NUMBER", num2);
			result.Add(item2.Value, textObject);
		}
		return result;
	}

	bool IWorkshopWarehouseCampaignBehavior.IsRawMaterialsSufficientInTownMarket(Workshop workshop)
	{
		for (int i = 0; i < workshop.WorkshopType.Productions.Count; i++)
		{
			WorkshopType.Production production = workshop.WorkshopType.Productions[i];
			if (DetermineItemRosterHasSufficientInputs(production, workshop.Settlement.Town.Owner.ItemRoster, workshop.Settlement.Town, out var _))
			{
				return true;
			}
		}
		return false;
	}

	public float GetWarehouseItemRosterWeight(Settlement settlement)
	{
		ItemRoster warehouseRoster = GetWarehouseRoster(settlement);
		float num = 0f;
		foreach (ItemRosterElement item in warehouseRoster)
		{
			num += item.GetRosterElementWeight();
		}
		return num;
	}

	private bool TickOneProductionCycleForPlayerWorkshop(WorkshopType.Production production, Workshop workshop)
	{
		bool flag = false;
		int inputMaterialCost = 0;
		Town town = workshop.Settlement.Town;
		WorkshopData dataOfWorkshop = GetDataOfWorkshop(workshop);
		bool flag2 = dataOfWorkshop.IsGettingInputsFromWarehouse;
		if (flag2)
		{
			flag = DetermineItemRosterHasSufficientInputs(production, GetWarehouseRoster(workshop.Settlement), town, out inputMaterialCost);
			if (flag)
			{
				inputMaterialCost = 0;
			}
			else
			{
				flag2 = false;
			}
		}
		if (!flag)
		{
			flag = DetermineItemRosterHasSufficientInputs(production, town.Owner.ItemRoster, town, out inputMaterialCost);
		}
		if (flag)
		{
			int income;
			List<EquipmentElement> itemsToProduce = GetItemsToProduce(production, workshop, out income);
			bool effectCapital = !production.Inputs.Any(((ItemCategory, int) x) => !x.Item1.IsTradeGood) && !production.Outputs.Any(((ItemCategory, int) x) => !x.Item1.IsTradeGood);
			float num = dataOfWorkshop.StockProductionInWarehouseRatio;
			bool allOutputsWillBeSentToWarehouse = num.ApproximatelyEqualsTo(1f);
			if (CanPlayerWorkshopProduceThisCycle(production, workshop, inputMaterialCost, income, effectCapital, allOutputsWillBeSentToWarehouse))
			{
				Dictionary<ItemObject, int> dictionary = new Dictionary<ItemObject, int>();
				foreach (var input in production.Inputs)
				{
					if (flag2)
					{
						ConsumeInputFromWarehouse(input.Item1, input.Item2, workshop);
					}
					else
					{
						ConsumeInputFromTownMarket(input.Item1, input.Item2, town, workshop, effectCapital);
					}
				}
				foreach (EquipmentElement item in itemsToProduce)
				{
					WorkshopData dataOfWorkshop2 = GetDataOfWorkshop(workshop);
					if (item.Item.IsTradeGood && CanItemFitInWarehouse(workshop.Settlement, item))
					{
						AddOutputProgressForWarehouse(workshop, num);
						if (dataOfWorkshop2.ProductionProgressForWarehouse >= 1f)
						{
							ProduceAnOutputToWarehouse(item, workshop);
							SkillLevelingManager.OnProductionProducedToWarehouse(item);
							AddOutputProgressForWarehouse(workshop, -1f);
							if (dictionary.ContainsKey(item.Item))
							{
								dictionary[item.Item]++;
							}
							else
							{
								dictionary.Add(item.Item, 1);
							}
						}
					}
					else
					{
						num = 0f;
					}
					AddOutputProgressForTown(workshop, 1f - num);
					if (dataOfWorkshop2.ProductionProgressForTown >= 1f)
					{
						ProduceAnOutputToTown(item, workshop, effectCapital);
						AddOutputProgressForTown(workshop, -1f);
						if (dictionary.ContainsKey(item.Item))
						{
							dictionary[item.Item]++;
						}
						else
						{
							dictionary.Add(item.Item, 1);
						}
					}
				}
				foreach (KeyValuePair<ItemObject, int> item2 in dictionary)
				{
					ItemObject key = item2.Key;
					int value = item2.Value;
					CampaignEventDispatcher.Instance.OnItemProduced(key, workshop.Settlement, value);
				}
				return true;
			}
		}
		return false;
	}

	private void ProduceAnOutputToWarehouse(EquipmentElement outputItem, Workshop workshop)
	{
		GetWarehouseRoster(workshop.Settlement).AddToCounts(outputItem, 1);
	}

	private void ConsumeInputFromWarehouse(ItemCategory productionInput, int inputCount, Workshop workshop)
	{
		ItemRoster warehouseRoster = GetWarehouseRoster(workshop.Settlement);
		int num = inputCount;
		for (int i = 0; i < warehouseRoster.Count; i++)
		{
			if (num == 0)
			{
				break;
			}
			ItemObject itemAtIndex = warehouseRoster.GetItemAtIndex(i);
			if (itemAtIndex.ItemCategory == productionInput)
			{
				int elementNumber = warehouseRoster.GetElementNumber(i);
				int num2 = TaleWorlds.Library.MathF.Min(num, elementNumber);
				num -= num2;
				warehouseRoster.AddToCounts(itemAtIndex, -inputCount);
				CampaignEventDispatcher.Instance.OnItemConsumed(itemAtIndex, workshop.Settlement, inputCount);
			}
		}
	}

	private bool CanPlayerWorkshopProduceThisCycle(WorkshopType.Production production, Workshop workshop, int inputMaterialCost, int outputIncome, bool effectCapital, bool allOutputsWillBeSentToWarehouse)
	{
		float num = (workshop.WorkshopType.IsHidden ? ((float)inputMaterialCost) : ((float)inputMaterialCost + 200f / production.ConversionSpeed));
		if (Campaign.Current.GameStarted && (float)outputIncome <= num)
		{
			return false;
		}
		if (workshop.Capital < inputMaterialCost)
		{
			return false;
		}
		if (effectCapital)
		{
			bool num2 = workshop.Settlement.Town.Gold >= outputIncome;
			bool flag = !IsWarehouseAtLimit(workshop.Settlement);
			if (!num2 && (!allOutputsWillBeSentToWarehouse || flag))
			{
				return false;
			}
		}
		return true;
	}

	private void HandlePlayerWorkshopExpense(Workshop shop)
	{
		int expense = shop.Expense;
		if (shop.Capital > Campaign.Current.Models.WorkshopModel.CapitalLowLimit)
		{
			shop.ChangeGold(-expense);
		}
		else if (shop.Owner.Gold >= expense)
		{
			shop.Owner.Gold -= expense;
		}
		else if (shop.Capital >= expense)
		{
			shop.ChangeGold(-expense);
		}
		else
		{
			ChangeWorkshopOwnerByBankruptcy(shop);
		}
	}

	private bool TickOneProductionCycleForNotableWorkshop(WorkshopType.Production production, Workshop workshop)
	{
		Town town = workshop.Settlement.Town;
		int inputMaterialCost = 0;
		if (!DetermineItemRosterHasSufficientInputs(production, town.Owner.ItemRoster, town, out inputMaterialCost))
		{
			return false;
		}
		int income;
		List<EquipmentElement> itemsToProduce = GetItemsToProduce(production, workshop, out income);
		bool effectCapital = !production.Inputs.Any(((ItemCategory, int) x) => !x.Item1.IsTradeGood) && !production.Outputs.Any(((ItemCategory, int) x) => !x.Item1.IsTradeGood);
		if (CanNotableWorkshopProduceThisCycle(production, workshop, inputMaterialCost, income, effectCapital))
		{
			foreach (var input in production.Inputs)
			{
				ConsumeInputFromTownMarket(input.Item1, input.Item2, town, workshop, effectCapital);
			}
			foreach (EquipmentElement item in itemsToProduce)
			{
				ProduceAnOutputToTown(item, workshop, effectCapital);
				CampaignEventDispatcher.Instance.OnItemProduced(item.Item, workshop.Settlement, 1);
			}
			return true;
		}
		return false;
	}

	private bool CanNotableWorkshopProduceThisCycle(WorkshopType.Production production, Workshop workshop, int inputMaterialCost, int outputIncome, bool effectCapital)
	{
		float num = (workshop.WorkshopType.IsHidden ? ((float)inputMaterialCost) : ((float)inputMaterialCost + 200f / production.ConversionSpeed));
		if (Campaign.Current.GameStarted && (float)outputIncome <= num)
		{
			return false;
		}
		if (workshop.Settlement.Town.Gold < outputIncome && effectCapital)
		{
			return false;
		}
		if (workshop.Capital < inputMaterialCost)
		{
			return false;
		}
		return true;
	}

	private void HandleNotableWorkshopExpense(Workshop shop)
	{
		int expense = shop.Expense;
		if (shop.Capital >= expense)
		{
			shop.ChangeGold(-expense);
		}
		else
		{
			ChangeWorkshopOwnerByBankruptcy(shop);
		}
	}

	private WorkshopData GetDataOfWorkshop(Workshop workshop)
	{
		for (int i = 0; i < _workshopData.Length; i++)
		{
			WorkshopData workshopData = _workshopData[i];
			if (workshopData != null && workshopData.Workshop == workshop)
			{
				return workshopData;
			}
		}
		return null;
	}

	private List<EquipmentElement> GetItemsToProduce(WorkshopType.Production production, Workshop workshop, out int income)
	{
		List<EquipmentElement> list = new List<EquipmentElement>();
		income = 0;
		for (int i = 0; i < production.Outputs.Count; i++)
		{
			int item = production.Outputs[i].Item2;
			for (int j = 0; j < item; j++)
			{
				EquipmentElement randomItem = GetRandomItem(production.Outputs[i].Item1, workshop.Settlement.Town);
				list.Add(randomItem);
				income += workshop.Settlement.Town.GetItemPrice(randomItem, null, isSelling: true);
			}
		}
		return list;
	}

	private void ProduceAnOutputToTown(EquipmentElement outputItem, Workshop workshop, bool effectCapital)
	{
		Town town = workshop.Settlement.Town;
		int itemPrice = town.GetItemPrice(outputItem);
		town.Owner.ItemRoster.AddToCounts(outputItem, 1);
		if (Campaign.Current.GameStarted && effectCapital)
		{
			int num = TaleWorlds.Library.MathF.Min(1000, itemPrice);
			workshop.ChangeGold(num);
			town.ChangeGold(-num);
		}
	}

	private void ConsumeInputFromTownMarket(ItemCategory productionInput, int productionInputCount, Town town, Workshop workshop, bool effectCapital)
	{
		ItemRoster itemRoster = town.Owner.ItemRoster;
		int num = itemRoster.FindIndex((ItemObject x) => x.ItemCategory == productionInput);
		if (num >= 0)
		{
			ItemObject itemAtIndex = itemRoster.GetItemAtIndex(num);
			if (Campaign.Current.GameStarted && effectCapital)
			{
				int itemPrice = town.GetItemPrice(itemAtIndex);
				workshop.ChangeGold(-itemPrice);
				town.ChangeGold(itemPrice);
			}
			itemRoster.AddToCounts(itemAtIndex, -productionInputCount);
			CampaignEventDispatcher.Instance.OnItemConsumed(itemAtIndex, town.Owner.Settlement, productionInputCount);
		}
	}

	private bool IsItemPreferredForTown(ItemObject item, Town townComponent)
	{
		if (item.Culture != null && !(item.Culture.StringId == "neutral_culture"))
		{
			return item.Culture == townComponent.Culture;
		}
		return true;
	}

	private bool DetermineItemRosterHasSufficientInputs(WorkshopType.Production production, ItemRoster itemRoster, Town town, out int inputMaterialCost)
	{
		MBReadOnlyList<(ItemCategory, int)> inputs = production.Inputs;
		inputMaterialCost = 0;
		foreach (var item2 in inputs)
		{
			ItemCategory item = item2.Item1;
			int num = item2.Item2;
			for (int i = 0; i < itemRoster.Count; i++)
			{
				ItemObject itemAtIndex = itemRoster.GetItemAtIndex(i);
				if (itemAtIndex.ItemCategory == item)
				{
					int elementNumber = itemRoster.GetElementNumber(i);
					int num2 = TaleWorlds.Library.MathF.Min(num, elementNumber);
					num -= num2;
					inputMaterialCost += town.GetItemPrice(itemAtIndex) * num2;
				}
			}
			if (num > 0)
			{
				return false;
			}
		}
		return true;
	}

	private void AddOutputProgressForWarehouse(Workshop workshop, float progressToAdd)
	{
		GetDataOfWorkshop(workshop).ProductionProgressForWarehouse += progressToAdd;
	}

	private void AddOutputProgressForTown(Workshop workshop, float progressToAdd)
	{
		GetDataOfWorkshop(workshop).ProductionProgressForTown += progressToAdd;
	}

	private bool CanItemFitInWarehouse(Settlement settlement, EquipmentElement equipmentElement)
	{
		return GetWarehouseItemRosterWeight(settlement) + equipmentElement.Weight <= (float)Campaign.Current.Models.WorkshopModel.WarehouseCapacity;
	}

	private bool IsWarehouseAtLimit(Settlement settlement)
	{
		return GetWarehouseItemRosterWeight(settlement) >= (float)Campaign.Current.Models.WorkshopModel.WarehouseCapacity;
	}

	private void AddNewWorkshopData(Workshop workshop)
	{
		for (int i = 0; i < _workshopData.Length; i++)
		{
			if (_workshopData[i] == null)
			{
				_workshopData[i] = new WorkshopData(workshop);
				break;
			}
		}
	}

	private void RemoveWorkshopData(Workshop workshop)
	{
		for (int i = 0; i < _workshopData.Length; i++)
		{
			WorkshopData workshopData = _workshopData[i];
			if (workshopData != null && workshopData.Workshop == workshop)
			{
				_workshopData[i] = null;
				break;
			}
		}
	}

	private ItemRoster GetWarehouseRoster(Settlement settlement)
	{
		KeyValuePair<Settlement, ItemRoster>[] warehouseRosterPerSettlement = _warehouseRosterPerSettlement;
		for (int i = 0; i < warehouseRosterPerSettlement.Length; i++)
		{
			KeyValuePair<Settlement, ItemRoster> keyValuePair = warehouseRosterPerSettlement[i];
			if (keyValuePair.Key == settlement)
			{
				return keyValuePair.Value;
			}
		}
		return null;
	}

	private void FillItemsInAllCategories()
	{
		foreach (ItemObject objectType in Game.Current.ObjectManager.GetObjectTypeList<ItemObject>())
		{
			if (!IsProducable(objectType))
			{
				continue;
			}
			ItemCategory itemCategory = objectType.ItemCategory;
			if (itemCategory != null)
			{
				if (!_itemsInCategory.TryGetValue(itemCategory, out var value))
				{
					value = new List<ItemObject>();
					_itemsInCategory[itemCategory] = value;
				}
				value.Add(objectType);
			}
		}
	}

	private bool IsProducable(ItemObject item)
	{
		if (!item.MultiplayerItem && !item.NotMerchandise)
		{
			return !item.IsCraftedByPlayer;
		}
		return false;
	}

	private void RemoveWarehouseData(Settlement settlement)
	{
		for (int i = 0; i < _warehouseRosterPerSettlement.Length; i++)
		{
			if (_warehouseRosterPerSettlement[i].Key == settlement)
			{
				_warehouseRosterPerSettlement[i] = new KeyValuePair<Settlement, ItemRoster>(null, null);
				break;
			}
		}
	}

	private void AddNewWarehouseDataIfNeeded(Settlement settlement)
	{
		bool flag = false;
		KeyValuePair<Settlement, ItemRoster>[] warehouseRosterPerSettlement = _warehouseRosterPerSettlement;
		foreach (KeyValuePair<Settlement, ItemRoster> keyValuePair in warehouseRosterPerSettlement)
		{
			if (keyValuePair.Key == settlement)
			{
				flag = true;
				break;
			}
		}
		if (flag)
		{
			return;
		}
		for (int j = 0; j < _warehouseRosterPerSettlement.Length; j++)
		{
			KeyValuePair<Settlement, ItemRoster> keyValuePair2 = _warehouseRosterPerSettlement[j];
			if (keyValuePair2.Value == null)
			{
				_warehouseRosterPerSettlement[j] = new KeyValuePair<Settlement, ItemRoster>(settlement, new ItemRoster());
				break;
			}
		}
	}

	private EquipmentElement GetRandomItem(ItemCategory itemGroupBase, Town townComponent)
	{
		EquipmentElement randomItemAux = GetRandomItemAux(itemGroupBase, townComponent);
		if (randomItemAux.Item != null)
		{
			return randomItemAux;
		}
		return GetRandomItemAux(itemGroupBase);
	}

	private EquipmentElement GetRandomItemAux(ItemCategory itemGroupBase, Town townComponent = null)
	{
		ItemObject itemObject = null;
		ItemModifier itemModifier = null;
		List<(ItemObject, float)> list = new List<(ItemObject, float)>();
		if (_itemsInCategory.TryGetValue(itemGroupBase, out var value))
		{
			foreach (ItemObject item2 in value)
			{
				if ((townComponent == null || IsItemPreferredForTown(item2, townComponent)) && item2.ItemCategory == itemGroupBase)
				{
					float item = 1f / ((float)TaleWorlds.Library.MathF.Max(100, item2.Value) + 100f);
					list.Add((item2, item));
				}
			}
			itemObject = MBRandom.ChooseWeighted(list);
			ItemModifierGroup itemModifierGroup = itemObject?.ItemComponent?.ItemModifierGroup;
			if (itemModifierGroup != null)
			{
				itemModifier = itemModifierGroup.GetRandomItemModifierProductionScoreBased();
			}
		}
		return new EquipmentElement(itemObject, itemModifier);
	}

	private void TransferPlayerWorkshopsIfNeeded()
	{
		int count = Hero.MainHero.OwnedWorkshops.Count;
		List<Workshop> list = Hero.MainHero.OwnedWorkshops.ToList();
		for (int i = 0; i < count; i++)
		{
			Workshop workshop = list[i];
			if (workshop.Settlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
			{
				Hero notableOwnerForWorkshop = Campaign.Current.Models.WorkshopModel.GetNotableOwnerForWorkshop(workshop);
				if (notableOwnerForWorkshop != null)
				{
					WorkshopType workshopType = DecideBestWorkshopType(workshop.Settlement, atGameStart: false, workshop.WorkshopType);
					ChangeOwnerOfWorkshopAction.ApplyByWar(workshop, notableOwnerForWorkshop, workshopType);
				}
			}
		}
	}

	private void ChangeWorkshopOwnerByBankruptcy(Workshop workshop)
	{
		int costForNotable = Campaign.Current.Models.WorkshopModel.GetCostForNotable(workshop);
		Hero notableOwnerForWorkshop = Campaign.Current.Models.WorkshopModel.GetNotableOwnerForWorkshop(workshop);
		WorkshopType workshopType = DecideBestWorkshopType(workshop.Settlement, atGameStart: false, workshop.WorkshopType);
		ChangeOwnerOfWorkshopAction.ApplyByBankruptcy(workshop, notableOwnerForWorkshop, workshopType, costForNotable);
	}

	private void HandleDailyExpense(Workshop shop)
	{
		if (!shop.WorkshopType.IsHidden)
		{
			if (shop.Owner != Hero.MainHero)
			{
				HandleNotableWorkshopExpense(shop);
			}
			else
			{
				HandlePlayerWorkshopExpense(shop);
			}
		}
	}

	private float FindTotalInputDensityScore(Settlement settlement, WorkshopType workshop, IDictionary<ItemCategory, float> productionDict, bool atGameStart)
	{
		int num = 0;
		for (int i = 0; i < settlement.Town.Workshops.Length; i++)
		{
			if (settlement.Town.Workshops[i].WorkshopType == workshop)
			{
				num++;
			}
		}
		float num2 = 0.01f;
		float num3 = 0f;
		foreach (WorkshopType.Production production in workshop.Productions)
		{
			bool flag = false;
			foreach (var output in production.Outputs)
			{
				if (output.Item1.IsTradeGood)
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				continue;
			}
			foreach (var (itemCategory, num4) in production.Inputs)
			{
				if (productionDict.TryGetValue(itemCategory, out var value))
				{
					num2 += value / (production.ConversionSpeed * (float)num4);
				}
				if (!atGameStart)
				{
					float priceFactor = settlement.Town.MarketData.GetPriceFactor(itemCategory);
					num3 += Math.Max(0f, 1f - priceFactor);
				}
			}
		}
		float num5 = 1f + (float)(num * 6);
		num2 *= (float)workshop.Frequency * (1f / (float)Math.Pow(num5, 3.0));
		num2 += num3;
		return TaleWorlds.Library.MathF.Pow(num2, 0.6f);
	}

	private void BuildWorkshopForHeroAtGameStart(Hero ownerHero)
	{
		Settlement bornSettlement = ownerHero.BornSettlement;
		WorkshopType workshopType = DecideBestWorkshopType(bornSettlement, atGameStart: true);
		if (workshopType == null)
		{
			return;
		}
		int num = -1;
		for (int i = 0; i < bornSettlement.Town.Workshops.Length; i++)
		{
			if (bornSettlement.Town.Workshops[i].WorkshopType == null)
			{
				num = i;
				break;
			}
		}
		if (num >= 0)
		{
			InitializeWorkshopAction.ApplyByNewGame(bornSettlement.Town.Workshops[num], ownerHero, workshopType);
		}
	}

	private WorkshopType DecideBestWorkshopType(Settlement currentSettlement, bool atGameStart, WorkshopType workshopToExclude = null)
	{
		IDictionary<ItemCategory, float> dictionary = new Dictionary<ItemCategory, float>();
		foreach (Village item2 in Village.All.Where((Village x) => x.TradeBound == currentSettlement))
		{
			foreach (var production in item2.VillageType.Productions)
			{
				ItemCategory itemCategory = production.Item1.ItemCategory;
				if (itemCategory != DefaultItemCategories.Grain || item2.VillageType.PrimaryProduction == DefaultItems.Grain)
				{
					float item = production.Item2;
					if (itemCategory == DefaultItemCategories.Cow || itemCategory == DefaultItemCategories.Hog)
					{
						itemCategory = DefaultItemCategories.Hides;
					}
					if (itemCategory == DefaultItemCategories.Sheep)
					{
						itemCategory = DefaultItemCategories.Wool;
					}
					if (dictionary.TryGetValue(itemCategory, out var value))
					{
						dictionary[itemCategory] = value + item;
					}
					else
					{
						dictionary.Add(itemCategory, item);
					}
				}
			}
		}
		Dictionary<WorkshopType, float> dictionary2 = new Dictionary<WorkshopType, float>();
		float num = 0f;
		foreach (WorkshopType item3 in WorkshopType.All)
		{
			if (!item3.IsHidden && (workshopToExclude == null || workshopToExclude != item3))
			{
				float num2 = FindTotalInputDensityScore(currentSettlement, item3, dictionary, atGameStart);
				dictionary2.Add(item3, num2);
				num += num2;
			}
		}
		float num3 = num * MBRandom.RandomFloat;
		WorkshopType workshopType = null;
		foreach (WorkshopType item4 in WorkshopType.All)
		{
			if (!item4.IsHidden && (workshopToExclude == null || workshopToExclude != item4))
			{
				num3 -= dictionary2[item4];
				if (num3 < 0f)
				{
					workshopType = item4;
					break;
				}
			}
		}
		if (workshopType == null)
		{
			workshopType = WorkshopType.All[MBRandom.RandomInt(1, WorkshopType.All.Count)];
		}
		return workshopType;
	}

	private void InitializeWorkshops()
	{
		foreach (Town allTown in Town.AllTowns)
		{
			allTown.InitializeWorkshops(Campaign.Current.Models.WorkshopModel.DefaultWorkshopCountInSettlement);
		}
	}

	private void BuildWorkshopsAtGameStart()
	{
		foreach (Town allTown in Town.AllTowns)
		{
			BuildArtisanWorkshop(allTown);
			for (int i = 1; i < allTown.Workshops.Length; i++)
			{
				Hero notableOwnerForWorkshop = Campaign.Current.Models.WorkshopModel.GetNotableOwnerForWorkshop(allTown.Workshops[i]);
				BuildWorkshopForHeroAtGameStart(notableOwnerForWorkshop);
			}
		}
	}

	private void BuildArtisanWorkshop(Town town)
	{
		Hero hero = town.Settlement.Notables.FirstOrDefault((Hero x) => x.IsArtisan);
		if (hero == null)
		{
			hero = town.Settlement.Notables.FirstOrDefault();
		}
		if (hero != null)
		{
			WorkshopType type = WorkshopType.Find("artisans");
			town.Workshops[0].InitializeWorkshop(hero, type);
		}
	}

	private void RunTownShopsAtGameStart()
	{
		foreach (Town allTown in Town.AllTowns)
		{
			Workshop[] workshops = allTown.Workshops;
			foreach (Workshop workshop in workshops)
			{
				RunTownWorkshop(allTown, workshop);
			}
		}
	}

	private void RunTownWorkshop(Town townComponent, Workshop workshop)
	{
		WorkshopType workshopType = workshop.WorkshopType;
		bool flag = false;
		for (int i = 0; i < workshopType.Productions.Count; i++)
		{
			float num = workshop.GetProductionProgress(i);
			if (num > 1f)
			{
				num = 1f;
			}
			num += Campaign.Current.Models.WorkshopModel.GetEffectiveConversionSpeedOfProduction(workshop, workshopType.Productions[i].ConversionSpeed, includeDescriptions: false).ResultNumber;
			if (num >= 1f)
			{
				bool flag2 = true;
				while (flag2 && num >= 1f)
				{
					flag2 = ((workshop.Owner == Hero.MainHero) ? TickOneProductionCycleForPlayerWorkshop(workshopType.Productions[i], workshop) : TickOneProductionCycleForNotableWorkshop(workshopType.Productions[i], workshop));
					if (flag2)
					{
						flag = true;
					}
					num -= 1f;
				}
			}
			workshop.SetProgress(i, num);
		}
		if (flag)
		{
			workshop.UpdateLastRunTime();
		}
	}

	public void TransferWarehouseToPlayerParty(Settlement settlement)
	{
		foreach (ItemRosterElement item in GetWarehouseRoster(settlement))
		{
			MobileParty.MainParty.ItemRoster.AddToCounts(item.EquipmentElement, item.Amount);
		}
		RemoveWarehouseData(settlement);
	}
}
