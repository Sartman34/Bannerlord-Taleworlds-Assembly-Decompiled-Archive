using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.CraftingSystem;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Inventory;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CampaignBehaviors;

public class CraftingCampaignBehavior : CampaignBehaviorBase, ICraftingCampaignBehavior, ICampaignBehavior
{
	public class CraftingCampaignBehaviorTypeDefiner : SaveableTypeDefiner
	{
		public CraftingCampaignBehaviorTypeDefiner()
			: base(150000)
		{
		}

		protected override void DefineClassTypes()
		{
			AddClassDefinition(typeof(CraftedItemInitializationData), 10);
			AddClassDefinition(typeof(HeroCraftingRecord), 20);
			AddClassDefinition(typeof(CraftingOrderSlots), 30);
		}

		protected override void DefineContainerDefinitions()
		{
			ConstructContainerDefinition(typeof(Dictionary<ItemObject, CraftedItemInitializationData>));
			ConstructContainerDefinition(typeof(Dictionary<Hero, HeroCraftingRecord>));
			ConstructContainerDefinition(typeof(Dictionary<Town, CraftingOrderSlots>));
			ConstructContainerDefinition(typeof(List<CraftingOrder>));
		}
	}

	internal class CraftedItemInitializationData
	{
		[SaveableField(10)]
		public readonly WeaponDesign CraftedData;

		[SaveableField(20)]
		public readonly TextObject ItemName;

		[SaveableField(30)]
		public readonly CultureObject Culture;

		public CraftedItemInitializationData(WeaponDesign craftedData, TextObject itemName, CultureObject culture)
		{
			CraftedData = craftedData;
			ItemName = itemName;
			Culture = culture;
		}

		internal static void AutoGeneratedStaticCollectObjectsCraftedItemInitializationData(object o, List<object> collectedObjects)
		{
			((CraftedItemInitializationData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(CraftedData);
			collectedObjects.Add(ItemName);
			collectedObjects.Add(Culture);
		}

		internal static object AutoGeneratedGetMemberValueCraftedData(object o)
		{
			return ((CraftedItemInitializationData)o).CraftedData;
		}

		internal static object AutoGeneratedGetMemberValueItemName(object o)
		{
			return ((CraftedItemInitializationData)o).ItemName;
		}

		internal static object AutoGeneratedGetMemberValueCulture(object o)
		{
			return ((CraftedItemInitializationData)o).Culture;
		}
	}

	internal class HeroCraftingRecord
	{
		[SaveableField(10)]
		public int CraftingStamina;

		public HeroCraftingRecord(int maxStamina)
		{
			CraftingStamina = maxStamina;
		}

		internal static void AutoGeneratedStaticCollectObjectsHeroCraftingRecord(object o, List<object> collectedObjects)
		{
			((HeroCraftingRecord)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		internal static object AutoGeneratedGetMemberValueCraftingStamina(object o)
		{
			return ((HeroCraftingRecord)o).CraftingStamina;
		}
	}

	public class CraftingOrderSlots
	{
		private const int SlotCount = 6;

		[SaveableField(10)]
		public CraftingOrder[] Slots;

		[SaveableField(30)]
		private MBList<CraftingOrder> _customOrders;

		public MBReadOnlyList<CraftingOrder> CustomOrders => _customOrders;

		public CraftingOrderSlots()
		{
			Slots = new CraftingOrder[6];
			for (int i = 0; i < 6; i++)
			{
				Slots[i] = null;
			}
			_customOrders = new MBList<CraftingOrder>();
		}

		[LoadInitializationCallback]
		private void OnLoad()
		{
			if (_customOrders == null)
			{
				_customOrders = new MBList<CraftingOrder>();
			}
		}

		public bool IsThereAvailableSlot()
		{
			for (int i = 0; i < 6; i++)
			{
				if (Slots[i] == null)
				{
					return true;
				}
			}
			return false;
		}

		public int GetAvailableSlot()
		{
			for (int i = 0; i < 6; i++)
			{
				if (Slots[i] == null)
				{
					return i;
				}
			}
			return -1;
		}

		internal void AddTownOrder(CraftingOrder craftingOrder)
		{
			Slots[craftingOrder.DifficultyLevel] = craftingOrder;
		}

		internal void RemoveTownOrder(CraftingOrder craftingOrder)
		{
			Slots[craftingOrder.DifficultyLevel] = null;
		}

		internal void AddCustomOrder(CraftingOrder order)
		{
			_customOrders.Add(order);
		}

		internal void RemoveCustomOrder(CraftingOrder order)
		{
			_customOrders.Remove(order);
		}

		internal static void AutoGeneratedStaticCollectObjectsCraftingOrderSlots(object o, List<object> collectedObjects)
		{
			((CraftingOrderSlots)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(Slots);
			collectedObjects.Add(_customOrders);
		}

		internal static object AutoGeneratedGetMemberValueSlots(object o)
		{
			return ((CraftingOrderSlots)o).Slots;
		}

		internal static object AutoGeneratedGetMemberValue_customOrders(object o)
		{
			return ((CraftingOrderSlots)o)._customOrders;
		}
	}

	private const float WaitTargetHours = 8f;

	private const float CraftingOrderReplaceChance = 0.05f;

	private const float CreateCraftingOrderChance = 0.05f;

	private const int TownCraftingOrderCount = 6;

	private const int DefaultCraftingOrderPieceTier = 1;

	private const int CraftingOrderTroopBonusAmount = 1;

	private const int MinOrderDifficulty = 40;

	private const int MaxOrderDifficulty = 240;

	private const int MaxCraftingHistoryDesigns = 10;

	private ItemObject _latestCraftedItem;

	private ItemModifier _currentItemModifier;

	private Dictionary<CraftingTemplate, List<CraftingPiece>> _openedPartsDictionary = new Dictionary<CraftingTemplate, List<CraftingPiece>>();

	private Dictionary<CraftingTemplate, float> _openNewPartXpDictionary = new Dictionary<CraftingTemplate, float>();

	private Dictionary<ItemObject, CraftedItemInitializationData> _craftedItemDictionary = new Dictionary<ItemObject, CraftedItemInitializationData>();

	private Dictionary<Hero, HeroCraftingRecord> _heroCraftingRecords = new Dictionary<Hero, HeroCraftingRecord>();

	private List<WeaponDesign> _craftingHistory = new List<WeaponDesign>();

	private Dictionary<Town, CraftingOrderSlots> _craftingOrders = new Dictionary<Town, CraftingOrderSlots>();

	public IReadOnlyDictionary<Town, CraftingOrderSlots> CraftingOrders => _craftingOrders;

	public IReadOnlyCollection<WeaponDesign> CraftingHistory => _craftingHistory;

	public override void SyncData(IDataStore dataStore)
	{
		dataStore.SyncData("_latestCraftedItem", ref _latestCraftedItem);
		dataStore.SyncData("_craftedItemDictionary", ref _craftedItemDictionary);
		dataStore.SyncData("_heroCraftingRecordsNew", ref _heroCraftingRecords);
		dataStore.SyncData("_craftingOrders", ref _craftingOrders);
		dataStore.SyncData("_craftingHistory", ref _craftingHistory);
		dataStore.SyncData("_openedPartsDictionary", ref _openedPartsDictionary);
		dataStore.SyncData("_openNewPartXpDictionary", ref _openNewPartXpDictionary);
		if (!dataStore.IsLoading || !MBSaveLoad.IsUpdatingGameVersion || !(MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("e1.8.0")))
		{
			return;
		}
		List<CraftingPiece> data = new List<CraftingPiece>();
		dataStore.SyncData("_openedParts", ref data);
		if (data == null)
		{
			return;
		}
		_openedPartsDictionary = new Dictionary<CraftingTemplate, List<CraftingPiece>>();
		foreach (CraftingTemplate item in CraftingTemplate.All)
		{
			_openedPartsDictionary.Add(item, new List<CraftingPiece>());
			foreach (CraftingPiece item2 in data)
			{
				if (item.Pieces.Contains(item2) && !_openedPartsDictionary[item].Contains(item2))
				{
					_openedPartsDictionary[item].Add(item2);
				}
			}
		}
	}

	public override void RegisterEvents()
	{
		CampaignEvents.OnNewGameCreatedPartialFollowUpEndEvent.AddNonSerializedListener(this, OnNewGameCreatedPartialFollowUpEnd);
		CampaignEvents.OnSessionLaunchedEvent.AddNonSerializedListener(this, OnSessionLaunched);
		CampaignEvents.OnNewItemCraftedEvent.AddNonSerializedListener(this, OnNewItemCrafted);
		CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, HourlyTick);
		CampaignEvents.DailyTickSettlementEvent.AddNonSerializedListener(this, DailyTickSettlement);
		CampaignEvents.DailyTickEvent.AddNonSerializedListener(this, DailyTick);
		CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, OnHeroKilled);
		CampaignEvents.OnGameLoadedEvent.AddNonSerializedListener(this, OnGameLoaded);
	}

	private void OnNewGameCreatedPartialFollowUpEnd(CampaignGameStarter starter)
	{
		InitializeLists();
		MBList<Hero> mBList = new MBList<Hero>();
		foreach (Town allTown in Town.AllTowns)
		{
			Settlement settlement = allTown.Settlement;
			mBList.AddRange(settlement.HeroesWithoutParty);
			foreach (MobileParty party in settlement.Parties)
			{
				if (party.LeaderHero != null && !party.IsMainParty)
				{
					mBList.Add(party.LeaderHero);
				}
			}
			if (mBList.Count > 0)
			{
				for (int i = 0; i < 6; i++)
				{
					if (CraftingOrders[settlement.Town].GetAvailableSlot() > -1)
					{
						CreateTownOrder(mBList.GetRandomElement(), i);
					}
				}
			}
			mBList.Clear();
		}
	}

	private void DailyTickSettlement(Settlement settlement)
	{
		if (!settlement.IsTown || !CraftingOrders[settlement.Town].IsThereAvailableSlot())
		{
			return;
		}
		List<Hero> list = new List<Hero>();
		list.AddRange(settlement.HeroesWithoutParty);
		foreach (MobileParty party in settlement.Parties)
		{
			if (party.LeaderHero != null && !party.IsMainParty)
			{
				list.Add(party.LeaderHero);
			}
		}
		foreach (Hero item in list)
		{
			if (item != Hero.MainHero && MBRandom.RandomFloat <= 0.05f)
			{
				int availableSlot = CraftingOrders[settlement.Town].GetAvailableSlot();
				if (availableSlot > -1)
				{
					CreateTownOrder(item, availableSlot);
				}
			}
		}
		list = null;
	}

	private void DailyTick()
	{
		foreach (KeyValuePair<Town, CraftingOrderSlots> craftingOrder2 in CraftingOrders)
		{
			CraftingOrder[] slots = craftingOrder2.Value.Slots;
			foreach (CraftingOrder craftingOrder in slots)
			{
				if (craftingOrder != null && MBRandom.RandomFloat <= 0.05f)
				{
					ReplaceCraftingOrder(craftingOrder2.Key, craftingOrder);
				}
			}
		}
	}

	private void HourlyTick()
	{
		foreach (KeyValuePair<Hero, HeroCraftingRecord> heroCraftingRecord in _heroCraftingRecords)
		{
			int maxHeroCraftingStamina = GetMaxHeroCraftingStamina(heroCraftingRecord.Key);
			if (heroCraftingRecord.Value.CraftingStamina < maxHeroCraftingStamina)
			{
				Hero key = heroCraftingRecord.Key;
				if (key.CurrentSettlement != null)
				{
					heroCraftingRecord.Value.CraftingStamina = MathF.Min(maxHeroCraftingStamina, heroCraftingRecord.Value.CraftingStamina + GetStaminaHourlyRecoveryRate(key));
				}
			}
		}
	}

	private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification = true)
	{
		RemoveOrdersOfHeroWithoutCompletionIfExists(victim);
	}

	private void OnGameLoaded(CampaignGameStarter campaignGameStarter)
	{
		InitializeLists();
		foreach (KeyValuePair<Town, CraftingOrderSlots> craftingOrder2 in _craftingOrders)
		{
			for (int i = 0; i < 6; i++)
			{
				CraftingOrder craftingOrder = craftingOrder2.Value.Slots[i];
				if (craftingOrder != null && (craftingOrder.PreCraftedWeaponDesignItem == DefaultItems.Trash || craftingOrder.PreCraftedWeaponDesignItem == null || !craftingOrder.PreCraftedWeaponDesignItem.IsReady))
				{
					CancelOrder(craftingOrder2.Key, craftingOrder);
				}
			}
		}
	}

	private int GetStaminaHourlyRecoveryRate(Hero hero)
	{
		int num = 5 + MathF.Round((float)hero.GetSkillValue(DefaultSkills.Crafting) * 0.025f);
		if (hero.GetPerkValue(DefaultPerks.Athletics.Stamina))
		{
			num += MathF.Round((float)num * DefaultPerks.Athletics.Stamina.PrimaryBonus);
		}
		return num;
	}

	private void OnNewItemCrafted(ItemObject itemObject, ItemModifier overridenItemModifier, bool isCraftingOrderItem)
	{
		if (!_craftedItemDictionary.ContainsKey(itemObject))
		{
			CultureObject @object = MBObjectManager.Instance.GetObject<CultureObject>(itemObject.Culture.StringId);
			CraftedItemInitializationData value = new CraftedItemInitializationData(itemObject.WeaponDesign, itemObject.Name, @object);
			_craftedItemDictionary.Add(itemObject, value);
		}
	}

	private void AddResearchPoints(CraftingTemplate craftingTemplate, int researchPoints)
	{
		_openNewPartXpDictionary[craftingTemplate] += researchPoints;
		int count = craftingTemplate.Pieces.Count;
		int num = craftingTemplate.Pieces.Count((CraftingPiece x) => IsOpened(x, craftingTemplate));
		float num2 = Campaign.Current.Models.SmithingModel.ResearchPointsNeedForNewPart(count, num);
		do
		{
			if (_openNewPartXpDictionary[craftingTemplate] > num2)
			{
				_openNewPartXpDictionary[craftingTemplate] -= num2;
				if (OpenNewPart(craftingTemplate))
				{
					num++;
				}
			}
			num2 = Campaign.Current.Models.SmithingModel.ResearchPointsNeedForNewPart(count, craftingTemplate.Pieces.Count((CraftingPiece x) => IsOpened(x, craftingTemplate)));
		}
		while (_openNewPartXpDictionary[craftingTemplate] > num2 && num < count);
	}

	private bool OpenNewPart(CraftingTemplate craftingTemplate)
	{
		int num = int.MaxValue;
		MBList<CraftingPiece> mBList = new MBList<CraftingPiece>();
		foreach (CraftingPiece piece in craftingTemplate.Pieces)
		{
			int pieceTier = piece.PieceTier;
			if (num >= pieceTier && !piece.IsHiddenOnDesigner && !IsOpened(piece, craftingTemplate))
			{
				if (num > piece.PieceTier)
				{
					mBList.Clear();
					num = pieceTier;
				}
				mBList.Add(piece);
			}
		}
		if (mBList.Count > 0)
		{
			CraftingPiece randomElement = mBList.GetRandomElement();
			OpenPart(randomElement, craftingTemplate);
			return true;
		}
		return false;
	}

	private void OpenPart(CraftingPiece selectedPiece, CraftingTemplate craftingTemplate, bool showNotification = true)
	{
		_openedPartsDictionary[craftingTemplate].Add(selectedPiece);
		CampaignEventDispatcher.Instance.CraftingPartUnlocked(selectedPiece);
		if (showNotification)
		{
			TextObject textObject = new TextObject("{=p9F90bc0}New Smithing Part Unlocked: {PART_NAME} for {WEAPON_TYPE}.");
			textObject.SetTextVariable("PART_NAME", selectedPiece.Name);
			textObject.SetTextVariable("WEAPON_TYPE", craftingTemplate.TemplateName);
			MBInformationManager.AddQuickInformation(textObject);
		}
	}

	public bool IsOpened(CraftingPiece craftingPiece, CraftingTemplate craftingTemplate)
	{
		if (!craftingPiece.IsGivenByDefault)
		{
			return _openedPartsDictionary[craftingTemplate].Contains(craftingPiece);
		}
		return true;
	}

	public void InitializeCraftingElements()
	{
		List<ItemObject> list = new List<ItemObject>();
		foreach (KeyValuePair<ItemObject, CraftedItemInitializationData> item in _craftedItemDictionary)
		{
			bool flag = true;
			WeaponDesign weaponDesign = item.Value.CraftedData;
			if (!weaponDesign.Template.IsReady)
			{
				flag = false;
			}
			if (flag && MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.1.0"))
			{
				WeaponDesignElement[] array = new WeaponDesignElement[item.Value.CraftedData.UsedPieces.Length];
				for (int i = 0; i < item.Value.CraftedData.UsedPieces.Length; i++)
				{
					array[i] = item.Value.CraftedData.UsedPieces[i].GetCopy();
				}
				weaponDesign = new WeaponDesign(weaponDesign.Template, weaponDesign.WeaponName, array);
			}
			if (flag)
			{
				PieceData[] buildOrders = weaponDesign.Template.BuildOrders;
				for (int j = 0; j < buildOrders.Length; j++)
				{
					PieceData pieceData = buildOrders[j];
					bool flag2 = false;
					WeaponDesignElement[] usedPieces = weaponDesign.UsedPieces;
					foreach (WeaponDesignElement weaponDesignElement in usedPieces)
					{
						if (pieceData.PieceType == weaponDesignElement.CraftingPiece.PieceType && weaponDesignElement.CraftingPiece.IsValid)
						{
							flag2 = true;
						}
					}
					if (!flag2)
					{
						flag = false;
						break;
					}
				}
			}
			if (flag)
			{
				ItemObject itemObject = Crafting.InitializePreCraftedWeaponOnLoad(item.Key, weaponDesign, item.Value.ItemName, item.Value.Culture);
				if (itemObject == DefaultItems.Trash || itemObject == null)
				{
					list.Add(item.Key);
					if (MBObjectManager.Instance.GetObject(item.Key.Id) != null)
					{
						MBObjectManager.Instance.UnregisterObject(item.Key);
					}
				}
				else
				{
					ItemObject.InitAsPlayerCraftedItem(ref itemObject);
					itemObject.IsReady = true;
				}
			}
			else
			{
				list.Add(item.Key);
			}
		}
		foreach (ItemObject item2 in list)
		{
			_craftedItemDictionary.Remove(item2);
		}
		foreach (KeyValuePair<Town, CraftingOrderSlots> craftingOrder2 in CraftingOrders)
		{
			CraftingOrder[] slots = craftingOrder2.Value.Slots;
			foreach (CraftingOrder craftingOrder in slots)
			{
				if (craftingOrder != null && !craftingOrder.IsPreCraftedWeaponDesignValid())
				{
					craftingOrder2.Value.RemoveTownOrder(craftingOrder);
				}
				else
				{
					craftingOrder?.InitializeCraftingOrderOnLoad();
				}
			}
			List<CraftingOrder> list2 = new List<CraftingOrder>();
			foreach (CraftingOrder customOrder in craftingOrder2.Value.CustomOrders)
			{
				if (!customOrder.IsPreCraftedWeaponDesignValid())
				{
					list2.Add(customOrder);
				}
				else
				{
					customOrder.InitializeCraftingOrderOnLoad();
				}
			}
			foreach (CraftingOrder item3 in list2)
			{
				craftingOrder2.Value.RemoveCustomOrder(item3);
			}
		}
	}

	public int GetCraftingDifficulty(WeaponDesign weaponDesign)
	{
		return Campaign.Current.Models.SmithingModel.CalculateWeaponDesignDifficulty(weaponDesign);
	}

	private void InitializeLists()
	{
		if (_craftingOrders.IsEmpty())
		{
			foreach (Settlement item in Settlement.All)
			{
				if (item.IsTown)
				{
					_craftingOrders.Add(item.Town, new CraftingOrderSlots());
				}
			}
		}
		foreach (KeyValuePair<CraftingTemplate, List<CraftingPiece>> item2 in _openedPartsDictionary.ToList())
		{
			if (!CraftingTemplate.All.Contains(item2.Key))
			{
				_openedPartsDictionary.Remove(item2.Key);
			}
		}
		foreach (KeyValuePair<CraftingTemplate, float> item3 in _openNewPartXpDictionary.ToList())
		{
			if (!CraftingTemplate.All.Contains(item3.Key))
			{
				_openNewPartXpDictionary.Remove(item3.Key);
			}
		}
		foreach (CraftingTemplate item4 in CraftingTemplate.All)
		{
			if (!_openNewPartXpDictionary.ContainsKey(item4))
			{
				_openNewPartXpDictionary.Add(item4, 0f);
			}
			if (!_openedPartsDictionary.ContainsKey(item4))
			{
				_openedPartsDictionary.Add(item4, new List<CraftingPiece>());
			}
			foreach (CraftingPiece item5 in _openedPartsDictionary[item4].ToList())
			{
				if (!item4.Pieces.Contains(item5))
				{
					_openedPartsDictionary[item4].Remove(item5);
				}
			}
		}
	}

	private void AddDialogs(CampaignGameStarter campaignGameStarter)
	{
		campaignGameStarter.AddDialogLine("blacksmith_begin", "start", "blacksmith_player", "{=gYByVHQy}Good day, {?PLAYER.GENDER}madam{?}sir{\\?}. How may I help you?", conversation_blacksmith_begin_on_condition, null);
		campaignGameStarter.AddPlayerLine("blacksmith_craft_items", "blacksmith_player", "blacksmith_player_ok", "{=VXKGD0ta}I want to use your forge.", () => Campaign.Current.IsCraftingEnabled, conversation_blacksmith_craft_items_on_consequence);
		campaignGameStarter.AddPlayerLine("blacksmith_leave", "blacksmith_player", "close_window", "{=iW9iKbb8}Nothing.", null, null);
		campaignGameStarter.AddDialogLine("blacksmith_player_ok", "blacksmith_player_ok", "blacksmith_player_after_craft", "{=FJ0uAo6p}{CRAFTING_END_TEXT}", conversation_blacksmith_player_ok_on_condition, null);
		campaignGameStarter.AddPlayerLine("blacksmith_player_after_craft_accept", "blacksmith_player_after_craft", "player_blacksmith_after_craft", "{=QUn2ugIX}Thank you. Here's your pay.", conversation_blacksmith_player_after_craft_accept_on_condition, conversation_blacksmith_player_after_craft_accept_on_consequence);
		campaignGameStarter.AddDialogLine("blacksmith_player_after_craft_anything_else", "player_blacksmith_after_craft", "blacksmith_player_1", "{=IvY187PJ}No matter. Anything else?", conversation_blacksmith_player_after_craft_anything_else_on_condition, null);
		campaignGameStarter.AddPlayerLine("blacksmith_craft_items_1", "blacksmith_player_1", "blacksmith_player_ok", "{=hrn1Cdwo}There is something else I need you to make.", () => Campaign.Current.IsCraftingEnabled, conversation_blacksmith_craft_items_on_consequence);
		campaignGameStarter.AddPlayerLine("blacksmith_leave_1", "blacksmith_player_1", "close_window", "{=iW9iKbb8}Nothing.", null, null);
	}

	public void OnSessionLaunched(CampaignGameStarter campaignGameStarter)
	{
		AddDialogs(campaignGameStarter);
	}

	private bool conversation_blacksmith_begin_on_condition()
	{
		return CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.Blacksmith;
	}

	private void conversation_blacksmith_craft_items_on_consequence()
	{
		CraftingHelper.OpenCrafting(CraftingTemplate.All[0]);
	}

	private bool conversation_blacksmith_player_ok_on_condition()
	{
		if (CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.Blacksmith)
		{
			if (_latestCraftedItem != null)
			{
				int value = _latestCraftedItem.Value;
				TextObject textObject = new TextObject("{=zr80RMa6}This will cost you {AMOUNT}{GOLD_ICON}. Paid in advance, of course.");
				textObject.SetTextVariable("AMOUNT", value.ToString());
				MBTextManager.SetTextVariable("CRAFTING_END_TEXT", textObject);
			}
			else
			{
				MBTextManager.SetTextVariable("CRAFTING_END_TEXT", new TextObject("{=rrQx9jaV}It seems you're not interested."));
			}
			return true;
		}
		return false;
	}

	private bool conversation_blacksmith_player_after_craft_accept_on_condition()
	{
		if (_latestCraftedItem != null)
		{
			int value = _latestCraftedItem.Value;
			return Hero.MainHero.Gold >= value;
		}
		return false;
	}

	private void conversation_blacksmith_player_after_craft_accept_on_consequence()
	{
		ItemRoster itemRoster = new ItemRoster();
		itemRoster.AddToCounts(_latestCraftedItem, 1);
		_latestCraftedItem = null;
		InventoryManager.OpenScreenAsTrade(itemRoster, Settlement.CurrentSettlement.Town);
	}

	private bool conversation_blacksmith_player_after_craft_anything_else_on_condition()
	{
		_latestCraftedItem = null;
		return true;
	}

	public bool CanHeroUsePart(Hero hero, CraftingPiece craftingPiece)
	{
		return true;
	}

	public int GetHeroCraftingStamina(Hero hero)
	{
		return GetRecordForCompanion(hero).CraftingStamina;
	}

	private HeroCraftingRecord GetRecordForCompanion(Hero hero)
	{
		if (!_heroCraftingRecords.TryGetValue(hero, out var value))
		{
			value = new HeroCraftingRecord(GetMaxHeroCraftingStamina(hero));
			_heroCraftingRecords[hero] = value;
		}
		return value;
	}

	public void SetHeroCraftingStamina(Hero hero, int value)
	{
		GetRecordForCompanion(hero).CraftingStamina = MathF.Max(0, value);
	}

	public void SetCraftedWeaponName(ItemObject craftedWeaponItem, TextObject name)
	{
		if (_craftedItemDictionary.TryGetValue(craftedWeaponItem, out var value))
		{
			_craftedItemDictionary[craftedWeaponItem] = new CraftedItemInitializationData(value.CraftedData, name, value.Culture);
		}
	}

	public int GetMaxHeroCraftingStamina(Hero hero)
	{
		return 100 + MathF.Round((float)hero.GetSkillValue(DefaultSkills.Crafting) * 0.5f);
	}

	public void DoRefinement(Hero hero, Crafting.RefiningFormula refineFormula)
	{
		ItemRoster itemRoster = MobileParty.MainParty.ItemRoster;
		if (refineFormula.Input1Count > 0)
		{
			ItemObject craftingMaterialItem = Campaign.Current.Models.SmithingModel.GetCraftingMaterialItem(refineFormula.Input1);
			itemRoster.AddToCounts(craftingMaterialItem, -refineFormula.Input1Count);
		}
		if (refineFormula.Input2Count > 0)
		{
			ItemObject craftingMaterialItem2 = Campaign.Current.Models.SmithingModel.GetCraftingMaterialItem(refineFormula.Input2);
			itemRoster.AddToCounts(craftingMaterialItem2, -refineFormula.Input2Count);
		}
		if (refineFormula.OutputCount > 0)
		{
			ItemObject craftingMaterialItem3 = Campaign.Current.Models.SmithingModel.GetCraftingMaterialItem(refineFormula.Output);
			itemRoster.AddToCounts(craftingMaterialItem3, refineFormula.OutputCount);
		}
		if (refineFormula.Output2Count > 0)
		{
			ItemObject craftingMaterialItem4 = Campaign.Current.Models.SmithingModel.GetCraftingMaterialItem(refineFormula.Output2);
			itemRoster.AddToCounts(craftingMaterialItem4, refineFormula.Output2Count);
		}
		hero.AddSkillXp(DefaultSkills.Crafting, Campaign.Current.Models.SmithingModel.GetSkillXpForRefining(ref refineFormula));
		int energyCostForRefining = Campaign.Current.Models.SmithingModel.GetEnergyCostForRefining(ref refineFormula, hero);
		SetHeroCraftingStamina(hero, GetHeroCraftingStamina(hero) - energyCostForRefining);
		CampaignEventDispatcher.Instance.OnItemsRefined(hero, refineFormula);
	}

	public void DoSmelting(Hero hero, EquipmentElement equipmentElement)
	{
		ItemRoster itemRoster = MobileParty.MainParty.ItemRoster;
		ItemObject item = equipmentElement.Item;
		int[] smeltingOutputForItem = Campaign.Current.Models.SmithingModel.GetSmeltingOutputForItem(item);
		for (int num = 8; num >= 0; num--)
		{
			if (smeltingOutputForItem[num] != 0)
			{
				itemRoster.AddToCounts(Campaign.Current.Models.SmithingModel.GetCraftingMaterialItem((CraftingMaterials)num), smeltingOutputForItem[num]);
			}
		}
		itemRoster.AddToCounts(equipmentElement, -1);
		hero.AddSkillXp(DefaultSkills.Crafting, Campaign.Current.Models.SmithingModel.GetSkillXpForSmelting(item));
		int energyCostForSmelting = Campaign.Current.Models.SmithingModel.GetEnergyCostForSmelting(item, hero);
		SetHeroCraftingStamina(hero, GetHeroCraftingStamina(hero) - energyCostForSmelting);
		AddResearchPoints(item.WeaponDesign.Template, Campaign.Current.Models.SmithingModel.GetPartResearchGainForSmeltingItem(item, hero));
		CampaignEventDispatcher.Instance.OnEquipmentSmeltedByHero(hero, equipmentElement);
	}

	public ItemObject CreateCraftedWeaponInFreeBuildMode(Hero hero, WeaponDesign weaponDesign, ItemModifier weaponModifier = null)
	{
		SpendMaterials(weaponDesign);
		if (GameStateManager.Current.ActiveState is CraftingState craftingState)
		{
			ItemObject itemObject = craftingState.CraftingLogic.GetCurrentCraftedItemObject(forceReCreate: true);
			ItemObject.InitAsPlayerCraftedItem(ref itemObject);
			MBObjectManager.Instance.RegisterObject(itemObject);
			if (weaponModifier == null)
			{
				PartyBase.MainParty.ItemRoster.AddToCounts(itemObject, 1);
			}
			else
			{
				EquipmentElement rosterElement = new EquipmentElement(itemObject, weaponModifier);
				PartyBase.MainParty.ItemRoster.AddToCounts(rosterElement, 1);
			}
			CampaignEventDispatcher.Instance.OnNewItemCrafted(itemObject, weaponModifier, isCraftingOrderItem: false);
			hero.AddSkillXp(DefaultSkills.Crafting, Campaign.Current.Models.SmithingModel.GetSkillXpForSmithingInFreeBuildMode(itemObject));
			int energyCostForSmithing = Campaign.Current.Models.SmithingModel.GetEnergyCostForSmithing(itemObject, hero);
			SetHeroCraftingStamina(hero, GetHeroCraftingStamina(hero) - energyCostForSmithing);
			AddResearchPoints(weaponDesign.Template, Campaign.Current.Models.SmithingModel.GetPartResearchGainForSmithingItem(itemObject, hero, isFreeBuildMode: true));
			AddItemToHistory(craftingState.CraftingLogic.CurrentWeaponDesign);
			return itemObject;
		}
		return null;
	}

	public ItemObject CreateCraftedWeaponInCraftingOrderMode(Hero crafterHero, CraftingOrder craftingOrder, WeaponDesign weaponDesign)
	{
		SpendMaterials(weaponDesign);
		if (GameStateManager.Current.ActiveState is CraftingState craftingState)
		{
			ItemObject itemObject = craftingState.CraftingLogic.GetCurrentCraftedItemObject(forceReCreate: true);
			ItemObject.InitAsPlayerCraftedItem(ref itemObject);
			MBObjectManager.Instance.RegisterObject(itemObject);
			Campaign.Current.CampaignEvents.OnNewItemCrafted(itemObject, null, isCraftingOrderItem: true);
			float xpAmount = craftingOrder.GetOrderExperience(itemObject, _currentItemModifier) + (float)Campaign.Current.Models.SmithingModel.GetSkillXpForSmithingInCraftingOrderMode(itemObject);
			crafterHero.AddSkillXp(DefaultSkills.Crafting, xpAmount);
			int energyCostForSmithing = Campaign.Current.Models.SmithingModel.GetEnergyCostForSmithing(itemObject, crafterHero);
			SetHeroCraftingStamina(crafterHero, GetHeroCraftingStamina(crafterHero) - energyCostForSmithing);
			AddResearchPoints(weaponDesign.Template, Campaign.Current.Models.SmithingModel.GetPartResearchGainForSmithingItem(itemObject, crafterHero, isFreeBuildMode: false));
			return itemObject;
		}
		return null;
	}

	private static void SpendMaterials(WeaponDesign weaponDesign)
	{
		ItemRoster itemRoster = MobileParty.MainParty.ItemRoster;
		int[] smithingCostsForWeaponDesign = Campaign.Current.Models.SmithingModel.GetSmithingCostsForWeaponDesign(weaponDesign);
		for (int num = 8; num >= 0; num--)
		{
			if (smithingCostsForWeaponDesign[num] != 0)
			{
				itemRoster.AddToCounts(Campaign.Current.Models.SmithingModel.GetCraftingMaterialItem((CraftingMaterials)num), smithingCostsForWeaponDesign[num]);
			}
		}
	}

	private void AddItemToHistory(WeaponDesign design)
	{
		while (_craftingHistory.Count >= 10)
		{
			_craftingHistory.RemoveAt(0);
		}
		_craftingHistory.Add(design);
	}

	public void CreateTownOrder(Hero orderOwner, int orderSlot)
	{
		if (orderOwner.CurrentSettlement == null || !orderOwner.CurrentSettlement.IsTown)
		{
			Debug.Print("Order owner: " + orderOwner.StringId + " Settlement" + ((orderOwner.CurrentSettlement == null) ? "null" : orderOwner.CurrentSettlement.StringId) + " Order owner party: " + ((orderOwner.PartyBelongedTo == null) ? "null" : orderOwner.PartyBelongedTo.StringId));
		}
		float townOrderDifficulty = GetTownOrderDifficulty(orderOwner.CurrentSettlement.Town, orderSlot);
		int pieceTier = (int)townOrderDifficulty / 50;
		CraftingTemplate randomElement = CraftingTemplate.All.GetRandomElement();
		WeaponDesign weaponDesignTemplate = new WeaponDesign(randomElement, TextObject.Empty, GetWeaponPieces(randomElement, pieceTier));
		_craftingOrders[orderOwner.CurrentSettlement.Town].AddTownOrder(new CraftingOrder(orderOwner, townOrderDifficulty, weaponDesignTemplate, randomElement, orderSlot));
	}

	private float GetTownOrderDifficulty(Town town, int orderSlot)
	{
		int num = 0;
		switch (orderSlot)
		{
		case 0:
			num = MBRandom.RandomInt(40, 80);
			break;
		case 1:
			num = MBRandom.RandomInt(80, 120);
			break;
		case 2:
			num = MBRandom.RandomInt(120, 160);
			break;
		case 3:
			num = MBRandom.RandomInt(160, 200);
			break;
		case 4:
			num = MBRandom.RandomInt(200, 241);
			break;
		case 5:
			num = Hero.MainHero.GetSkillValue(DefaultSkills.Crafting);
			break;
		}
		return (float)num + town.Prosperity / 500f;
	}

	public CraftingOrder CreateCustomOrderForHero(Hero orderOwner, float orderDifficulty = -1f, WeaponDesign weaponDesign = null, CraftingTemplate craftingTemplate = null)
	{
		if (orderDifficulty < 0f)
		{
			orderDifficulty = GetRandomOrderDifficulty(orderOwner.CurrentSettlement.Town);
		}
		if (craftingTemplate == null)
		{
			craftingTemplate = CraftingTemplate.All.GetRandomElement();
		}
		if (weaponDesign == null)
		{
			int pieceTier = (int)orderDifficulty / 40;
			weaponDesign = new WeaponDesign(craftingTemplate, TextObject.Empty, GetWeaponPieces(craftingTemplate, pieceTier));
		}
		CraftingOrder craftingOrder = new CraftingOrder(orderOwner, orderDifficulty, weaponDesign, craftingTemplate);
		_craftingOrders[orderOwner.CurrentSettlement.Town].AddCustomOrder(craftingOrder);
		return craftingOrder;
	}

	private float GetRandomOrderDifficulty(Town town)
	{
		int num = MBRandom.RandomInt(0, 6);
		int num2 = 0;
		switch (num)
		{
		case 0:
			num2 = MBRandom.RandomInt(40, 80);
			break;
		case 1:
			num2 = MBRandom.RandomInt(80, 120);
			break;
		case 2:
			num2 = MBRandom.RandomInt(120, 160);
			break;
		case 3:
			num2 = MBRandom.RandomInt(160, 200);
			break;
		case 4:
			num2 = MBRandom.RandomInt(200, 241);
			break;
		case 5:
			num2 = Hero.MainHero.GetSkillValue(DefaultSkills.Crafting);
			break;
		}
		return (float)num2 + town.Prosperity / 500f;
	}

	private WeaponDesignElement[] GetWeaponPieces(CraftingTemplate craftingTemplate, int pieceTier)
	{
		WeaponDesignElement[] array = new WeaponDesignElement[4];
		List<WeaponDesignElement>[] array2 = new List<WeaponDesignElement>[4];
		foreach (CraftingPiece piece in craftingTemplate.Pieces)
		{
			bool flag = false;
			PieceData[] buildOrders = craftingTemplate.BuildOrders;
			foreach (PieceData pieceData in buildOrders)
			{
				if (pieceData.PieceType == piece.PieceType)
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				int pieceType = (int)piece.PieceType;
				if (array2[pieceType] == null)
				{
					array2[pieceType] = new List<WeaponDesignElement>();
				}
				array2[pieceType].Add(WeaponDesignElement.CreateUsablePiece(piece));
			}
		}
		for (int j = 0; j < array.Length; j++)
		{
			if (array2[j] != null)
			{
				array[j] = (array2[j].FirstOrDefaultQ((WeaponDesignElement p) => !p.CraftingPiece.IsHiddenOnDesigner && p.CraftingPiece.PieceTier == pieceTier) ?? array2[j].FirstOrDefaultQ((WeaponDesignElement p) => !p.CraftingPiece.IsHiddenOnDesigner && p.CraftingPiece.PieceTier == 1)) ?? array2[j].First((WeaponDesignElement p) => !p.CraftingPiece.IsHiddenOnDesigner);
			}
			else
			{
				array[j] = WeaponDesignElement.GetInvalidPieceForType((CraftingPiece.PieceTypes)j);
			}
		}
		return array;
	}

	private void ReplaceCraftingOrder(Town town, CraftingOrder order)
	{
		MBList<Hero> mBList = new MBList<Hero>();
		Settlement settlement = town.Settlement;
		mBList.AddRange(settlement.HeroesWithoutParty);
		foreach (MobileParty party in settlement.Parties)
		{
			if (party.LeaderHero != null && !party.IsMainParty)
			{
				mBList.Add(party.LeaderHero);
			}
		}
		int difficultyLevel = order.DifficultyLevel;
		_craftingOrders[town].RemoveTownOrder(order);
		if (mBList.Count > 0)
		{
			CreateTownOrder(mBList.GetRandomElement(), difficultyLevel);
		}
		mBList = null;
	}

	public void GetOrderResult(CraftingOrder craftingOrder, ItemObject craftedItem, out bool isSucceed, out TextObject orderRemark, out TextObject orderResult, out int finalReward)
	{
		finalReward = CalculateOrderPriceDifference(craftingOrder, craftedItem);
		craftingOrder.CheckForBonusesAndPenalties(craftedItem, _currentItemModifier, out var craftedStatsSum, out var requiredStatsSum, out var thrustDamageCheck, out var swingDamageCheck);
		isSucceed = craftedStatsSum >= requiredStatsSum && thrustDamageCheck && swingDamageCheck;
		int num = finalReward - craftingOrder.BaseGoldReward;
		orderRemark = TextObject.Empty;
		if (isSucceed)
		{
			orderResult = new TextObject("{=Nn49hU2W}The client is satisfied.");
			if (num == 0)
			{
				orderRemark = new TextObject("{=FWHvvZFq}\"This is exactly what I wanted. Here is your money, you've earned it.\"");
			}
			else if ((float)num > 0f)
			{
				orderRemark = new TextObject("{=raCa7QXj}\"This is even better than what I have imagined. Here is your money, and I'm putting a little extra for your effort.\"");
			}
			return;
		}
		orderResult = new TextObject("{=bC2jevlu}The client is displeased.");
		if (finalReward <= 0)
		{
			orderRemark = new TextObject("{=NZynd8vT}\"This weapon is worthless. I'm not giving you a dime!\"");
		}
		else if (finalReward < craftingOrder.BaseGoldReward)
		{
			TextObject empty = TextObject.Empty;
			empty = ((thrustDamageCheck && swingDamageCheck) ? new TextObject("{=wU76OPxM}\"This is worse than what I've asked for. I'm cutting {AMOUNT}{GOLD_ICON} from the price.\"") : new TextObject("{=WyuIksRB}\"This weapon does not have the damage type I wanted. I'm cutting {AMOUNT}{GOLD_ICON} from the price.\""));
			empty.SetTextVariable("AMOUNT", MathF.Abs(num));
			orderRemark = empty;
		}
	}

	private int CalculateOrderPriceDifference(CraftingOrder craftingOrder, ItemObject craftedItem)
	{
		craftingOrder.CheckForBonusesAndPenalties(craftedItem, _currentItemModifier, out var craftedStatsSum, out var requiredStatsSum, out var thrustDamageCheck, out var swingDamageCheck);
		float num = craftingOrder.BaseGoldReward;
		if (!craftedStatsSum.ApproximatelyEqualsTo(0f) && !requiredStatsSum.ApproximatelyEqualsTo(0f))
		{
			if (craftedStatsSum < requiredStatsSum || !thrustDamageCheck || !swingDamageCheck)
			{
				float b = (float)Campaign.Current.Models.TradeItemPriceFactorModel.GetTheoreticalMaxItemMarketValue(craftedItem) / (float)Campaign.Current.Models.TradeItemPriceFactorModel.GetTheoreticalMaxItemMarketValue(craftingOrder.PreCraftedWeaponDesignItem);
				num = (float)craftingOrder.BaseGoldReward * 0.5f * MathF.Min(1f, b);
				if (num > (float)craftingOrder.BaseGoldReward)
				{
					num = (float)craftingOrder.BaseGoldReward * 0.5f;
				}
			}
			else if (craftedStatsSum > requiredStatsSum)
			{
				num = (float)craftingOrder.BaseGoldReward * (1f + (craftedStatsSum - requiredStatsSum) / requiredStatsSum * 0.1f);
			}
		}
		return (int)num;
	}

	public void CompleteOrder(Town town, CraftingOrder craftingOrder, ItemObject craftedItem, Hero completerHero)
	{
		int amount = CalculateOrderPriceDifference(craftingOrder, craftedItem);
		GetOrderResult(craftingOrder, craftedItem, out var isSucceed, out var _, out var _, out var _);
		GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, amount);
		if (_craftingOrders[town].CustomOrders.Contains(craftingOrder))
		{
			_craftingOrders[town].RemoveCustomOrder(craftingOrder);
		}
		else
		{
			if (craftingOrder.IsLordOrder)
			{
				ChangeCraftedOrderWithTheNoblesWeaponIfItIsBetter(craftedItem, craftingOrder);
				if (craftingOrder.OrderOwner.PartyBelongedTo != null)
				{
					GiveTroopToNobleAtWeaponTier((int)craftedItem.Tier, craftingOrder.OrderOwner);
				}
				if (isSucceed && completerHero.GetPerkValue(DefaultPerks.Crafting.SteelMaker3))
				{
					ChangeRelationAction.ApplyRelationChangeBetweenHeroes(completerHero, craftingOrder.OrderOwner, (int)DefaultPerks.Crafting.SteelMaker3.SecondaryBonus);
				}
			}
			else
			{
				craftingOrder.OrderOwner.AddPower((float)(craftedItem.Tier + 1));
				if (isSucceed && completerHero.GetPerkValue(DefaultPerks.Crafting.ExperiencedSmith))
				{
					ChangeRelationAction.ApplyRelationChangeBetweenHeroes(completerHero, craftingOrder.OrderOwner, (int)DefaultPerks.Crafting.ExperiencedSmith.SecondaryBonus);
				}
			}
			_craftingOrders[town].RemoveTownOrder(craftingOrder);
		}
		CampaignEventDispatcher.Instance.OnCraftingOrderCompleted(town, craftingOrder, craftedItem, completerHero);
	}

	public ItemModifier GetCurrentItemModifier()
	{
		return _currentItemModifier;
	}

	public void SetCurrentItemModifier(ItemModifier modifier)
	{
		_currentItemModifier = modifier;
	}

	private void RemoveOrdersOfHeroWithoutCompletionIfExists(Hero hero)
	{
		new List<CraftingOrder>();
		foreach (KeyValuePair<Town, CraftingOrderSlots> craftingOrder in _craftingOrders)
		{
			for (int i = 0; i < 6; i++)
			{
				if (craftingOrder.Value.Slots[i] != null && craftingOrder.Value.Slots[i].OrderOwner == hero)
				{
					craftingOrder.Value.RemoveTownOrder(craftingOrder.Value.Slots[i]);
				}
			}
		}
	}

	public void CancelCustomOrder(Town town, CraftingOrder craftingOrder)
	{
		if (_craftingOrders[town].CustomOrders.Contains(craftingOrder))
		{
			_craftingOrders[town].RemoveCustomOrder(craftingOrder);
		}
		else
		{
			Debug.FailedAssert("Trying to cancel a custom order that doesn't exist.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\CampaignBehaviors\\CraftingCampaignBehavior.cs", "CancelCustomOrder", 1250);
		}
	}

	private void CancelOrder(Town town, CraftingOrder craftingOrder)
	{
		_craftingOrders[town].RemoveTownOrder(craftingOrder);
	}

	private void ChangeCraftedOrderWithTheNoblesWeaponIfItIsBetter(ItemObject craftedItem, CraftingOrder craftingOrder)
	{
		Equipment battleEquipment = craftingOrder.OrderOwner.BattleEquipment;
		for (int i = 0; i < 12; i++)
		{
			if (!battleEquipment[i].IsEmpty && craftedItem.PrimaryWeapon.WeaponClass == battleEquipment[i].Item.PrimaryWeapon?.WeaponClass)
			{
				ItemObject item = battleEquipment[i].Item;
				int thrustSpeed = item.PrimaryWeapon.ThrustSpeed;
				int thrustSpeed2 = craftedItem.PrimaryWeapon.ThrustSpeed;
				int swingSpeed = item.PrimaryWeapon.SwingSpeed;
				int swingSpeed2 = craftedItem.PrimaryWeapon.SwingSpeed;
				int missileSpeed = item.PrimaryWeapon.MissileSpeed;
				int missileSpeed2 = craftedItem.PrimaryWeapon.MissileSpeed;
				float weaponBalance = item.PrimaryWeapon.WeaponBalance;
				float weaponBalance2 = craftedItem.PrimaryWeapon.WeaponBalance;
				int thrustDamage = item.PrimaryWeapon.ThrustDamage;
				int thrustDamage2 = craftedItem.PrimaryWeapon.ThrustDamage;
				DamageTypes thrustDamageType = item.PrimaryWeapon.ThrustDamageType;
				DamageTypes thrustDamageType2 = craftedItem.PrimaryWeapon.ThrustDamageType;
				int swingDamage = item.PrimaryWeapon.SwingDamage;
				int swingDamage2 = craftedItem.PrimaryWeapon.SwingDamage;
				DamageTypes swingDamageType = item.PrimaryWeapon.SwingDamageType;
				DamageTypes swingDamageType2 = craftedItem.PrimaryWeapon.SwingDamageType;
				int accuracy = item.PrimaryWeapon.Accuracy;
				int accuracy2 = craftedItem.PrimaryWeapon.Accuracy;
				float weight = item.Weight;
				float weight2 = craftedItem.Weight;
				if (thrustSpeed2 > thrustSpeed && swingSpeed2 > swingSpeed && missileSpeed2 > missileSpeed && weaponBalance2 > weaponBalance && thrustDamage2 > thrustDamage && thrustDamageType == thrustDamageType2 && swingDamage2 > swingDamage && swingDamageType2 == swingDamageType && accuracy2 > accuracy && weight2 < weight)
				{
					battleEquipment[i] = new EquipmentElement(craftedItem);
					break;
				}
			}
		}
	}

	private void GiveTroopToNobleAtWeaponTier(int tier, Hero noble)
	{
		CharacterObject characterObject = noble.Culture.BasicTroop;
		for (int i = 0; i < tier; i++)
		{
			if (characterObject.UpgradeTargets.Length != 0)
			{
				characterObject = characterObject.UpgradeTargets.GetRandomElement();
			}
		}
		noble.PartyBelongedTo.AddElementToMemberRoster(characterObject, 1);
	}
}
