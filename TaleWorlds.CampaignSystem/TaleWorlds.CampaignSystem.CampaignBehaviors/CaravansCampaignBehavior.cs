using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Inventory;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Siege;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CampaignBehaviors;

public class CaravansCampaignBehavior : CampaignBehaviorBase
{
	public class CaravansCampaignBehaviorTypeDefiner : SaveableTypeDefiner
	{
		public CaravansCampaignBehaviorTypeDefiner()
			: base(60000)
		{
		}

		protected override void DefineEnumTypes()
		{
			AddEnumDefinition(typeof(PlayerInteraction), 1);
		}

		protected override void DefineContainerDefinitions()
		{
			ConstructContainerDefinition(typeof(Dictionary<MobileParty, PlayerInteraction>));
			ConstructContainerDefinition(typeof(List<TradeActionLog>));
			ConstructContainerDefinition(typeof(Dictionary<MobileParty, List<TradeActionLog>>));
		}

		protected override void DefineClassTypes()
		{
			AddClassDefinition(typeof(TradeActionLog), 2);
		}
	}

	private enum PlayerInteraction
	{
		None,
		Friendly,
		TradedWith,
		Hostile
	}

	private struct PriceIndexData
	{
		internal readonly float AverageBuySellPriceIndex;

		internal readonly float MinBuySellPriceIndex;

		public PriceIndexData(float averageBuySellPriceIndex, float minBuySellPriceIndex)
		{
			AverageBuySellPriceIndex = averageBuySellPriceIndex;
			MinBuySellPriceIndex = minBuySellPriceIndex;
		}
	}

	internal class TradeActionLog
	{
		[SaveableField(0)]
		public Settlement BoughtSettlement;

		[SaveableField(1)]
		public int BuyPrice;

		[SaveableField(2)]
		public int SellPrice;

		[SaveableField(3)]
		public ItemRosterElement ItemRosterElement;

		[SaveableField(4)]
		public Settlement SoldSettlement;

		[SaveableField(5)]
		public CampaignTime BoughtTime;

		public float ProfitRate => (float)SellPrice / (float)BuyPrice;

		public void OnSellAction(Settlement soldSettlement, int sellPrice)
		{
			SellPrice = sellPrice;
			SoldSettlement = soldSettlement;
		}

		public void Reset()
		{
			BoughtSettlement = null;
			SoldSettlement = null;
			SellPrice = 0;
			BuyPrice = 0;
		}

		internal static void AutoGeneratedStaticCollectObjectsTradeActionLog(object o, List<object> collectedObjects)
		{
			((TradeActionLog)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(BoughtSettlement);
			ItemRosterElement.AutoGeneratedStaticCollectObjectsItemRosterElement(ItemRosterElement, collectedObjects);
			collectedObjects.Add(SoldSettlement);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(BoughtTime, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueBoughtSettlement(object o)
		{
			return ((TradeActionLog)o).BoughtSettlement;
		}

		internal static object AutoGeneratedGetMemberValueBuyPrice(object o)
		{
			return ((TradeActionLog)o).BuyPrice;
		}

		internal static object AutoGeneratedGetMemberValueSellPrice(object o)
		{
			return ((TradeActionLog)o).SellPrice;
		}

		internal static object AutoGeneratedGetMemberValueItemRosterElement(object o)
		{
			return ((TradeActionLog)o).ItemRosterElement;
		}

		internal static object AutoGeneratedGetMemberValueSoldSettlement(object o)
		{
			return ((TradeActionLog)o).SoldSettlement;
		}

		internal static object AutoGeneratedGetMemberValueBoughtTime(object o)
		{
			return ((TradeActionLog)o).BoughtTime;
		}
	}

	internal class TradeActionLogPool
	{
		private Stack<TradeActionLog> _stack;

		public int Size => _stack?.Count ?? 0;

		private int MaxSize { get; }

		public TradeActionLogPool(int size)
		{
			MaxSize = size;
			_stack = new Stack<TradeActionLog>(size);
			for (int i = 0; i < size; i++)
			{
				_stack.Push(new TradeActionLog());
			}
		}

		public TradeActionLog CreateNewLog(Settlement boughtSettlement, int buyPrice, ItemRosterElement itemRosterElement)
		{
			TradeActionLog obj = ((_stack.Count > 0) ? _stack.Pop() : new TradeActionLog());
			obj.BoughtSettlement = boughtSettlement;
			obj.BuyPrice = buyPrice;
			obj.ItemRosterElement = itemRosterElement;
			obj.BoughtTime = CampaignTime.Now;
			return obj;
		}

		public void ReleaseLog(TradeActionLog log)
		{
			log.Reset();
			if (_stack.Count < MaxSize)
			{
				_stack.Push(log);
			}
		}

		public override string ToString()
		{
			return $"TrackPool: {Size}";
		}
	}

	private const float AverageCaravanWaitAtSettlement = 3f;

	private const int MaxMoneyToSpendOnSingleCategory = 1500;

	private const int MaxNumberOfItemsToBuyFromSingleCategory = 100;

	public const int InitialCaravanGold = 10000;

	private const float ProfitRateRumorThreshold = 1.2f;

	private float ReferenceBudgetValue = 5000f;

	private Dictionary<MobileParty, CampaignTime> _tradeRumorTakenCaravans = new Dictionary<MobileParty, CampaignTime>();

	private Dictionary<MobileParty, CampaignTime> _caravanLastHomeTownVisitTime = new Dictionary<MobileParty, CampaignTime>();

	private Dictionary<MobileParty, CampaignTime> _lootedCaravans = new Dictionary<MobileParty, CampaignTime>();

	private Dictionary<MobileParty, PlayerInteraction> _interactedCaravans = new Dictionary<MobileParty, PlayerInteraction>();

	private Dictionary<MobileParty, List<TradeActionLog>> _tradeActionLogs = new Dictionary<MobileParty, List<TradeActionLog>>();

	private Dictionary<MobileParty, List<Settlement>> _previouslyChangedCaravanTargetsDueToEnemyOnWay = new Dictionary<MobileParty, List<Settlement>>();

	private TradeActionLogPool _tradeActionLogPool;

	private int _packAnimalCategoryIndex = -1;

	private readonly Dictionary<ItemCategory, float> _averageValuesCached = new Dictionary<ItemCategory, float>();

	private readonly Dictionary<ItemCategory, PriceIndexData> _priceDictionary = new Dictionary<ItemCategory, PriceIndexData>();

	private readonly Dictionary<ItemCategory, int> _totalValueOfItemsAtCategory = new Dictionary<ItemCategory, int>();

	private float DistanceScoreDivider => (636f + 11.36f * Campaign.AverageDistanceBetweenTwoFortifications) / 2f;

	private float DistanceLimitVeryFar => (508f + 9f * Campaign.AverageDistanceBetweenTwoFortifications) / 2f;

	private float DistanceLimitFar => (381f + 6.75f * Campaign.AverageDistanceBetweenTwoFortifications) / 2f;

	private float DistanceLimitMedium => (254f + 4.5f * Campaign.AverageDistanceBetweenTwoFortifications) / 2f;

	private float DistanceLimitClose => (127f + 2.25f * Campaign.AverageDistanceBetweenTwoFortifications) / 2f;

	public CaravansCampaignBehavior()
	{
		_tradeActionLogPool = new TradeActionLogPool(4096);
	}

	public override void RegisterEvents()
	{
		CampaignEvents.SettlementEntered.AddNonSerializedListener(this, OnSettlementEntered);
		CampaignEvents.OnSettlementLeftEvent.AddNonSerializedListener(this, OnSettlementLeft);
		CampaignEvents.DailyTickEvent.AddNonSerializedListener(this, DailyTick);
		CampaignEvents.DailyTickHeroEvent.AddNonSerializedListener(this, DailyTickHero);
		CampaignEvents.HourlyTickPartyEvent.AddNonSerializedListener(this, HourlyTickParty);
		CampaignEvents.OnSessionLaunchedEvent.AddNonSerializedListener(this, OnSessionLaunched);
		CampaignEvents.OnNewGameCreatedPartialFollowUpEvent.AddNonSerializedListener(this, OnNewGameCreatedPartialFollowUpEvent);
		CampaignEvents.OnNewGameCreatedPartialFollowUpEndEvent.AddNonSerializedListener(this, OnNewGameCreatedPartialFollowUpEndEvent);
		CampaignEvents.MobilePartyDestroyed.AddNonSerializedListener(this, OnMobilePartyDestroyed);
		CampaignEvents.MobilePartyCreated.AddNonSerializedListener(this, OnMobilePartyCreated);
		CampaignEvents.MapEventEnded.AddNonSerializedListener(this, OnMapEventEnded);
		CampaignEvents.DistributeLootToPartyEvent.AddNonSerializedListener(this, OnLootCaravanParties);
		CampaignEvents.OnSiegeEventStartedEvent.AddNonSerializedListener(this, OnSiegeEventStarted);
	}

	private void OnSiegeEventStarted(SiegeEvent siegeEvent)
	{
		for (int i = 0; i < siegeEvent.BesiegedSettlement.Parties.Count; i++)
		{
			if (siegeEvent.BesiegedSettlement.Parties[i].IsCaravan)
			{
				siegeEvent.BesiegedSettlement.Parties[i].Ai.SetMoveModeHold();
			}
		}
	}

	private void OnLootCaravanParties(MapEvent mapEvent, PartyBase party, Dictionary<PartyBase, ItemRoster> loot)
	{
		foreach (PartyBase key in loot.Keys)
		{
			if (key.IsMobile && key.MobileParty.IsCaravan && party.IsMobile)
			{
				SkillLevelingManager.OnLoot(party.MobileParty, key.MobileParty, loot[key], attacked: true);
			}
		}
	}

	public void OnNewGameCreatedPartialFollowUpEvent(CampaignGameStarter starter, int i)
	{
		List<Hero> list = new List<Hero>();
		foreach (Hero allAliveHero in Hero.AllAliveHeroes)
		{
			if (allAliveHero.Clan != Clan.PlayerClan && ShouldHaveCaravan(allAliveHero))
			{
				list.Add(allAliveHero);
			}
		}
		int count = list.Count;
		int num = count / 100 + ((count % 100 > i) ? 1 : 0);
		int num2 = count / 100 * i;
		for (int j = 0; j < i; j++)
		{
			num2 += ((count % 100 > j) ? 1 : 0);
		}
		for (int k = 0; k < num; k++)
		{
			SpawnCaravan(list[num2 + k], initialSpawn: true);
		}
	}

	private void OnNewGameCreatedPartialFollowUpEndEvent(CampaignGameStarter obj)
	{
		for (int i = 0; i < 2; i++)
		{
			UpdateAverageValues();
			DoInitialTradeRuns();
		}
	}

	public override void SyncData(IDataStore dataStore)
	{
		dataStore.SyncData("_tradeRumorTakenCaravans", ref _tradeRumorTakenCaravans);
		dataStore.SyncData("_lootedCaravans", ref _lootedCaravans);
		dataStore.SyncData("_interactedCaravans", ref _interactedCaravans);
		dataStore.SyncData("_tradeActionLogs", ref _tradeActionLogs);
		dataStore.SyncData("_previouslyChangedCaravanTargetsDueToEnemyOnWay", ref _previouslyChangedCaravanTargetsDueToEnemyOnWay);
	}

	private void DoInitialTradeRuns()
	{
		foreach (MobileParty allCaravanParty in MobileParty.AllCaravanParties)
		{
			Town town = null;
			Town town2 = null;
			float num = 0f;
			foreach (Town allTown in Town.AllTowns)
			{
				float num2 = allCaravanParty.Position2D.Distance(allTown.Settlement.GatePosition);
				if (num2 > 1f)
				{
					num += 1f / TaleWorlds.Library.MathF.Pow(num2, 1.5f);
				}
				else
				{
					town2 = allTown;
				}
			}
			float num3 = MBRandom.RandomFloat * num;
			foreach (Town allTown2 in Town.AllTowns)
			{
				float num4 = allCaravanParty.Position2D.Distance(allTown2.Settlement.GatePosition);
				if (num4 > 1f)
				{
					num3 -= 1f / TaleWorlds.Library.MathF.Pow(num4, 1.5f);
					if (num3 <= 0f)
					{
						town = allTown2;
						break;
					}
				}
			}
			if (town != null && town2 != null)
			{
				CreatePriceDataCache();
				if (MBRandom.RandomFloat < 0.5f)
				{
					SellGoods(allCaravanParty, town2, 0.7f);
					BuyGoods(allCaravanParty, town2);
					SellGoods(allCaravanParty, town, 0.7f);
				}
				else
				{
					SellGoods(allCaravanParty, town, 0.7f);
					BuyGoods(allCaravanParty, town);
					SellGoods(allCaravanParty, town2, 0.7f);
				}
			}
		}
	}

	public void OnSessionLaunched(CampaignGameStarter campaignGameStarter)
	{
		AddDialogs(campaignGameStarter);
		UpdateAverageValues();
	}

	private void OnMapEventEnded(MapEvent mapEvent)
	{
		foreach (PartyBase involvedParty in mapEvent.InvolvedParties)
		{
			if (!involvedParty.IsMobile || !involvedParty.MobileParty.IsCaravan || !mapEvent.IsWinnerSide(involvedParty.Side))
			{
				continue;
			}
			MobileParty mobileParty = involvedParty.MobileParty;
			int numberOfPackAnimals = mobileParty.ItemRoster.NumberOfPackAnimals;
			int numberOfLivestockAnimals = mobileParty.ItemRoster.NumberOfLivestockAnimals;
			int numberOfMounts = mobileParty.ItemRoster.NumberOfMounts;
			int totalManCount = mobileParty.MemberRoster.TotalManCount;
			if ((float)(numberOfPackAnimals + numberOfLivestockAnimals + numberOfMounts) > (float)totalManCount * 1.2f)
			{
				int num = numberOfPackAnimals + numberOfLivestockAnimals + numberOfMounts;
				while (num > totalManCount)
				{
					int num2 = 10000;
					ItemRosterElement itemRosterElement = involvedParty.MobileParty.ItemRoster[0];
					foreach (ItemRosterElement item in involvedParty.MobileParty.ItemRoster)
					{
						if (item.EquipmentElement.Item.IsMountable || item.EquipmentElement.Item.ItemCategory == DefaultItemCategories.PackAnimal || item.EquipmentElement.Item.IsAnimal)
						{
							int itemValue = item.EquipmentElement.ItemValue;
							if (itemValue < num2)
							{
								num2 = itemValue;
								itemRosterElement = item;
							}
						}
					}
					int num3 = TaleWorlds.Library.MathF.Min(itemRosterElement.Amount, TaleWorlds.Library.MathF.Max(1, num - totalManCount));
					mobileParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -num3);
					num -= num3;
				}
			}
			int inventoryCapacity = mobileParty.InventoryCapacity;
			float totalWeight = mobileParty.ItemRoster.TotalWeight;
			float num4 = 0f;
			if (!(totalWeight - num4 > (float)inventoryCapacity))
			{
				continue;
			}
			int num6;
			float weight;
			for (; totalWeight - num4 > (float)inventoryCapacity; num4 += weight * (float)num6)
			{
				int num5 = 10000;
				ItemRosterElement itemRosterElement2 = involvedParty.MobileParty.ItemRoster[0];
				foreach (ItemRosterElement item2 in involvedParty.MobileParty.ItemRoster)
				{
					if (!item2.EquipmentElement.Item.IsMountable)
					{
						int itemValue2 = item2.EquipmentElement.ItemValue;
						if (itemValue2 < num5)
						{
							num5 = itemValue2;
							itemRosterElement2 = item2;
						}
					}
				}
				int val = TaleWorlds.Library.MathF.Ceiling((totalWeight - num4 - (float)inventoryCapacity) / itemRosterElement2.EquipmentElement.Weight);
				num6 = Math.Max(1, Math.Min(itemRosterElement2.Amount, val));
				weight = itemRosterElement2.EquipmentElement.Weight;
				mobileParty.ItemRoster.AddToCounts(itemRosterElement2.EquipmentElement, -num6);
			}
		}
	}

	public bool ShouldHaveCaravan(Hero hero)
	{
		if (hero.PartyBelongedTo == null && hero.IsMerchant && (hero.IsFugitive || hero.IsReleased || hero.IsNotSpawned || hero.IsActive) && !hero.IsTemplate)
		{
			return hero.CanLeadParty();
		}
		return false;
	}

	public void SpawnCaravan(Hero hero, bool initialSpawn = false)
	{
		if (hero.OwnedCaravans.Count <= 0)
		{
			Settlement settlement = hero.HomeSettlement ?? hero.BornSettlement;
			Settlement spawnSettlement = ((settlement == null) ? Town.AllTowns.GetRandomElement().Settlement : (settlement.IsTown ? settlement : ((!settlement.IsVillage) ? Town.AllTowns.GetRandomElement().Settlement : (settlement.Village.TradeBound ?? Town.AllTowns.GetRandomElement().Settlement))));
			bool isElite = false;
			if (hero.Power >= 112f)
			{
				float num = hero.Power * 0.0045f - 0.5f;
				isElite = hero.RandomFloat() < num;
			}
			CaravanPartyComponent.CreateCaravanParty(hero, spawnSettlement, initialSpawn, null, null, 0, isElite);
			if (!initialSpawn && hero.Power >= 50f)
			{
				hero.AddPower(-30f);
			}
		}
	}

	private void UpdateAverageValues()
	{
		Dictionary<ItemCategory, (float, int)> dictionary = new Dictionary<ItemCategory, (float, int)>();
		foreach (ItemObject item in Items.All)
		{
			if (item.IsReady)
			{
				dictionary.TryGetValue(item.ItemCategory, out var value);
				dictionary[item.ItemCategory] = (value.Item1 + (float)TaleWorlds.Library.MathF.Min(500, item.Value), value.Item2 + 1);
			}
		}
		_packAnimalCategoryIndex = -1;
		for (int i = 0; i < ItemCategories.All.Count; i++)
		{
			ItemCategory itemCategory = ItemCategories.All[i];
			(float, int) value2;
			bool flag = dictionary.TryGetValue(itemCategory, out value2);
			_averageValuesCached[itemCategory] = (flag ? (value2.Item1 / (float)value2.Item2) : 1f);
			if (itemCategory == DefaultItemCategories.PackAnimal)
			{
				_packAnimalCategoryIndex = i;
			}
		}
	}

	private void CreatePriceDataCache()
	{
		foreach (ItemCategory item in ItemCategories.All)
		{
			float num = 0f;
			float num2 = 1000f;
			foreach (Town allTown in Town.AllTowns)
			{
				float itemCategoryPriceIndex = allTown.GetItemCategoryPriceIndex(item);
				num += itemCategoryPriceIndex;
				if (itemCategoryPriceIndex < num2)
				{
					num2 = itemCategoryPriceIndex;
				}
			}
			float averageBuySellPriceIndex = num / (float)Town.AllTowns.Count;
			_priceDictionary[item] = new PriceIndexData(averageBuySellPriceIndex, num2);
		}
	}

	public void DailyTick()
	{
		DeleteExpiredTradeRumorTakenCaravans();
		DeleteExpiredLootedCaravans();
		CreatePriceDataCache();
	}

	private void DailyTickHero(Hero hero)
	{
		if (hero != Hero.MainHero && ShouldHaveCaravan(hero))
		{
			SpawnCaravan(hero);
		}
	}

	private void DeleteExpiredTradeRumorTakenCaravans()
	{
		List<MobileParty> list = new List<MobileParty>();
		foreach (KeyValuePair<MobileParty, CampaignTime> tradeRumorTakenCaravan in _tradeRumorTakenCaravans)
		{
			if (CampaignTime.Now - tradeRumorTakenCaravan.Value >= CampaignTime.Days(1f))
			{
				list.Add(tradeRumorTakenCaravan.Key);
			}
		}
		foreach (MobileParty item in list)
		{
			_tradeRumorTakenCaravans.Remove(item);
		}
	}

	private void DeleteExpiredLootedCaravans()
	{
		List<MobileParty> list = new List<MobileParty>();
		foreach (KeyValuePair<MobileParty, CampaignTime> lootedCaravan in _lootedCaravans)
		{
			if (CampaignTime.Now - lootedCaravan.Value >= CampaignTime.Days(10f))
			{
				list.Add(lootedCaravan.Key);
			}
		}
		foreach (MobileParty item in list)
		{
			_lootedCaravans.Remove(item);
		}
	}

	private Town GetDestinationForMobileParty(MobileParty party)
	{
		return party.TargetSettlement?.Town;
	}

	public void HourlyTickParty(MobileParty caravanParty)
	{
		if (!Campaign.Current.GameStarted || !caravanParty.IsCaravan)
		{
			return;
		}
		bool flag = false;
		float randomFloat = MBRandom.RandomFloat;
		if (caravanParty.MapEvent != null || !caravanParty.IsPartyTradeActive || caravanParty.Ai.DoNotMakeNewDecisions)
		{
			return;
		}
		if (caravanParty.CurrentSettlement != null && caravanParty.CurrentSettlement.IsTown)
		{
			if (!caravanParty.CurrentSettlement.IsUnderSiege && caravanParty.ShortTermBehavior != AiBehavior.FleeToPoint && !caravanParty.Ai.IsAlerted && (caravanParty.IsCurrentlyUsedByAQuest || randomFloat < 1f / 3f))
			{
				float num = ((caravanParty.MemberRoster.TotalManCount > 0) ? ((float)caravanParty.MemberRoster.TotalWounded / (float)caravanParty.MemberRoster.TotalManCount) : 1f);
				float num2 = 1f;
				if ((double)num > 0.4)
				{
					num2 = 0f;
				}
				else if ((double)num > 0.2)
				{
					num2 = 0.1f;
				}
				else if ((double)num > 0.1)
				{
					num2 = 0.2f;
				}
				else if ((double)num > 0.05)
				{
					num2 = 0.3f;
				}
				else if ((double)num > 0.025)
				{
					num2 = 0.4f;
				}
				float randomFloat2 = MBRandom.RandomFloat;
				if (num2 > randomFloat2)
				{
					flag = true;
				}
			}
		}
		else
		{
			Town destinationForMobileParty = GetDestinationForMobileParty(caravanParty);
			flag = destinationForMobileParty == null || destinationForMobileParty.IsUnderSiege || caravanParty.MapFaction.IsAtWarWith(destinationForMobileParty.MapFaction) || caravanParty.Ai.NeedTargetReset || (!caravanParty.IsCurrentlyUsedByAQuest && randomFloat < 0.01f);
		}
		if (flag)
		{
			if (caravanParty.CurrentSettlement != null && caravanParty.CurrentSettlement.IsTown)
			{
				Town town = caravanParty.CurrentSettlement.Town;
				BuyGoods(caravanParty, town);
			}
			if (!_previouslyChangedCaravanTargetsDueToEnemyOnWay.ContainsKey(caravanParty))
			{
				_previouslyChangedCaravanTargetsDueToEnemyOnWay.Add(caravanParty, new List<Settlement>());
			}
			if (caravanParty.Ai.NeedTargetReset && caravanParty.TargetSettlement != null)
			{
				_previouslyChangedCaravanTargetsDueToEnemyOnWay[caravanParty].Add(caravanParty.TargetSettlement);
			}
			Town town2 = ThinkNextDestination(caravanParty);
			if (town2 != null)
			{
				caravanParty.Ai.SetMoveGoToSettlement(town2.Settlement);
			}
		}
		Town destinationForMobileParty2 = GetDestinationForMobileParty(caravanParty);
		if (caravanParty.CurrentSettlement == null && destinationForMobileParty2 != null && caravanParty.TargetSettlement != destinationForMobileParty2.Settlement)
		{
			caravanParty.Ai.SetMoveGoToSettlement(destinationForMobileParty2.Settlement);
		}
	}

	public void OnSettlementEntered(MobileParty mobileParty, Settlement settlement, Hero hero)
	{
		Town town = settlement.Town;
		if (Campaign.Current.GameStarted && mobileParty != null && town != null && mobileParty.IsCaravan && mobileParty.IsPartyTradeActive && mobileParty.IsActive)
		{
			if (_previouslyChangedCaravanTargetsDueToEnemyOnWay.ContainsKey(mobileParty))
			{
				_previouslyChangedCaravanTargetsDueToEnemyOnWay[mobileParty].Clear();
			}
			else
			{
				_previouslyChangedCaravanTargetsDueToEnemyOnWay.Add(mobileParty, new List<Settlement>());
			}
			if (Campaign.Current.GameStarted)
			{
				if (_tradeActionLogs.TryGetValue(mobileParty, out var value))
				{
					for (int num = value.Count - 1; num >= 0; num--)
					{
						TradeActionLog tradeActionLog = value[num];
						if (tradeActionLog.BoughtTime.ElapsedDaysUntilNow > 7f)
						{
							value.RemoveAt(num);
							_tradeActionLogPool.ReleaseLog(tradeActionLog);
						}
					}
				}
				SellGoods(mobileParty, town);
			}
			if (mobileParty.HomeSettlement == settlement)
			{
				_caravanLastHomeTownVisitTime[mobileParty] = CampaignTime.Now;
			}
		}
		if (mobileParty != null && mobileParty.IsCaravan && settlement.IsTown && settlement.Town.Governor != null && settlement.Town.Governor.GetPerkValue(DefaultPerks.Trade.Tollgates))
		{
			settlement.Town.TradeTaxAccumulated += TaleWorlds.Library.MathF.Round(DefaultPerks.Trade.Tollgates.SecondaryBonus);
		}
	}

	public void OnSettlementLeft(MobileParty mobileParty, Settlement settlement)
	{
		if (mobileParty == null || mobileParty == MobileParty.MainParty || (!mobileParty.IsCaravan && !mobileParty.IsLordParty))
		{
			return;
		}
		int inventoryCapacity = mobileParty.InventoryCapacity;
		float totalWeight = mobileParty.ItemRoster.TotalWeight;
		Town town = (settlement.IsTown ? settlement.Town : (settlement.IsVillage ? settlement.Village.Bound.Town : null));
		if (town == null)
		{
			return;
		}
		float num = 1.1f;
		while (totalWeight > (float)inventoryCapacity)
		{
			SellGoods(mobileParty, town, num, toLoseWeight: true);
			num -= 0.02f;
			if (!(num < 0.75f))
			{
				inventoryCapacity = mobileParty.InventoryCapacity;
				totalWeight = mobileParty.ItemRoster.TotalWeight;
				continue;
			}
			break;
		}
	}

	private void OnMobilePartyDestroyed(MobileParty mobileParty, PartyBase destroyerParty)
	{
		if (_interactedCaravans.ContainsKey(mobileParty))
		{
			_interactedCaravans.Remove(mobileParty);
		}
		if (_tradeActionLogs.TryGetValue(mobileParty, out var value))
		{
			_tradeActionLogs.Remove(mobileParty);
			for (int i = 0; i < value.Count; i++)
			{
				TradeActionLog log = value[i];
				_tradeActionLogPool.ReleaseLog(log);
			}
		}
		if (_previouslyChangedCaravanTargetsDueToEnemyOnWay.ContainsKey(mobileParty))
		{
			_previouslyChangedCaravanTargetsDueToEnemyOnWay.Remove(mobileParty);
		}
	}

	private void OnMobilePartyCreated(MobileParty mobileParty)
	{
		if (mobileParty.IsCaravan)
		{
			_previouslyChangedCaravanTargetsDueToEnemyOnWay.Add(mobileParty, new List<Settlement>());
		}
	}

	private Town ThinkNextDestination(MobileParty caravanParty)
	{
		RefreshTotalValueOfItemsAtCategoryForParty(caravanParty);
		return FindNextDestinationForCaravan(caravanParty, distanceCut: true) ?? FindNextDestinationForCaravan(caravanParty, distanceCut: false);
	}

	private Town FindNextDestinationForCaravan(MobileParty caravanParty, bool distanceCut)
	{
		float num = 0f;
		Town result = null;
		float caravanFullness = caravanParty.ItemRoster.TotalWeight / (float)caravanParty.InventoryCapacity;
		_caravanLastHomeTownVisitTime.TryGetValue(caravanParty, out var value);
		foreach (Town allTown in Town.AllTowns)
		{
			if (allTown.Owner.Settlement != caravanParty.CurrentSettlement && !allTown.IsUnderSiege && !allTown.MapFaction.IsAtWarWith(caravanParty.MapFaction) && (!allTown.Settlement.Parties.Contains(MobileParty.MainParty) || !MobileParty.MainParty.MapFaction.IsAtWarWith(caravanParty.MapFaction)) && !_previouslyChangedCaravanTargetsDueToEnemyOnWay[caravanParty].Contains(allTown.Settlement))
			{
				float tradeScoreForTown = GetTradeScoreForTown(caravanParty, allTown, value, caravanFullness, distanceCut);
				if (tradeScoreForTown > num)
				{
					num = tradeScoreForTown;
					result = allTown;
				}
			}
		}
		return result;
	}

	private void AdjustVeryFarAddition(float distance, float minimumAddition, ref float veryFarAddition)
	{
		if (distance > DistanceLimitVeryFar)
		{
			veryFarAddition += (distance - DistanceLimitVeryFar) * minimumAddition * 4f;
		}
		if (distance > DistanceLimitFar)
		{
			veryFarAddition += (distance - DistanceLimitFar) * minimumAddition * 3f;
		}
		if (distance > DistanceLimitMedium)
		{
			veryFarAddition += (distance - DistanceLimitMedium) * minimumAddition * 2f;
		}
		if (distance > DistanceLimitClose)
		{
			veryFarAddition += (distance - DistanceLimitClose) * minimumAddition;
		}
	}

	private float GetTradeScoreForTown(MobileParty caravanParty, Town town, CampaignTime lastHomeVisitTimeOfCaravan, float caravanFullness, bool distanceCut)
	{
		float distance = Campaign.Current.Models.MapDistanceModel.GetDistance(caravanParty, town.Owner.Settlement);
		float veryFarAddition = 0f;
		AdjustVeryFarAddition(distance, 0.15f, ref veryFarAddition);
		float elapsedDaysUntilNow = lastHomeVisitTimeOfCaravan.ElapsedDaysUntilNow;
		bool flag = elapsedDaysUntilNow > 2f;
		if (flag)
		{
			float distance2 = Campaign.Current.Models.MapDistanceModel.GetDistance(town.Owner.Settlement, caravanParty.HomeSettlement);
			AdjustVeryFarAddition(distance2, ((elapsedDaysUntilNow - 1f) * TaleWorlds.Library.MathF.Sqrt(elapsedDaysUntilNow - 1f) - 1f) * 0.008f, ref veryFarAddition);
		}
		float num = 1f / (distance + veryFarAddition + 8f);
		if (distanceCut && (town.Owner.Settlement != caravanParty.HomeSettlement || !flag) && num < 1f / DistanceScoreDivider)
		{
			return -1f;
		}
		float num2 = 1f;
		if (caravanParty.HomeSettlement == town.Owner.Settlement)
		{
			num2 = 1f + elapsedDaysUntilNow * 0.1f * (elapsedDaysUntilNow * 0.1f);
		}
		TownMarketData marketData = town.MarketData;
		float num3 = 0f;
		for (int i = 0; i < caravanParty.Party.ItemRoster.Count; i++)
		{
			ItemObject item = caravanParty.ItemRoster.GetElementCopyAtIndex(i).EquipmentElement.Item;
			float limitValue = 1.1f - TaleWorlds.Library.MathF.Sqrt((float)TaleWorlds.Library.MathF.Min(_totalValueOfItemsAtCategory[item.ItemCategory], 5000) / 5000f) * 0.2f;
			num3 += CalculateTownSellScoreForCategory(caravanParty, marketData, i, limitValue);
		}
		num3 *= 0.3f + caravanFullness;
		float num4 = 0f;
		for (int j = 0; j < ItemCategories.All.Count; j++)
		{
			ItemCategory itemCategory = ItemCategories.All[j];
			if (itemCategory.IsTradeGood || itemCategory.IsAnimal)
			{
				num4 += CalculateTownBuyScoreForCategory(marketData, j);
			}
		}
		num4 *= TaleWorlds.Library.MathF.Max(0.1f, 1f - (caravanFullness - 0.2f * TaleWorlds.Library.MathF.Min(num3, 1000f) / 1000f));
		num4 = TaleWorlds.Library.MathF.Min(num4, (float)(int)(0.5f * (float)caravanParty.PartyTradeGold));
		float num5 = ((caravanParty.Ai.NeedTargetReset && caravanParty.TargetSettlement == town.Settlement) ? 0.1f : 1f);
		float num6 = ((caravanParty.IsCurrentlyUsedByAQuest && town.Settlement == caravanParty.HomeSettlement && caravanParty.Position2D.Distance(caravanParty.HomeSettlement.GatePosition) < 3f) ? 0.1f : 1f);
		return (num3 + num4) * num5 * num * num2 * num6;
	}

	private float CalculateTownSellScoreForCategory(MobileParty party, TownMarketData marketData, int i, float limitValue)
	{
		ItemRosterElement itemRosterElement = party.Party.ItemRoster[i];
		ItemCategory itemCategory = itemRosterElement.EquipmentElement.Item.ItemCategory;
		PriceIndexData categoryPriceData = GetCategoryPriceData(itemCategory);
		float num = marketData.GetPriceFactor(itemCategory) - categoryPriceData.AverageBuySellPriceIndex * limitValue;
		if (num > 0f)
		{
			int num2 = ((itemRosterElement.EquipmentElement.Item.ItemCategory != DefaultItemCategories.PackAnimal) ? itemRosterElement.Amount : TaleWorlds.Library.MathF.Max(0, itemRosterElement.Amount - party.MemberRoster.TotalManCount));
			float num3 = ((itemCategory.Properties == ItemCategory.Property.BonusToFoodStores) ? 1.1f : 1f);
			return num * num3 * (float)TaleWorlds.Library.MathF.Min(4000, itemRosterElement.EquipmentElement.Item.Value * num2);
		}
		return 0f;
	}

	private void SetPlayerInteraction(MobileParty mobileParty, PlayerInteraction interaction)
	{
		if (_interactedCaravans.ContainsKey(mobileParty))
		{
			_interactedCaravans[mobileParty] = interaction;
		}
		else
		{
			_interactedCaravans.Add(mobileParty, interaction);
		}
	}

	private PlayerInteraction GetPlayerInteraction(MobileParty mobileParty)
	{
		if (_interactedCaravans.TryGetValue(mobileParty, out var value))
		{
			return value;
		}
		return PlayerInteraction.None;
	}

	private float CalculateTownBuyScoreForCategory(TownMarketData marketData, int categoryIndex)
	{
		ItemCategory itemCategory = ItemCategories.All[categoryIndex];
		PriceIndexData categoryPriceData = GetCategoryPriceData(itemCategory);
		float priceFactor = marketData.GetPriceFactor(itemCategory);
		float num = categoryPriceData.AverageBuySellPriceIndex / priceFactor;
		float num2 = num * num - 1.1f;
		if (num2 > 0f)
		{
			return TaleWorlds.Library.MathF.Min(TaleWorlds.Library.MathF.Sqrt(_averageValuesCached[itemCategory]) * 3f * num2, 0.3f * (float)marketData.GetCategoryData(itemCategory).InStoreValue);
		}
		return 0f;
	}

	private PriceIndexData GetCategoryPriceData(ItemCategory category)
	{
		if (!_priceDictionary.TryGetValue(category, out var value))
		{
			return new PriceIndexData(1f, 1f);
		}
		return value;
	}

	private void RefreshTotalValueOfItemsAtCategoryForParty(MobileParty caravanParty)
	{
		_totalValueOfItemsAtCategory.Clear();
		for (int i = 0; i < caravanParty.ItemRoster.Count; i++)
		{
			ItemRosterElement elementCopyAtIndex = caravanParty.ItemRoster.GetElementCopyAtIndex(i);
			ItemObject item = elementCopyAtIndex.EquipmentElement.Item;
			int num = elementCopyAtIndex.Amount * (item.Value + 10);
			if (_totalValueOfItemsAtCategory.TryGetValue(item.ItemCategory, out var value))
			{
				_totalValueOfItemsAtCategory[item.ItemCategory] = value + num;
			}
			else
			{
				_totalValueOfItemsAtCategory.Add(item.ItemCategory, num);
			}
		}
	}

	private void SellGoods(MobileParty caravanParty, Town town, float priceIndexSellLimit = 1.1f, bool toLoseWeight = false)
	{
		int gold = town.Gold;
		int num = (int)((float)caravanParty.ItemRoster.NumberOfPackAnimals - (float)caravanParty.Party.NumberOfAllMembers * 0.6f);
		int num2 = (int)((float)caravanParty.ItemRoster.NumberOfLivestockAnimals - (float)caravanParty.Party.NumberOfAllMembers * 0.6f);
		int itemAverageWeight = Campaign.Current.Models.InventoryCapacityModel.GetItemAverageWeight();
		RefreshTotalValueOfItemsAtCategoryForParty(caravanParty);
		List<(EquipmentElement, int)> list = new List<(EquipmentElement, int)>();
		for (int i = 0; i < 2; i++)
		{
			for (int num3 = caravanParty.ItemRoster.Count - 1; num3 >= 0; num3--)
			{
				ItemRosterElement elementCopyAtIndex = caravanParty.ItemRoster.GetElementCopyAtIndex(num3);
				ItemObject item = elementCopyAtIndex.EquipmentElement.Item;
				if (_priceDictionary.TryGetValue(item.GetItemCategory(), out var value) && (i != 0 || (!item.HasHorseComponent && item.ItemCategory != DefaultItemCategories.PackAnimal)) && (i != 1 || item.HasHorseComponent || item.ItemCategory == DefaultItemCategories.PackAnimal) && (!toLoseWeight || !item.HasHorseComponent))
				{
					bool flag = item.ItemCategory == DefaultItemCategories.PackAnimal;
					if (!flag || num > 0)
					{
						bool flag2 = item.HorseComponent != null && item.HorseComponent.IsLiveStock;
						float priceFactor = town.MarketData.GetPriceFactor(elementCopyAtIndex.EquipmentElement.Item.GetItemCategory());
						float demand = town.MarketData.GetDemand(elementCopyAtIndex.EquipmentElement.Item.GetItemCategory());
						float num4 = priceFactor / value.AverageBuySellPriceIndex;
						float num5 = (Campaign.Current.GameStarted ? (TaleWorlds.Library.MathF.Sqrt((float)TaleWorlds.Library.MathF.Min(_totalValueOfItemsAtCategory[item.ItemCategory], 5000) / 5000f) * 0.4f) : 0f);
						float num6 = priceIndexSellLimit - num5;
						if (!(num4 < num6) || (num2 > 0 && flag2) || (num > 0 && flag))
						{
							float num7 = 0.8f * value.AverageBuySellPriceIndex + 0.2f * value.MinBuySellPriceIndex;
							if (!(priceFactor < num7 * num6) || (num2 > 0 && flag2) || (num > 0 && flag))
							{
								float num8 = priceFactor - num7 * num6;
								float num9 = num8 * (float)item.Value;
								float num10 = num8 * 200f;
								float num11 = num9 + num10;
								int itemPrice = town.GetItemPrice(item, caravanParty, isSelling: true);
								float num12 = ((item.ItemCategory.Properties == ItemCategory.Property.BonusToFoodStores) ? 1.1f : 1f);
								float num13 = ((item.ItemCategory == DefaultItemCategories.PackAnimal) ? 1.5f : 1f);
								float num14 = ((num4 > 1f) ? TaleWorlds.Library.MathF.Pow(num4, 0.67f) : num4) * num11 * num12 * num13 * 3f;
								if (num14 > demand * 20f)
								{
									num14 = demand * 20f;
								}
								if (num14 > 0f || (num2 > 0 && flag2) || (num > 0 && flag))
								{
									int num15 = ((num > 0 && flag) ? num : ((num2 > 0 && flag2) ? num2 : MBRandom.RoundRandomized(num14 / (float)itemPrice)));
									int amount = elementCopyAtIndex.Amount;
									if (num15 > amount)
									{
										num15 = amount;
									}
									if (num15 * itemPrice > gold)
									{
										num15 = gold / itemPrice;
									}
									if (toLoseWeight && caravanParty.ItemRoster.TotalWeight - (float)(num15 * itemAverageWeight) < (float)caravanParty.InventoryCapacity)
									{
										num15 = (int)((caravanParty.ItemRoster.TotalWeight - (float)caravanParty.InventoryCapacity) / (float)itemAverageWeight + 0.99f);
									}
									if (num15 > elementCopyAtIndex.Amount)
									{
										num15 = elementCopyAtIndex.Amount;
									}
									if (num15 * itemPrice > gold)
									{
										num15 = gold / itemPrice;
									}
									if (num15 > 0)
									{
										list.Add((elementCopyAtIndex.EquipmentElement, num15));
										if (Campaign.Current.GameStarted)
										{
											OnSellItems(caravanParty, elementCopyAtIndex, town);
										}
										SellItemsAction.Apply(caravanParty.Party, town.Owner, elementCopyAtIndex, num15, town.Owner.Settlement);
										num = (int)((float)caravanParty.ItemRoster.NumberOfPackAnimals - (float)caravanParty.Party.NumberOfAllMembers * 0.6f);
										num2 = (int)((float)caravanParty.ItemRoster.NumberOfLivestockAnimals - (float)caravanParty.Party.NumberOfAllMembers * 0.6f);
									}
								}
							}
						}
					}
				}
			}
		}
		if (!list.IsEmpty() && caravanParty.IsCaravan)
		{
			CampaignEventDispatcher.Instance.OnCaravanTransactionCompleted(caravanParty, town, list);
		}
	}

	private void OnSellItems(MobileParty caravanParty, ItemRosterElement rosterElement, Town soldTown)
	{
		int itemPrice = soldTown.GetItemPrice(rosterElement.EquipmentElement.Item, caravanParty, isSelling: true);
		if (!_tradeActionLogs.TryGetValue(caravanParty, out var value))
		{
			return;
		}
		foreach (TradeActionLog item in value)
		{
			if (item.ItemRosterElement.EquipmentElement.Item == rosterElement.EquipmentElement.Item && itemPrice > item.SellPrice)
			{
				item.OnSellAction(soldTown.Settlement, itemPrice);
			}
		}
	}

	private void BuyGoods(MobileParty caravanParty, Town town)
	{
		CaravanTotalValue(caravanParty);
		List<(EquipmentElement, int)> list = new List<(EquipmentElement, int)>();
		float capacityFactor = CalculateCapacityFactor(caravanParty);
		float budgetFactor = CalculateBudgetFactor(caravanParty);
		RefreshTotalValueOfItemsAtCategoryForParty(caravanParty);
		var (itemCategory, itemCategory2, itemCategory3, itemCategory4, itemCategory5) = MBMath.MaxElements5(ItemCategories.All, (ItemCategory x) => CalculateBuyValue(x, town, budgetFactor, capacityFactor));
		if (itemCategory != null)
		{
			BuyCategory(caravanParty, town, itemCategory, budgetFactor, capacityFactor, list);
		}
		if (itemCategory2 != null)
		{
			BuyCategory(caravanParty, town, itemCategory2, budgetFactor, capacityFactor, list);
		}
		if (itemCategory3 != null)
		{
			BuyCategory(caravanParty, town, itemCategory3, budgetFactor, capacityFactor, list);
		}
		if (itemCategory4 != null)
		{
			BuyCategory(caravanParty, town, itemCategory4, budgetFactor, capacityFactor, list);
		}
		if (itemCategory5 != null)
		{
			BuyCategory(caravanParty, town, itemCategory5, budgetFactor, capacityFactor, list);
		}
		if ((float)(caravanParty.ItemRoster.NumberOfPackAnimals + caravanParty.ItemRoster.NumberOfLivestockAnimals) < (float)caravanParty.Party.NumberOfAllMembers * 2f && caravanParty.ItemRoster.NumberOfPackAnimals < caravanParty.Party.NumberOfAllMembers && _packAnimalCategoryIndex >= 0 && caravanParty.PartyTradeGold > 1000)
		{
			BuyCategory(caravanParty, town, DefaultItemCategories.PackAnimal, budgetFactor, capacityFactor, list);
		}
		if (!list.IsEmpty())
		{
			CampaignEventDispatcher.Instance.OnCaravanTransactionCompleted(caravanParty, town, list);
		}
	}

	private float CalculateBudgetFactor(MobileParty caravanParty)
	{
		return 0.1f + TaleWorlds.Library.MathF.Clamp((float)caravanParty.PartyTradeGold / ReferenceBudgetValue, 0f, 1f);
	}

	private float CalculateCapacityFactor(MobileParty caravanParty)
	{
		float value = caravanParty.Party.ItemRoster.TotalWeight / ((float)caravanParty.InventoryCapacity + 1f);
		return 1.1f - TaleWorlds.Library.MathF.Clamp(value, 0f, 1f);
	}

	private void BuyCategory(MobileParty caravanParty, Town town, ItemCategory category, float budgetFactor, float capacityFactor, List<(EquipmentElement, int)> boughtItems)
	{
		float num = CalculateBuyValue(category, town, budgetFactor, capacityFactor);
		if (num < 7f || (caravanParty.TotalWeightCarried / (float)caravanParty.InventoryCapacity > 0.8f && !category.IsAnimal) || town.MarketData.GetCategoryData(category).InStore == 0)
		{
			return;
		}
		float num2 = TaleWorlds.Library.MathF.Min((float)caravanParty.PartyTradeGold * 0.5f, num * 1.5f);
		if (num2 > 1500f)
		{
			num2 = 1500f;
		}
		if (!Campaign.Current.GameStarted)
		{
			num2 *= 0.5f;
		}
		float num3 = num2;
		int num4;
		do
		{
			num4 = 0;
			int x2 = (int)(MBRandom.RandomFloat * (float)town.Owner.ItemRoster.Count);
			int num5 = town.Owner.ItemRoster.FindIndexFirstAfterXthElement((ItemObject x) => x.ItemCategory == category, x2);
			if (num5 < 0)
			{
				break;
			}
			ItemRosterElement elementCopyAtIndex = town.Owner.ItemRoster.GetElementCopyAtIndex(num5);
			ItemObject item = elementCopyAtIndex.EquipmentElement.Item;
			int itemPrice = town.GetItemPrice(item, caravanParty);
			int num6 = MBRandom.RoundRandomized(num3 / (float)itemPrice);
			if (num6 > elementCopyAtIndex.Amount)
			{
				num6 = elementCopyAtIndex.Amount;
			}
			if (num6 > 100)
			{
				num6 = 100;
			}
			if (!category.IsAnimal && caravanParty.TotalWeightCarried + (float)num6 * item.Weight > (float)caravanParty.InventoryCapacity)
			{
				num6 = (int)(((float)caravanParty.InventoryCapacity * 0.8f - caravanParty.TotalWeightCarried) / item.Weight);
			}
			if (elementCopyAtIndex.EquipmentElement.Item.HorseComponent != null && (elementCopyAtIndex.EquipmentElement.Item.HorseComponent.IsLiveStock || elementCopyAtIndex.EquipmentElement.Item.HorseComponent.IsPackAnimal))
			{
				int numberOfPackAnimals = caravanParty.ItemRoster.NumberOfPackAnimals;
				int numberOfLivestockAnimals = caravanParty.ItemRoster.NumberOfLivestockAnimals;
				if (elementCopyAtIndex.EquipmentElement.Item.HorseComponent.IsLiveStock && (float)(numberOfLivestockAnimals + num6) > (float)caravanParty.Party.NumberOfAllMembers * 0.6f)
				{
					num6 = (int)((float)caravanParty.Party.NumberOfAllMembers * 0.6f) - numberOfLivestockAnimals;
				}
				else if (elementCopyAtIndex.EquipmentElement.Item.HorseComponent.IsPackAnimal && numberOfPackAnimals + num6 > caravanParty.Party.NumberOfAllMembers)
				{
					num6 = caravanParty.Party.NumberOfAllMembers - numberOfPackAnimals;
				}
			}
			if (num6 <= 0)
			{
				continue;
			}
			SellItemsAction.Apply(town.Owner, caravanParty.Party, elementCopyAtIndex, num6, town.Owner.Settlement);
			boughtItems.Add((elementCopyAtIndex.EquipmentElement, -num6));
			num4 = num6;
			num3 -= (float)((num6 + 1) * itemPrice);
			Town destinationForMobileParty = GetDestinationForMobileParty(caravanParty);
			if (caravanParty.LastVisitedSettlement != null && destinationForMobileParty != null && Campaign.Current.GameStarted)
			{
				if (!_tradeActionLogs.TryGetValue(caravanParty, out var value))
				{
					value = new List<TradeActionLog>();
					_tradeActionLogs.Add(caravanParty, value);
				}
				int itemPrice2 = town.GetItemPrice(elementCopyAtIndex.EquipmentElement, caravanParty);
				value.Add(_tradeActionLogPool.CreateNewLog(town.Settlement, itemPrice2, elementCopyAtIndex));
			}
		}
		while (num3 > 0f && num4 > 0 && num4 < 100);
	}

	private int CaravanTotalValue(MobileParty caravanParty)
	{
		float num = 0f;
		for (int i = 0; i < caravanParty.ItemRoster.Count; i++)
		{
			ItemRosterElement itemRosterElement = caravanParty.ItemRoster[i];
			num += GetGlobalItemSellPrice(itemRosterElement.EquipmentElement.Item) * (float)itemRosterElement.Amount;
		}
		return (int)num + caravanParty.PartyTradeGold;
	}

	private float CalculateBuyValue(ItemCategory category, Town town, float budgetFactor, float capacityFactor)
	{
		if (!category.IsTradeGood && !category.IsAnimal)
		{
			return 0f;
		}
		if (!_priceDictionary.TryGetValue(category, out var value))
		{
			return 0f;
		}
		if (town.MarketData.GetItemCountOfCategory(category) == 0)
		{
			return 0f;
		}
		float num = 0f;
		if (Campaign.Current.GameStarted && _totalValueOfItemsAtCategory.ContainsKey(category))
		{
			num = TaleWorlds.Library.MathF.Sqrt((float)TaleWorlds.Library.MathF.Min(_totalValueOfItemsAtCategory[category], 5000) / 5000f) * 0.4f;
		}
		float itemCategoryPriceIndex = town.GetItemCategoryPriceIndex(category);
		float averageBuySellPriceIndex = value.AverageBuySellPriceIndex;
		float num2 = averageBuySellPriceIndex * (1f - num) - itemCategoryPriceIndex;
		float demand = town.MarketData.GetDemand(category);
		float num3 = 0.1f * TaleWorlds.Library.MathF.Pow(demand, 0.5f);
		if (num2 < 0f)
		{
			return 0f;
		}
		float num4 = num2 * _averageValuesCached[category];
		float num5 = num2 * 200f;
		float num6 = averageBuySellPriceIndex / itemCategoryPriceIndex;
		float num7 = ((category.Properties == ItemCategory.Property.BonusToFoodStores) ? 1.1f : 1f);
		return ((category == DefaultItemCategories.PackAnimal) ? 1.5f : 1f) * num7 * num6 * num3 * (num4 * budgetFactor + num5 * capacityFactor);
	}

	private float GetGlobalItemSellPrice(ItemObject item)
	{
		if (!_priceDictionary.TryGetValue(item.ItemCategory, out var value))
		{
			return 1f;
		}
		return value.AverageBuySellPriceIndex * (float)item.Value;
	}

	protected void AddDialogs(CampaignGameStarter starter)
	{
		starter.AddPlayerLine("caravan_companion_talk_start", "hero_main_options", "caravan_companion_talk_start", "{=q0RY0dQG}We need to talk business.", companion_is_caravan_leader_on_condition, null);
		starter.AddDialogLine("caravan_companion_talk_start_reply", "caravan_companion_talk_start", "caravan_companion_talk_start_reply", "{=9RiXgPc1}Certainly. What do you need to know?", null, null);
		starter.AddPlayerLine("caravan_companion_trade_rumors", "caravan_companion_talk_start_reply", "caravan_companion_ask_trade_rumors", "{=oMuxr3X6}What news of the markets? Any good deals to be had?", null, null);
		starter.AddDialogLine("caravan_companion_ask_trade_rumors", "caravan_companion_ask_trade_rumors", "caravan_companion_anything_else", "{=sC4ZLZ8x}{COMMENT}", null, caravan_ask_trade_rumors_on_consequence);
		starter.AddDialogLine("caravan_companion_talk_player_thank", "caravan_companion_anything_else", "caravan_companion_talk_end", "{=DQBaaC0e}Is there anything else?", null, null);
		starter.AddPlayerLine("caravan_companion_talk_not_leave", "caravan_companion_talk_end", "lord_pretalk", "{=i2FwKPmC}Yes, I wanted to talk about something else..", null, null);
		starter.AddPlayerLine("caravan_companion_talk_leave", "caravan_companion_talk_end", "close_window", "{=1IJouNaM}Carry on, then. Farewell.", null, caravan_player_leave_encounter_on_consequence);
		starter.AddPlayerLine("caravan_companion_nevermind", "caravan_companion_talk_start_reply", "lord_pretalk", "{=D33fIGQe}Never mind.", null, null);
		starter.AddDialogLine("player_caravan_talk_start", "start", "player_caravan_talk_start", "{=BsVXQEhj}How may I help you?", player_caravan_talk_start_on_condition, null);
		starter.AddPlayerLine("player_caravan_trade_rumors", "player_caravan_talk_start", "player_caravan_ask_trade_rumors", "{=shNl2Npf}What news of the markets?", null, null);
		starter.AddDialogLine("player_caravan_ask_trade_rumors", "player_caravan_ask_trade_rumors", "player_caravan_anything_else", "{=sC4ZLZ8x}{COMMENT}", null, caravan_ask_trade_rumors_on_consequence);
		starter.AddDialogLine("player_caravan_talk_player_thank", "player_caravan_anything_else", "player_caravan_talk_end", "{=DQBaaC0e}Is there anything else?", null, null);
		starter.AddPlayerLine("player_caravan_talk_not_leave", "player_caravan_talk_end", "start", "{=i2FwKPmC}Yes, I wanted to talk about something else..", null, null);
		starter.AddPlayerLine("player_caravan_talk_leave", "player_caravan_talk_end", "close_window", "{=1IJouNaM}Carry on, then. Farewell.", null, caravan_player_leave_encounter_on_consequence);
		starter.AddPlayerLine("player_caravan_nevermind", "player_caravan_talk_start", "close_window", "{=D33fIGQe}Never mind.", null, caravan_player_leave_encounter_on_consequence);
		starter.AddDialogLine("caravan_hero_leader_talk_start", "start", "caravan_talk", "{=!}{CARAVAN_GREETING}", caravan_start_talk_on_condition, null);
		starter.AddDialogLine("caravan_pretalk", "caravan_pretalk", "caravan_talk", "{=3cBfSJOI}Is there anything else?[ib:normal]", null, null);
		starter.AddPlayerLine("caravan_buy_products", "caravan_talk", "caravan_player_trade", "{=t0UGXPV4}I'm interested in trading. What kind of products do you have?", caravan_buy_products_on_condition, null);
		starter.AddPlayerLine("caravan_trade_rumors", "caravan_talk", "caravan_ask_trade_rumors", "{=b5Ucatkb}Tell me about your journeys. What news of the markets?", null, null);
		starter.AddDialogLine("caravan_ask_trade_rumors", "caravan_ask_trade_rumors", "caravan_trade_rumors_player_answer", "{=sC4ZLZ8x}{COMMENT}", null, caravan_ask_trade_rumors_on_consequence);
		starter.AddPlayerLine("caravan_trade_rumors_player_answer", "caravan_trade_rumors_player_answer", "caravan_talk_player_thank", "{=ha7EmrU9}Thank you for that information.", null, null);
		starter.AddDialogLine("caravan_talk_player_thank", "caravan_talk_player_thank", "caravan_talk", "{=BQuVWKvq}You're welcome. Is there anything we need to discuss?", null, null);
		starter.AddPlayerLine("caravan_loot", "caravan_talk", "caravan_loot_talk", "{=WOBy5UfY}Hand over your goods, or die!", caravan_loot_on_condition, null, 100, caravan_loot_on_clickable_condition);
		starter.AddPlayerLine("caravan_talk_leave", "caravan_talk", "close_window", "{=1IJouNaM}Carry on, then. Farewell.", null, caravan_talk_leave_on_consequence);
		starter.AddDialogLine("caravan_player_trade_end", "caravan_player_trade", "caravan_pretalk", "{=tlLDHAIu}Very well. A pleasure doing business with you.[rf:convo_relaxed_happy][ib:demure]", conversation_caravan_player_trade_end_on_condition, null);
		starter.AddDialogLine("caravan_player_trade_end_response", "caravan_player_trade_response", "close_window", "{=2g2FhKb5}Farewell.", null, null);
		starter.AddDialogLine("caravan_fight", "caravan_loot_talk", "caravan_do_not_bribe", "{=QNaKmkt9}We're paid to guard this caravan. If you want to rob it, it's going to be over our dead bodies![rf:idle_angry][ib:aggressive]", conversation_caravan_not_bribe_on_condition, null);
		starter.AddPlayerLine("player_decided_to_fight", "caravan_do_not_bribe", "close_window", "{=EhxS7NQ4}So be it. Attack!", null, conversation_caravan_fight_on_consequence);
		starter.AddPlayerLine("player_decided_to_not_fight_1", "caravan_do_not_bribe", "close_window", "{=bfPsE9M1}You must have misunderstood me. Go in peace.", null, caravan_talk_leave_on_consequence);
		starter.AddDialogLine("caravan_accepted_to_give_some_goods", "caravan_loot_talk", "caravan_give_some_goods", "{=dMc3SjOK}We can pay you. {TAKE_MONEY_AND_PRODUCT_STRING}[rf:idle_angry][ib:nervous]", conversation_caravan_give_goods_on_condition, null);
		starter.AddPlayerLine("player_decided_to_take_some_goods", "caravan_give_some_goods", "caravan_end_talk_bribe", "{=0Pd84h4W}I'll accept that.", null, null);
		starter.AddPlayerLine("player_decided_to_take_everything", "caravan_give_some_goods", "player_wants_everything", "{=QZ6IcCIm}I want everything you've got.", null, null);
		starter.AddPlayerLine("player_decided_to_not_fight_2", "caravan_give_some_goods", "close_window", "{=bfPsE9M1}You must have misunderstood me. Go in peace.", null, caravan_talk_leave_on_consequence);
		starter.AddDialogLine("caravan_fight_no_surrender", "player_wants_everything", "close_window", "{=3JfCwL31}You will have to fight us first![rf:idle_angry][ib:aggressive]", conversation_caravan_not_surrender_on_condition, conversation_caravan_fight_on_consequence);
		starter.AddDialogLine("caravan_accepted_to_give_everything", "player_wants_everything", "player_decision_to_take_prisoners", "{=hbtbSag8}We can't fight you. We surrender. Please don't hurt us. Take what you want.[if:idle_angry][ib:nervous]", conversation_caravan_give_goods_on_condition, null);
		starter.AddPlayerLine("player_do_not_take_prisoners", "player_decision_to_take_prisoners", "caravan_end_talk_surrender", "{=6kaia5qP}Give me all your wares!", null, null);
		starter.AddPlayerLine("player_decided_to_take_prisoner", "player_decision_to_take_prisoners", "caravan_taken_prisoner_warning_check", "{=1gv0AVUN}You are my prisoners now.", null, null);
		starter.AddDialogLine("caravan_warn_player_to_take_prisoner", "caravan_taken_prisoner_warning_check", "caravan_taken_prisoner_warning_answer", "{=NuYzgBZB}You are going too far. The {KINGDOM} won't stand for the destruction of its caravans.", conversation_warn_player_on_condition, null);
		starter.AddDialogLine("caravan_do_not_warn_player", "caravan_taken_prisoner_warning_check", "close_window", "{=BvytaDUJ}Heaven protect us from the likes of you.", null, delegate
		{
			Campaign.Current.ConversationManager.ConversationEndOneShot += player_take_prisoner_consequence;
		});
		starter.AddPlayerLine("player_decided_to_take_prisoner_continue", "caravan_taken_prisoner_warning_answer", "close_window", "{=WVkc4UgX}Continue.", null, conversation_caravan_took_prisoner_on_consequence);
		starter.AddPlayerLine("player_decided_to_take_prisoner_leave", "caravan_taken_prisoner_warning_answer", "caravan_loot_talk", "{=D33fIGQe}Never mind.", null, null);
		starter.AddDialogLine("caravan_bribery_leave", "caravan_end_talk_bribe", "close_window", "{=uPwKhAps}Can we leave now?", conversation_caravan_looted_leave_on_condition, conversation_caravan_looted_leave_on_consequence);
		starter.AddDialogLine("caravan_surrender_leave", "caravan_end_talk_surrender", "close_window", "{=uPwKhAps}Can we leave now?", conversation_caravan_looted_leave_on_condition, conversation_caravan_surrender_leave_on_consequence);
	}

	private bool companion_is_caravan_leader_on_condition()
	{
		if (Hero.OneToOneConversationHero != null && MobileParty.ConversationParty != null && MobileParty.ConversationParty.Party.Owner == Hero.MainHero && MobileParty.ConversationParty.IsCaravan)
		{
			if (!Hero.OneToOneConversationHero.IsPlayerCompanion)
			{
				return Hero.OneToOneConversationHero.Clan == Clan.PlayerClan;
			}
			return true;
		}
		return false;
	}

	private bool player_caravan_talk_start_on_condition()
	{
		if (Hero.OneToOneConversationHero == null && MobileParty.ConversationParty != null && MobileParty.ConversationParty.Party.Owner == Hero.MainHero && MobileParty.ConversationParty.IsCaravan)
		{
			return PartyBase.MainParty.Side == BattleSideEnum.Attacker;
		}
		return false;
	}

	private void player_take_prisoner_consequence()
	{
		if (MobileParty.MainParty.MapFaction.IsAtWarWith(PlayerEncounter.EncounteredMobileParty.MapFaction))
		{
			conversation_caravan_took_prisoner_on_consequence();
		}
	}

	private bool conversation_warn_player_on_condition()
	{
		IFaction mapFaction = MobileParty.ConversationParty.MapFaction;
		MBTextManager.SetTextVariable("KINGDOM", mapFaction.IsKingdomFaction ? ((Kingdom)mapFaction).EncyclopediaTitle : mapFaction.Name);
		if (PlayerEncounter.Current != null && !PlayerEncounter.LeaveEncounter)
		{
			return !MobileParty.MainParty.MapFaction.IsAtWarWith(MobileParty.ConversationParty.MapFaction);
		}
		return false;
	}

	private bool caravan_start_talk_on_condition()
	{
		if (MobileParty.ConversationParty == null || !MobileParty.ConversationParty.IsCaravan)
		{
			return false;
		}
		PlayerInteraction playerInteraction = GetPlayerInteraction(MobileParty.ConversationParty);
		SetPlayerInteraction(MobileParty.ConversationParty, PlayerInteraction.Friendly);
		switch (playerInteraction)
		{
		case PlayerInteraction.Hostile:
			MBTextManager.SetTextVariable("CARAVAN_GREETING", "{=L7AN6ybY}What do you want with us now?");
			break;
		default:
			MBTextManager.SetTextVariable("CARAVAN_GREETING", "{=Z5kqbeyu}Greetings, once again. Is there anything else?");
			break;
		case PlayerInteraction.None:
		{
			if (CharacterObject.OneToOneConversationCharacter.IsHero && PartyBase.MainParty.Side == BattleSideEnum.Attacker && MobileParty.ConversationParty.Party.Owner != Hero.MainHero)
			{
				StringHelpers.SetCharacterProperties("LEADER", CharacterObject.OneToOneConversationCharacter);
				MBTextManager.SetTextVariable("CARAVAN_GREETING", "{=afVsbikp}Greetings, traveller. How may we help you?");
				break;
			}
			MBTextManager.SetTextVariable("HOMETOWN", MobileParty.ConversationParty.HomeSettlement.EncyclopediaLinkWithName);
			StringHelpers.SetCharacterProperties("MERCHANT", MobileParty.ConversationParty.Party.Owner.CharacterObject);
			StringHelpers.SetCharacterProperties("PROTECTOR", MobileParty.ConversationParty.HomeSettlement.OwnerClan.Leader.CharacterObject);
			TextObject text = new TextObject("{=FpUybbSk}Greetings. This caravan is owned by {MERCHANT.LINK}. We trade under the protection of {PROTECTOR.LINK}, master of {HOMETOWN}. How may we help you?[if:convo_normal]");
			MBTextManager.SetTextVariable("CARAVAN_GREETING", text);
			break;
		}
		}
		return true;
	}

	private bool caravan_loot_on_condition()
	{
		if (MobileParty.ConversationParty != null && MobileParty.ConversationParty.IsCaravan && MobileParty.ConversationParty.Party.MapFaction != Hero.MainHero.MapFaction)
		{
			return MobileParty.ConversationParty.Party.Owner != Hero.MainHero;
		}
		return false;
	}

	private bool caravan_loot_on_clickable_condition(out TextObject explanation)
	{
		if (_lootedCaravans.ContainsKey(MobileParty.ConversationParty))
		{
			explanation = new TextObject("{=il2khBNl}You just looted this party.");
			return false;
		}
		explanation = TextObject.Empty;
		BribeAmount(MobileParty.ConversationParty.Party, out var gold, out var items);
		bool flag = gold > 0;
		bool flag2 = !items.IsEmpty();
		if (flag)
		{
			if (flag2)
			{
				TextObject textObject = ((items.Count == 1) ? GameTexts.FindText("str_LEFT_RIGHT") : GameTexts.FindText("str_LEFT_comma_RIGHT"));
				TextObject textObject2 = GameTexts.FindText("str_looted_party_have_money");
				textObject2.SetTextVariable("MONEY", gold);
				textObject2.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				textObject2.SetTextVariable("ITEM_LIST", textObject);
				for (int i = 0; i < items.Count; i++)
				{
					ItemRosterElement elementCopyAtIndex = items.GetElementCopyAtIndex(i);
					TextObject textObject3 = GameTexts.FindText("str_offered_item_list");
					textObject3.SetTextVariable("COUNT", elementCopyAtIndex.Amount);
					textObject3.SetTextVariable("ITEM", elementCopyAtIndex.EquipmentElement.Item.Name);
					textObject.SetTextVariable("LEFT", textObject3);
					if (items.Count == 1)
					{
						textObject.SetTextVariable("RIGHT", TextObject.Empty);
					}
					else if (items.Count - 2 > i)
					{
						TextObject textObject4 = GameTexts.FindText("str_LEFT_comma_RIGHT");
						textObject.SetTextVariable("RIGHT", textObject4);
						textObject = textObject4;
					}
					else
					{
						TextObject textObject5 = GameTexts.FindText("str_LEFT_ONLY");
						textObject.SetTextVariable("RIGHT", textObject5);
						textObject = textObject5;
					}
				}
				MBTextManager.SetTextVariable("TAKE_MONEY_AND_PRODUCT_STRING", textObject2);
			}
			else
			{
				TextObject textObject6 = GameTexts.FindText("str_looted_party_have_money_but_no_item");
				textObject6.SetTextVariable("MONEY", gold);
				textObject6.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				MBTextManager.SetTextVariable("TAKE_MONEY_AND_PRODUCT_STRING", textObject6);
			}
		}
		else if (flag2)
		{
			TextObject textObject7 = ((items.Count == 1) ? GameTexts.FindText("str_LEFT_RIGHT") : GameTexts.FindText("str_LEFT_comma_RIGHT"));
			TextObject textObject8 = GameTexts.FindText("str_looted_party_have_no_money");
			textObject8.SetTextVariable("ITEM_LIST", textObject7);
			for (int j = 0; j < items.Count; j++)
			{
				ItemRosterElement elementCopyAtIndex2 = items.GetElementCopyAtIndex(j);
				TextObject textObject9 = GameTexts.FindText("str_offered_item_list");
				textObject9.SetTextVariable("COUNT", elementCopyAtIndex2.Amount);
				textObject9.SetTextVariable("ITEM", elementCopyAtIndex2.EquipmentElement.Item.Name);
				textObject7.SetTextVariable("LEFT", textObject9);
				if (items.Count == 1)
				{
					textObject7.SetTextVariable("RIGHT", TextObject.Empty);
				}
				else if (items.Count - 2 > j)
				{
					TextObject textObject10 = GameTexts.FindText("str_LEFT_comma_RIGHT");
					textObject7.SetTextVariable("RIGHT", textObject10);
					textObject7 = textObject10;
				}
				else
				{
					TextObject textObject11 = GameTexts.FindText("str_LEFT_ONLY");
					textObject7.SetTextVariable("RIGHT", textObject11);
					textObject7 = textObject11;
				}
			}
			MBTextManager.SetTextVariable("TAKE_MONEY_AND_PRODUCT_STRING", textObject8);
		}
		if (!flag && !flag2)
		{
			explanation = new TextObject("{=pbRwAjUN}They seem to have no valuable goods.");
			return false;
		}
		return true;
	}

	private bool caravan_buy_products_on_condition()
	{
		if (MobileParty.ConversationParty != null && MobileParty.ConversationParty.IsCaravan)
		{
			for (int i = 0; i < MobileParty.ConversationParty.ItemRoster.Count; i++)
			{
				if (MobileParty.ConversationParty.ItemRoster.GetElementNumber(i) > 0)
				{
					return true;
				}
			}
		}
		return false;
	}

	private void caravan_player_leave_encounter_on_consequence()
	{
		PlayerEncounter.LeaveEncounter = true;
	}

	private void caravan_ask_trade_rumors_on_consequence()
	{
		Town destinationForMobileParty = GetDestinationForMobileParty(MobileParty.ConversationParty);
		if (MobileParty.ConversationParty.LastVisitedSettlement != null && destinationForMobileParty != null && MobileParty.ConversationParty.LastVisitedSettlement != destinationForMobileParty.Settlement)
		{
			List<(TradeActionLog, float)> list = new List<(TradeActionLog, float)>();
			if (_tradeActionLogs.TryGetValue(MobileParty.ConversationParty, out var value))
			{
				foreach (TradeActionLog item in value)
				{
					float profitRate = item.ProfitRate;
					if (profitRate > 1.2f && item.SoldSettlement != null && item.SoldSettlement != item.BoughtSettlement)
					{
						list.Add((item, profitRate));
					}
				}
			}
			if (list.Count > 0)
			{
				TradeActionLog tradeActionLog = MBRandom.ChooseWeighted(list);
				MBTextManager.SetTextVariable("ITEM_NAME", tradeActionLog.ItemRosterElement.EquipmentElement.Item.Name);
				MBTextManager.SetTextVariable("SETTLEMENT", tradeActionLog.BoughtSettlement.EncyclopediaLinkWithName);
				MBTextManager.SetTextVariable("DESTINATION", tradeActionLog.SoldSettlement.EncyclopediaLinkWithName);
				MBTextManager.SetTextVariable("BUY_COST", tradeActionLog.BuyPrice);
				MBTextManager.SetTextVariable("SELL_COST", tradeActionLog.SellPrice);
				MBTextManager.SetTextVariable("COMMENT", GameTexts.FindText("str_caravan_trade_comment"));
				if (_tradeRumorTakenCaravans.ContainsKey(MobileParty.ConversationParty) && (!_tradeRumorTakenCaravans.ContainsKey(MobileParty.ConversationParty) || !(CampaignTime.Now - _tradeRumorTakenCaravans[MobileParty.ConversationParty] >= CampaignTime.Days(1f))))
				{
					return;
				}
				List<TradeRumor> list2 = new List<TradeRumor>();
				list2.Add(new TradeRumor(destinationForMobileParty.Owner.Settlement, tradeActionLog.ItemRosterElement.EquipmentElement.Item, destinationForMobileParty.GetItemPrice(tradeActionLog.ItemRosterElement.EquipmentElement.Item), destinationForMobileParty.GetItemPrice(tradeActionLog.ItemRosterElement.EquipmentElement.Item, null, isSelling: true), 10));
				Town town = MobileParty.ConversationParty.LastVisitedSettlement.Town;
				if (town != null)
				{
					list2.Add(new TradeRumor(town.Owner.Settlement, tradeActionLog.ItemRosterElement.EquipmentElement.Item, town.GetItemPrice(tradeActionLog.ItemRosterElement.EquipmentElement.Item), town.GetItemPrice(tradeActionLog.ItemRosterElement.EquipmentElement.Item, null, isSelling: true), 10));
				}
				if (list2.Count > 0)
				{
					CampaignEventDispatcher.Instance.OnTradeRumorIsTaken(list2);
					if (_tradeRumorTakenCaravans.ContainsKey(MobileParty.ConversationParty) && CampaignTime.Now - _tradeRumorTakenCaravans[MobileParty.ConversationParty] >= CampaignTime.Days(1f))
					{
						_tradeRumorTakenCaravans[MobileParty.ConversationParty] = CampaignTime.Now;
					}
					else
					{
						_tradeRumorTakenCaravans.Add(MobileParty.ConversationParty, CampaignTime.Now);
					}
				}
			}
			else
			{
				MBTextManager.SetTextVariable("COMMENT", GameTexts.FindText("str_caravan_trade_comment_no_profit"));
			}
		}
		else
		{
			MBTextManager.SetTextVariable("COMMENT", new TextObject("{=TEUVTPIa}Well, we've been resting in town for a while, so our information is probably quite out of date."));
		}
	}

	private void caravan_talk_leave_on_consequence()
	{
		if (PlayerEncounter.Current != null)
		{
			PlayerEncounter.LeaveEncounter = true;
		}
	}

	private bool conversation_caravan_player_trade_end_on_condition()
	{
		if (MobileParty.ConversationParty != null && MobileParty.ConversationParty.IsCaravan)
		{
			InventoryManager.OpenTradeWithCaravanOrAlleyParty(MobileParty.ConversationParty);
		}
		return true;
	}

	private bool conversation_caravan_not_bribe_on_condition()
	{
		if (MobileParty.ConversationParty != null && MobileParty.ConversationParty.IsCaravan)
		{
			return !IsBribeFeasible();
		}
		return false;
	}

	private bool conversation_caravan_not_surrender_on_condition()
	{
		if (MobileParty.ConversationParty != null && MobileParty.ConversationParty.IsCaravan)
		{
			return !IsSurrenderFeasible(MobileParty.ConversationParty, MobileParty.MainParty);
		}
		return false;
	}

	private void conversation_caravan_fight_on_consequence()
	{
		SetPlayerInteraction(MobileParty.ConversationParty, PlayerInteraction.Hostile);
		PlayerEncounter.Current.IsEnemy = true;
	}

	private bool conversation_caravan_give_goods_on_condition()
	{
		if (MobileParty.ConversationParty != null)
		{
			return MobileParty.ConversationParty.IsCaravan;
		}
		return false;
	}

	private bool conversation_caravan_looted_leave_on_condition()
	{
		if (MobileParty.ConversationParty != null)
		{
			return MobileParty.ConversationParty.IsCaravan;
		}
		return false;
	}

	private void conversation_caravan_looted_leave_on_consequence()
	{
		BribeAmount(MobileParty.ConversationParty.Party, out var gold, out var items);
		GiveGoldAction.ApplyForPartyToCharacter(MobileParty.ConversationParty.Party, Hero.MainHero, gold);
		if (!items.IsEmpty())
		{
			for (int num = items.Count - 1; num >= 0; num--)
			{
				PartyBase party = MobileParty.ConversationParty.Party;
				PartyBase party2 = Hero.MainHero.PartyBelongedTo.Party;
				ItemRosterElement itemRosterElement = items[num];
				GiveItemAction.ApplyForParties(party, party2, in itemRosterElement);
			}
		}
		BeHostileAction.ApplyMinorCoercionHostileAction(PartyBase.MainParty, MobileParty.ConversationParty.Party);
		_lootedCaravans.Add(MobileParty.ConversationParty, CampaignTime.Now);
		SetPlayerInteraction(MobileParty.ConversationParty, PlayerInteraction.Hostile);
		SkillLevelingManager.OnLoot(MobileParty.MainParty, MobileParty.ConversationParty, items, attacked: false);
		PlayerEncounter.LeaveEncounter = true;
	}

	private void conversation_caravan_surrender_leave_on_consequence()
	{
		ItemRoster itemRoster = new ItemRoster(MobileParty.ConversationParty.ItemRoster);
		bool flag = false;
		for (int i = 0; i < itemRoster.Count; i++)
		{
			if (itemRoster.GetElementNumber(i) > 0)
			{
				flag = true;
				break;
			}
		}
		if (flag)
		{
			InventoryManager.OpenScreenAsLoot(new Dictionary<PartyBase, ItemRoster> { 
			{
				PartyBase.MainParty,
				itemRoster
			} });
			MobileParty.ConversationParty.ItemRoster.Clear();
		}
		int num = TaleWorlds.Library.MathF.Max(MobileParty.ConversationParty.PartyTradeGold, 0);
		if (num > 0)
		{
			GiveGoldAction.ApplyForPartyToCharacter(MobileParty.ConversationParty.Party, Hero.MainHero, num);
		}
		BeHostileAction.ApplyMajorCoercionHostileAction(PartyBase.MainParty, MobileParty.ConversationParty.Party);
		_lootedCaravans.Add(MobileParty.ConversationParty, CampaignTime.Now);
		SkillLevelingManager.OnLoot(MobileParty.MainParty, MobileParty.ConversationParty, itemRoster, attacked: false);
		PlayerEncounter.LeaveEncounter = true;
	}

	private void conversation_caravan_took_prisoner_on_consequence()
	{
		MobileParty encounteredMobileParty = PlayerEncounter.EncounteredMobileParty;
		ItemRoster itemRoster = new ItemRoster(encounteredMobileParty.ItemRoster);
		bool flag = false;
		for (int i = 0; i < itemRoster.Count; i++)
		{
			if (itemRoster.GetElementNumber(i) > 0)
			{
				flag = true;
				break;
			}
		}
		if (flag)
		{
			InventoryManager.OpenScreenAsLoot(new Dictionary<PartyBase, ItemRoster> { 
			{
				PartyBase.MainParty,
				itemRoster
			} });
			encounteredMobileParty.ItemRoster.Clear();
		}
		int num = TaleWorlds.Library.MathF.Max(encounteredMobileParty.PartyTradeGold, 0);
		if (num > 0)
		{
			GiveGoldAction.ApplyForPartyToCharacter(encounteredMobileParty.Party, Hero.MainHero, num);
		}
		BeHostileAction.ApplyEncounterHostileAction(PartyBase.MainParty, encounteredMobileParty.Party);
		TroopRoster troopRoster = TroopRoster.CreateDummyTroopRoster();
		foreach (TroopRosterElement item in encounteredMobileParty.MemberRoster.GetTroopRoster())
		{
			troopRoster.AddToCounts(item.Character, item.Number);
		}
		PartyScreenManager.OpenScreenAsLoot(TroopRoster.CreateDummyTroopRoster(), troopRoster, encounteredMobileParty.Name, troopRoster.TotalManCount);
		SkillLevelingManager.OnLoot(MobileParty.MainParty, encounteredMobileParty, itemRoster, attacked: false);
		DestroyPartyAction.Apply(MobileParty.MainParty.Party, encounteredMobileParty);
		PlayerEncounter.LeaveEncounter = true;
	}

	private bool IsBribeFeasible()
	{
		int num = (PartyBaseHelper.DoesSurrenderIsLogicalForParty(MobileParty.ConversationParty, MobileParty.MainParty) ? 33 : 67);
		if (Hero.MainHero.GetPerkValue(DefaultPerks.Roguery.Scarface))
		{
			num = TaleWorlds.Library.MathF.Round((float)num * (1f - DefaultPerks.Roguery.Scarface.PrimaryBonus));
		}
		if (MobileParty.ConversationParty.Party.RandomIntWithSeed(5u, 100) > 100 - num)
		{
			return false;
		}
		return PartyBaseHelper.DoesSurrenderIsLogicalForParty(MobileParty.ConversationParty, MobileParty.MainParty, 0.6f);
	}

	private bool IsSurrenderFeasible(MobileParty conversationParty, MobileParty mainParty)
	{
		int num = (PartyBaseHelper.DoesSurrenderIsLogicalForParty(MobileParty.ConversationParty, MobileParty.MainParty) ? 33 : 67);
		if (Hero.MainHero.GetPerkValue(DefaultPerks.Roguery.Scarface))
		{
			num = TaleWorlds.Library.MathF.Round((float)num * (1f - DefaultPerks.Roguery.Scarface.PrimaryBonus));
		}
		if (conversationParty.Party.RandomIntWithSeed(7u, 100) > 100 - num)
		{
			return false;
		}
		return PartyBaseHelper.DoesSurrenderIsLogicalForParty(MobileParty.ConversationParty, MobileParty.MainParty);
	}

	private void BribeAmount(PartyBase party, out int gold, out ItemRoster items)
	{
		int num = 0;
		ItemRoster itemRoster = new ItemRoster();
		bool flag = false;
		for (int i = 0; i < MobileParty.ConversationParty.ItemRoster.Count; i++)
		{
			num += MobileParty.ConversationParty.ItemRoster.GetElementUnitCost(i) * MobileParty.ConversationParty.ItemRoster.GetElementNumber(i);
			flag = true;
		}
		num += MobileParty.ConversationParty.PartyTradeGold;
		int num2 = TaleWorlds.Library.MathF.Min((int)((float)num * 0.05f), 2000);
		int num3 = TaleWorlds.Library.MathF.Min(MobileParty.ConversationParty.PartyTradeGold, num2);
		if (num3 < num2 && flag)
		{
			for (int j = 0; j < MobileParty.ConversationParty.ItemRoster.Count; j++)
			{
				ItemRosterElement elementCopyAtIndex = MobileParty.ConversationParty.ItemRoster.GetElementCopyAtIndex(j);
				if (elementCopyAtIndex.EquipmentElement.ItemValue * elementCopyAtIndex.Amount < num2 - num3)
				{
					continue;
				}
				if (elementCopyAtIndex.EquipmentElement.Item.Type == ItemObject.ItemTypeEnum.Goods)
				{
					if (!itemRoster.IsEmpty())
					{
						itemRoster.Clear();
					}
					itemRoster.AddToCounts(elementCopyAtIndex.EquipmentElement.Item, elementCopyAtIndex.Amount);
					break;
				}
				if (itemRoster.IsEmpty())
				{
					itemRoster.AddToCounts(elementCopyAtIndex.EquipmentElement.Item, elementCopyAtIndex.Amount);
				}
			}
			if (itemRoster.IsEmpty())
			{
				int num4 = num2 - num3;
				for (int k = 0; k < MobileParty.ConversationParty.ItemRoster.Count; k++)
				{
					if (num4 <= 0)
					{
						break;
					}
					ItemRosterElement randomElement = MobileParty.ConversationParty.ItemRoster.GetRandomElement();
					num4 -= randomElement.Amount * randomElement.EquipmentElement.ItemValue;
					itemRoster.AddToCounts(randomElement.EquipmentElement.Item, randomElement.Amount);
				}
			}
		}
		gold = num3;
		items = itemRoster;
	}
}
