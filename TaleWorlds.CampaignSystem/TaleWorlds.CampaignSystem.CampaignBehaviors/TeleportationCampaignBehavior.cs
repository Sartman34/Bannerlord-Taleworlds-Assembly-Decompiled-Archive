using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapNotificationTypes;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CampaignBehaviors;

public class TeleportationCampaignBehavior : CampaignBehaviorBase, ITeleportationCampaignBehavior, ICampaignBehavior
{
	public class TeleportationCampaignBehaviorTypeDefiner : SaveableTypeDefiner
	{
		public TeleportationCampaignBehaviorTypeDefiner()
			: base(151000)
		{
		}

		protected override void DefineClassTypes()
		{
			AddClassDefinition(typeof(TeleportationData), 1);
		}

		protected override void DefineContainerDefinitions()
		{
			ConstructContainerDefinition(typeof(List<TeleportationData>));
		}
	}

	internal class TeleportationData
	{
		[SaveableField(1)]
		public Hero TeleportingHero;

		[SaveableField(2)]
		public CampaignTime TeleportationTime;

		[SaveableField(3)]
		public Settlement TargetSettlement;

		[SaveableField(4)]
		public bool IsGovernor;

		[SaveableField(5)]
		public MobileParty TargetParty;

		[SaveableField(6)]
		public bool IsPartyLeader;

		public TeleportationData(Hero teleportingHero, Settlement targetSettlement, bool isGovernor)
		{
			TeleportingHero = teleportingHero;
			TeleportationTime = CampaignTime.HoursFromNow(Campaign.Current.Models.DelayedTeleportationModel.GetTeleportationDelayAsHours(teleportingHero, targetSettlement.Party).ResultNumber);
			TargetSettlement = targetSettlement;
			IsGovernor = isGovernor;
			TargetParty = null;
			IsPartyLeader = false;
		}

		public TeleportationData(Hero teleportingHero, MobileParty targetParty, bool isPartyLeader)
		{
			TeleportingHero = teleportingHero;
			TeleportationTime = CampaignTime.HoursFromNow(Campaign.Current.Models.DelayedTeleportationModel.GetTeleportationDelayAsHours(teleportingHero, targetParty.Party).ResultNumber);
			TargetParty = targetParty;
			IsPartyLeader = isPartyLeader;
			TargetSettlement = null;
			IsGovernor = false;
		}

		internal static void AutoGeneratedStaticCollectObjectsTeleportationData(object o, List<object> collectedObjects)
		{
			((TeleportationData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(TeleportingHero);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(TeleportationTime, collectedObjects);
			collectedObjects.Add(TargetSettlement);
			collectedObjects.Add(TargetParty);
		}

		internal static object AutoGeneratedGetMemberValueTeleportingHero(object o)
		{
			return ((TeleportationData)o).TeleportingHero;
		}

		internal static object AutoGeneratedGetMemberValueTeleportationTime(object o)
		{
			return ((TeleportationData)o).TeleportationTime;
		}

		internal static object AutoGeneratedGetMemberValueTargetSettlement(object o)
		{
			return ((TeleportationData)o).TargetSettlement;
		}

		internal static object AutoGeneratedGetMemberValueIsGovernor(object o)
		{
			return ((TeleportationData)o).IsGovernor;
		}

		internal static object AutoGeneratedGetMemberValueTargetParty(object o)
		{
			return ((TeleportationData)o).TargetParty;
		}

		internal static object AutoGeneratedGetMemberValueIsPartyLeader(object o)
		{
			return ((TeleportationData)o).IsPartyLeader;
		}
	}

	private List<TeleportationData> _teleportationList = new List<TeleportationData>();

	private TextObject _partyLeaderChangeNotificationText => new TextObject("{=QSaufZ9i}One of your parties has lost its leader. It will disband after a day has passed. You can assign a new clan member to lead it, if you wish to keep the party.");

	public override void RegisterEvents()
	{
		CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, HourlyTick);
		CampaignEvents.DailyTickPartyEvent.AddNonSerializedListener(this, DailyTickParty);
		CampaignEvents.HeroComesOfAgeEvent.AddNonSerializedListener(this, OnHeroComesOfAge);
		CampaignEvents.MobilePartyDestroyed.AddNonSerializedListener(this, OnMobilePartyDestroyed);
		CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, OnSettlementOwnerChanged);
		CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, OnHeroKilled);
		CampaignEvents.OnPartyDisbandStartedEvent.AddNonSerializedListener(this, OnPartyDisbandStarted);
		CampaignEvents.OnGovernorChangedEvent.AddNonSerializedListener(this, OnGovernorChanged);
		CampaignEvents.OnHeroTeleportationRequestedEvent.AddNonSerializedListener(this, OnHeroTeleportationRequested);
		CampaignEvents.OnPartyDisbandedEvent.AddNonSerializedListener(this, OnPartyDisbanded);
		CampaignEvents.OnClanLeaderChangedEvent.AddNonSerializedListener(this, OnClanLeaderChanged);
	}

	public override void SyncData(IDataStore dataStore)
	{
		dataStore.SyncData("_teleportationList", ref _teleportationList);
	}

	public bool GetTargetOfTeleportingHero(Hero teleportingHero, out bool isGovernor, out bool isPartyLeader, out IMapPoint target)
	{
		isGovernor = false;
		isPartyLeader = false;
		target = null;
		for (int i = 0; i < _teleportationList.Count; i++)
		{
			TeleportationData teleportationData = _teleportationList[i];
			if (teleportationData.TeleportingHero == teleportingHero)
			{
				if (teleportationData.TargetSettlement != null)
				{
					isGovernor = teleportationData.IsGovernor;
					target = teleportationData.TargetSettlement;
					return true;
				}
				if (teleportationData.TargetParty != null)
				{
					isPartyLeader = teleportationData.IsPartyLeader;
					target = teleportationData.TargetParty;
					return true;
				}
			}
		}
		return false;
	}

	public CampaignTime GetHeroArrivalTimeToDestination(Hero teleportingHero)
	{
		return _teleportationList.FirstOrDefaultQ((TeleportationData x) => x.TeleportingHero == teleportingHero)?.TeleportationTime ?? CampaignTime.Never;
	}

	private void HourlyTick()
	{
		for (int num = _teleportationList.Count - 1; num >= 0; num--)
		{
			TeleportationData teleportationData = _teleportationList[num];
			if (teleportationData.TeleportationTime.IsPast && CanApplyImmediateTeleportation(teleportationData))
			{
				TeleportationData data = teleportationData;
				RemoveTeleportationData(teleportationData, isCanceled: false);
				ApplyImmediateTeleport(data);
			}
		}
	}

	private void DailyTickParty(MobileParty mobileParty)
	{
		if (mobileParty.IsActive && mobileParty.Army == null && mobileParty.MapEvent == null && mobileParty.LeaderHero != null && mobileParty.LeaderHero.IsNoncombatant && mobileParty.ActualClan != null && mobileParty.ActualClan != Clan.PlayerClan && mobileParty.ActualClan.Leader != mobileParty.LeaderHero)
		{
			MBList<Hero> mBList = mobileParty.ActualClan.Heroes.WhereQ((Hero h) => h.IsActive && h.IsCommander && h.PartyBelongedTo == null).ToMBList();
			if (!mBList.IsEmpty())
			{
				Hero leaderHero = mobileParty.LeaderHero;
				mobileParty.RemovePartyLeader();
				MakeHeroFugitiveAction.Apply(leaderHero);
				TeleportHeroAction.ApplyDelayedTeleportToPartyAsPartyLeader(mBList.GetRandomElementInefficiently(), mobileParty);
			}
		}
	}

	private void OnHeroComesOfAge(Hero hero)
	{
		if (hero.Clan == Clan.PlayerClan || hero.IsNoncombatant)
		{
			return;
		}
		foreach (WarPartyComponent warPartyComponent in hero.Clan.WarPartyComponents)
		{
			MobileParty mobileParty = warPartyComponent.MobileParty;
			if (mobileParty != null && mobileParty.Army == null && mobileParty.MapEvent == null && mobileParty.LeaderHero != null && mobileParty.LeaderHero.IsNoncombatant)
			{
				Hero leaderHero = mobileParty.LeaderHero;
				mobileParty.RemovePartyLeader();
				MakeHeroFugitiveAction.Apply(leaderHero);
				TeleportHeroAction.ApplyDelayedTeleportToPartyAsPartyLeader(hero, warPartyComponent.Party.MobileParty);
				break;
			}
		}
	}

	private void OnMobilePartyDestroyed(MobileParty mobileParty, PartyBase destroyerParty)
	{
		for (int num = _teleportationList.Count - 1; num >= 0; num--)
		{
			TeleportationData teleportationData = _teleportationList[num];
			if (teleportationData.TargetParty != null && teleportationData.TargetParty == mobileParty)
			{
				RemoveTeleportationData(teleportationData, isCanceled: true);
			}
		}
	}

	private void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
	{
		for (int num = _teleportationList.Count - 1; num >= 0; num--)
		{
			TeleportationData teleportationData = _teleportationList[num];
			if (teleportationData.TargetSettlement != null && teleportationData.TargetSettlement == settlement && newOwner.Clan != teleportationData.TeleportingHero.Clan)
			{
				RemoveTeleportationData(teleportationData, isCanceled: true);
			}
		}
	}

	private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification = true)
	{
		for (int num = _teleportationList.Count - 1; num >= 0; num--)
		{
			TeleportationData teleportationData = _teleportationList[num];
			if (teleportationData.TeleportingHero == victim)
			{
				RemoveTeleportationData(teleportationData, isCanceled: true);
			}
		}
	}

	private void OnPartyDisbandStarted(MobileParty disbandParty)
	{
		if (disbandParty.ActualClan == Clan.PlayerClan && disbandParty.LeaderHero == null && (disbandParty.IsLordParty || disbandParty.IsCaravan))
		{
			Campaign.Current.CampaignInformationManager.NewMapNoticeAdded(new PartyLeaderChangeNotification(disbandParty, _partyLeaderChangeNotificationText));
		}
		for (int num = _teleportationList.Count - 1; num >= 0; num--)
		{
			TeleportationData teleportationData = _teleportationList[num];
			if (teleportationData.TargetParty != null && teleportationData.TargetParty == disbandParty)
			{
				RemoveTeleportationData(teleportationData, isCanceled: true, disbandTargetParty: false);
			}
		}
	}

	private void OnGovernorChanged(Town fortification, Hero oldGovernor, Hero newGovernor)
	{
		for (int num = _teleportationList.Count - 1; num >= 0; num--)
		{
			TeleportationData teleportationData = _teleportationList[num];
			if (teleportationData.TeleportingHero != newGovernor && teleportationData.IsGovernor && teleportationData.TargetSettlement.Town == fortification)
			{
				teleportationData.IsGovernor = false;
			}
		}
	}

	private void OnHeroTeleportationRequested(Hero hero, Settlement targetSettlement, MobileParty targetParty, TeleportHeroAction.TeleportationDetail detail)
	{
		switch (detail)
		{
		case TeleportHeroAction.TeleportationDetail.DelayedTeleportToSettlement:
		case TeleportHeroAction.TeleportationDetail.DelayedTeleportToSettlementAsGovernor:
			_teleportationList.Add(new TeleportationData(hero, targetSettlement, detail == TeleportHeroAction.TeleportationDetail.DelayedTeleportToSettlementAsGovernor));
			break;
		case TeleportHeroAction.TeleportationDetail.DelayedTeleportToPartyAsPartyLeader:
		{
			for (int num2 = _teleportationList.Count - 1; num2 >= 0; num2--)
			{
				TeleportationData teleportationData2 = _teleportationList[num2];
				if (teleportationData2.TargetParty == targetParty && teleportationData2.IsPartyLeader)
				{
					RemoveTeleportationData(teleportationData2, isCanceled: true, disbandTargetParty: false);
				}
			}
			goto case TeleportHeroAction.TeleportationDetail.DelayedTeleportToParty;
		}
		case TeleportHeroAction.TeleportationDetail.DelayedTeleportToParty:
			_teleportationList.Add(new TeleportationData(hero, targetParty, detail == TeleportHeroAction.TeleportationDetail.DelayedTeleportToPartyAsPartyLeader));
			break;
		case TeleportHeroAction.TeleportationDetail.ImmediateTeleportToSettlement:
		{
			for (int num = _teleportationList.Count - 1; num >= 0; num--)
			{
				TeleportationData teleportationData = _teleportationList[num];
				if (hero == teleportationData.TeleportingHero && teleportationData.TargetSettlement == targetSettlement)
				{
					RemoveTeleportationData(teleportationData, isCanceled: true, disbandTargetParty: false);
				}
			}
			break;
		}
		}
	}

	private void OnPartyDisbanded(MobileParty disbandParty, Settlement relatedSettlement)
	{
		for (int num = _teleportationList.Count - 1; num >= 0; num--)
		{
			TeleportationData teleportationData = _teleportationList[num];
			if (teleportationData.TargetParty != null && teleportationData.TargetParty == disbandParty)
			{
				RemoveTeleportationData(teleportationData, isCanceled: true);
			}
		}
	}

	private void OnClanLeaderChanged(Hero oldLeader, Hero newLeader)
	{
		for (int num = _teleportationList.Count - 1; num >= 0; num--)
		{
			TeleportationData teleportationData = _teleportationList[num];
			if (teleportationData.TeleportingHero == newLeader && !teleportationData.IsPartyLeader)
			{
				RemoveTeleportationData(teleportationData, isCanceled: true);
			}
		}
	}

	private void RemoveTeleportationData(TeleportationData data, bool isCanceled, bool disbandTargetParty = true)
	{
		_teleportationList.Remove(data);
		if (!isCanceled)
		{
			return;
		}
		if (data.TeleportingHero.IsTraveling && data.TeleportingHero.DeathMark == KillCharacterAction.KillCharacterActionDetail.None)
		{
			MakeHeroFugitiveAction.Apply(data.TeleportingHero);
		}
		if (data.TargetParty == null)
		{
			return;
		}
		if (data.TargetParty.ActualClan == Clan.PlayerClan)
		{
			CampaignEventDispatcher.Instance.OnPartyLeaderChangeOfferCanceled(data.TargetParty);
		}
		if (disbandTargetParty && data.TargetParty.IsActive && data.IsPartyLeader)
		{
			IDisbandPartyCampaignBehavior behavior = Campaign.Current.CampaignBehaviorManager.GetBehavior<IDisbandPartyCampaignBehavior>();
			if (behavior != null && !behavior.IsPartyWaitingForDisband(data.TargetParty))
			{
				DisbandPartyAction.StartDisband(data.TargetParty);
			}
		}
	}

	private bool CanApplyImmediateTeleportation(TeleportationData data)
	{
		if ((data.TargetSettlement != null && !data.TargetSettlement.IsUnderSiege && !data.TargetSettlement.IsUnderRaid) || (data.TargetParty != null && data.TargetParty.MapEvent == null && !data.TargetParty.IsCurrentlyEngagingParty))
		{
			return true;
		}
		return false;
	}

	private void ApplyImmediateTeleport(TeleportationData data)
	{
		if (data.TargetSettlement != null)
		{
			if (data.IsGovernor)
			{
				data.TargetSettlement.Town.Governor = data.TeleportingHero;
				TeleportHeroAction.ApplyImmediateTeleportToSettlement(data.TeleportingHero, data.TargetSettlement);
			}
			else
			{
				TeleportHeroAction.ApplyImmediateTeleportToSettlement(data.TeleportingHero, data.TargetSettlement);
			}
		}
		else if (data.TargetParty != null)
		{
			if (data.IsPartyLeader)
			{
				TeleportHeroAction.ApplyImmediateTeleportToPartyAsPartyLeader(data.TeleportingHero, data.TargetParty);
			}
			else
			{
				TeleportHeroAction.ApplyImmediateTeleportToParty(data.TeleportingHero, data.TargetParty);
			}
		}
	}
}
