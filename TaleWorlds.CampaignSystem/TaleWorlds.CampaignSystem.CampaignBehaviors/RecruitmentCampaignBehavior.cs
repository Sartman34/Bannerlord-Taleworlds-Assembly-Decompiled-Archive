using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.AgentOrigins;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CampaignBehaviors;

public class RecruitmentCampaignBehavior : CampaignBehaviorBase
{
	public class RecruitmentCampaignBehaviorTypeDefiner : SaveableTypeDefiner
	{
		public RecruitmentCampaignBehaviorTypeDefiner()
			: base(881200)
		{
		}

		protected override void DefineClassTypes()
		{
			AddClassDefinition(typeof(TownMercenaryData), 1);
		}

		protected override void DefineContainerDefinitions()
		{
			ConstructContainerDefinition(typeof(Dictionary<Town, TownMercenaryData>));
		}
	}

	internal class TownMercenaryData
	{
		[SaveableField(204)]
		private readonly Town _currentTown;

		[SaveableProperty(202)]
		public CharacterObject TroopType { get; private set; }

		[SaveableProperty(203)]
		public int Number { get; private set; }

		public TownMercenaryData(Town currentTown)
		{
			_currentTown = currentTown;
		}

		public void ChangeMercenaryType(CharacterObject troopType, int number)
		{
			if (troopType != TroopType)
			{
				CharacterObject troopType2 = TroopType;
				TroopType = troopType;
				Number = number;
				CampaignEventDispatcher.Instance.OnMercenaryTroopChangedInTown(_currentTown, troopType2, TroopType);
			}
			else if (Number != number)
			{
				int difference = number - Number;
				ChangeMercenaryCount(difference);
			}
		}

		public void ChangeMercenaryCount(int difference)
		{
			if (difference != 0)
			{
				int number = Number;
				Number += difference;
				CampaignEventDispatcher.Instance.OnMercenaryNumberChangedInTown(_currentTown, number, Number);
			}
		}

		public bool HasAvailableMercenary(Occupation occupation = Occupation.NotAssigned)
		{
			if (TroopType != null && Number > 0)
			{
				if (occupation != 0)
				{
					return TroopType.Occupation == occupation;
				}
				return true;
			}
			return false;
		}

		internal static void AutoGeneratedStaticCollectObjectsTownMercenaryData(object o, List<object> collectedObjects)
		{
			((TownMercenaryData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(_currentTown);
			collectedObjects.Add(TroopType);
		}

		internal static object AutoGeneratedGetMemberValueTroopType(object o)
		{
			return ((TownMercenaryData)o).TroopType;
		}

		internal static object AutoGeneratedGetMemberValueNumber(object o)
		{
			return ((TownMercenaryData)o).Number;
		}

		internal static object AutoGeneratedGetMemberValue_currentTown(object o)
		{
			return ((TownMercenaryData)o)._currentTown;
		}
	}

	public enum RecruitingDetail
	{
		MercenaryFromTavern,
		VolunteerFromIndividual,
		VolunteerFromIndividualToGarrison,
		VolunteerFromMap
	}

	private Dictionary<Town, TownMercenaryData> _townMercenaryData = new Dictionary<Town, TownMercenaryData>();

	private int _selectedMercenaryCount;

	private CharacterObject _selectedTroop;

	public override void RegisterEvents()
	{
		CampaignEvents.SettlementEntered.AddNonSerializedListener(this, OnSettlementEntered);
		CampaignEvents.LocationCharactersAreReadyToSpawnEvent.AddNonSerializedListener(this, LocationCharactersAreReadyToSpawn);
		CampaignEvents.OnSessionLaunchedEvent.AddNonSerializedListener(this, OnSessionLaunched);
		CampaignEvents.DailyTickTownEvent.AddNonSerializedListener(this, DailyTickTown);
		CampaignEvents.DailyTickSettlementEvent.AddNonSerializedListener(this, DailyTickSettlement);
		CampaignEvents.HourlyTickPartyEvent.AddNonSerializedListener(this, HourlyTickParty);
		CampaignEvents.MercenaryNumberChangedInTown.AddNonSerializedListener(this, OnMercenaryNumberChanged);
		CampaignEvents.MercenaryTroopChangedInTown.AddNonSerializedListener(this, OnMercenaryTroopChanged);
		CampaignEvents.OnNewGameCreatedPartialFollowUpEndEvent.AddNonSerializedListener(this, OnNewGameCreatedPartialFollowUpEnd);
		CampaignEvents.OnUnitRecruitedEvent.AddNonSerializedListener(this, OnUnitRecruited);
		CampaignEvents.OnTroopRecruitedEvent.AddNonSerializedListener(this, OnTroopRecruited);
	}

	private void DailyTickSettlement(Settlement settlement)
	{
		UpdateVolunteersOfNotablesInSettlement(settlement);
	}

	public override void SyncData(IDataStore dataStore)
	{
		dataStore.SyncData("_selectedTroop", ref _selectedTroop);
		dataStore.SyncData("_townMercenaryData", ref _townMercenaryData);
	}

	private TownMercenaryData GetMercenaryData(Town town)
	{
		if (!_townMercenaryData.TryGetValue(town, out var value))
		{
			value = new TownMercenaryData(town);
			_townMercenaryData.Add(town, value);
		}
		return value;
	}

	private void OnNewGameCreatedPartialFollowUpEnd(CampaignGameStarter starter)
	{
		foreach (Town allTown in Town.AllTowns)
		{
			UpdateCurrentMercenaryTroopAndCount(allTown, forceUpdate: true);
		}
		foreach (Settlement item in Settlement.All)
		{
			UpdateVolunteersOfNotablesInSettlement(item);
		}
	}

	private void OnTroopRecruited(Hero recruiter, Settlement settlement, Hero recruitmentSource, CharacterObject troop, int count)
	{
		if (recruiter != null && recruiter.PartyBelongedTo != null && recruiter.GetPerkValue(DefaultPerks.Leadership.FamousCommander))
		{
			recruiter.PartyBelongedTo.MemberRoster.AddXpToTroop((int)DefaultPerks.Leadership.FamousCommander.SecondaryBonus * count, troop);
		}
		SkillLevelingManager.OnTroopRecruited(recruiter, count, troop.Tier);
		if (recruiter != null && recruiter.PartyBelongedTo != null && troop.Occupation == Occupation.Bandit)
		{
			SkillLevelingManager.OnBanditsRecruited(recruiter.PartyBelongedTo, troop, count);
		}
	}

	private void OnUnitRecruited(CharacterObject troop, int count)
	{
		if (Hero.MainHero.GetPerkValue(DefaultPerks.Leadership.FamousCommander))
		{
			MobileParty.MainParty.MemberRoster.AddXpToTroop((int)DefaultPerks.Leadership.FamousCommander.SecondaryBonus * count, troop);
		}
		SkillLevelingManager.OnTroopRecruited(Hero.MainHero, count, troop.Tier);
		if (troop.Occupation == Occupation.Bandit)
		{
			SkillLevelingManager.OnBanditsRecruited(MobileParty.MainParty, troop, count);
		}
	}

	private void DailyTickTown(Town town)
	{
		UpdateCurrentMercenaryTroopAndCount(town, (int)CampaignTime.Now.ToDays % 2 == 0);
	}

	private void OnSessionLaunched(CampaignGameStarter campaignGameStarter)
	{
		AddGameMenus(campaignGameStarter);
		AddDialogs(campaignGameStarter);
	}

	private void OnMercenaryNumberChanged(Town town, int oldNumber, int newNumber)
	{
		CheckIfMercenaryCharacterNeedsToRefresh(town.Owner.Settlement, GetMercenaryData(town).TroopType);
	}

	private void OnMercenaryTroopChanged(Town town, CharacterObject oldTroopType, CharacterObject newTroopType)
	{
		CheckIfMercenaryCharacterNeedsToRefresh(town.Owner.Settlement, oldTroopType);
	}

	private void UpdateVolunteersOfNotablesInSettlement(Settlement settlement)
	{
		if ((!settlement.IsTown || settlement.Town.InRebelliousState) && (!settlement.IsVillage || settlement.Village.Bound.Town.InRebelliousState))
		{
			return;
		}
		foreach (Hero notable in settlement.Notables)
		{
			if (!notable.CanHaveRecruits || !notable.IsAlive)
			{
				continue;
			}
			bool flag = false;
			CharacterObject basicVolunteer = Campaign.Current.Models.VolunteerModel.GetBasicVolunteer(notable);
			for (int i = 0; i < 6; i++)
			{
				if (!(MBRandom.RandomFloat < Campaign.Current.Models.VolunteerModel.GetDailyVolunteerProductionProbability(notable, i, settlement)))
				{
					continue;
				}
				CharacterObject characterObject = notable.VolunteerTypes[i];
				if (characterObject == null)
				{
					notable.VolunteerTypes[i] = basicVolunteer;
					flag = true;
				}
				else if (characterObject.UpgradeTargets.Length != 0 && characterObject.Tier < Campaign.Current.Models.VolunteerModel.MaxVolunteerTier)
				{
					float num = MathF.Log(notable.Power / (float)characterObject.Tier, 2f) * 0.01f;
					if (MBRandom.RandomFloat < num)
					{
						notable.VolunteerTypes[i] = characterObject.UpgradeTargets[MBRandom.RandomInt(characterObject.UpgradeTargets.Length)];
						flag = true;
					}
				}
			}
			if (!flag)
			{
				continue;
			}
			CharacterObject[] volunteerTypes = notable.VolunteerTypes;
			for (int j = 1; j < 6; j++)
			{
				CharacterObject characterObject2 = volunteerTypes[j];
				if (characterObject2 == null)
				{
					continue;
				}
				int num2 = 0;
				int num3 = j - 1;
				CharacterObject characterObject3 = volunteerTypes[num3];
				while (num3 >= 0 && (characterObject3 == null || (float)characterObject2.Level + (characterObject2.IsMounted ? 0.5f : 0f) < (float)characterObject3.Level + (characterObject3.IsMounted ? 0.5f : 0f)))
				{
					if (characterObject3 == null)
					{
						num3--;
						num2++;
						if (num3 >= 0)
						{
							characterObject3 = volunteerTypes[num3];
						}
						continue;
					}
					volunteerTypes[num3 + 1 + num2] = characterObject3;
					num3--;
					num2 = 0;
					if (num3 >= 0)
					{
						characterObject3 = volunteerTypes[num3];
					}
				}
				volunteerTypes[num3 + 1 + num2] = characterObject2;
			}
		}
	}

	public void HourlyTickParty(MobileParty mobileParty)
	{
		if ((!mobileParty.IsCaravan && !mobileParty.IsLordParty) || mobileParty.MapEvent != null || mobileParty == MobileParty.MainParty)
		{
			return;
		}
		Settlement currentSettlementOfMobilePartyForAICalculation = MobilePartyHelper.GetCurrentSettlementOfMobilePartyForAICalculation(mobileParty);
		if (currentSettlementOfMobilePartyForAICalculation != null)
		{
			if ((currentSettlementOfMobilePartyForAICalculation.IsVillage && !currentSettlementOfMobilePartyForAICalculation.IsRaided && !currentSettlementOfMobilePartyForAICalculation.IsUnderRaid) || (currentSettlementOfMobilePartyForAICalculation.IsTown && !currentSettlementOfMobilePartyForAICalculation.IsUnderSiege))
			{
				CheckRecruiting(mobileParty, currentSettlementOfMobilePartyForAICalculation);
			}
		}
		else
		{
			if (!(MBRandom.RandomFloat < 0.05f) || mobileParty.LeaderHero == null || mobileParty.ActualClan == Clan.PlayerClan || mobileParty.IsCaravan)
			{
				return;
			}
			IFaction mapFaction = mobileParty.MapFaction;
			if (mapFaction == null || !mapFaction.IsMinorFaction || !(MobileParty.MainParty.Position2D.DistanceSquared(mobileParty.Position2D) > (MobileParty.MainParty.SeeingRange + 5f) * (MobileParty.MainParty.SeeingRange + 5f)))
			{
				return;
			}
			int partySizeLimit = mobileParty.Party.PartySizeLimit;
			float num = (float)mobileParty.Party.NumberOfAllMembers / (float)partySizeLimit;
			float num2 = (((double)num < 0.2) ? 1000f : (((double)num < 0.3) ? 2000f : (((double)num < 0.4) ? 3000f : (((double)num < 0.55) ? 4000f : (((double)num < 0.7) ? 5000f : 7000f)))));
			float num3 = (((float)mobileParty.LeaderHero.Gold > num2) ? 1f : MathF.Sqrt((float)mobileParty.LeaderHero.Gold / num2));
			if (MBRandom.RandomFloat < (1f - num) * num3)
			{
				CharacterObject basicTroop = mobileParty.ActualClan.BasicTroop;
				int num4 = MBRandom.RandomInt(3, 8);
				if (num4 + mobileParty.Party.NumberOfAllMembers > partySizeLimit)
				{
					num4 = partySizeLimit - mobileParty.Party.NumberOfAllMembers;
				}
				int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(basicTroop, mobileParty.LeaderHero);
				if (num4 * troopRecruitmentCost > mobileParty.LeaderHero.Gold)
				{
					num4 = mobileParty.LeaderHero.Gold / troopRecruitmentCost;
				}
				if (num4 > 0)
				{
					GetRecruitVolunteerFromMap(mobileParty, basicTroop, num4);
				}
			}
		}
	}

	private void UpdateCurrentMercenaryTroopAndCount(Town town, bool forceUpdate = false)
	{
		TownMercenaryData mercenaryData = GetMercenaryData(town);
		if (!forceUpdate && mercenaryData.HasAvailableMercenary())
		{
			int difference = FindNumberOfMercenariesWillBeAdded(mercenaryData.TroopType, dailyUpdate: true);
			mercenaryData.ChangeMercenaryCount(difference);
			return;
		}
		if (MBRandom.RandomFloat < Campaign.Current.Models.TavernMercenaryTroopsModel.RegularMercenariesSpawnChance)
		{
			CharacterObject randomElementInefficiently = town.Culture.BasicMercenaryTroops.GetRandomElementInefficiently();
			_selectedTroop = null;
			float num = FindTotalMercenaryProbability(randomElementInefficiently, 1f);
			float randomValueRemaining = MBRandom.RandomFloat * num;
			FindRandomMercenaryTroop(randomElementInefficiently, 1f, randomValueRemaining);
			int number = FindNumberOfMercenariesWillBeAdded(_selectedTroop);
			mercenaryData.ChangeMercenaryType(_selectedTroop, number);
			return;
		}
		CharacterObject caravanGuard = town.Culture.CaravanGuard;
		if (caravanGuard != null)
		{
			_selectedTroop = null;
			float num2 = FindTotalMercenaryProbability(caravanGuard, 1f);
			float randomValueRemaining2 = MBRandom.RandomFloat * num2;
			FindRandomMercenaryTroop(caravanGuard, 1f, randomValueRemaining2);
			int number2 = FindNumberOfMercenariesWillBeAdded(_selectedTroop);
			mercenaryData.ChangeMercenaryType(_selectedTroop, number2);
		}
	}

	private float FindTotalMercenaryProbability(CharacterObject mercenaryTroop, float probabilityOfTroop)
	{
		float num = probabilityOfTroop;
		CharacterObject[] upgradeTargets = mercenaryTroop.UpgradeTargets;
		foreach (CharacterObject mercenaryTroop2 in upgradeTargets)
		{
			num += FindTotalMercenaryProbability(mercenaryTroop2, probabilityOfTroop / 1.5f);
		}
		return num;
	}

	private float FindRandomMercenaryTroop(CharacterObject mercenaryTroop, float probabilityOfTroop, float randomValueRemaining)
	{
		randomValueRemaining -= probabilityOfTroop;
		if (randomValueRemaining <= 1E-05f && _selectedTroop == null)
		{
			_selectedTroop = mercenaryTroop;
			return 1f;
		}
		float num = probabilityOfTroop;
		CharacterObject[] upgradeTargets = mercenaryTroop.UpgradeTargets;
		foreach (CharacterObject mercenaryTroop2 in upgradeTargets)
		{
			float num2 = FindRandomMercenaryTroop(mercenaryTroop2, probabilityOfTroop / 1.5f, randomValueRemaining);
			randomValueRemaining -= num2;
			num += num2;
		}
		return num;
	}

	private int FindNumberOfMercenariesWillBeAdded(CharacterObject character, bool dailyUpdate = false)
	{
		int tier = Campaign.Current.Models.CharacterStatsModel.GetTier(character);
		int maxCharacterTier = Campaign.Current.Models.CharacterStatsModel.MaxCharacterTier;
		int num = (maxCharacterTier - tier) * 2;
		int num2 = (maxCharacterTier - tier) * 5;
		float randomFloat = MBRandom.RandomFloat;
		float randomFloat2 = MBRandom.RandomFloat;
		return MBRandom.RoundRandomized(MBMath.ClampFloat((randomFloat * randomFloat2 * (float)(num2 - num) + (float)num) * (dailyUpdate ? 0.1f : 1f), 1f, num2));
	}

	private void CheckIfMercenaryCharacterNeedsToRefresh(Settlement settlement, CharacterObject oldTroopType)
	{
		if (!settlement.IsTown || settlement != Settlement.CurrentSettlement || PlayerEncounter.LocationEncounter == null || settlement.LocationComplex == null || (CampaignMission.Current != null && GameStateManager.Current.ActiveState == CampaignMission.Current.State))
		{
			return;
		}
		if (oldTroopType != null)
		{
			Settlement.CurrentSettlement.LocationComplex.GetLocationWithId("tavern").RemoveAllCharacters((LocationCharacter x) => x.Character.Occupation == oldTroopType.Occupation);
		}
		AddMercenaryCharacterToTavern(settlement);
	}

	private void AddMercenaryCharacterToTavern(Settlement settlement)
	{
		if (settlement.LocationComplex != null && settlement.IsTown && GetMercenaryData(settlement.Town).HasAvailableMercenary())
		{
			Settlement.CurrentSettlement.LocationComplex.GetLocationWithId("tavern")?.AddLocationCharacters(CreateMercenary, settlement.Culture, LocationCharacter.CharacterRelations.Neutral, 1);
		}
	}

	private void CheckRecruiting(MobileParty mobileParty, Settlement settlement)
	{
		if (settlement.IsTown && mobileParty.IsCaravan)
		{
			TownMercenaryData mercenaryData = GetMercenaryData(settlement.Town);
			if (!mercenaryData.HasAvailableMercenary(Occupation.CaravanGuard) && !mercenaryData.HasAvailableMercenary(Occupation.Mercenary))
			{
				return;
			}
			int partySizeLimit = mobileParty.Party.PartySizeLimit;
			if (mobileParty.Party.NumberOfAllMembers >= partySizeLimit)
			{
				return;
			}
			CharacterObject troopType = mercenaryData.TroopType;
			int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(troopType, mobileParty.LeaderHero);
			int num = (mobileParty.IsCaravan ? 2000 : 0);
			if (mobileParty.PartyTradeGold <= troopRecruitmentCost + num)
			{
				return;
			}
			bool flag = true;
			double num2 = 0.0;
			for (int i = 0; i < mercenaryData.Number; i++)
			{
				if (flag)
				{
					int num3 = mobileParty.PartyTradeGold - (troopRecruitmentCost + num);
					float num4 = MathF.Min(1f, MathF.Sqrt((float)num3 / (100f * (float)troopRecruitmentCost)));
					float num5 = (float)mobileParty.Party.NumberOfAllMembers / (float)partySizeLimit;
					float num6 = (MathF.Min(10f, 1f / num5) * MathF.Min(10f, 1f / num5) - 1f) * ((mobileParty.IsCaravan && mobileParty.Party.Owner == Hero.MainHero) ? 0.4f : 0.1f);
					num2 = num4 * num6;
				}
				if ((double)MBRandom.RandomFloat < num2)
				{
					ApplyRecruitMercenary(mobileParty, settlement, troopType, 1);
					flag = true;
				}
				else
				{
					flag = false;
				}
			}
		}
		else
		{
			if (!mobileParty.IsLordParty || mobileParty.IsDisbanding || mobileParty.LeaderHero == null || mobileParty.Party.IsStarving || !((float)mobileParty.LeaderHero.Gold > HeroHelper.StartRecruitingMoneyLimit(mobileParty.LeaderHero)) || (mobileParty.LeaderHero != mobileParty.LeaderHero.Clan.Leader && !((float)mobileParty.LeaderHero.Clan.Gold > HeroHelper.StartRecruitingMoneyLimitForClanLeader(mobileParty.LeaderHero))) || !(((float)mobileParty.Party.NumberOfAllMembers + 0.5f) / (float)mobileParty.LimitedPartySize <= 1f))
			{
				return;
			}
			if (settlement.IsTown && GetMercenaryData(settlement.Town).HasAvailableMercenary(Occupation.Mercenary))
			{
				float num7 = (float)mobileParty.Party.NumberOfAllMembers / (float)mobileParty.LimitedPartySize;
				CharacterObject troopType2 = GetMercenaryData(settlement.Town).TroopType;
				if (troopType2 != null)
				{
					int troopRecruitmentCost2 = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(troopType2, mobileParty.LeaderHero);
					if (troopRecruitmentCost2 < 5000)
					{
						float num8 = MathF.Min(1f, (float)mobileParty.LeaderHero.Gold / ((troopRecruitmentCost2 <= 100) ? 100000f : ((float)((troopRecruitmentCost2 <= 200) ? 125000 : ((troopRecruitmentCost2 <= 400) ? 150000 : ((troopRecruitmentCost2 <= 700) ? 175000 : ((troopRecruitmentCost2 <= 1100) ? 200000 : ((troopRecruitmentCost2 <= 1600) ? 250000 : ((troopRecruitmentCost2 <= 2200) ? 300000 : 400000)))))))));
						float num9 = num8 * num8;
						float num10 = MathF.Max(1f, MathF.Min(10f, 1f / num7)) - 1f;
						float num11 = num9 * num10 * 0.25f;
						int number = GetMercenaryData(settlement.Town).Number;
						int num12 = 0;
						for (int j = 0; j < number; j++)
						{
							if (MBRandom.RandomFloat < num11)
							{
								num12++;
							}
						}
						num12 = MathF.Min(num12, mobileParty.LimitedPartySize - mobileParty.Party.NumberOfAllMembers);
						num12 = (((double)troopRecruitmentCost2 <= 0.1) ? num12 : MathF.Min(mobileParty.LeaderHero.Gold / troopRecruitmentCost2, num12));
						if (num12 > 0)
						{
							ApplyRecruitMercenary(mobileParty, settlement, troopType2, num12);
						}
					}
				}
			}
			if (mobileParty.Party.NumberOfAllMembers < mobileParty.LimitedPartySize && mobileParty.CanPayMoreWage())
			{
				RecruitVolunteersFromNotable(mobileParty, settlement);
			}
		}
	}

	private void RecruitVolunteersFromNotable(MobileParty mobileParty, Settlement settlement)
	{
		if (!(((float)mobileParty.Party.NumberOfAllMembers + 0.5f) / (float)mobileParty.LimitedPartySize <= 1f))
		{
			return;
		}
		foreach (Hero notable in settlement.Notables)
		{
			if (!notable.IsAlive)
			{
				continue;
			}
			if (mobileParty.IsWageLimitExceeded())
			{
				break;
			}
			int num = MBRandom.RandomInt(6);
			int num2 = Campaign.Current.Models.VolunteerModel.MaximumIndexHeroCanRecruitFromHero(mobileParty.IsGarrison ? mobileParty.Party.Owner : mobileParty.LeaderHero, notable);
			for (int i = num; i < num + 6; i++)
			{
				int num3 = i % 6;
				if (num3 >= num2)
				{
					break;
				}
				int num4 = ((mobileParty.LeaderHero != null) ? ((int)MathF.Sqrt((float)mobileParty.LeaderHero.Gold / 10000f)) : 0);
				float num5 = MBRandom.RandomFloat;
				for (int j = 0; j < num4; j++)
				{
					float randomFloat = MBRandom.RandomFloat;
					if (randomFloat > num5)
					{
						num5 = randomFloat;
					}
				}
				if (mobileParty.Army != null)
				{
					float y = ((mobileParty.Army.LeaderParty == mobileParty) ? 0.5f : 0.67f);
					num5 = MathF.Pow(num5, y);
				}
				float num6 = (float)mobileParty.Party.NumberOfAllMembers / (float)mobileParty.LimitedPartySize;
				if (num5 > num6 - 0.1f)
				{
					CharacterObject characterObject = notable.VolunteerTypes[num3];
					if (characterObject != null && mobileParty.LeaderHero.Gold > Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(characterObject, mobileParty.LeaderHero) && mobileParty.PaymentLimit >= mobileParty.TotalWage + Campaign.Current.Models.PartyWageModel.GetCharacterWage(characterObject))
					{
						GetRecruitVolunteerFromIndividual(mobileParty, characterObject, notable, num3);
						break;
					}
				}
			}
		}
	}

	public void OnSettlementEntered(MobileParty mobileParty, Settlement settlement, Hero hero)
	{
		if (mobileParty == null || mobileParty.MapEvent != null)
		{
			return;
		}
		if (!settlement.IsVillage)
		{
			Clan ownerClan = settlement.OwnerClan;
			if (ownerClan == null || ownerClan.IsAtWarWith(mobileParty.MapFaction))
			{
				return;
			}
		}
		if (settlement.IsRaided || settlement.IsUnderRaid)
		{
			return;
		}
		int num = (mobileParty.IsCaravan ? 1 : ((mobileParty.Army != null && mobileParty.Army == MobileParty.MainParty.Army) ? ((MobileParty.MainParty.PartySizeRatio < 0.6f) ? 1 : ((MobileParty.MainParty.PartySizeRatio < 0.9f) ? 2 : 3)) : 7));
		List<MobileParty> list = new List<MobileParty>();
		if (mobileParty.Army != null && mobileParty.Army.LeaderParty == mobileParty)
		{
			foreach (MobileParty party in mobileParty.Army.Parties)
			{
				if ((party == mobileParty.Army.LeaderParty || party.AttachedTo == mobileParty.Army.LeaderParty) && party != MobileParty.MainParty)
				{
					list.Add(party);
				}
			}
		}
		else if (mobileParty.AttachedTo == null && mobileParty != MobileParty.MainParty)
		{
			list.Add(mobileParty);
		}
		for (int i = 0; i < num; i++)
		{
			foreach (MobileParty item in list)
			{
				CheckRecruiting(item, settlement);
			}
		}
	}

	private void ApplyInternal(MobileParty side1Party, Settlement settlement, Hero individual, CharacterObject troop, int number, int bitCode, RecruitingDetail detail)
	{
		int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(troop, side1Party.LeaderHero);
		switch (detail)
		{
		case RecruitingDetail.MercenaryFromTavern:
			if (side1Party.IsCaravan)
			{
				side1Party.PartyTradeGold -= number * troopRecruitmentCost;
				GetMercenaryData(settlement.Town).ChangeMercenaryCount(-number);
			}
			else
			{
				GiveGoldAction.ApplyBetweenCharacters(side1Party.LeaderHero, null, number * troopRecruitmentCost, disableNotification: true);
				GetMercenaryData(settlement.Town).ChangeMercenaryCount(-number);
			}
			side1Party.AddElementToMemberRoster(troop, number);
			break;
		case RecruitingDetail.VolunteerFromIndividual:
			GiveGoldAction.ApplyBetweenCharacters(side1Party.LeaderHero, null, troopRecruitmentCost, disableNotification: true);
			individual.VolunteerTypes[bitCode] = null;
			side1Party.AddElementToMemberRoster(troop, 1);
			break;
		case RecruitingDetail.VolunteerFromMap:
			GiveGoldAction.ApplyBetweenCharacters(side1Party.LeaderHero, null, number * troopRecruitmentCost, disableNotification: true);
			side1Party.AddElementToMemberRoster(troop, number);
			break;
		case RecruitingDetail.VolunteerFromIndividualToGarrison:
			individual.VolunteerTypes[bitCode] = null;
			side1Party.AddElementToMemberRoster(troop, 1);
			break;
		}
		CampaignEventDispatcher.Instance.OnTroopRecruited(side1Party.LeaderHero, settlement, individual, troop, number);
	}

	private void ApplyRecruitMercenary(MobileParty side1Party, Settlement side2Party, CharacterObject subject, int number)
	{
		ApplyInternal(side1Party, side2Party, null, subject, number, -1, RecruitingDetail.MercenaryFromTavern);
	}

	private void GetRecruitVolunteerFromMap(MobileParty side1Party, CharacterObject subject, int number)
	{
		ApplyInternal(side1Party, null, null, subject, number, -1, RecruitingDetail.VolunteerFromMap);
	}

	private void GetRecruitVolunteerFromIndividual(MobileParty side1Party, CharacterObject subject, Hero individual, int bitCode)
	{
		ApplyInternal(side1Party, individual.CurrentSettlement, individual, subject, 1, bitCode, RecruitingDetail.VolunteerFromIndividual);
	}

	private void LocationCharactersAreReadyToSpawn(Dictionary<string, int> unusedUsablePointCount)
	{
		Settlement settlement = PlayerEncounter.LocationEncounter.Settlement;
		Location locationWithId = settlement.LocationComplex.GetLocationWithId("tavern");
		if (CampaignMission.Current.Location == locationWithId)
		{
			AddMercenaryCharacterToTavern(settlement);
		}
	}

	private LocationCharacter CreateMercenary(CultureObject culture, LocationCharacter.CharacterRelations relation)
	{
		CharacterObject troopType = GetMercenaryData(PlayerEncounter.EncounterSettlement.Town).TroopType;
		Monster monsterWithSuffix = FaceGen.GetMonsterWithSuffix(troopType.Race, "_settlement");
		return new LocationCharacter(new AgentData(new SimpleAgentOrigin(troopType)).Monster(monsterWithSuffix).NoHorses(noHorses: true), SandBoxManager.Instance.AgentBehaviorManager.AddOutdoorWandererBehaviors, "spawnpoint_mercenary", fixedLocation: true, relation, null, useCivilianEquipment: false);
	}

	protected void AddGameMenus(CampaignGameStarter campaignGameSystemStarter)
	{
		campaignGameSystemStarter.AddGameMenuOption("town_backstreet", "recruit_mercenaries", "{=NwO0CVzn}Recruit {MEN_COUNT} {MERCENARY_NAME} ({TOTAL_AMOUNT}{GOLD_ICON})", buy_mercenaries_condition, delegate
		{
			buy_mercenaries_on_consequence();
		}, isLeave: false, 2);
	}

	protected void AddDialogs(CampaignGameStarter campaignGameStarter)
	{
		campaignGameStarter.AddDialogLine("mercenary_recruit_start", "start", "mercenary_tavern_talk", "{=I0StkXlK}Do you have a need for fighters, {?PLAYER.GENDER}madam{?}sir{\\?}? Me and {?PLURAL}{MERCENARY_COUNT} of my mates{?}one of my mates{\\?} are looking for a master. You might call us mercenaries, like. We'll join you for {GOLD_AMOUNT}{GOLD_ICON}", conversation_mercenary_recruit_plural_start_on_condition, null);
		campaignGameStarter.AddDialogLine("mercenary_recruit_start_single", "start", "mercenary_tavern_talk", "{=rJwExPKb}Do you have a need for fighters, {?PLAYER.GENDER}madam{?}sir{\\?}? I am looking for a master. I'll join you for {GOLD_AMOUNT}{GOLD_ICON}", conversation_mercenary_recruit_single_start_on_condition, null);
		campaignGameStarter.AddPlayerLine("mercenary_recruit_accept", "mercenary_tavern_talk", "mercenary_tavern_talk_hire", "{=PDLDvUfH}All right. I will hire {?PLURAL}all of you{?}you{\\?}. Here is {GOLD_AMOUNT}{GOLD_ICON}", conversation_mercenary_recruit_accept_on_condition, conversation_mercenary_recruit_accept_on_consequence);
		campaignGameStarter.AddPlayerLine("mercenary_recruit_accept_some", "mercenary_tavern_talk", "mercenary_tavern_talk_hire", "{=aTPc7AkY}All right. But I can only hire {MERCENARY_COUNT} of you. Here is {GOLD_AMOUNT}{GOLD_ICON}", conversation_mercenary_recruit_accept_some_on_condition, conversation_mercenary_recruit_accept_some_on_consequence);
		campaignGameStarter.AddPlayerLine("mercenary_recruit_reject_gold", "mercenary_tavern_talk", "close_window", "{=n5BGNLrc}That sounds good. But I can't afford any more men right now.", conversation_mercenary_recruit_reject_gold_on_condition, null);
		campaignGameStarter.AddPlayerLine("mercenary_recruit_reject", "mercenary_tavern_talk", "close_window", "{=I2thb8VU}Sorry. I don't need any other men right now.", conversation_mercenary_recruit_dont_need_men_on_condition, null);
		campaignGameStarter.AddDialogLine("mercenary_recruit_end", "mercenary_tavern_talk_hire", "close_window", "{=vbxQoyN3}{RANDOM_HIRE_SENTENCE}", conversation_mercenary_recruit_end_on_condition, null);
		campaignGameStarter.AddDialogLine("mercenary_recruit_start_2", "start", "close_window", "{=Jhj437BV}Don't worry, I'll be ready. Just having a last drink for the road.", conversation_mercenary_recruited_on_condition, null);
	}

	private bool buy_mercenaries_condition(MenuCallbackArgs args)
	{
		if (MobileParty.MainParty.CurrentSettlement != null && MobileParty.MainParty.CurrentSettlement.IsTown && GetMercenaryData(MobileParty.MainParty.CurrentSettlement.Town).Number > 0)
		{
			TownMercenaryData mercenaryData = GetMercenaryData(MobileParty.MainParty.CurrentSettlement.Town);
			int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(mercenaryData.TroopType, Hero.MainHero);
			if (Hero.MainHero.Gold >= troopRecruitmentCost)
			{
				int num = MathF.Min(mercenaryData.Number, Hero.MainHero.Gold / troopRecruitmentCost);
				MBTextManager.SetTextVariable("MEN_COUNT", num);
				MBTextManager.SetTextVariable("MERCENARY_NAME", mercenaryData.TroopType.Name);
				MBTextManager.SetTextVariable("TOTAL_AMOUNT", num * troopRecruitmentCost);
			}
			else
			{
				args.Tooltip = GameTexts.FindText("str_decision_not_enough_gold");
				args.IsEnabled = false;
				int number = mercenaryData.Number;
				MBTextManager.SetTextVariable("MEN_COUNT", number);
				MBTextManager.SetTextVariable("MERCENARY_NAME", mercenaryData.TroopType.Name);
				MBTextManager.SetTextVariable("TOTAL_AMOUNT", number * troopRecruitmentCost);
			}
			args.optionLeaveType = GameMenuOption.LeaveType.Bribe;
			return true;
		}
		return false;
	}

	private void buy_mercenaries_on_consequence()
	{
		if (MobileParty.MainParty.CurrentSettlement != null && MobileParty.MainParty.CurrentSettlement.IsTown && GetMercenaryData(MobileParty.MainParty.CurrentSettlement.Town).Number > 0)
		{
			TownMercenaryData mercenaryData = GetMercenaryData(MobileParty.MainParty.CurrentSettlement.Town);
			int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(mercenaryData.TroopType, Hero.MainHero);
			if (Hero.MainHero.Gold >= troopRecruitmentCost)
			{
				int num = MathF.Min(mercenaryData.Number, Hero.MainHero.Gold / troopRecruitmentCost);
				MobileParty.MainParty.MemberRoster.AddToCounts(mercenaryData.TroopType, num);
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, -(num * troopRecruitmentCost));
				mercenaryData.ChangeMercenaryCount(-num);
				GameMenu.SwitchToMenu("town_backstreet");
			}
		}
	}

	private bool conversation_mercenary_recruit_plural_start_on_condition()
	{
		if (PlayerEncounter.EncounterSettlement == null || !PlayerEncounter.EncounterSettlement.IsTown)
		{
			return false;
		}
		TownMercenaryData mercenaryData = GetMercenaryData(PlayerEncounter.EncounterSettlement.Town);
		int num;
		if ((CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.Mercenary || CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.CaravanGuard || CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.Gangster) && PlayerEncounter.EncounterSettlement != null && PlayerEncounter.EncounterSettlement.IsTown)
		{
			num = ((mercenaryData.Number > 1) ? 1 : 0);
			if (num != 0)
			{
				int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(mercenaryData.TroopType, Hero.MainHero);
				MBTextManager.SetTextVariable("PLURAL", (mercenaryData.Number - 1 > 1) ? 1 : 0);
				MBTextManager.SetTextVariable("MERCENARY_COUNT", mercenaryData.Number - 1);
				MBTextManager.SetTextVariable("GOLD_AMOUNT", troopRecruitmentCost * mercenaryData.Number);
			}
		}
		else
		{
			num = 0;
		}
		return (byte)num != 0;
	}

	private bool conversation_mercenary_recruit_single_start_on_condition()
	{
		if (PlayerEncounter.EncounterSettlement == null || !PlayerEncounter.EncounterSettlement.IsTown)
		{
			return false;
		}
		TownMercenaryData mercenaryData = GetMercenaryData(PlayerEncounter.EncounterSettlement.Town);
		int num;
		if ((CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.Mercenary || CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.CaravanGuard || CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.Gangster) && PlayerEncounter.EncounterSettlement != null && PlayerEncounter.EncounterSettlement.IsTown)
		{
			num = ((mercenaryData.Number == 1) ? 1 : 0);
			if (num != 0)
			{
				int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(mercenaryData.TroopType, Hero.MainHero);
				MBTextManager.SetTextVariable("GOLD_AMOUNT", mercenaryData.Number * troopRecruitmentCost);
			}
		}
		else
		{
			num = 0;
		}
		return (byte)num != 0;
	}

	private bool conversation_mercenary_recruit_accept_on_condition()
	{
		TownMercenaryData mercenaryData = GetMercenaryData(PlayerEncounter.EncounterSettlement.Town);
		int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(mercenaryData.TroopType, Hero.MainHero);
		MBTextManager.SetTextVariable("PLURAL", (mercenaryData.Number > 1) ? 1 : 0);
		return Hero.MainHero.Gold >= mercenaryData.Number * troopRecruitmentCost;
	}

	private bool conversation_mercenary_recruited_on_condition()
	{
		if (CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.Mercenary || CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.CaravanGuard || CharacterObject.OneToOneConversationCharacter.Occupation == Occupation.Gangster)
		{
			return PlayerEncounter.EncounterSettlement != null;
		}
		return false;
	}

	private void BuyMercenaries()
	{
		GetMercenaryData(PlayerEncounter.EncounterSettlement.Town).ChangeMercenaryCount(-_selectedMercenaryCount);
		int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(GetMercenaryData(PlayerEncounter.EncounterSettlement.Town).TroopType, Hero.MainHero);
		MobileParty.MainParty.AddElementToMemberRoster(CharacterObject.OneToOneConversationCharacter, _selectedMercenaryCount);
		int amount = _selectedMercenaryCount * troopRecruitmentCost;
		GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, null, amount);
		CampaignEventDispatcher.Instance.OnUnitRecruited(CharacterObject.OneToOneConversationCharacter, _selectedMercenaryCount);
	}

	private void conversation_mercenary_recruit_accept_on_consequence()
	{
		_selectedMercenaryCount = GetMercenaryData(PlayerEncounter.EncounterSettlement.Town).Number;
		BuyMercenaries();
	}

	private bool conversation_mercenary_recruit_accept_some_on_condition()
	{
		int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(GetMercenaryData(PlayerEncounter.EncounterSettlement.Town).TroopType, Hero.MainHero);
		if (Hero.MainHero.Gold >= troopRecruitmentCost && Hero.MainHero.Gold < GetMercenaryData(PlayerEncounter.EncounterSettlement.Town).Number * troopRecruitmentCost)
		{
			_selectedMercenaryCount = 0;
			while (Hero.MainHero.Gold >= troopRecruitmentCost * (_selectedMercenaryCount + 1))
			{
				_selectedMercenaryCount++;
			}
			MBTextManager.SetTextVariable("MERCENARY_COUNT", _selectedMercenaryCount);
			MBTextManager.SetTextVariable("GOLD_AMOUNT", troopRecruitmentCost * _selectedMercenaryCount);
			return true;
		}
		return false;
	}

	private void conversation_mercenary_recruit_accept_some_on_consequence()
	{
		BuyMercenaries();
	}

	private bool conversation_mercenary_recruit_reject_gold_on_condition()
	{
		int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(GetMercenaryData(PlayerEncounter.EncounterSettlement.Town).TroopType, Hero.MainHero);
		return Hero.MainHero.Gold < troopRecruitmentCost;
	}

	private bool conversation_mercenary_recruit_dont_need_men_on_condition()
	{
		int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(GetMercenaryData(PlayerEncounter.EncounterSettlement.Town).TroopType, Hero.MainHero);
		return Hero.MainHero.Gold >= troopRecruitmentCost;
	}

	private bool conversation_mercenary_recruit_end_on_condition()
	{
		MBTextManager.SetTextVariable("RANDOM_HIRE_SENTENCE", GameTexts.FindText("str_mercenary_tavern_talk_hire", MBRandom.RandomInt(4).ToString()));
		return true;
	}
}
