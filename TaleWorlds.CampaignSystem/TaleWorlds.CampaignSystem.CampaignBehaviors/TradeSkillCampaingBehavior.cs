using System.Collections.Generic;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Inventory;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CampaignBehaviors;

public class TradeSkillCampaingBehavior : CampaignBehaviorBase, IPlayerTradeBehavior
{
	public class TradeSkillCampaingBehaviorTypeDefiner : SaveableTypeDefiner
	{
		public TradeSkillCampaingBehaviorTypeDefiner()
			: base(150794)
		{
		}

		protected override void DefineStructTypes()
		{
			AddStructDefinition(typeof(ItemTradeData), 10);
		}

		protected override void DefineContainerDefinitions()
		{
			ConstructContainerDefinition(typeof(Dictionary<ItemObject, ItemTradeData>));
		}
	}

	internal struct ItemTradeData
	{
		[SaveableField(10)]
		public readonly float AveragePrice;

		[SaveableField(20)]
		public readonly int NumItemsPurchased;

		public ItemTradeData(float averagePrice, int numItemsPurchased)
		{
			AveragePrice = averagePrice;
			NumItemsPurchased = numItemsPurchased;
		}

		public static void AutoGeneratedStaticCollectObjectsItemTradeData(object o, List<object> collectedObjects)
		{
			((ItemTradeData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		internal static object AutoGeneratedGetMemberValueAveragePrice(object o)
		{
			return ((ItemTradeData)o).AveragePrice;
		}

		internal static object AutoGeneratedGetMemberValueNumItemsPurchased(object o)
		{
			return ((ItemTradeData)o).NumItemsPurchased;
		}
	}

	private Dictionary<ItemObject, ItemTradeData> ItemsTradeData = new Dictionary<ItemObject, ItemTradeData>();

	private void RecordPurchases(ItemRosterElement itemRosterElement, int totalPrice)
	{
		if (!ItemsTradeData.TryGetValue(itemRosterElement.EquipmentElement.Item, out var value))
		{
			value = default(ItemTradeData);
		}
		int num = value.NumItemsPurchased + itemRosterElement.Amount;
		float averagePrice = (value.AveragePrice * (float)value.NumItemsPurchased + (float)totalPrice) / MathF.Max(0.0001f, (float)num);
		ItemsTradeData[itemRosterElement.EquipmentElement.Item] = new ItemTradeData(averagePrice, num);
	}

	private int RecordSales(ItemRosterElement itemRosterElement, int totalPrice)
	{
		bool flag = false;
		if (ItemsTradeData.TryGetValue(itemRosterElement.EquipmentElement.Item, out var value))
		{
			flag = true;
		}
		else
		{
			value = default(ItemTradeData);
		}
		int num = MathF.Min(value.NumItemsPurchased, itemRosterElement.Amount);
		int num2 = value.NumItemsPurchased - num;
		float f = (float)num * value.AveragePrice;
		float num3 = (float)totalPrice / MathF.Max(0.001f, (float)itemRosterElement.Amount);
		int num4 = MathF.Round((float)num * num3);
		int result = MathF.Max(0, num4 - MathF.Floor(f));
		if (num2 == 0)
		{
			if (flag)
			{
				ItemsTradeData.Remove(itemRosterElement.EquipmentElement.Item);
				return result;
			}
		}
		else
		{
			ItemsTradeData[itemRosterElement.EquipmentElement.Item] = new ItemTradeData(value.AveragePrice, num2);
		}
		return result;
	}

	private int GetAveragePriceForItem(ItemRosterElement itemRosterElement)
	{
		if (!ItemsTradeData.TryGetValue(itemRosterElement.EquipmentElement.Item, out var value))
		{
			return 0;
		}
		return MathF.Round(value.AveragePrice);
	}

	public override void RegisterEvents()
	{
		CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, InventoryUpdated);
	}

	private void InventoryUpdated(List<(ItemRosterElement, int)> purchasedItems, List<(ItemRosterElement, int)> soldItems, bool isTrading)
	{
		if (!isTrading)
		{
			return;
		}
		foreach (var purchasedItem in purchasedItems)
		{
			ProcessPurchases(purchasedItem.Item1, purchasedItem.Item2);
		}
		int num = 0;
		foreach (var soldItem in soldItems)
		{
			num += ProcessSales(soldItem.Item1, soldItem.Item2);
		}
		SkillLevelingManager.OnTradeProfitMade(PartyBase.MainParty, num);
		CampaignEventDispatcher.Instance.OnPlayerTradeProfit(num);
	}

	private int ProcessSales(ItemRosterElement itemRosterElement, int totalPrice)
	{
		if (itemRosterElement.EquipmentElement.ItemModifier == null)
		{
			return RecordSales(itemRosterElement, totalPrice);
		}
		return 0;
	}

	private void ProcessPurchases(ItemRosterElement itemRosterElement, int totalPrice)
	{
		if (itemRosterElement.EquipmentElement.ItemModifier == null)
		{
			RecordPurchases(itemRosterElement, totalPrice);
		}
	}

	public override void SyncData(IDataStore dataStore)
	{
		dataStore.SyncData("ItemsTradeData", ref ItemsTradeData);
	}

	public int GetProjectedProfit(ItemRosterElement itemRosterElement, int itemCost)
	{
		if (itemRosterElement.EquipmentElement.ItemModifier != null)
		{
			return 0;
		}
		int averagePriceForItem = GetAveragePriceForItem(itemRosterElement);
		return itemCost - averagePriceForItem;
	}
}
