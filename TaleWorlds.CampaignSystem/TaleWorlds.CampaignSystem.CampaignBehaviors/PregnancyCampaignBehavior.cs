using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CampaignBehaviors;

public class PregnancyCampaignBehavior : CampaignBehaviorBase
{
	public class PregnancyCampaignBehaviorTypeDefiner : SaveableTypeDefiner
	{
		public PregnancyCampaignBehaviorTypeDefiner()
			: base(110000)
		{
		}

		protected override void DefineClassTypes()
		{
			AddClassDefinition(typeof(Pregnancy), 2);
		}

		protected override void DefineContainerDefinitions()
		{
			ConstructContainerDefinition(typeof(List<Pregnancy>));
		}
	}

	internal class Pregnancy
	{
		[SaveableField(1)]
		public readonly Hero Mother;

		[SaveableField(2)]
		public readonly Hero Father;

		[SaveableField(3)]
		public readonly CampaignTime DueDate;

		public Pregnancy(Hero pregnantHero, Hero father, CampaignTime dueDate)
		{
			Mother = pregnantHero;
			Father = father;
			DueDate = dueDate;
		}

		internal static void AutoGeneratedStaticCollectObjectsPregnancy(object o, List<object> collectedObjects)
		{
			((Pregnancy)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(Mother);
			collectedObjects.Add(Father);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(DueDate, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueMother(object o)
		{
			return ((Pregnancy)o).Mother;
		}

		internal static object AutoGeneratedGetMemberValueFather(object o)
		{
			return ((Pregnancy)o).Father;
		}

		internal static object AutoGeneratedGetMemberValueDueDate(object o)
		{
			return ((Pregnancy)o).DueDate;
		}
	}

	private List<Pregnancy> _heroPregnancies = new List<Pregnancy>();

	public override void RegisterEvents()
	{
		CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, OnHeroKilled);
		CampaignEvents.DailyTickHeroEvent.AddNonSerializedListener(this, DailyTickHero);
		CampaignEvents.OnChildConceivedEvent.AddNonSerializedListener(this, ChildConceived);
	}

	private void DailyTickHero(Hero hero)
	{
		if (hero.IsFemale && !CampaignOptions.IsLifeDeathCycleDisabled && hero.IsAlive && hero.Age > (float)Campaign.Current.Models.AgeModel.HeroComesOfAge && (hero.Clan == null || !hero.Clan.IsRebelClan))
		{
			if (hero.Age > 18f && hero.Spouse != null && hero.Spouse.IsAlive && !hero.IsPregnant)
			{
				RefreshSpouseVisit(hero);
			}
			if (hero.IsPregnant)
			{
				CheckOffspringsToDeliver(hero);
			}
		}
	}

	private void CheckOffspringsToDeliver(Hero hero)
	{
		Pregnancy pregnancy = _heroPregnancies.Find((Pregnancy x) => x.Mother == hero);
		if (pregnancy == null)
		{
			hero.IsPregnant = false;
		}
		else
		{
			CheckOffspringsToDeliver(pregnancy);
		}
	}

	private void RefreshSpouseVisit(Hero hero)
	{
		if (CheckAreNearby(hero, hero.Spouse) && MBRandom.RandomFloat <= Campaign.Current.Models.PregnancyModel.GetDailyChanceOfPregnancyForHero(hero))
		{
			MakePregnantAction.Apply(hero);
		}
	}

	private bool CheckAreNearby(Hero hero, Hero spouse)
	{
		GetLocation(hero, out var heroSettlement, out var heroParty);
		GetLocation(spouse, out var heroSettlement2, out var heroParty2);
		if ((heroSettlement != null && heroSettlement == heroSettlement2) || (heroParty != null && heroParty == heroParty2))
		{
			return true;
		}
		if (hero.Clan != Hero.MainHero.Clan && MBRandom.RandomFloat < 0.2f)
		{
			return true;
		}
		return false;
	}

	private void GetLocation(Hero hero, out Settlement heroSettlement, out MobileParty heroParty)
	{
		heroSettlement = hero.CurrentSettlement;
		heroParty = hero.PartyBelongedTo;
		if (heroParty?.AttachedTo != null)
		{
			heroParty = heroParty.AttachedTo;
		}
		if (heroSettlement == null)
		{
			heroSettlement = heroParty?.CurrentSettlement;
		}
	}

	private void CheckOffspringsToDeliver(Pregnancy pregnancy)
	{
		PregnancyModel pregnancyModel = Campaign.Current.Models.PregnancyModel;
		if (pregnancy.DueDate.IsFuture || !pregnancy.Mother.IsAlive)
		{
			return;
		}
		Hero mother = pregnancy.Mother;
		bool num = MBRandom.RandomFloat <= pregnancyModel.DeliveringTwinsProbability;
		List<Hero> list = new List<Hero>();
		int num2 = ((!num) ? 1 : 2);
		int num3 = 0;
		for (int i = 0; i < num2; i++)
		{
			if (!(MBRandom.RandomFloat <= pregnancyModel.StillbirthProbability))
			{
				bool isOffspringFemale = MBRandom.RandomFloat <= pregnancyModel.DeliveringFemaleOffspringProbability;
				Hero item = HeroCreator.DeliverOffSpring(mother, pregnancy.Father, isOffspringFemale);
				list.Add(item);
			}
			else
			{
				TextObject textObject = new TextObject("{=pw4cUPEn}{MOTHER.LINK} has delivered stillborn.");
				StringHelpers.SetCharacterProperties("MOTHER", mother.CharacterObject, textObject);
				InformationManager.DisplayMessage(new InformationMessage(textObject.ToString()));
				num3++;
			}
		}
		CampaignEventDispatcher.Instance.OnGivenBirth(mother, list, num3);
		mother.IsPregnant = false;
		_heroPregnancies.Remove(pregnancy);
		if (mother != Hero.MainHero && MBRandom.RandomFloat <= pregnancyModel.MaternalMortalityProbabilityInLabor)
		{
			KillCharacterAction.ApplyInLabor(mother);
		}
	}

	private void ChildConceived(Hero mother)
	{
		_heroPregnancies.Add(new Pregnancy(mother, mother.Spouse, CampaignTime.DaysFromNow(Campaign.Current.Models.PregnancyModel.PregnancyDurationInDays)));
	}

	public void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification)
	{
		if (victim.IsFemale && _heroPregnancies.Any((Pregnancy pregnancy) => pregnancy.Mother == victim))
		{
			_heroPregnancies.RemoveAll((Pregnancy pregnancy) => pregnancy.Mother == victim);
		}
	}

	public override void SyncData(IDataStore dataStore)
	{
		dataStore.SyncData("_heroPregnancies", ref _heroPregnancies);
	}
}
