using System.Collections.Generic;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Party.PartyComponents;

public class LordPartyComponent : WarPartyComponent
{
	[CachedData]
	private TextObject _cachedName;

	[SaveableField(30)]
	private Hero _leader;

	[SaveableField(40)]
	private int _wagePaymentLimit = Campaign.Current.Models.PartyWageModel.MaxWage;

	public override Hero PartyOwner => Owner;

	public override TextObject Name
	{
		get
		{
			if (_cachedName == null && Owner != null)
			{
				_cachedName = GetPartyName();
			}
			return _cachedName ?? new TextObject("{=!}unnamedMobileParty");
		}
	}

	public override Settlement HomeSettlement => Owner.HomeSettlement;

	[SaveableProperty(20)]
	public Hero Owner { get; private set; }

	public override Hero Leader => _leader;

	public override int WagePaymentLimit => _wagePaymentLimit;

	internal static void AutoGeneratedStaticCollectObjectsLordPartyComponent(object o, List<object> collectedObjects)
	{
		((LordPartyComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_leader);
		collectedObjects.Add(Owner);
	}

	internal static object AutoGeneratedGetMemberValueOwner(object o)
	{
		return ((LordPartyComponent)o).Owner;
	}

	internal static object AutoGeneratedGetMemberValue_leader(object o)
	{
		return ((LordPartyComponent)o)._leader;
	}

	internal static object AutoGeneratedGetMemberValue_wagePaymentLimit(object o)
	{
		return ((LordPartyComponent)o)._wagePaymentLimit;
	}

	public override void SetWagePaymentLimit(int newLimit)
	{
		_wagePaymentLimit = newLimit;
	}

	public static MobileParty CreateLordParty(string stringId, Hero hero, Vec2 position, float spawnRadius, Settlement spawnSettlement, Hero partyLeader)
	{
		return MobileParty.CreateParty(hero.CharacterObject.StringId + "_party_1", new LordPartyComponent(hero, partyLeader), delegate(MobileParty mobileParty)
		{
			mobileParty.LordPartyComponent.InitializeLordPartyProperties(mobileParty, position, spawnRadius, spawnSettlement);
		});
	}

	protected internal LordPartyComponent(Hero owner, Hero leader)
	{
		Owner = owner;
		_leader = leader;
	}

	internal void ChangePartyOwner(Hero owner)
	{
		ClearCachedName();
		Owner = owner;
	}

	public override void ChangePartyLeader(Hero newLeader)
	{
		_leader = newLeader;
		ClearCachedName();
	}

	public override void ClearCachedName()
	{
		_cachedName = null;
	}

	private TextObject GetPartyName()
	{
		TextObject textObject = GameTexts.FindText("str_lord_party_name");
		textObject.SetCharacterProperties("TROOP", Owner.CharacterObject);
		textObject.SetTextVariable("IS_LORDPARTY", 1);
		return textObject;
	}

	private void InitializeLordPartyProperties(MobileParty mobileParty, Vec2 position, float spawnRadius, Settlement spawnSettlement)
	{
		mobileParty.AddElementToMemberRoster(Owner.CharacterObject, 1, insertAtFront: true);
		mobileParty.ActualClan = Owner.Clan;
		int troopNumberLimit = ((Owner != Hero.MainHero && Owner.Clan != Clan.PlayerClan) ? ((int)MathF.Min(Owner.Clan.IsRebelClan ? 40f : 19f, (Owner.Clan.IsRebelClan ? 0.2f : 0.1f) * (float)mobileParty.Party.PartySizeLimit)) : 0);
		if (!Campaign.Current.GameStarted)
		{
			float randomFloat = MBRandom.RandomFloat;
			float num = MathF.Sqrt(MBRandom.RandomFloat);
			float num2 = 1f - randomFloat * num;
			troopNumberLimit = (int)((float)mobileParty.Party.PartySizeLimit * num2);
		}
		mobileParty.InitializeMobilePartyAroundPosition(Owner.Clan.DefaultPartyTemplate, position, spawnRadius, 0f, troopNumberLimit);
		mobileParty.Party.SetVisualAsDirty();
		if (spawnSettlement != null)
		{
			mobileParty.Ai.SetMoveGoToSettlement(spawnSettlement);
		}
		mobileParty.Aggressiveness = 0.9f + 0.1f * (float)Owner.GetTraitLevel(DefaultTraits.Valor) - 0.05f * (float)Owner.GetTraitLevel(DefaultTraits.Mercy);
		mobileParty.ItemRoster.Add(new ItemRosterElement(DefaultItems.Grain, MBRandom.RandomInt(15, 30)));
		Owner.PassedTimeAtHomeSettlement = (int)(MBRandom.RandomFloat * 100f);
		if (spawnSettlement != null)
		{
			mobileParty.Ai.SetMoveGoToSettlement(spawnSettlement);
		}
	}
}
