using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Party.PartyComponents;

public class CaravanPartyComponent : PartyComponent
{
	public const int DefaultCaravanPartyTradeInitialGold = 10000;

	[CachedData]
	private TextObject _cachedName;

	[SaveableField(3)]
	private Hero _leader;

	[SaveableProperty(1)]
	public Settlement Settlement { get; private set; }

	[SaveableProperty(2)]
	public Hero Owner { get; private set; }

	public override Hero PartyOwner => Owner;

	public override TextObject Name
	{
		get
		{
			if (_cachedName == null)
			{
				_cachedName = GameTexts.FindText("str_caravan_party_name");
				_cachedName.SetCharacterProperties("OWNER", base.MobileParty.LeaderHero?.CharacterObject ?? Owner.CharacterObject);
			}
			return _cachedName;
		}
	}

	public override Settlement HomeSettlement => Settlement;

	public override Hero Leader => _leader;

	internal static void AutoGeneratedStaticCollectObjectsCaravanPartyComponent(object o, List<object> collectedObjects)
	{
		((CaravanPartyComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_leader);
		collectedObjects.Add(Settlement);
		collectedObjects.Add(Owner);
	}

	internal static object AutoGeneratedGetMemberValueSettlement(object o)
	{
		return ((CaravanPartyComponent)o).Settlement;
	}

	internal static object AutoGeneratedGetMemberValueOwner(object o)
	{
		return ((CaravanPartyComponent)o).Owner;
	}

	internal static object AutoGeneratedGetMemberValue_leader(object o)
	{
		return ((CaravanPartyComponent)o)._leader;
	}

	protected internal CaravanPartyComponent(Settlement settlement, Hero owner, Hero partyLeader)
	{
		Settlement = settlement;
		Owner = owner;
		_leader = partyLeader;
	}

	protected override void OnInitialize()
	{
		Owner.OwnedCaravans.Add(this);
	}

	protected override void OnFinalize()
	{
		Owner.OwnedCaravans.Remove(this);
	}

	public override void ChangePartyLeader(Hero newLeader)
	{
		_leader = newLeader;
	}

	public override void ClearCachedName()
	{
		_cachedName = null;
	}

	public static MobileParty CreateCaravanParty(Hero caravanOwner, Settlement spawnSettlement, bool isInitialSpawn = false, Hero caravanLeader = null, ItemRoster caravanItems = null, int troopToBeGiven = 0, bool isElite = false)
	{
		MobileParty mobileParty2 = MobileParty.CreateParty("caravan_template_" + spawnSettlement.Culture.StringId.ToLower() + "_1", new CaravanPartyComponent(spawnSettlement, caravanOwner, caravanLeader), delegate(MobileParty mobileParty)
		{
			(mobileParty.PartyComponent as CaravanPartyComponent).InitializeCaravanOnCreation(mobileParty, caravanLeader, caravanItems, troopToBeGiven, isElite);
		});
		if (spawnSettlement.Party.MapEvent == null && spawnSettlement.SiegeEvent == null)
		{
			mobileParty2.Ai.SetMoveGoToSettlement(spawnSettlement);
			mobileParty2.Ai.RecalculateShortTermAi();
			EnterSettlementAction.ApplyForParty(mobileParty2, spawnSettlement);
		}
		else
		{
			mobileParty2.Ai.SetMoveModeHold();
		}
		if (mobileParty2.LeaderHero != null)
		{
			CampaignEventDispatcher.Instance.OnHeroGetsBusy(mobileParty2.LeaderHero, HeroGetsBusyReasons.BecomeCaravanLeader);
		}
		return mobileParty2;
	}

	private void InitializeCaravanOnCreation(MobileParty mobileParty, Hero caravanLeader, ItemRoster caravanItems, int troopToBeGiven, bool isElite)
	{
		InitializeCaravanProperties();
		if (troopToBeGiven == 0)
		{
			float num = 1f;
			num = ((!(MBRandom.RandomFloat < 0.67f)) ? 1f : ((1f - MBRandom.RandomFloat * MBRandom.RandomFloat) * 0.5f + 0.5f));
			int num2 = (int)((float)mobileParty.Party.PartySizeLimit * num);
			if (num2 >= 10)
			{
				num2--;
			}
			troopToBeGiven = num2;
		}
		PartyTemplateObject pt = (isElite ? Settlement.Culture.EliteCaravanPartyTemplate : Settlement.Culture.CaravanPartyTemplate);
		mobileParty.InitializeMobilePartyAtPosition(pt, Settlement.GatePosition, troopToBeGiven);
		if (caravanLeader != null)
		{
			mobileParty.MemberRoster.AddToCounts(caravanLeader.CharacterObject, 1, insertAtFront: true);
		}
		else
		{
			CharacterObject character2 = CharacterObject.All.First((CharacterObject character) => character.Occupation == Occupation.CaravanGuard && character.IsInfantry && character.Level == 26 && character.Culture == mobileParty.Party.Owner.Culture);
			mobileParty.MemberRoster.AddToCounts(character2, 1, insertAtFront: true);
		}
		mobileParty.ActualClan = Owner.Clan;
		mobileParty.Party.SetVisualAsDirty();
		mobileParty.InitializePartyTrade(10000 + ((Owner.Clan == Clan.PlayerClan) ? 5000 : 0));
		if (caravanItems != null)
		{
			mobileParty.ItemRoster.Add(caravanItems);
			return;
		}
		float num3 = 10000f;
		ItemObject itemObject = null;
		foreach (ItemObject item in Items.All)
		{
			if (item.ItemCategory == DefaultItemCategories.PackAnimal && !item.NotMerchandise && (float)item.Value < num3)
			{
				itemObject = item;
				num3 = item.Value;
			}
		}
		if (itemObject != null)
		{
			mobileParty.ItemRoster.Add(new ItemRosterElement(itemObject, (int)((float)mobileParty.MemberRoster.TotalManCount * 0.5f)));
		}
	}

	private void InitializeCaravanProperties()
	{
		base.MobileParty.Aggressiveness = 0f;
	}

	public override void GetMountAndHarnessVisualIdsForPartyIcon(PartyBase party, out string mountStringId, out string harnessStringId)
	{
		string text = party.MapFaction?.Culture?.StringId ?? string.Empty;
		if (text == "aserai" || text == "khuzait")
		{
			mountStringId = "camel";
			if (party.Index % 2 == 0)
			{
				harnessStringId = "camel_saddle_a";
			}
			else
			{
				harnessStringId = "camel_saddle_b";
			}
			return;
		}
		mountStringId = "mule";
		switch (party.Index % 3)
		{
		case 0:
			harnessStringId = "mule_load_a";
			break;
		case 1:
			harnessStringId = "mule_load_b";
			break;
		default:
			harnessStringId = "mule_load_c";
			break;
		}
	}

	public static void TransferCaravanOwnership(MobileParty caravan, Hero newOwner, Settlement homeSettlement)
	{
		CaravanPartyComponent caravanPartyComponent = (CaravanPartyComponent)(caravan.PartyComponent = new CaravanPartyComponent(homeSettlement, newOwner, caravan.LeaderHero));
		caravanPartyComponent.InitializeCaravanProperties();
		caravan.Party.SetVisualAsDirty();
	}
}
