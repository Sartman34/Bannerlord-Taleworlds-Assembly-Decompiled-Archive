using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues;

public class IssueManager : CampaignEventReceiver
{
	[SaveableField(0)]
	private int _nextIssueUniqueIndex;

	public MBReadOnlyDictionary<Hero, IssueBase> Issues;

	[SaveableField(1)]
	private readonly Dictionary<Hero, IssueBase> _issues;

	[SaveableField(2)]
	private Dictionary<string, List<IssueCoolDownData>> _issuesCoolDownData;

	[CachedData]
	private Dictionary<Hero, List<PotentialIssueData>> _issueArgs;

	[SaveableField(3)]
	private List<IssueBase> _issuesWaitingForPlayerCaptivity = new List<IssueBase>();

	public const string IssueOfferToken = "issue_offer";

	public const string HeroMainOptionsToken = "hero_main_options";

	public const string IssueClassicQuestStartToken = "issue_classic_quest_start";

	public const string IssueDiscussAlternativeSolution = "issue_discuss_alternative_solution";

	private const float IssueCancelChance = 0.2f;

	public IEnumerable<Hero> IssueSolvingCompanionList
	{
		get
		{
			foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
			{
				if (issue.Value.IsSolvingWithAlternative)
				{
					yield return issue.Value.AlternativeSolutionHero;
				}
			}
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsIssueManager(object o, List<object> collectedObjects)
	{
		((IssueManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_issues);
		collectedObjects.Add(_issuesCoolDownData);
		collectedObjects.Add(_issuesWaitingForPlayerCaptivity);
	}

	internal static object AutoGeneratedGetMemberValue_nextIssueUniqueIndex(object o)
	{
		return ((IssueManager)o)._nextIssueUniqueIndex;
	}

	internal static object AutoGeneratedGetMemberValue_issues(object o)
	{
		return ((IssueManager)o)._issues;
	}

	internal static object AutoGeneratedGetMemberValue_issuesCoolDownData(object o)
	{
		return ((IssueManager)o)._issuesCoolDownData;
	}

	internal static object AutoGeneratedGetMemberValue_issuesWaitingForPlayerCaptivity(object o)
	{
		return ((IssueManager)o)._issuesWaitingForPlayerCaptivity;
	}

	public IssueManager()
	{
		_issues = new Dictionary<Hero, IssueBase>();
		_issuesCoolDownData = new Dictionary<string, List<IssueCoolDownData>>();
		_issueArgs = new Dictionary<Hero, List<PotentialIssueData>>();
		Initialize();
	}

	[LoadInitializationCallback]
	private void OnLoad(MetaData metaData)
	{
		_issueArgs = new Dictionary<Hero, List<PotentialIssueData>>();
		Initialize();
	}

	private void Initialize()
	{
		Issues = _issues.GetReadOnlyDictionary();
		AssignIssuesToHeroes();
	}

	private void AssignIssuesToHeroes()
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in _issues)
		{
			issue.Key.OnIssueCreatedForHero(issue.Value);
		}
	}

	public void InitializeForSavedGame()
	{
		if (_issuesWaitingForPlayerCaptivity == null)
		{
			_issuesWaitingForPlayerCaptivity = new List<IssueBase>();
		}
		foreach (KeyValuePair<Hero, IssueBase> item in _issues.ToList())
		{
			IssueBase value = item.Value;
			if (value == null)
			{
				_issues.Remove(item.Key);
				continue;
			}
			value.InitializeIssueBaseOnLoad();
			if (value.IssueOwner != item.Key)
			{
				Debug.FailedAssert("Issue owner is not the same as key!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Issues\\IssueManager.cs", "InitializeForSavedGame", 106);
			}
		}
		ExpireInvalidData();
	}

	public bool CreateNewIssue(in PotentialIssueData pid, Hero issueOwner)
	{
		IssueBase issueBase = pid.OnStartIssue(in pid, issueOwner);
		issueBase.StringId = "issue_" + _nextIssueUniqueIndex;
		_nextIssueUniqueIndex++;
		issueBase.AfterCreation();
		_issues.Add(issueOwner, issueBase);
		issueOwner.OnIssueCreatedForHero(issueBase);
		if (issueOwner.PartyBelongedTo != null)
		{
			issueBase.AddTrackedObject(issueOwner.PartyBelongedTo);
		}
		CampaignEventDispatcher.Instance.OnNewIssueCreated(issueBase);
		return true;
	}

	public bool StartIssueQuest(Hero issueOwner)
	{
		if (Issues[issueOwner].StartIssueWithQuest())
		{
			return true;
		}
		Issues[issueOwner].CompleteIssueWithStayAliveConditionsFailed();
		return false;
	}

	public void DeactivateIssue(IssueBase issue)
	{
		if (issue.IssueQuest != null)
		{
			issue.IssueQuest?.CompleteQuestWithCancel();
			return;
		}
		issue.IssueOwner.OnIssueDeactivatedForHero();
		Campaign.Current.ConversationManager.RemoveRelatedLines(issue);
		if (Issues.ContainsKey(issue.IssueOwner))
		{
			_issues.Remove(issue.IssueOwner);
		}
	}

	public void ChangeIssueOwner(IssueBase issue, Hero newOwner)
	{
		Hero issueOwner = issue.IssueOwner;
		issueOwner.OnIssueDeactivatedForHero();
		newOwner.OnIssueCreatedForHero(issue);
		issue.IssueOwner = newOwner;
		_issues.Remove(issueOwner);
		_issues.Add(newOwner, issue);
		CampaignEventDispatcher.Instance.OnIssueOwnerChanged(issue, issueOwner);
	}

	private void PrepareIssueArguments(Hero hero)
	{
		if (_issueArgs.TryGetValue(hero, out var value))
		{
			value.Clear();
		}
		else
		{
			_issueArgs.Add(hero, new List<PotentialIssueData>());
		}
	}

	public void AddPotentialIssueData(Hero hero, PotentialIssueData issueData)
	{
		_issueArgs[hero].Add(issueData);
	}

	private List<PotentialIssueData> GetPotentialIssues(Hero hero)
	{
		return _issueArgs[hero];
	}

	public List<PotentialIssueData> CheckForIssues(Hero issueOwner)
	{
		PrepareIssueArguments(issueOwner);
		if (!Issues.ContainsKey(issueOwner))
		{
			CampaignEventDispatcher.Instance.OnCheckForIssue(issueOwner);
		}
		return GetPotentialIssues(issueOwner);
	}

	public override void DailyTick()
	{
		ExpireInvalidData();
		List<IssueBase> list = new List<IssueBase>();
		List<IssueBase> list2 = new List<IssueBase>();
		List<IssueBase> list3 = new List<IssueBase>();
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			IssueBase value = issue.Value;
			bool flag = false;
			if (value.IsSolvingWithAlternative)
			{
				if (value.AlternativeSolutionReturnTimeForTroops.IsPast)
				{
					if (!_issuesWaitingForPlayerCaptivity.Contains(value))
					{
						if (Hero.MainHero.IsPrisoner)
						{
							_issuesWaitingForPlayerCaptivity.Add(value);
						}
						else
						{
							list2.Add(value);
						}
					}
				}
				else
				{
					if ((int)value.AlternativeSolutionIssueEffectClearTime.ToDays == (int)CampaignTime.Now.ToDays)
					{
						value.OnAlternativeSolutionSolvedAndTroopsAreReturning();
					}
					JournalLog journalLog = value.JournalEntries[0];
					int progress = ((journalLog.CurrentProgress + 1 > journalLog.Range) ? journalLog.Range : (journalLog.CurrentProgress + 1));
					journalLog.UpdateCurrentProgress(progress);
				}
			}
			if (value.IsOngoingWithoutQuest && !value.IssueStayAliveConditions())
			{
				list3.Add(value);
				flag = true;
			}
			if (value.IssueDueTime.IsPast && value.IsOngoingWithoutQuest && !flag && MBRandom.RandomFloat <= 0.2f)
			{
				list.Add(value);
			}
		}
		foreach (IssueBase item in list2)
		{
			item.CompleteIssueWithAlternativeSolution();
		}
		foreach (IssueBase item2 in list)
		{
			item2.CompleteIssueWithTimedOut();
		}
		foreach (IssueBase item3 in list3)
		{
			item3.CompleteIssueWithStayAliveConditionsFailed();
		}
	}

	public override void HourlyTick()
	{
		if (!Hero.MainHero.IsPrisoner && _issuesWaitingForPlayerCaptivity.Count > 0)
		{
			TextObject textObject = new TextObject("{=l0NTCps3}As you emerge from captivity, {COMPANION.NAME} is waiting outside and greets you. {?COMPANION.GENDER}She{?}He{\\?} says {?COMPANION.GENDER}she{?}he{\\?} has returned from {?COMPANION.GENDER}her{?}his{\\?} mission with {NUMBER} {?(NUMBER > 1)}troops{?}troop{\\?} and they are all ready to rejoin your party.");
			for (int num = _issuesWaitingForPlayerCaptivity.Count - 1; num >= 0; num--)
			{
				IssueBase item = _issuesWaitingForPlayerCaptivity[num];
				StringHelpers.SetCharacterProperties("COMPANION", item.AlternativeSolutionHero.CharacterObject, textObject);
				textObject.SetTextVariable("NUMBER", item.AlternativeSolutionSentTroops.TotalManCount);
				InformationManager.ShowInquiry(new InquiryData(string.Empty, textObject.ToString(), isAffirmativeOptionShown: true, isNegativeOptionShown: false, GameTexts.FindText("str_ok").ToString(), null, delegate
				{
					_issuesWaitingForPlayerCaptivity.Remove(item);
					item.CompleteIssueWithAlternativeSolution();
				}, null), pauseGameActiveState: true);
			}
		}
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.HourlyTickWithIssueManager();
		}
	}

	private void ExpireInvalidData()
	{
		foreach (KeyValuePair<string, List<IssueCoolDownData>> issuesCoolDownDatum in _issuesCoolDownData)
		{
			List<IssueCoolDownData> list = new List<IssueCoolDownData>();
			foreach (IssueCoolDownData item in issuesCoolDownDatum.Value)
			{
				if (!item.IsValid())
				{
					list.Add(item);
				}
			}
			foreach (IssueCoolDownData item2 in list)
			{
				issuesCoolDownDatum.Value.Remove(item2);
			}
		}
	}

	public bool IsThereActiveIssueWithTypeInSettlement(Type type, Settlement settlement)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			if (issue.Value.GetType() == type && issue.Value.IssueSettlement == settlement)
			{
				return true;
			}
		}
		return false;
	}

	public int GetNumOfAvailableIssuesInSettlement(Settlement settlement)
	{
		List<IssueBase> list = new List<IssueBase>();
		int num = 0;
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			bool num2 = issue.Value.IsSolvingWithAlternative || issue.Value.IsSolvingWithLordSolution || issue.Value.IsSolvingWithQuest;
			bool flag = issue.Value.IssueSettlement == settlement || issue.Value.IssueOwner.CurrentSettlement == settlement;
			if (!num2 && flag && issue.Value.IssueQuest == null)
			{
				if (issue.Value.IssueStayAliveConditions())
				{
					num++;
				}
				else if (issue.Value.IsOngoingWithoutQuest)
				{
					list.Add(issue.Value);
				}
			}
		}
		foreach (IssueBase item in list)
		{
			item.CompleteIssueWithStayAliveConditionsFailed();
		}
		return num;
	}

	public int GetNumOfActiveIssuesInSettlement(Settlement settlement, bool includeQuests)
	{
		int num = 0;
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			bool num2 = issue.Value.IsSolvingWithAlternative || issue.Value.IsSolvingWithLordSolution || issue.Value.IsSolvingWithQuest;
			bool flag = issue.Value.IssueSettlement == settlement || issue.Value.IssueOwner.CurrentSettlement == settlement;
			if (num2 && flag && includeQuests == (issue.Value.IssueQuest != null))
			{
				num++;
			}
		}
		return num;
	}

	private IEnumerable<Hero> GetHeroesThatHaveIssueForSettlement(Settlement settlement)
	{
		foreach (Hero item in settlement.HeroesWithoutParty)
		{
			if (item.Issue != null)
			{
				yield return item;
			}
		}
		foreach (MobileParty party in Settlement.CurrentSettlement.Parties)
		{
			foreach (TroopRosterElement item2 in from x in party.MemberRoster.GetTroopRoster()
				where x.Character.IsHero
				select x)
			{
				if (item2.Character.HeroObject.Issue != null)
				{
					yield return item2.Character.HeroObject;
				}
			}
		}
	}

	public GameMenuOption.IssueQuestFlags CheckIssueForMenuLocations(List<Location> currentLocations, bool getIssuesWithoutAQuest = false)
	{
		GameMenuOption.IssueQuestFlags issueQuestFlags = GameMenuOption.IssueQuestFlags.None;
		if (Settlement.CurrentSettlement == null || !Issues.Any())
		{
			return issueQuestFlags;
		}
		foreach (Location currentLocation in currentLocations)
		{
			foreach (LocationCharacter character in currentLocation.GetCharacterList())
			{
				Hero heroObject = character.Character.HeroObject;
				if (heroObject != null && heroObject.Issue != null && (!getIssuesWithoutAQuest || heroObject.Issue?.IssueQuest == null) && (!(currentLocation.StringId != "prison") || !heroObject.IsPrisoner))
				{
					QuestBase issueQuest = heroObject.Issue.IssueQuest;
					issueQuestFlags = (((issueQuest == null || !issueQuest.IsOngoing) && !heroObject.Issue.IsSolvingWithAlternative && !heroObject.Issue.IsSolvingWithLordSolution) ? (issueQuestFlags | GameMenuOption.IssueQuestFlags.AvailableIssue) : (issueQuestFlags | GameMenuOption.IssueQuestFlags.ActiveIssue));
				}
			}
		}
		return issueQuestFlags;
	}

	public override void OnQuestCompleted(QuestBase quest, QuestBase.QuestCompleteDetails detail)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			if (issue.Value.IssueQuest == quest)
			{
				switch (detail)
				{
				case QuestBase.QuestCompleteDetails.Success:
					issue.Value.CompleteIssueWithQuest();
					break;
				case QuestBase.QuestCompleteDetails.Cancel:
					issue.Value.CompleteIssueWithCancel();
					break;
				case QuestBase.QuestCompleteDetails.Fail:
					issue.Value.CompleteIssueWithFail();
					break;
				case QuestBase.QuestCompleteDetails.Timeout:
					issue.Value.CompleteIssueWithTimedOut();
					break;
				case QuestBase.QuestCompleteDetails.FailWithBetrayal:
					issue.Value.CompleteIssueWithBetrayal();
					break;
				default:
					issue.Value.CompleteIssueWithQuest();
					break;
				}
				break;
			}
		}
	}

	public override void OnSettlementEntered(MobileParty party, Settlement settlement, Hero hero)
	{
		if (party != MobileParty.MainParty)
		{
			return;
		}
		foreach (Hero item in GetHeroesThatHaveIssueForSettlement(Settlement.CurrentSettlement))
		{
			if (item.Issue.IsOngoingWithoutQuest && !item.Issue.IssueStayAliveConditions())
			{
				item.Issue.CompleteIssueWithStayAliveConditionsFailed();
			}
		}
	}

	public override void OnSettlementLeft(MobileParty party, Settlement settlement)
	{
		if (IssueDeactivationCommonCondition(party.LeaderHero))
		{
			party.LeaderHero.Issue.CompleteIssueWithStayAliveConditionsFailed();
		}
	}

	public override void OnCharacterPortraitPopUpOpened(CharacterObject character)
	{
		if (IssueDeactivationCommonCondition(character.HeroObject))
		{
			character.HeroObject.Issue.CompleteIssueWithStayAliveConditionsFailed();
		}
	}

	private bool IssueDeactivationCommonCondition(Hero hero)
	{
		if (hero != null && hero.Issue != null && hero.Issue.IsOngoingWithoutQuest)
		{
			return !hero.Issue.IssueStayAliveConditions();
		}
		return false;
	}

	public override void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification)
	{
		if (victim.Issue == null)
		{
			return;
		}
		if (victim.Issue.IssueQuest != null && victim.Issue.IssueQuest.IsOngoing)
		{
			TextObject textObject = new TextObject("{=rTvWdMXF}{DIED_HERO.LINK} died and your agreement with {?DIED_HERO.GENDER}her{?}him{\\?} canceled.");
			StringHelpers.SetCharacterProperties("DIED_HERO", victim.CharacterObject, textObject);
			victim.Issue.IssueQuest.CompleteQuestWithCancel(textObject);
			return;
		}
		TextObject textObject2;
		if (killer != null)
		{
			textObject2 = GameTexts.FindText("str_responsible_of_death_link_news");
			StringHelpers.SetCharacterProperties("HERO_1", killer.CharacterObject, textObject2);
			StringHelpers.SetCharacterProperties("HERO_2", victim.CharacterObject, textObject2);
		}
		else
		{
			textObject2 = GameTexts.FindText("str_murdered_passive_news");
			StringHelpers.SetCharacterProperties("HERO_2", victim.CharacterObject, textObject2);
		}
		victim.Issue.CompleteIssueWithCancel(textObject2);
	}

	public override void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
	{
		if ((newOwner == null || newOwner.Clan != Clan.PlayerClan) && (oldOwner == null || oldOwner.Clan != Clan.PlayerClan))
		{
			return;
		}
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			if (issue.Key.IsNotable)
			{
				if (issue.Value.IssueSettlement == settlement)
				{
					issue.Value.InitializeIssueOnSettlementOwnerChange();
				}
				if (settlement.IsFortification && issue.Value.IssueSettlement.IsVillage && issue.Value.IssueSettlement.Village.Bound == settlement)
				{
					issue.Value.InitializeIssueOnSettlementOwnerChange();
				}
			}
		}
	}

	public void ToggleAllIssueTracks(bool enableTrack)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.ToggleTrackedObjects(enableTrack);
		}
	}

	public void AddIssueCoolDownData(Type type, IssueCoolDownData data)
	{
		string name = type.Name;
		if (!_issuesCoolDownData.ContainsKey(name))
		{
			_issuesCoolDownData.Add(name, new List<IssueCoolDownData>());
		}
		_issuesCoolDownData[name].Add(data);
	}

	public bool HasIssueCoolDown(Type type, Hero hero)
	{
		string name = type.Name;
		bool result = false;
		if (_issuesCoolDownData.TryGetValue(name, out var value))
		{
			foreach (IssueCoolDownData item in value)
			{
				if (item.IsValid() && item.IsRelatedTo(hero))
				{
					result = true;
					break;
				}
			}
		}
		return result;
	}

	public override void CanHaveQuestsOrIssues(Hero hero, ref bool result)
	{
		if (Issues.TryGetValue(hero, out var _))
		{
			result = false;
			return;
		}
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.OnHeroCanHaveQuestOrIssueInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
			if ((issue.Value.IsSolvingWithAlternative && issue.Value.AlternativeSolutionHero == hero) || issue.Value.CounterOfferHero == hero)
			{
				result = false;
				break;
			}
		}
	}

	public override void CanHeroDie(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.OnHeroCanDieInfoIsRequested(hero, causeOfDeath, ref result);
			if (issue.Value.AlternativeSolutionHero == hero)
			{
				result = false;
			}
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanHeroBecomePrisoner(Hero hero, ref bool result)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.OnHeroCanBecomePrisonerInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanHeroMarry(Hero hero, ref bool result)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.OnHeroCanMarryInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanHeroEquipmentBeChanged(Hero hero, ref bool result)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.OnHeroCanBeSelectedInInventoryInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanHeroLeadParty(Hero hero, ref bool result)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.OnHeroCanLeadPartyInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanMoveToSettlement(Hero hero, ref bool result)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.OnHeroCanMoveToSettlementInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public override void CanBeGovernorOrHavePartyRole(Hero hero, ref bool result)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Issues)
		{
			issue.Value.OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(hero, ref result);
			if (!result)
			{
				break;
			}
		}
	}

	public static void FillIssueCountsPerSettlement(Dictionary<Settlement, int> issueCountPerSettlement)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Campaign.Current.IssueManager.Issues)
		{
			Settlement issueSettlement = issue.Value.IssueSettlement;
			if (issueSettlement != null)
			{
				if (!issueCountPerSettlement.ContainsKey(issueSettlement))
				{
					issueCountPerSettlement[issueSettlement] = 1;
				}
				else
				{
					issueCountPerSettlement[issueSettlement]++;
				}
			}
		}
	}

	public static IEnumerable<IssueBase> GetIssuesInSettlement(Settlement settlement, bool onlyNotables = true)
	{
		foreach (Hero notable in settlement.Notables)
		{
			if (notable.Issue != null)
			{
				yield return notable.Issue;
			}
		}
		if (onlyNotables)
		{
			yield break;
		}
		foreach (Hero item in settlement.HeroesWithoutParty)
		{
			if (item.Issue != null && !item.IsNotable)
			{
				yield return item.Issue;
			}
		}
		foreach (MobileParty settlementParty in settlement.Parties)
		{
			for (int i = 0; i < settlementParty.MemberRoster.Count; i++)
			{
				Hero hero = settlementParty.MemberRoster.GetCharacterAtIndex(i)?.HeroObject;
				if (hero != null && hero.Issue != null)
				{
					yield return hero.Issue;
				}
			}
		}
	}

	public static IssueBase GetIssueOfQuest(QuestBase quest)
	{
		foreach (KeyValuePair<Hero, IssueBase> issue in Campaign.Current.IssueManager.Issues)
		{
			if (issue.Value.IssueQuest == quest)
			{
				return issue.Value;
			}
		}
		return null;
	}

	public static void FillIssueCountsPerClan(Dictionary<Clan, int> issueCountPerClan, IEnumerable<Clan> clans)
	{
		foreach (Clan clan in clans)
		{
			int num = 0;
			foreach (Hero hero in clan.Heroes)
			{
				if (hero.Issue != null)
				{
					num++;
				}
			}
			issueCountPerClan.Add(clan, num);
		}
	}
}
