using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues;

public class TheConquestOfSettlementIssueBehavior : CampaignBehaviorBase
{
	public class TheConquestOfSettlementIssue : IssueBase
	{
		private const int QuestTimeLimit = 60;

		[SaveableField(10)]
		private Settlement _targetSettlement;

		public override TextObject Title
		{
			get
			{
				TextObject textObject = new TextObject("{=mvzh0HVk}The Conquest of {TARGET_SETTLEMENT}");
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				return textObject;
			}
		}

		public override TextObject Description
		{
			get
			{
				TextObject textObject = new TextObject("{=xeZR3r5u}{QUEST_GIVER.LINK} wants you siege and take over the {TARGET_SETTLEMENT}");
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject);
				return textObject;
			}
		}

		public override TextObject IssueBriefByIssueGiver
		{
			get
			{
				TextObject textObject = new TextObject("{=Oi20UrO2}Our war with the {TARGET_SETTLEMENT_FACTION_INFORMAL_NAME} is going well enough. But there are some who say that we don't have enough to show for all the blood and silver we've spent. A clear victory at this stage would do a lot of good. I think I would like to see our banner flying from the towers of {TARGET_SETTLEMENT}.[ib:normal2][if:convo_thinking]");
				textObject.SetTextVariable("TARGET_SETTLEMENT_FACTION_INFORMAL_NAME", _targetSettlement.MapFaction.InformalName);
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				return textObject;
			}
		}

		public override TextObject IssueAcceptByPlayer
		{
			get
			{
				TextObject textObject = new TextObject("{=qKrUyqsD}Of course, my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}. But sieges are always costly...");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject);
				return textObject;
			}
		}

		public override TextObject IssueQuestSolutionExplanationByIssueGiver
		{
			get
			{
				TextObject textObject = new TextObject("{=yf3NVFi0}Yes, they are. That's why I am offering you the sum of {REWARD_GOLD}{GOLD_ICON} if you can take {TARGET_SETTLEMENT} within {TIME_LIMIT} days.[if:convo_thinking] I count you among the most resourceful of my captains. I think you can do this, with courage, Heaven's favor and a bit of luck. Can I tell my other lords that you will do this?");
				textObject.SetTextVariable("REWARD_GOLD", RewardGold);
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				textObject.SetTextVariable("TIME_LIMIT", 60);
				return textObject;
			}
		}

		public override TextObject IssueQuestSolutionAcceptByPlayer
		{
			get
			{
				TextObject textObject = new TextObject("{=scmTEn90}You may tell them. {TARGET_SETTLEMENT} will be ours within 60 days.");
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				return textObject;
			}
		}

		public override bool IsThereAlternativeSolution => false;

		public override bool IsThereLordSolution => false;

		protected override int RewardGold => 20000;

		internal static void AutoGeneratedStaticCollectObjectsTheConquestOfSettlementIssue(object o, List<object> collectedObjects)
		{
			((TheConquestOfSettlementIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(_targetSettlement);
		}

		internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
		{
			return ((TheConquestOfSettlementIssue)o)._targetSettlement;
		}

		public TheConquestOfSettlementIssue(Hero issueOwner, Settlement targetSettlement)
			: base(issueOwner, CampaignTime.DaysFromNow(60f))
		{
			_targetSettlement = targetSettlement;
		}

		protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
		{
			if (issueEffect == DefaultIssueEffects.SettlementSecurity)
			{
				return -1f;
			}
			if (issueEffect == DefaultIssueEffects.SettlementLoyalty)
			{
				return -1f;
			}
			return 0f;
		}

		protected override void OnGameLoad()
		{
		}

		protected override void HourlyTick()
		{
		}

		protected override QuestBase GenerateIssueQuest(string questId)
		{
			return new TheConquestOfSettlementIssueQuest(questId, base.IssueOwner, _targetSettlement, CampaignTime.DaysFromNow(60f), RewardGold);
		}

		public override IssueFrequency GetFrequency()
		{
			return IssueFrequency.VeryCommon;
		}

		protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out PreconditionFlags flags, out Hero relationHero, out SkillObject skill)
		{
			relationHero = null;
			skill = null;
			flags = PreconditionFlags.None;
			if (issueGiver.GetRelationWithPlayer() < -10f)
			{
				flags |= PreconditionFlags.Relation;
				relationHero = issueGiver;
			}
			if (issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
			{
				flags |= PreconditionFlags.AtWar;
			}
			if (Clan.PlayerClan.Kingdom != issueGiver.MapFaction)
			{
				flags |= PreconditionFlags.NotInSameFaction;
			}
			if (Clan.PlayerClan.IsUnderMercenaryService)
			{
				flags |= PreconditionFlags.ClanIsMercenary;
			}
			return flags == PreconditionFlags.None;
		}

		public override bool IssueStayAliveConditions()
		{
			if (_targetSettlement.MapFaction.IsAtWarWith(base.IssueOwner.MapFaction) && base.IssueOwner.MapFaction.IsKingdomFaction)
			{
				return base.IssueOwner.Clan.Settlements.Any((Settlement x) => x.IsFortification);
			}
			return false;
		}

		protected override void CompleteIssueWithTimedOutConsequences()
		{
		}
	}

	public class TheConquestOfSettlementIssueQuest : QuestBase
	{
		private const int SuccessLoyaltySecurityBoost = 10;

		private const int LesserSuccessLoyaltySecurityBoost = 2;

		private const int SuccessRelationBoost = 5;

		private const int LesserSuccessRelationBoost = 1;

		private const int TimeoutSecurityLoyaltyPenalty = -10;

		private const int TimeoutRelationyPenalty = -10;

		[SaveableField(10)]
		private Settlement _targetSettlement;

		public override TextObject Title
		{
			get
			{
				TextObject textObject = new TextObject("{=mvzh0HVk}The Conquest of {TARGET_SETTLEMENT}");
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				return textObject;
			}
		}

		public override bool IsRemainingTimeHidden => false;

		private TextObject QuestStartedLog
		{
			get
			{
				TextObject textObject = new TextObject("{=b1T6qywr}{QUEST_GIVER.LINK} from {QUEST_GIVER.FACTION} asked you to take over {TARGET_SETTLEMENT} in the name of {QUEST_GIVER.FACTION} to fortify war efforts. {QUEST_GIVER.LINK} said {?QUEST_GIVER.GENDER}she{?}he{\\?} will aid you with {REWARD}{GOLD_ICON} once the {TARGET_SETTLEMENT} is fallen.");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, includeDetails: true);
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				textObject.SetTextVariable("REWARD", RewardGold);
				return textObject;
			}
		}

		private TextObject WarDeclaredQuestCancelLog
		{
			get
			{
				TextObject textObject = new TextObject("{=PakhagOy}Your clan is now at war with {QUEST_GIVER.LINK}'s lord. Your agreement with {QUEST_GIVER.LINK} was canceled.");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject);
				return textObject;
			}
		}

		private TextObject PlayerDeclaredWarQuestLogText
		{
			get
			{
				TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject);
				return textObject;
			}
		}

		private TextObject QuestTimeOutFailLog
		{
			get
			{
				TextObject textObject = new TextObject("{=lEcg67Qk}You have failed to take over {TARGET_SETTLEMENT} in time. {QUEST_GIVER.LINK} is disappointed that you have failed to take the fortress in time.");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject);
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				return textObject;
			}
		}

		private TextObject QuestSuccessLog
		{
			get
			{
				TextObject textObject = new TextObject("{=6d2VIgH3}{QUEST_GIVER.LINK}: Thank you. My lords see you as an example, and see your conquest of {TARGET_SETTLEMENT} as be a stepping stone toward further victories. {?QUEST_GIVER.GENDER}She{?}He{\\?} is grateful for your service and gave you {REWARD}{GOLD_ICON}.");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject);
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				textObject.SetTextVariable("REWARD", RewardGold);
				return textObject;
			}
		}

		private TextObject QuestLesserSuccessLog
		{
			get
			{
				TextObject textObject = new TextObject("{=1NtZ4BJh}{QUEST_GIVER.LINK}: Thank you. My lords see the conquest of {TARGET_SETTLEMENT} was a stepping stone toward further victories. {?QUEST_GIVER.GENDER}She{?}He{\\?} is grateful for your service. Because you didn't lead the army {?QUEST_GIVER.GENDER}She{?}He{\\?} gave you {LESSER_REWARD}{GOLD_ICON} of denars.");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject);
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				return textObject;
			}
		}

		private TextObject TargetSettlementTakenByAnotherFaction
		{
			get
			{
				TextObject textObject = new TextObject("{=diUtbbaH}{TARGET_SETTLEMENT} is taken by {NEW_OWNER_FACTION}. Your agreement with {QUEST_GIVER.LINK} is no longer valid.");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject);
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				return textObject;
			}
		}

		private TextObject TargetSettlementTakenByPlayerFaction
		{
			get
			{
				TextObject textObject = new TextObject("{=bEak0k5N}{TARGET_SETTLEMENT} is taken. You did not participate in this battle. Your agreement with {QUEST_GIVER.LINK} is moot.");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject);
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				return textObject;
			}
		}

		private TextObject LeftFaction
		{
			get
			{
				TextObject textObject = new TextObject("{=d8TeoRNf}You are no longer in the same faction with {QUEST_GIVER.LINK}. Your agreement with {QUEST_GIVER.LINK} is no longer valid.");
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject);
				return textObject;
			}
		}

		private TextObject DefectedToAnotherFaction
		{
			get
			{
				TextObject textObject = new TextObject("{=8iVkBa6D}{TARGET_SETTLEMENT_OWNER.LINK} has defected to {FACTION_NAME} along with {TARGET_SETTLEMENT}. Your agreement with {QUEST_GIVER.LINK} is moot.");
				StringHelpers.SetCharacterProperties("TARGET_SETTLEMENT_OWNER", _targetSettlement.OwnerClan.Leader.CharacterObject, textObject);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject);
				textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
				return textObject;
			}
		}

		private TextObject NoLongerEnemy
		{
			get
			{
				TextObject textObject = new TextObject("{=HknxaCpK}{TARGET_SETTLEMENT_OWNER.FACTION} and {QUEST_GIVER.FACTION} had made peace. Your agreement with {QUEST_GIVER.LINK} is moot.");
				StringHelpers.SetCharacterProperties("TARGET_SETTLEMENT_OWNER", _targetSettlement.OwnerClan.Leader.CharacterObject, textObject, includeDetails: true);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, includeDetails: true);
				return textObject;
			}
		}

		internal static void AutoGeneratedStaticCollectObjectsTheConquestOfSettlementIssueQuest(object o, List<object> collectedObjects)
		{
			((TheConquestOfSettlementIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(_targetSettlement);
		}

		internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
		{
			return ((TheConquestOfSettlementIssueQuest)o)._targetSettlement;
		}

		public TheConquestOfSettlementIssueQuest(string questId, Hero questGiver, Settlement targetSettlement, CampaignTime duration, int rewardGold)
			: base(questId, questGiver, duration, rewardGold)
		{
			_targetSettlement = targetSettlement;
			SetDialogs();
			InitializeQuestOnCreation();
		}

		protected override void SetDialogs()
		{
			OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start").NpcLine(new TextObject("{=QP3BbOW3}Very good. You have my blessing to summon an army if you wish, or, if you prefer to strike quickly, you may do so on your own...[ib:hip][if:convo_mocking_aristocratic]")).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
				.Consequence(QuestAcceptedConsequences)
				.CloseDialog();
			TextObject textObject = new TextObject("{=ICNtSonV}How are your preparations to take {TARGET_SETTLEMENT} coming along, {PLAYER.NAME}? I have assured my other lords that you will take it, so it will look bad if you fail.");
			textObject.SetTextVariable("TARGET_SETTLEMENT", _targetSettlement.Name);
			TextObject textObject2 = new TextObject("{=m4pZhnyd}They are going as planned, my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}...");
			StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject2);
			TextObject textObject3 = new TextObject("{=jFXkosnJ}This may be tricky, my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}...");
			StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject3);
			DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss").NpcLine(textObject).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
				.BeginPlayerOptions()
				.PlayerOption(textObject2)
				.NpcLine(new TextObject("{=opMDusHz}Good. I look forward to presenting you with your reward."))
				.Consequence(delegate
				{
					Campaign.Current.ConversationManager.ConversationEndOneShot += MapEventHelper.OnConversationEnd;
				})
				.CloseDialog()
				.PlayerOption(textObject3)
				.NpcLine(new TextObject("{=R85IMErK}Well, if you fail we will deal with that, but I would prefer not to."))
				.Consequence(delegate
				{
					Campaign.Current.ConversationManager.ConversationEndOneShot += MapEventHelper.OnConversationEnd;
				})
				.CloseDialog()
				.EndPlayerOptions();
		}

		private void QuestAcceptedConsequences()
		{
			StartQuest();
			AddLog(QuestStartedLog);
			AddTrackedObject(_targetSettlement);
		}

		protected override void HourlyTick()
		{
		}

		protected override void RegisterEvents()
		{
			CampaignEvents.WarDeclared.AddNonSerializedListener(this, OnWarDeclared);
			CampaignEvents.OnClanChangedKingdomEvent.AddNonSerializedListener(this, OnClanChangedKingdom);
			CampaignEvents.MapEventStarted.AddNonSerializedListener(this, OnMapEventStarted);
			CampaignEvents.SiegeCompletedEvent.AddNonSerializedListener(this, OnSiegeCompleted);
			CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, OnSettlementOwnerChanged);
			CampaignEvents.MakePeace.AddNonSerializedListener(this, OnPeaceDeclared);
		}

		private void OnPeaceDeclared(IFaction faction1, IFaction faction2, MakePeaceAction.MakePeaceDetail detail)
		{
			if (!base.QuestGiver.MapFaction.IsAtWarWith(_targetSettlement.MapFaction))
			{
				CompleteQuestWithCancel(NoLongerEnemy);
			}
		}

		private void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
		{
			if (base.IsOngoing && settlement == _targetSettlement)
			{
				if (newOwner == Hero.MainHero && detail == ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail.ByBarter)
				{
					QuestSuccess(2);
				}
				else if (newOwner.MapFaction != base.QuestGiver.MapFaction && !newOwner.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					TextObject targetSettlementTakenByAnotherFaction = TargetSettlementTakenByAnotherFaction;
					targetSettlementTakenByAnotherFaction.SetTextVariable("NEW_OWNER_FACTION", newOwner.MapFaction.EncyclopediaLinkWithName);
					CompleteQuestWithCancel(targetSettlementTakenByAnotherFaction);
				}
			}
		}

		private void OnSiegeCompleted(Settlement siegeSettlement, MobileParty attackerParty, bool isWin, MapEvent.BattleTypes battleType)
		{
			if (!isWin || siegeSettlement != _targetSettlement)
			{
				return;
			}
			if (attackerParty.MapFaction == base.QuestGiver.MapFaction)
			{
				if (attackerParty == MobileParty.MainParty)
				{
					QuestSuccess(10);
				}
				else if (siegeSettlement.Party.MapEvent.InvolvedParties.Contains(PartyBase.MainParty))
				{
					QuestLesserSuccess();
				}
				else
				{
					CompleteQuestWithCancel(TargetSettlementTakenByPlayerFaction);
				}
			}
			else
			{
				TextObject targetSettlementTakenByAnotherFaction = TargetSettlementTakenByAnotherFaction;
				targetSettlementTakenByAnotherFaction.SetTextVariable("NEW_OWNER_FACTION", attackerParty.MapFaction.EncyclopediaLinkWithName);
				CompleteQuestWithCancel(targetSettlementTakenByAnotherFaction);
			}
		}

		private void QuestLesserSuccess()
		{
			TextObject questLesserSuccessLog = QuestLesserSuccessLog;
			int num = RewardGold / 4;
			questLesserSuccessLog.SetTextVariable("LESSER_REWARD", num);
			AddLog(questLesserSuccessLog);
			GainRenownAction.Apply(Hero.MainHero, 5f);
			GiveGoldAction.ApplyForQuestBetweenCharacters(null, Hero.MainHero, num);
			RelationshipChangeWithQuestGiver = 1;
			foreach (Settlement item in base.QuestGiver.Clan.Settlements.Where((Settlement x) => x.IsFortification))
			{
				item.Town.Security += 2f;
				item.Town.Loyalty += 2f;
			}
			CompleteQuestWithSuccess();
		}

		private void QuestSuccess(int boost)
		{
			AddLog(QuestSuccessLog);
			RelationshipChangeWithQuestGiver = 5;
			GiveGoldAction.ApplyForQuestBetweenCharacters(null, Hero.MainHero, RewardGold);
			foreach (Settlement item in base.QuestGiver.Clan.Settlements.Where((Settlement x) => x.IsFortification))
			{
				item.Town.Security += boost;
				item.Town.Loyalty += boost;
			}
			CompleteQuestWithSuccess();
		}

		private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
		{
			if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
			{
				QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
			}
		}

		private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
		{
			if (clan == Clan.PlayerClan && oldKingdom == base.QuestGiver.MapFaction)
			{
				AddLog(LeftFaction);
				CompleteQuestWithFail();
			}
			else if (clan.Settlements.Contains(_targetSettlement))
			{
				if (newKingdom == base.QuestGiver.MapFaction)
				{
					QuestSuccess(1);
					return;
				}
				TextObject defectedToAnotherFaction = DefectedToAnotherFaction;
				defectedToAnotherFaction.SetTextVariable("FACTION_NAME", newKingdom.EncyclopediaLinkWithName);
				CompleteQuestWithCancel(defectedToAnotherFaction);
			}
			else if (base.QuestGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
			{
				CompleteQuestWithCancel(WarDeclaredQuestCancelLog);
			}
		}

		private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
		{
			QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, PlayerDeclaredWarQuestLogText, WarDeclaredQuestCancelLog);
		}

		protected override void InitializeQuestOnGameLoad()
		{
			SetDialogs();
		}

		protected override void OnTimedOut()
		{
			AddLog(QuestTimeOutFailLog);
			RelationshipChangeWithQuestGiver = -10;
			foreach (Settlement item in base.QuestGiver.Clan.Settlements.Where((Settlement x) => x.IsFortification))
			{
				item.Town.Security += -10f;
				item.Town.Loyalty += -10f;
			}
		}
	}

	public class TheConquestOfSettlementIssueTypeDefiner : SaveableTypeDefiner
	{
		public TheConquestOfSettlementIssueTypeDefiner()
			: base(620000)
		{
		}

		protected override void DefineClassTypes()
		{
			AddClassDefinition(typeof(TheConquestOfSettlementIssue), 1);
			AddClassDefinition(typeof(TheConquestOfSettlementIssueQuest), 2);
		}
	}

	private const IssueBase.IssueFrequency TheConquestOfSettlementIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

	public override void RegisterEvents()
	{
		CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, OnCheckForIssue);
	}

	private void OnCheckForIssue(Hero hero)
	{
		if (ConditionsHold(hero, out var targetSettlement))
		{
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(OnStartIssue, typeof(TheConquestOfSettlementIssue), IssueBase.IssueFrequency.VeryCommon, targetSettlement));
		}
		else
		{
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(TheConquestOfSettlementIssue), IssueBase.IssueFrequency.VeryCommon));
		}
	}

	private bool ConditionsHold(Hero issueGiver, out Settlement targetSettlement)
	{
		targetSettlement = null;
		if (issueGiver.IsLord && issueGiver.MapFaction.IsKingdomFaction && issueGiver.IsFactionLeader && !issueGiver.IsPrisoner && issueGiver.GetMapPoint() != null && issueGiver.Clan.Settlements.Any((Settlement x) => x.IsFortification))
		{
			MBList<Settlement> mBList = new MBList<Settlement>();
			foreach (Town allTown in Campaign.Current.AllTowns)
			{
				if (allTown.MapFaction.IsAtWarWith(issueGiver.MapFaction) && allTown.Settlement.Position2D.DistanceSquared(issueGiver.GetMapPoint().Position2D) < 7500f)
				{
					mBList.Add(allTown.Settlement);
				}
			}
			foreach (Town allCastle in Campaign.Current.AllCastles)
			{
				if (allCastle.MapFaction.IsAtWarWith(issueGiver.MapFaction) && allCastle.Settlement.Position2D.DistanceSquared(issueGiver.GetMapPoint().Position2D) < 7500f)
				{
					mBList.Add(allCastle.Settlement);
				}
			}
			if (mBList.Count > 0)
			{
				targetSettlement = mBList.GetRandomElement();
			}
		}
		return targetSettlement != null;
	}

	private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
	{
		return new TheConquestOfSettlementIssue(issueOwner, (Settlement)pid.RelatedObject);
	}

	public override void SyncData(IDataStore dataStore)
	{
	}
}
