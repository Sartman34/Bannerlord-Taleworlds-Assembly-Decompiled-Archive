using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.CampaignBehaviors;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CraftingSystem;

public class CraftingOrder : ITrackableCampaignObject, ITrackableBase
{
	private const string TwoHandedSwordCraftingTemplateId = "TwoHandedSword";

	private const string DaggerCraftingTemplateId = "Dagger";

	private const string ThrowingKnifeCraftingTemplateId = "ThrowingKnife";

	private const string TwoHandedAxeCraftingTemplateId = "TwoHandedAxe";

	private const string ThrowingAxeCraftingTemplateId = "ThrowingAxe";

	private const string TwoHandedPolearmCraftingTemplateId = "TwoHandedPolearm";

	private const string JavelinCraftingTemplateId = "Javelin";

	private const string TwoHandedPolearmUsageCouchableId = "TwoHandedPolearm_Couchable";

	private const string TwoHandedPolearmUsageBracingId = "TwoHandedPolearm_Bracing";

	private const int CraftingAttemptDifficultyGap = 50;

	[SaveableField(10)]
	public readonly int BaseGoldReward;

	[SaveableField(20)]
	public readonly float OrderDifficulty;

	[SaveableField(30)]
	private readonly WeaponDesign _weaponDesignTemplate;

	[SaveableField(40)]
	public ItemObject PreCraftedWeaponDesignItem;

	[SaveableField(50)]
	private readonly CraftingCampaignBehavior.CraftedItemInitializationData _preCraftedWeaponDesignItemData;

	[SaveableField(60)]
	public Hero OrderOwner;

	[SaveableField(70)]
	public readonly int DifficultyLevel;

	public bool IsLordOrder => OrderOwner.IsLord;

	internal static void AutoGeneratedStaticCollectObjectsCraftingOrder(object o, List<object> collectedObjects)
	{
		((CraftingOrder)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(PreCraftedWeaponDesignItem);
		collectedObjects.Add(OrderOwner);
		collectedObjects.Add(_weaponDesignTemplate);
		collectedObjects.Add(_preCraftedWeaponDesignItemData);
	}

	internal static object AutoGeneratedGetMemberValueBaseGoldReward(object o)
	{
		return ((CraftingOrder)o).BaseGoldReward;
	}

	internal static object AutoGeneratedGetMemberValueOrderDifficulty(object o)
	{
		return ((CraftingOrder)o).OrderDifficulty;
	}

	internal static object AutoGeneratedGetMemberValuePreCraftedWeaponDesignItem(object o)
	{
		return ((CraftingOrder)o).PreCraftedWeaponDesignItem;
	}

	internal static object AutoGeneratedGetMemberValueOrderOwner(object o)
	{
		return ((CraftingOrder)o).OrderOwner;
	}

	internal static object AutoGeneratedGetMemberValueDifficultyLevel(object o)
	{
		return ((CraftingOrder)o).DifficultyLevel;
	}

	internal static object AutoGeneratedGetMemberValue_weaponDesignTemplate(object o)
	{
		return ((CraftingOrder)o)._weaponDesignTemplate;
	}

	internal static object AutoGeneratedGetMemberValue_preCraftedWeaponDesignItemData(object o)
	{
		return ((CraftingOrder)o)._preCraftedWeaponDesignItemData;
	}

	public CraftingOrder(Hero orderOwner, float orderDifficulty, WeaponDesign weaponDesignTemplate, CraftingTemplate template, int difficultyLevel = -1)
	{
		OrderOwner = orderOwner;
		OrderDifficulty = orderDifficulty;
		DifficultyLevel = difficultyLevel;
		_weaponDesignTemplate = weaponDesignTemplate;
		Crafting.GenerateItem(weaponDesignTemplate, TextObject.Empty, orderOwner.Culture, template.ItemModifierGroup, ref PreCraftedWeaponDesignItem);
		if (PreCraftedWeaponDesignItem == null)
		{
			PreCraftedWeaponDesignItem = DefaultItems.Trash;
		}
		_preCraftedWeaponDesignItemData = new CraftingCampaignBehavior.CraftedItemInitializationData(weaponDesignTemplate, PreCraftedWeaponDesignItem.Name, orderOwner.Culture);
		int theoreticalMaxItemMarketValue = Campaign.Current.Models.TradeItemPriceFactorModel.GetTheoreticalMaxItemMarketValue(PreCraftedWeaponDesignItem);
		BaseGoldReward = (int)((float)theoreticalMaxItemMarketValue + (float)theoreticalMaxItemMarketValue * MBRandom.RandomFloatRanged(-0.1f, 0.1f));
	}

	public void InitializeCraftingOrderOnLoad()
	{
		PreCraftedWeaponDesignItem = Crafting.InitializePreCraftedWeaponOnLoad(PreCraftedWeaponDesignItem, _preCraftedWeaponDesignItemData.CraftedData, _preCraftedWeaponDesignItemData.ItemName, _preCraftedWeaponDesignItemData.Culture);
		if (PreCraftedWeaponDesignItem != null)
		{
			PreCraftedWeaponDesignItem.IsReady = true;
		}
	}

	public bool IsPreCraftedWeaponDesignValid()
	{
		if (_preCraftedWeaponDesignItemData.CraftedData.Template.BuildOrders == null)
		{
			return false;
		}
		PieceData[] buildOrders = _preCraftedWeaponDesignItemData.CraftedData.Template.BuildOrders;
		for (int i = 0; i < buildOrders.Length; i++)
		{
			PieceData pieceData = buildOrders[i];
			bool flag = false;
			WeaponDesignElement[] usedPieces = _preCraftedWeaponDesignItemData.CraftedData.UsedPieces;
			foreach (WeaponDesignElement weaponDesignElement in usedPieces)
			{
				if (pieceData.PieceType == weaponDesignElement.CraftingPiece.PieceType && weaponDesignElement.IsValid)
				{
					flag = true;
				}
			}
			if (!flag)
			{
				return false;
			}
		}
		return true;
	}

	public WeaponComponentData GetStatWeapon()
	{
		if (PreCraftedWeaponDesignItem.Weapons.Count > 1)
		{
			string stringId = PreCraftedWeaponDesignItem.WeaponDesign.Template.StringId;
			string text = "";
			switch (stringId)
			{
			case "TwoHandedSword":
				text = "TwoHandedSword";
				break;
			case "Dagger":
				text = "Dagger";
				break;
			case "ThrowingKnife":
				text = "ThrowingKnife";
				break;
			case "TwoHandedAxe":
				text = "TwoHandedAxe";
				break;
			case "ThrowingAxe":
				text = "ThrowingAxe";
				break;
			case "TwoHandedPolearm":
				text = "TwoHandedPolearm";
				break;
			case "Javelin":
				text = "Javelin";
				break;
			}
			if (!text.IsEmpty())
			{
				foreach (WeaponComponentData weapon in PreCraftedWeaponDesignItem.Weapons)
				{
					if (weapon.WeaponDescriptionId == text || (text == "TwoHandedPolearm" && (weapon.WeaponDescriptionId == "TwoHandedPolearm_Couchable" || weapon.WeaponDescriptionId == "TwoHandedPolearm_Bracing")))
					{
						return weapon;
					}
				}
			}
		}
		return PreCraftedWeaponDesignItem.PrimaryWeapon;
	}

	public bool IsOrderAvailableForHero(Hero hero)
	{
		return (float)(hero.GetSkillValue(DefaultSkills.Crafting) + 50) >= OrderDifficulty;
	}

	public bool CanHeroCompleteOrder(Hero hero, ItemObject craftDesignItem)
	{
		return true;
	}

	public float GetOrderExperience(ItemObject craftedItem, ItemModifier itemModifier)
	{
		int num = (int)(PreCraftedWeaponDesignItem.Tier + 1);
		int num2 = (int)(craftedItem.Tier + 1);
		float value = MathF.Pow(3f, num2 - num);
		value = MathF.Clamp(value, 0f, 1f);
		float num3 = (float)Campaign.Current.Models.TradeItemPriceFactorModel.GetTheoreticalMaxItemMarketValue(PreCraftedWeaponDesignItem) * 0.25f;
		CheckForBonusesAndPenalties(craftedItem, itemModifier, out var craftedStatsSum, out var requiredStatsSum, out var thrustDamageCheck, out var swingDamageCheck);
		if (craftedStatsSum < requiredStatsSum || !thrustDamageCheck || !swingDamageCheck)
		{
			num3 = num3 * 0.5f * value;
		}
		return num3;
	}

	public void CheckForBonusesAndPenalties(ItemObject craftedItem, ItemModifier itemModifier, out float craftedStatsSum, out float requiredStatsSum, out bool thrustDamageCheck, out bool swingDamageCheck)
	{
		List<CraftingStatData> list = null;
		List<CraftingStatData> list2 = null;
		list = GetStatDataForItem(PreCraftedWeaponDesignItem, out var weapon);
		list2 = GetStatDataForItem(craftedItem, out var weapon2);
		swingDamageCheck = true;
		thrustDamageCheck = true;
		if (weapon.SwingDamageType != DamageTypes.Invalid && weapon.SwingDamageType != weapon2.SwingDamageType)
		{
			swingDamageCheck = false;
		}
		if (weapon.ThrustDamageType != DamageTypes.Invalid && weapon.ThrustDamageType != weapon2.ThrustDamageType)
		{
			thrustDamageCheck = false;
		}
		requiredStatsSum = 0f;
		craftedStatsSum = 0f;
		if (itemModifier != null)
		{
			List<CraftingStatData> list3 = new List<CraftingStatData>();
			foreach (CraftingStatData item in list2)
			{
				float curValue = item.CurValue;
				if (item.Type == CraftingTemplate.CraftingStatTypes.SwingDamage)
				{
					curValue = itemModifier.ModifyDamage((int)item.CurValue);
				}
				else if (item.Type == CraftingTemplate.CraftingStatTypes.SwingSpeed)
				{
					curValue = itemModifier.ModifySpeed((int)item.CurValue);
				}
				else if (item.Type == CraftingTemplate.CraftingStatTypes.ThrustDamage)
				{
					curValue = itemModifier.ModifyDamage((int)item.CurValue);
				}
				else if (item.Type == CraftingTemplate.CraftingStatTypes.ThrustSpeed)
				{
					curValue = itemModifier.ModifySpeed((int)item.CurValue);
				}
				else if (item.Type == CraftingTemplate.CraftingStatTypes.Handling)
				{
					curValue = itemModifier.ModifySpeed((int)item.CurValue);
				}
				list3.Add(new CraftingStatData(item.DescriptionText, curValue, item.MaxValue, item.Type, item.DamageType));
			}
			list2 = list3;
		}
		foreach (CraftingStatData orderStat in list)
		{
			if (orderStat.IsValid)
			{
				CraftingStatData craftingStatData = list2.FirstOrDefault((CraftingStatData x) => x.Type == orderStat.Type);
				if (craftingStatData.CurValue != orderStat.CurValue)
				{
					requiredStatsSum += orderStat.CurValue;
					craftedStatsSum += craftingStatData.CurValue;
				}
			}
		}
	}

	public List<CraftingStatData> GetStatDataForItem(ItemObject itemObject, out WeaponComponentData weapon)
	{
		List<CraftingStatData> list = new List<CraftingStatData>();
		weapon = null;
		WeaponComponentData statWeapon = GetStatWeapon();
		int usageIndex = -1;
		for (int i = 0; i < itemObject.Weapons.Count; i++)
		{
			if (statWeapon.WeaponDescriptionId == itemObject.Weapons[i].WeaponDescriptionId)
			{
				weapon = itemObject.Weapons[i];
				usageIndex = i;
				break;
			}
		}
		if (weapon == null && PreCraftedWeaponDesignItem.Weapons.Count > 1)
		{
			for (int j = 0; j < PreCraftedWeaponDesignItem.Weapons.Count; j++)
			{
				if (itemObject.PrimaryWeapon.WeaponDescriptionId == PreCraftedWeaponDesignItem.Weapons[j].WeaponDescriptionId)
				{
					weapon = itemObject.PrimaryWeapon;
					usageIndex = 1;
					break;
				}
			}
		}
		bool flag = weapon.ThrustDamageType != DamageTypes.Invalid;
		bool flag2 = weapon.SwingDamageType != DamageTypes.Invalid;
		foreach (KeyValuePair<CraftingTemplate.CraftingStatTypes, float> statData in itemObject.WeaponDesign.Template.GetStatDatas(usageIndex, weapon.ThrustDamageType, weapon.SwingDamageType))
		{
			TextObject textObject = GameTexts.FindText("str_crafting_stat", statData.Key.ToString());
			if (statData.Key == CraftingTemplate.CraftingStatTypes.ThrustSpeed && flag)
			{
				list.Add(new CraftingStatData(textObject, weapon.ThrustSpeed, statData.Value, statData.Key));
			}
			else if (statData.Key == CraftingTemplate.CraftingStatTypes.SwingSpeed && flag2)
			{
				list.Add(new CraftingStatData(textObject, weapon.SwingSpeed, statData.Value, statData.Key));
			}
			else if (statData.Key == CraftingTemplate.CraftingStatTypes.ThrustDamage && flag)
			{
				textObject.SetTextVariable("THRUST_DAMAGE_TYPE", GameTexts.FindText("str_inventory_dmg_type", ((int)weapon.ThrustDamageType).ToString()));
				list.Add(new CraftingStatData(textObject, weapon.ThrustDamage, statData.Value, statData.Key, weapon.ThrustDamageType));
			}
			else if (statData.Key == CraftingTemplate.CraftingStatTypes.SwingDamage && flag2)
			{
				textObject.SetTextVariable("SWING_DAMAGE_TYPE", GameTexts.FindText("str_inventory_dmg_type", ((int)weapon.SwingDamageType).ToString()));
				list.Add(new CraftingStatData(textObject, weapon.SwingDamage, statData.Value, statData.Key, weapon.SwingDamageType));
			}
			else if (statData.Key == CraftingTemplate.CraftingStatTypes.Handling)
			{
				list.Add(new CraftingStatData(textObject, weapon.Handling, statData.Value, statData.Key));
			}
			else if (statData.Key == CraftingTemplate.CraftingStatTypes.MissileDamage)
			{
				DamageTypes damageType = DamageTypes.Invalid;
				if (weapon.ThrustDamageType != DamageTypes.Invalid)
				{
					damageType = weapon.ThrustDamageType;
					textObject.SetTextVariable("THRUST_DAMAGE_TYPE", GameTexts.FindText("str_inventory_dmg_type", ((int)weapon.ThrustDamageType).ToString()));
				}
				else if (weapon.SwingDamageType != DamageTypes.Invalid)
				{
					damageType = weapon.SwingDamageType;
					textObject.SetTextVariable("SWING_DAMAGE_TYPE", GameTexts.FindText("str_inventory_dmg_type", ((int)weapon.SwingDamageType).ToString()));
				}
				else
				{
					Debug.FailedAssert("Missile damage type is missing.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\CraftingSystem\\CraftingOrder.cs", "GetStatDataForItem", 365);
				}
				list.Add(new CraftingStatData(textObject, weapon.MissileDamage, statData.Value, statData.Key, damageType));
			}
			else if (statData.Key == CraftingTemplate.CraftingStatTypes.MissileSpeed)
			{
				list.Add(new CraftingStatData(textObject, weapon.MissileSpeed, statData.Value, statData.Key));
			}
			else if (statWeapon.IsRangedWeapon && statData.Key == CraftingTemplate.CraftingStatTypes.Accuracy)
			{
				list.Add(new CraftingStatData(textObject, weapon.Accuracy, statData.Value, statData.Key));
			}
			else if (statData.Key == CraftingTemplate.CraftingStatTypes.WeaponReach)
			{
				list.Add(new CraftingStatData(textObject, weapon.WeaponLength, statData.Value, statData.Key));
			}
		}
		return list;
	}

	public TextObject GetName()
	{
		return PreCraftedWeaponDesignItem.Name;
	}

	public Vec3 GetPosition()
	{
		float height = 0f;
		Campaign.Current.MapSceneWrapper.GetHeightAtPoint(OrderOwner.CurrentSettlement.Position2D, ref height);
		return new Vec3(OrderOwner.CurrentSettlement.Position2D.x, OrderOwner.CurrentSettlement.Position2D.y, height);
	}

	public float GetTrackDistanceToMainAgent()
	{
		return GetPosition().Distance(Hero.MainHero.GetPosition());
	}

	public bool CheckTracked(BasicCharacterObject basicCharacter)
	{
		return false;
	}
}
