using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Library;
using TaleWorlds.Localization.TextProcessor;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Localization;

[Serializable]
public class TextObject
{
	[SaveableField(1)]
	public string Value;

	[CachedData]
	internal List<MBTextToken> cachedTokens;

	[CachedData]
	internal int cachedTextLanguageId = -1;

	[SaveableProperty(2)]
	public Dictionary<string, object> Attributes { get; private set; }

	public static TextObject Empty { get; private set; } = new TextObject();


	public int Length => Value.Length;

	public bool IsLink => Value.StartsWith("{=!}{.link}");

	internal static void AutoGeneratedStaticCollectObjectsTextObject(object o, List<object> collectedObjects)
	{
		((TextObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(Attributes);
	}

	internal static object AutoGeneratedGetMemberValueAttributes(object o)
	{
		return ((TextObject)o).Attributes;
	}

	internal static object AutoGeneratedGetMemberValueValue(object o)
	{
		return ((TextObject)o).Value;
	}

	public TextObject(string value = "", Dictionary<string, object> attributes = null)
	{
		Value = value;
		Attributes = attributes;
	}

	public TextObject(int value, Dictionary<string, object> attributes = null)
		: this(value.ToString(), attributes)
	{
	}

	public TextObject(float value, Dictionary<string, object> attributes = null)
		: this(value.ToString(), attributes)
	{
	}

	internal List<MBTextToken> GetCachedTokens()
	{
		if (Value != null)
		{
			if (cachedTokens == null || cachedTextLanguageId != MBTextManager.GetActiveTextLanguageIndex())
			{
				string localizedText = MBTextManager.GetLocalizedText(Value);
				cachedTokens = MBTextManager.Tokenizer.Tokenize(localizedText);
				cachedTextLanguageId = MBTextManager.GetActiveTextLanguageIndex();
			}
			return cachedTokens;
		}
		return null;
	}

	public void CacheTokens()
	{
		if (Value != null)
		{
			string localizedText = MBTextManager.GetLocalizedText(Value);
			cachedTokens = MBTextManager.Tokenizer.Tokenize(localizedText);
			cachedTextLanguageId = MBTextManager.GetActiveTextLanguageIndex();
		}
	}

	internal static TextObject TryGetOrCreateFromObject(object o)
	{
		if (o is TextObject)
		{
			return (TextObject)o;
		}
		if (o is string)
		{
			return new TextObject((string)o);
		}
		if (o is int)
		{
			return new TextObject((int)o);
		}
		if (o is float)
		{
			return new TextObject((float)o);
		}
		return null;
	}

	public static bool IsNullOrEmpty(TextObject to)
	{
		if (to != Empty && to != null)
		{
			return string.IsNullOrEmpty(to.Value);
		}
		return true;
	}

	public override string ToString()
	{
		string result;
		try
		{
			result = MBTextManager.ProcessTextToString(this, shouldClear: true);
		}
		catch (Exception ex)
		{
			result = "Error at id: " + GetID() + ". Lang: " + MBTextManager.ActiveTextLanguage;
			Debug.Print(ex.Message);
		}
		return result;
	}

	public string ToStringWithoutClear()
	{
		string result;
		try
		{
			result = MBTextManager.ProcessTextToString(this, shouldClear: false);
		}
		catch (Exception ex)
		{
			result = "Error at id: " + GetID() + ". Lang: " + MBTextManager.ActiveTextLanguage;
			Debug.Print(ex.Message);
		}
		return result;
	}

	public string Format(float p1)
	{
		MBTextManager.SetTextVariable("A0", p1.ToString("F1"));
		return new TextObject(Value).ToString();
	}

	public bool Contains(TextObject to)
	{
		return Value.Contains(to.Value);
	}

	public bool Contains(string text)
	{
		return Value.Contains(text);
	}

	public bool Equals(TextObject to)
	{
		if (Value == to.Value)
		{
			if (Attributes != null || to.Attributes != null)
			{
				if (Attributes != null && to.Attributes != null)
				{
					return Attributes.SequenceEqual(to.Attributes);
				}
				return false;
			}
			return true;
		}
		return false;
	}

	public bool HasSameValue(TextObject to)
	{
		return Value == to.Value;
	}

	public static List<string> ConvertToStringList(List<TextObject> to)
	{
		List<string> list = new List<string>();
		foreach (TextObject item in to)
		{
			list.Add(item.Value);
		}
		return list;
	}

	private TextObject SetTextVariableFromObject(string tag, object variable)
	{
		if (Attributes == null)
		{
			Attributes = new Dictionary<string, object>();
		}
		Attributes[tag] = variable;
		return this;
	}

	public TextObject SetTextVariable(string tag, TextObject variable)
	{
		return SetTextVariableFromObject(tag, variable);
	}

	public TextObject SetTextVariable(string tag, string variable)
	{
		SetTextVariableFromObject(tag, variable);
		return this;
	}

	public TextObject SetTextVariable(string tag, float variable)
	{
		SetTextVariableFromObject(tag, variable);
		return this;
	}

	public TextObject SetTextVariable(string tag, int variable)
	{
		SetTextVariableFromObject(tag, variable);
		return this;
	}

	public void AddIDToValue(string id)
	{
		if (!Value.Contains(id) && !Value.StartsWith("{="))
		{
			string value = Value;
			Value = "{=" + id + "}" + value;
		}
	}

	public bool GetVariableValue(string tag, out TextObject variable)
	{
		variable = Empty;
		if (Attributes == null)
		{
			return false;
		}
		if (Attributes.TryGetValue(tag, out var value))
		{
			variable = TryGetOrCreateFromObject(value);
			if (variable?.Value != "")
			{
				return true;
			}
			if (variable?.Attributes != null)
			{
				variable.GetVariableValue(tag, out variable);
			}
			return true;
		}
		return false;
	}

	public int GetValueHashCode()
	{
		return Value.GetHashCode();
	}

	public TextObject CopyTextObject()
	{
		Dictionary<string, object> attributes = Attributes;
		if (Attributes != null && Attributes.Any())
		{
			Dictionary<string, object> dictionary = new Dictionary<string, object>();
			foreach (KeyValuePair<string, object> attribute in Attributes)
			{
				dictionary.Add(attribute.Key, attribute.Value);
			}
			attributes = dictionary;
		}
		return new TextObject(Value, attributes)
		{
			cachedTokens = cachedTokens,
			cachedTextLanguageId = cachedTextLanguageId
		};
	}

	public string GetID()
	{
		MBStringBuilder mBStringBuilder = default(MBStringBuilder);
		mBStringBuilder.Initialize(16, "GetID");
		if (Value != null && Value.Length > 2 && Value[0] == '{' && Value[1] == '=')
		{
			for (int i = 2; i < Value.Length && Value[i] != '}'; i++)
			{
				mBStringBuilder.Append(Value[i]);
			}
		}
		return mBStringBuilder.ToStringAndRelease();
	}

	internal bool TryGetAttributesValue(string attribute, out TextObject value)
	{
		if (Attributes != null && Attributes.TryGetValue(attribute, out var value2))
		{
			value = TryGetOrCreateFromObject(value2);
			return true;
		}
		value = null;
		return false;
	}
}
