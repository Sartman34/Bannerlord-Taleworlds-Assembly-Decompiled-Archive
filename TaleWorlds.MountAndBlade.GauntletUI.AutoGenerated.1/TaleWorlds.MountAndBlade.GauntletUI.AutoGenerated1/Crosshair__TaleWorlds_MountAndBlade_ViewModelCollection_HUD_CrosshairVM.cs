using System.ComponentModel;
using System.Numerics;
using TaleWorlds.GauntletUI;
using TaleWorlds.GauntletUI.BaseTypes;
using TaleWorlds.GauntletUI.Data;
using TaleWorlds.GauntletUI.ExtraWidgets;
using TaleWorlds.GauntletUI.Layout;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade.GauntletUI.Widgets.Mission;
using TaleWorlds.MountAndBlade.ViewModelCollection.HUD;

namespace TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated1;

public class Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM : Widget, IGeneratedGauntletMovieRoot
{
	private Widget _widget;

	private CrosshairWidget _widget_0;

	private ValueBasedVisibilityWidget _widget_0_0;

	private BrushWidget _widget_0_0_0;

	private BrushWidget _widget_0_0_1;

	private BrushWidget _widget_0_0_2;

	private BrushWidget _widget_0_0_3;

	private ValueBasedVisibilityWidget _widget_0_1;

	private BrushWidget _widget_0_1_0;

	private BrushWidget _widget_0_1_1;

	private BrushWidget _widget_0_1_2;

	private Widget _widget_1;

	private ListPanel _widget_1_0;

	private BrushWidget _widget_2;

	private BrushWidget _widget_3;

	private BrushWidget _widget_4;

	private BrushWidget _widget_5;

	private BrushWidget _widget_6;

	private BrushWidget _widget_7;

	private CrosshairVM _datasource_Root;

	private MBBindingList<ReloadPhaseItemVM> _datasource_Root_ReloadPhases;

	public Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM(UIContext context)
		: base(context)
	{
	}

	public void CreateWidgets()
	{
		_widget = this;
		_widget_0 = new CrosshairWidget(base.Context);
		_widget.AddChild(_widget_0);
		_widget_0_0 = new ValueBasedVisibilityWidget(base.Context);
		_widget_0.AddChild(_widget_0_0);
		_widget_0_0_0 = new BrushWidget(base.Context);
		_widget_0_0.AddChild(_widget_0_0_0);
		_widget_0_0_1 = new BrushWidget(base.Context);
		_widget_0_0.AddChild(_widget_0_0_1);
		_widget_0_0_2 = new BrushWidget(base.Context);
		_widget_0_0.AddChild(_widget_0_0_2);
		_widget_0_0_3 = new BrushWidget(base.Context);
		_widget_0_0.AddChild(_widget_0_0_3);
		_widget_0_1 = new ValueBasedVisibilityWidget(base.Context);
		_widget_0.AddChild(_widget_0_1);
		_widget_0_1_0 = new BrushWidget(base.Context);
		_widget_0_1.AddChild(_widget_0_1_0);
		_widget_0_1_1 = new BrushWidget(base.Context);
		_widget_0_1.AddChild(_widget_0_1_1);
		_widget_0_1_2 = new BrushWidget(base.Context);
		_widget_0_1.AddChild(_widget_0_1_2);
		_widget_1 = new Widget(base.Context);
		_widget.AddChild(_widget_1);
		_widget_1_0 = new ListPanel(base.Context);
		_widget_1.AddChild(_widget_1_0);
		_widget_2 = new BrushWidget(base.Context);
		_widget.AddChild(_widget_2);
		_widget_3 = new BrushWidget(base.Context);
		_widget.AddChild(_widget_3);
		_widget_4 = new BrushWidget(base.Context);
		_widget.AddChild(_widget_4);
		_widget_5 = new BrushWidget(base.Context);
		_widget.AddChild(_widget_5);
		_widget_6 = new BrushWidget(base.Context);
		_widget.AddChild(_widget_6);
		_widget_7 = new BrushWidget(base.Context);
		_widget.AddChild(_widget_7);
	}

	public void SetIds()
	{
		_widget_2.Id = "TopArrow";
		_widget_3.Id = "BottomArrow";
		_widget_4.Id = "LeftArrow";
		_widget_5.Id = "RightArrow";
		_widget_6.Id = "HitMarker";
		_widget_7.Id = "HeadshotMarker";
	}

	public void SetAttributes()
	{
		base.WidthSizePolicy = SizePolicy.StretchToParent;
		base.HeightSizePolicy = SizePolicy.StretchToParent;
		base.IsDisabled = true;
		_widget_0.WidthSizePolicy = SizePolicy.Fixed;
		_widget_0.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0.SuggestedWidth = 74f;
		_widget_0.SuggestedHeight = 74f;
		_widget_0.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_0.VerticalAlignment = VerticalAlignment.Center;
		_widget_0.TopArrow = _widget_2;
		_widget_0.BottomArrow = _widget_3;
		_widget_0.LeftArrow = _widget_4;
		_widget_0.RightArrow = _widget_5;
		_widget_0.HitMarker = _widget_6;
		_widget_0.HeadshotMarker = _widget_7;
		_widget_0_0.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_0_0.HeightSizePolicy = SizePolicy.StretchToParent;
		_widget_0_0.WatchType = ValueBasedVisibilityWidget.WatchTypes.Equal;
		_widget_0_0.IndexToBeVisible = 0;
		_widget_0_0_0.WidthSizePolicy = SizePolicy.Fixed;
		_widget_0_0_0.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0_0_0.SuggestedWidth = 40f;
		_widget_0_0_0.SuggestedHeight = 40f;
		_widget_0_0_0.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_0_0_0.VerticalAlignment = VerticalAlignment.Top;
		_widget_0_0_0.Brush = base.Context.GetBrush("Crosshair.Top");
		_widget_0_0_1.WidthSizePolicy = SizePolicy.Fixed;
		_widget_0_0_1.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0_0_1.SuggestedWidth = 40f;
		_widget_0_0_1.SuggestedHeight = 40f;
		_widget_0_0_1.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_0_0_1.VerticalAlignment = VerticalAlignment.Bottom;
		_widget_0_0_1.Brush = base.Context.GetBrush("Crosshair.Bottom");
		_widget_0_0_2.WidthSizePolicy = SizePolicy.Fixed;
		_widget_0_0_2.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0_0_2.SuggestedWidth = 40f;
		_widget_0_0_2.SuggestedHeight = 40f;
		_widget_0_0_2.HorizontalAlignment = HorizontalAlignment.Left;
		_widget_0_0_2.VerticalAlignment = VerticalAlignment.Center;
		_widget_0_0_2.Brush = base.Context.GetBrush("Crosshair.Left.Square");
		_widget_0_0_3.WidthSizePolicy = SizePolicy.Fixed;
		_widget_0_0_3.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0_0_3.SuggestedWidth = 40f;
		_widget_0_0_3.SuggestedHeight = 40f;
		_widget_0_0_3.HorizontalAlignment = HorizontalAlignment.Right;
		_widget_0_0_3.VerticalAlignment = VerticalAlignment.Center;
		_widget_0_0_3.Brush = base.Context.GetBrush("Crosshair.Right.Square");
		_widget_0_1.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_0_1.HeightSizePolicy = SizePolicy.StretchToParent;
		_widget_0_1.WatchType = ValueBasedVisibilityWidget.WatchTypes.Equal;
		_widget_0_1.IndexToBeVisible = 1;
		_widget_0_1_0.WidthSizePolicy = SizePolicy.Fixed;
		_widget_0_1_0.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0_1_0.SuggestedWidth = 40f;
		_widget_0_1_0.SuggestedHeight = 40f;
		_widget_0_1_0.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_0_1_0.VerticalAlignment = VerticalAlignment.Top;
		_widget_0_1_0.Brush = base.Context.GetBrush("Crosshair.Top");
		_widget_0_1_1.WidthSizePolicy = SizePolicy.Fixed;
		_widget_0_1_1.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0_1_1.SuggestedWidth = 40f;
		_widget_0_1_1.SuggestedHeight = 40f;
		_widget_0_1_1.HorizontalAlignment = HorizontalAlignment.Left;
		_widget_0_1_1.VerticalAlignment = VerticalAlignment.Bottom;
		_widget_0_1_1.Brush = base.Context.GetBrush("Crosshair.Left");
		_widget_0_1_2.WidthSizePolicy = SizePolicy.Fixed;
		_widget_0_1_2.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0_1_2.SuggestedWidth = 40f;
		_widget_0_1_2.SuggestedHeight = 40f;
		_widget_0_1_2.HorizontalAlignment = HorizontalAlignment.Right;
		_widget_0_1_2.VerticalAlignment = VerticalAlignment.Bottom;
		_widget_0_1_2.Brush = base.Context.GetBrush("Crosshair.Right");
		_widget_1.WidthSizePolicy = SizePolicy.CoverChildren;
		_widget_1.HeightSizePolicy = SizePolicy.CoverChildren;
		_widget_1.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_1.VerticalAlignment = VerticalAlignment.Center;
		_widget_1.PositionXOffset = 80f;
		_widget_1_0.WidthSizePolicy = SizePolicy.CoverChildren;
		_widget_1_0.HeightSizePolicy = SizePolicy.CoverChildren;
		_widget_1_0.StackLayout.LayoutMethod = LayoutMethod.VerticalTopToBottom;
		_widget_2.WidthSizePolicy = SizePolicy.Fixed;
		_widget_2.HeightSizePolicy = SizePolicy.Fixed;
		_widget_2.SuggestedWidth = 31f;
		_widget_2.SuggestedHeight = 131f;
		_widget_2.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_2.VerticalAlignment = VerticalAlignment.Center;
		_widget_2.PositionYOffset = -350f;
		_widget_2.Sprite = base.Context.SpriteData.GetSprite("crosshair_arrow_vertical");
		_widget_3.WidthSizePolicy = SizePolicy.Fixed;
		_widget_3.HeightSizePolicy = SizePolicy.Fixed;
		_widget_3.SuggestedWidth = 31f;
		_widget_3.SuggestedHeight = 131f;
		_widget_3.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_3.VerticalAlignment = VerticalAlignment.Center;
		_widget_3.PositionYOffset = 350f;
		_widget_3.Sprite = base.Context.SpriteData.GetSprite("crosshair_arrow_vertical");
		_widget_3.Brush.VerticalFlip = true;
		_widget_4.WidthSizePolicy = SizePolicy.Fixed;
		_widget_4.HeightSizePolicy = SizePolicy.Fixed;
		_widget_4.SuggestedWidth = 131f;
		_widget_4.SuggestedHeight = 31f;
		_widget_4.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_4.VerticalAlignment = VerticalAlignment.Center;
		_widget_4.PositionXOffset = -350f;
		_widget_4.Sprite = base.Context.SpriteData.GetSprite("crosshair_arrow");
		_widget_5.WidthSizePolicy = SizePolicy.Fixed;
		_widget_5.HeightSizePolicy = SizePolicy.Fixed;
		_widget_5.SuggestedWidth = 131f;
		_widget_5.SuggestedHeight = 31f;
		_widget_5.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_5.VerticalAlignment = VerticalAlignment.Center;
		_widget_5.PositionXOffset = 350f;
		_widget_5.Sprite = base.Context.SpriteData.GetSprite("crosshair_arrow");
		_widget_5.Brush.HorizontalFlip = true;
		_widget_6.WidthSizePolicy = SizePolicy.Fixed;
		_widget_6.HeightSizePolicy = SizePolicy.Fixed;
		_widget_6.SuggestedWidth = 46f;
		_widget_6.SuggestedHeight = 46f;
		_widget_6.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_6.VerticalAlignment = VerticalAlignment.Center;
		_widget_6.Brush = base.Context.GetBrush("Crosshair.HitMarker");
		_widget_6.UseGlobalTimeForAnimation = false;
		_widget_7.WidthSizePolicy = SizePolicy.Fixed;
		_widget_7.HeightSizePolicy = SizePolicy.Fixed;
		_widget_7.SuggestedWidth = 6f;
		_widget_7.SuggestedHeight = 6f;
		_widget_7.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_7.VerticalAlignment = VerticalAlignment.Center;
		_widget_7.Brush = base.Context.GetBrush("Crosshair.HeadshotMarker");
	}

	public void RefreshBindingWithChildren()
	{
		CrosshairVM datasource_Root = _datasource_Root;
		SetDataSource(null);
		SetDataSource(datasource_Root);
	}

	public void DestroyDataSource()
	{
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget_0.PropertyChanged -= PropertyChangedListenerOf_widget_0;
		_widget_0.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0;
		_widget_0.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0;
		_widget_0.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0;
		_widget_0.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0;
		_widget_0.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0;
		_widget_0.intPropertyChanged -= intPropertyChangedListenerOf_widget_0;
		_widget_0.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0;
		_widget_0.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0;
		_widget_0_0.PropertyChanged -= PropertyChangedListenerOf_widget_0_0;
		_widget_0_0.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0_0;
		_widget_0_0.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0_0;
		_widget_0_0.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0_0;
		_widget_0_0.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0_0;
		_widget_0_0.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0_0;
		_widget_0_0.intPropertyChanged -= intPropertyChangedListenerOf_widget_0_0;
		_widget_0_0.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0_0;
		_widget_0_0.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0_0;
		_widget_0_1.PropertyChanged -= PropertyChangedListenerOf_widget_0_1;
		_widget_0_1.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0_1;
		_widget_0_1.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0_1;
		_widget_0_1.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0_1;
		_widget_0_1.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0_1;
		_widget_0_1.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0_1;
		_widget_0_1.intPropertyChanged -= intPropertyChangedListenerOf_widget_0_1;
		_widget_0_1.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0_1;
		_widget_0_1.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0_1;
		_widget_1.PropertyChanged -= PropertyChangedListenerOf_widget_1;
		_widget_1.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_1;
		_widget_1.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_1;
		_widget_1.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_1;
		_widget_1.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_1;
		_widget_1.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_1;
		_widget_1.intPropertyChanged -= intPropertyChangedListenerOf_widget_1;
		_widget_1.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_1;
		_widget_1.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_1;
		if (_datasource_Root_ReloadPhases != null)
		{
			_datasource_Root_ReloadPhases.ListChanged -= OnList_datasource_Root_ReloadPhasesChanged;
			for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_1_0.GetChild(num);
				((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)child).OnBeforeRemovedChild(child);
				((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)_widget_1_0.GetChild(num)).DestroyDataSource();
			}
			_datasource_Root_ReloadPhases = null;
		}
		_datasource_Root = null;
	}

	public void SetDataSource(CrosshairVM dataSource)
	{
		RefreshDataSource_datasource_Root(dataSource);
	}

	private void PropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void intPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget_0(string propertyName)
	{
		switch (propertyName)
		{
		case "IsVisible":
			_datasource_Root.IsVisible = _widget_0.IsVisible;
			break;
		case "TopArrowOpacity":
			_datasource_Root.TopArrowOpacity = _widget_0.TopArrowOpacity;
			break;
		case "BottomArrowOpacity":
			_datasource_Root.BottomArrowOpacity = _widget_0.BottomArrowOpacity;
			break;
		case "RightArrowOpacity":
			_datasource_Root.RightArrowOpacity = _widget_0.RightArrowOpacity;
			break;
		case "LeftArrowOpacity":
			_datasource_Root.LeftArrowOpacity = _widget_0.LeftArrowOpacity;
			break;
		case "IsTargetInvalid":
			_datasource_Root.IsTargetInvalid = _widget_0.IsTargetInvalid;
			break;
		case "CrosshairAccuracy":
			_datasource_Root.CrosshairAccuracy = _widget_0.CrosshairAccuracy;
			break;
		case "CrosshairScale":
			_datasource_Root.CrosshairScale = _widget_0.CrosshairScale;
			break;
		case "ShowHitMarker":
			_datasource_Root.IsHitMarkerVisible = _widget_0.ShowHitMarker;
			break;
		case "IsVictimDead":
			_datasource_Root.IsVictimDead = _widget_0.IsVictimDead;
			break;
		case "IsHumanoidHeadshot":
			_datasource_Root.IsHumanoidHeadshot = _widget_0.IsHumanoidHeadshot;
			break;
		}
	}

	private void PropertyChangedListenerOf_widget_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0(propertyName);
	}

	private void intPropertyChangedListenerOf_widget_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget_0_0(string propertyName)
	{
		if (propertyName == "IndexToWatch")
		{
			_datasource_Root.CrosshairType = _widget_0_0.IndexToWatch;
		}
	}

	private void PropertyChangedListenerOf_widget_0_1(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget_0_1(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget_0_1(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget_0_1(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget_0_1(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget_0_1(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget_0_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0_1(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget_0_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0_1(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget_0_1(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget_0_1(propertyName);
	}

	private void intPropertyChangedListenerOf_widget_0_1(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget_0_1(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget_0_1(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget_0_1(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget_0_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget_0_1(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget_0_1(string propertyName)
	{
		if (propertyName == "IndexToWatch")
		{
			_datasource_Root.CrosshairType = _widget_0_1.IndexToWatch;
		}
	}

	private void PropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void intPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget_1(string propertyName)
	{
		if (propertyName == "IsVisible")
		{
			_datasource_Root.IsReloadPhasesVisible = _widget_1.IsVisible;
		}
	}

	private void ViewModelPropertyChangedListenerOf_datasource_Root(object sender, PropertyChangedEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithValueListenerOf_datasource_Root(object sender, PropertyChangedWithValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root(object sender, PropertyChangedWithBoolValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root(object sender, PropertyChangedWithFloatValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithUIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root(object sender, PropertyChangedWithColorValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root(object sender, PropertyChangedWithDoubleValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root(object sender, PropertyChangedWithVec2ValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void HandleViewModelPropertyChangeOf_datasource_Root(string propertyName)
	{
		switch (propertyName)
		{
		case "ReloadPhases":
			RefreshDataSource_datasource_Root_ReloadPhases(_datasource_Root.ReloadPhases);
			break;
		case "IsVisible":
			_widget_0.IsVisible = _datasource_Root.IsVisible;
			break;
		case "TopArrowOpacity":
			_widget_0.TopArrowOpacity = _datasource_Root.TopArrowOpacity;
			break;
		case "BottomArrowOpacity":
			_widget_0.BottomArrowOpacity = _datasource_Root.BottomArrowOpacity;
			break;
		case "RightArrowOpacity":
			_widget_0.RightArrowOpacity = _datasource_Root.RightArrowOpacity;
			break;
		case "LeftArrowOpacity":
			_widget_0.LeftArrowOpacity = _datasource_Root.LeftArrowOpacity;
			break;
		case "IsTargetInvalid":
			_widget_0.IsTargetInvalid = _datasource_Root.IsTargetInvalid;
			break;
		case "CrosshairAccuracy":
			_widget_0.CrosshairAccuracy = _datasource_Root.CrosshairAccuracy;
			break;
		case "CrosshairScale":
			_widget_0.CrosshairScale = _datasource_Root.CrosshairScale;
			break;
		case "IsHitMarkerVisible":
			_widget_0.ShowHitMarker = _datasource_Root.IsHitMarkerVisible;
			break;
		case "IsVictimDead":
			_widget_0.IsVictimDead = _datasource_Root.IsVictimDead;
			break;
		case "IsHumanoidHeadshot":
			_widget_0.IsHumanoidHeadshot = _datasource_Root.IsHumanoidHeadshot;
			break;
		case "CrosshairType":
			_widget_0_0.IndexToWatch = _datasource_Root.CrosshairType;
			_widget_0_1.IndexToWatch = _datasource_Root.CrosshairType;
			break;
		case "IsReloadPhasesVisible":
			_widget_1.IsVisible = _datasource_Root.IsReloadPhasesVisible;
			break;
		}
	}

	public void OnList_datasource_Root_ReloadPhasesChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_1_0.GetChild(num);
				((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_1_0.GetChild(num);
				((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)child4).SetDataSource(null);
				_widget_1_0.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_ReloadPhases.Count; i++)
			{
				ReloadPhaseItemVM bindingObject = _datasource_Root_ReloadPhases[i];
				_widget_1_0.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate = new Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate);
			ReloadPhaseItemVM dataSource = (ReloadPhaseItemVM)(generatedWidgetData.Data = _datasource_Root_ReloadPhases[e.NewIndex]);
			crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_1_0.AddChildAtIndex(crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate, e.NewIndex);
			crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.CreateWidgets();
			crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.SetIds();
			crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.SetAttributes();
			crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_1_0.GetChild(e.NewIndex);
			((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_1_0.GetChild(e.NewIndex);
			((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)child).SetDataSource(null);
			_widget_1_0.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	private void RefreshDataSource_datasource_Root(CrosshairVM newDataSource)
	{
		if (_datasource_Root != null)
		{
			_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
			_widget_0.PropertyChanged -= PropertyChangedListenerOf_widget_0;
			_widget_0.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0;
			_widget_0.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0;
			_widget_0.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0;
			_widget_0.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0;
			_widget_0.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0;
			_widget_0.intPropertyChanged -= intPropertyChangedListenerOf_widget_0;
			_widget_0.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0;
			_widget_0.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0;
			_widget_0_0.PropertyChanged -= PropertyChangedListenerOf_widget_0_0;
			_widget_0_0.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0_0;
			_widget_0_0.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0_0;
			_widget_0_0.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0_0;
			_widget_0_0.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0_0;
			_widget_0_0.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0_0;
			_widget_0_0.intPropertyChanged -= intPropertyChangedListenerOf_widget_0_0;
			_widget_0_0.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0_0;
			_widget_0_0.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0_0;
			_widget_0_1.PropertyChanged -= PropertyChangedListenerOf_widget_0_1;
			_widget_0_1.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0_1;
			_widget_0_1.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0_1;
			_widget_0_1.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0_1;
			_widget_0_1.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0_1;
			_widget_0_1.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0_1;
			_widget_0_1.intPropertyChanged -= intPropertyChangedListenerOf_widget_0_1;
			_widget_0_1.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0_1;
			_widget_0_1.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0_1;
			_widget_1.PropertyChanged -= PropertyChangedListenerOf_widget_1;
			_widget_1.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_1;
			_widget_1.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_1;
			_widget_1.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_1;
			_widget_1.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_1;
			_widget_1.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_1;
			_widget_1.intPropertyChanged -= intPropertyChangedListenerOf_widget_1;
			_widget_1.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_1;
			_widget_1.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_1;
			if (_datasource_Root_ReloadPhases != null)
			{
				_datasource_Root_ReloadPhases.ListChanged -= OnList_datasource_Root_ReloadPhasesChanged;
				for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
				{
					Widget child = _widget_1_0.GetChild(num);
					((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)child).OnBeforeRemovedChild(child);
					Widget child2 = _widget_1_0.GetChild(num);
					((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)child2).SetDataSource(null);
					_widget_1_0.RemoveChild(child2);
				}
				_datasource_Root_ReloadPhases = null;
			}
			_datasource_Root = null;
		}
		_datasource_Root = newDataSource;
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged += ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue += ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue += ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue += ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue += ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue += ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue += ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue += ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value += ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget_0.IsVisible = _datasource_Root.IsVisible;
		_widget_0.TopArrowOpacity = _datasource_Root.TopArrowOpacity;
		_widget_0.BottomArrowOpacity = _datasource_Root.BottomArrowOpacity;
		_widget_0.RightArrowOpacity = _datasource_Root.RightArrowOpacity;
		_widget_0.LeftArrowOpacity = _datasource_Root.LeftArrowOpacity;
		_widget_0.IsTargetInvalid = _datasource_Root.IsTargetInvalid;
		_widget_0.CrosshairAccuracy = _datasource_Root.CrosshairAccuracy;
		_widget_0.CrosshairScale = _datasource_Root.CrosshairScale;
		_widget_0.ShowHitMarker = _datasource_Root.IsHitMarkerVisible;
		_widget_0.IsVictimDead = _datasource_Root.IsVictimDead;
		_widget_0.IsHumanoidHeadshot = _datasource_Root.IsHumanoidHeadshot;
		_widget_0.PropertyChanged += PropertyChangedListenerOf_widget_0;
		_widget_0.boolPropertyChanged += boolPropertyChangedListenerOf_widget_0;
		_widget_0.floatPropertyChanged += floatPropertyChangedListenerOf_widget_0;
		_widget_0.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget_0;
		_widget_0.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget_0;
		_widget_0.doublePropertyChanged += doublePropertyChangedListenerOf_widget_0;
		_widget_0.intPropertyChanged += intPropertyChangedListenerOf_widget_0;
		_widget_0.uintPropertyChanged += uintPropertyChangedListenerOf_widget_0;
		_widget_0.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget_0;
		_widget_0_0.IndexToWatch = _datasource_Root.CrosshairType;
		_widget_0_0.PropertyChanged += PropertyChangedListenerOf_widget_0_0;
		_widget_0_0.boolPropertyChanged += boolPropertyChangedListenerOf_widget_0_0;
		_widget_0_0.floatPropertyChanged += floatPropertyChangedListenerOf_widget_0_0;
		_widget_0_0.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget_0_0;
		_widget_0_0.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget_0_0;
		_widget_0_0.doublePropertyChanged += doublePropertyChangedListenerOf_widget_0_0;
		_widget_0_0.intPropertyChanged += intPropertyChangedListenerOf_widget_0_0;
		_widget_0_0.uintPropertyChanged += uintPropertyChangedListenerOf_widget_0_0;
		_widget_0_0.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget_0_0;
		_widget_0_1.IndexToWatch = _datasource_Root.CrosshairType;
		_widget_0_1.PropertyChanged += PropertyChangedListenerOf_widget_0_1;
		_widget_0_1.boolPropertyChanged += boolPropertyChangedListenerOf_widget_0_1;
		_widget_0_1.floatPropertyChanged += floatPropertyChangedListenerOf_widget_0_1;
		_widget_0_1.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget_0_1;
		_widget_0_1.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget_0_1;
		_widget_0_1.doublePropertyChanged += doublePropertyChangedListenerOf_widget_0_1;
		_widget_0_1.intPropertyChanged += intPropertyChangedListenerOf_widget_0_1;
		_widget_0_1.uintPropertyChanged += uintPropertyChangedListenerOf_widget_0_1;
		_widget_0_1.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget_0_1;
		_widget_1.IsVisible = _datasource_Root.IsReloadPhasesVisible;
		_widget_1.PropertyChanged += PropertyChangedListenerOf_widget_1;
		_widget_1.boolPropertyChanged += boolPropertyChangedListenerOf_widget_1;
		_widget_1.floatPropertyChanged += floatPropertyChangedListenerOf_widget_1;
		_widget_1.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget_1;
		_widget_1.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget_1;
		_widget_1.doublePropertyChanged += doublePropertyChangedListenerOf_widget_1;
		_widget_1.intPropertyChanged += intPropertyChangedListenerOf_widget_1;
		_widget_1.uintPropertyChanged += uintPropertyChangedListenerOf_widget_1;
		_widget_1.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget_1;
		_datasource_Root_ReloadPhases = _datasource_Root.ReloadPhases;
		if (_datasource_Root_ReloadPhases != null)
		{
			_datasource_Root_ReloadPhases.ListChanged += OnList_datasource_Root_ReloadPhasesChanged;
			for (int i = 0; i < _datasource_Root_ReloadPhases.Count; i++)
			{
				Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate = new Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate);
				ReloadPhaseItemVM dataSource = (ReloadPhaseItemVM)(generatedWidgetData.Data = _datasource_Root_ReloadPhases[i]);
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_1_0.AddChildAtIndex(crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate, i);
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.CreateWidgets();
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.SetIds();
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.SetAttributes();
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}

	private void RefreshDataSource_datasource_Root_ReloadPhases(MBBindingList<ReloadPhaseItemVM> newDataSource)
	{
		if (_datasource_Root_ReloadPhases != null)
		{
			_datasource_Root_ReloadPhases.ListChanged -= OnList_datasource_Root_ReloadPhasesChanged;
			for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_1_0.GetChild(num);
				((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_1_0.GetChild(num);
				((Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate)child2).SetDataSource(null);
				_widget_1_0.RemoveChild(child2);
			}
			_datasource_Root_ReloadPhases = null;
		}
		_datasource_Root_ReloadPhases = newDataSource;
		_datasource_Root_ReloadPhases = _datasource_Root.ReloadPhases;
		if (_datasource_Root_ReloadPhases != null)
		{
			_datasource_Root_ReloadPhases.ListChanged += OnList_datasource_Root_ReloadPhasesChanged;
			for (int i = 0; i < _datasource_Root_ReloadPhases.Count; i++)
			{
				Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate = new Crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate);
				ReloadPhaseItemVM dataSource = (ReloadPhaseItemVM)(generatedWidgetData.Data = _datasource_Root_ReloadPhases[i]);
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_1_0.AddChildAtIndex(crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate, i);
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.CreateWidgets();
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.SetIds();
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.SetAttributes();
				crosshair__TaleWorlds_MountAndBlade_ViewModelCollection_HUD_CrosshairVM_Dependency_1_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}
}
