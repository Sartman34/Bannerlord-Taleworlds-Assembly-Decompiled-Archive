using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.AutoGenerated;

namespace ManagedCallbacks;

internal class ScriptingInterfaceOfIMBAgent : IMBAgent
{
	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AddMeshToBoneDelegate(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate NativeObjectPointer AddPrefabToAgentBoneDelegate(UIntPtr agentPointer, byte[] prefabName, sbyte boneIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AttachWeaponToBoneDelegate(UIntPtr agentPointer, in WeaponDataAsNative weaponData, IntPtr weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, sbyte boneIndex, ref MatrixFrame attachLocalFrame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AttachWeaponToWeaponInSlotDelegate(UIntPtr agentPointer, in WeaponDataAsNative weaponData, IntPtr weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, int slotIndex, ref MatrixFrame attachLocalFrame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.MovementControlFlag AttackDirectionToMovementFlagDelegate(UIntPtr agentPointer, Agent.UsageDirection direction);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void BuildDelegate(UIntPtr agentPointer, Vec3 eyeOffsetWrtHead);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool CanMoveDirectlyToPositionDelegate(UIntPtr agentPointer, in Vec2 position);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate(UIntPtr agentPointer, int navigationFaceId, ref Vec3 direction, float overridenCostForFaceId);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearEquipmentDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearHandInverseKinematicsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearTargetFrameDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 ComputeAnimationDisplacementDelegate(UIntPtr agentPointer, float dt);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void CreateBloodBurstAtLimbDelegate(UIntPtr agentPointer, sbyte realBoneIndex, float scale);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void DebugMoreDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.MovementControlFlag DefendDirectionToMovementFlagDelegate(UIntPtr agentPointer, Agent.UsageDirection direction);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void DeleteAttachedWeaponFromBoneDelegate(UIntPtr agentPointer, int attachedWeaponIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void DieDelegate(UIntPtr agentPointer, ref Blow b, sbyte overrideKillInfo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void DisableLookToPointOfInterestDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void DisableScriptedCombatMovementDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void DisableScriptedMovementDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void DropItemDelegate(UIntPtr agentPointer, int itemIndex, int pickedUpItemType);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void EnforceShieldUsageDelegate(UIntPtr agentPointer, Agent.UsageDirection direction);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void FadeInDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void FadeOutDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool hideInstantly);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ForceAiBehaviorSelectionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetActionChannelCurrentActionWeightDelegate(UIntPtr agentPointer, int channelNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetActionChannelWeightDelegate(UIntPtr agentPointer, int channelNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.UsageDirection GetActionDirectionDelegate(int actionIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetActionSetNoDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetAgentFacialAnimationDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate uint GetAgentFlagsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetAgentScaleDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate NativeObjectPointer GetAgentVisualsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetAgentVoiceDefinitionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetAimingTimerDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.AIStateFlag GetAIStateFlagsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.UsageDirection GetAttackDirectionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.UsageDirection GetAttackDirectionUsageDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetAverageVelocityDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetBodyRotationConstraintDelegate(UIntPtr agentPointer, int channelIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetChestGlobalPositionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetCollisionCapsuleDelegate(UIntPtr agentPointer, ref CapsuleData value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.ControllerType GetControllerDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetCrouchModeDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetCurrentActionDelegate(UIntPtr agentPointer, int channelNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetCurrentActionDirectionDelegate(UIntPtr agentPointer, int channelNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetCurrentActionPriorityDelegate(UIntPtr agentPointer, int channelNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetCurrentActionProgressDelegate(UIntPtr agentPointer, int channelNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetCurrentActionStageDelegate(UIntPtr agentPointer, int channelNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetCurrentActionTypeDelegate(UIntPtr agentPointer, int channelNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetCurrentAimingErrorDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetCurrentAimingTurbulanceDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate ulong GetCurrentAnimationFlagsDelegate(UIntPtr agentPointer, int channelNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.GuardMode GetCurrentGuardModeDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetCurrentNavigationFaceIdDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetCurrentSpeedLimitDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec2 GetCurrentVelocityDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetCurWeaponOffsetDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.MovementControlFlag GetDefendMovementFlagDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate uint GetEventControlFlagsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetEyeGlobalHeightDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetEyeGlobalPositionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetFiringOrderDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetHeadCameraModeDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetImmediateEnemyDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetIsDoingPassiveAttackDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetIsLeftStanceDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetIsLookDirectionLockedDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetIsPassiveUsageConditionsAreMetDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetLastTargetVisibilityStateDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetLookAgentDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetLookDirectionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetLookDirectionAsAngleDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetLookDownLimitDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetMaximumForwardUnlimitedSpeedDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetMaximumNumberOfAgentsDelegate();

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetMaximumSpeedLimitDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetMissileRangeDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetMissileRangeWithHeightDifferenceDelegate(UIntPtr agentPointer, float targetZ);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetMonsterUsageIndexDelegate(byte[] monsterUsage);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetMountAgentDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec2 GetMovementDirectionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetMovementDirectionAsAngleDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate uint GetMovementFlagsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec2 GetMovementInputVectorDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate AgentMovementLockedState GetMovementLockedStateDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec2 GetMovementVelocityDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetNativeActionIndexDelegate(byte[] actionName);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetPathDistanceToPointDelegate(UIntPtr agentPointer, ref Vec3 direction);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetPositionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetRenderCheckEnabledDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate WorldPosition GetRetreatPosDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetRiderAgentDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetRidingOrderDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetRotationFrameDelegate(UIntPtr agentPointer, ref MatrixFrame outFrame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetRunningSimulationDataUntilMaximumSpeedReachedDelegate(UIntPtr agentPointer, ref float combatAccelerationTime, ref float maxSpeed, IntPtr speedValues);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetScriptedCombatFlagsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetScriptedFlagsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetSelectedMountIndexDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate AgentState GetStateFlagsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate UIntPtr GetSteppedEntityIdDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetTargetAgentDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetTargetDirectionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetTargetFormationIndexDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec2 GetTargetPositionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetTeamDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetTurnSpeedDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetVisualPositionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetWalkModeDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetWalkSpeedLimitOfMountableDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate UIntPtr GetWeaponEntityFromEquipmentSlotDelegate(UIntPtr agentPointer, int equipmentSlot);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate EquipmentIndex GetWieldedItemIndexDelegate(UIntPtr agentPointer, int handIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetWieldedWeaponInfoDelegate(UIntPtr agentPointer, int handIndex, [MarshalAs(UnmanagedType.U1)] ref bool isMeleeWeapon, [MarshalAs(UnmanagedType.U1)] ref bool isRangedWeapon);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate WorldPosition GetWorldPositionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void HandleBlowAuxDelegate(UIntPtr agentPointer, ref Blow blow);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool HasPathThroughNavigationFaceIdFromDirectionDelegate(UIntPtr agentPointer, int navigationFaceId, ref Vec2 direction);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool HasPathThroughNavigationFacesIDFromDirectionDelegate(UIntPtr agentPointer, int navigationFaceID_1, int navigationFaceID_2, int navigationFaceID_3, ref Vec2 direction);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void InitializeAgentRecordDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void InvalidateAIWeaponSelectionsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void InvalidateTargetAgentDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsEnemyDelegate(UIntPtr agentPointer1, UIntPtr agentPointer2);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsFadingOutDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsFriendDelegate(UIntPtr agentPointer1, UIntPtr agentPointer2);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsLookRotationInSlowMotionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsOnLandDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsRetreatingDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsRunningAwayDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsSlidingDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool KickClearDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate(UIntPtr agentPointer, int peerIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void MakeDeadDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool isKilled, int actionIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void MakeVoiceDelegate(UIntPtr agentPointer, int voiceType, int predictionType);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Agent.UsageDirection PlayerAttackDirectionDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void PreloadForRenderingDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void PrepareWeaponForDropInEquipmentSlotDelegate(UIntPtr agentPointer, int equipmentSlot, [MarshalAs(UnmanagedType.U1)] bool dropWithHolster);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void RemoveMeshFromBoneDelegate(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ResetEnemyCachesDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ResetGuardDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool SetActionChannelDelegate(UIntPtr agentPointer, int channelNo, int actionNo, ulong additionalFlags, [MarshalAs(UnmanagedType.U1)] bool ignorePriority, float blendWithNextActionFactor, float actionSpeed, float blendInPeriod, float blendOutPeriodToNoAnim, float startProgress, [MarshalAs(UnmanagedType.U1)] bool useLinearSmoothing, float blendOutPeriod, [MarshalAs(UnmanagedType.U1)] bool forceFaceMorphRestart);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetActionSetDelegate(UIntPtr agentPointer, ref AnimationSystemData animationSystemData);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAgentExcludeStateForFaceGroupIdDelegate(UIntPtr agentPointer, int faceGroupId, [MarshalAs(UnmanagedType.U1)] bool isExcluded);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAgentFacialAnimationDelegate(UIntPtr agentPointer, int channel, byte[] animationName, [MarshalAs(UnmanagedType.U1)] bool loop);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAgentFlagsDelegate(UIntPtr agentPointer, uint agentFlags);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAgentScaleDelegate(UIntPtr agentPointer, float scale);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAIBehaviorParamsDelegate(UIntPtr agentPointer, int behavior, float y1, float x2, float y2, float x3, float y3);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAIStateFlagsDelegate(UIntPtr agentPointer, Agent.AIStateFlag aiStateFlags);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAllAIBehaviorParamsDelegate(UIntPtr agentPointer, IntPtr behaviorParams);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAttackStateDelegate(UIntPtr agentPointer, int attackState);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAutomaticTargetSelectionDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool enable);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAveragePingInMillisecondsDelegate(UIntPtr agentPointer, double averagePingInMilliseconds);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetBodyArmorMaterialTypeDelegate(UIntPtr agentPointer, ArmorComponent.ArmorMaterialTypes bodyArmorMaterialType);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetColumnwiseFollowAgentDelegate(UIntPtr agentPointer, int followAgentIndex, ref Vec2 followPosition);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetControllerDelegate(UIntPtr agentPointer, Agent.ControllerType controller);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetCourageDelegate(UIntPtr agentPointer, float courage);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetCurrentActionProgressDelegate(UIntPtr agentPointer, int channelNo, float progress);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetCurrentActionSpeedDelegate(UIntPtr agentPointer, int channelNo, float actionSpeed);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetDirectionChangeTendencyDelegate(UIntPtr agentPointer, float tendency);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetEventControlFlagsDelegate(UIntPtr agentPointer, Agent.EventControlFlag eventflag);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetFiringOrderDelegate(UIntPtr agentPointer, int order);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetFormationFrameDisabledDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool SetFormationFrameEnabledDelegate(UIntPtr agentPointer, WorldPosition position, Vec2 direction, Vec2 positionVelocity, float formationDirectionEnforcingFactor);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetFormationInfoDelegate(UIntPtr agentPointer, int fileIndex, int rankIndex, int fileCount, int rankCount, Vec2 wallDir, int unitSpacing);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetFormationIntegrityDataDelegate(UIntPtr agentPointer, Vec2 position, Vec2 currentFormationDirection, Vec2 averageVelocityOfCloseAgents, float averageMaxUnlimitedSpeedOfCloseAgents, float deviationOfPositions);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetFormationNoDelegate(UIntPtr agentPointer, int formationNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetGuardedAgentIndexDelegate(UIntPtr agentPointer, int guardedAgentIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool SetHandInverseKinematicsFrameDelegate(UIntPtr agentPointer, ref MatrixFrame leftGlobalFrame, ref MatrixFrame rightGlobalFrame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool SetHandInverseKinematicsFrameForMissionObjectUsageDelegate(UIntPtr agentPointer, in MatrixFrame localIKFrame, in MatrixFrame boundEntityGlobalFrame, float animationHeightDifference);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetHeadCameraModeDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetInitialFrameDelegate(UIntPtr agentPointer, in Vec3 initialPosition, in Vec2 initialDirection, [MarshalAs(UnmanagedType.U1)] bool canSpawnOutsideOfMissionBoundary);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetInteractionAgentDelegate(UIntPtr agentPointer, UIntPtr interactionAgentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetIsLookDirectionLockedDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool isLocked);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetLookAgentDelegate(UIntPtr agentPointer, UIntPtr lookAtAgentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetLookDirectionDelegate(UIntPtr agentPointer, Vec3 lookDirection);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetLookDirectionAsAngleDelegate(UIntPtr agentPointer, float value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetLookToPointOfInterestDelegate(UIntPtr agentPointer, Vec3 point);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetMaximumSpeedLimitDelegate(UIntPtr agentPointer, float maximumSpeedLimit, [MarshalAs(UnmanagedType.U1)] bool isMultiplier);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetMonoObjectDelegate(UIntPtr agentPointer, int monoObject);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetMountAgentDelegate(UIntPtr agentPointer, int mountAgentIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetMovementDirectionDelegate(UIntPtr agentPointer, in Vec2 direction);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetMovementFlagsDelegate(UIntPtr agentPointer, Agent.MovementControlFlag value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetMovementInputVectorDelegate(UIntPtr agentPointer, Vec2 value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetNetworkPeerDelegate(UIntPtr agentPointer, int networkPeerIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetPositionDelegate(UIntPtr agentPointer, ref Vec3 position);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetReloadAmmoInSlotDelegate(UIntPtr agentPointer, int slotIndex, int ammoSlotIndex, short reloadedAmmo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetRenderCheckEnabledDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetRetreatModeDelegate(UIntPtr agentPointer, WorldPosition retreatPos, [MarshalAs(UnmanagedType.U1)] bool retreat);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetRidingOrderDelegate(UIntPtr agentPointer, int order);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetScriptedCombatFlagsDelegate(UIntPtr agentPointer, int flags);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetScriptedFlagsDelegate(UIntPtr agentPointer, int flags);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool SetScriptedPositionDelegate(UIntPtr agentPointer, ref WorldPosition targetPosition, [MarshalAs(UnmanagedType.U1)] bool addHumanLikeDelay, int additionalFlags);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool SetScriptedPositionAndDirectionDelegate(UIntPtr agentPointer, ref WorldPosition targetPosition, float targetDirection, [MarshalAs(UnmanagedType.U1)] bool addHumanLikeDelay, int additionalFlags);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetScriptedTargetEntityDelegate(UIntPtr agentPointer, UIntPtr entityId, ref WorldPosition specialPosition, int additionalFlags, [MarshalAs(UnmanagedType.U1)] bool ignoreIfAlreadyAttacking);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetSelectedMountIndexDelegate(UIntPtr agentPointer, int mount_index);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetShouldCatchUpWithFormationDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetStateFlagsDelegate(UIntPtr agentPointer, AgentState StateFlags);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetTargetAgentDelegate(UIntPtr agentPointer, int targetAgentIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetTargetFormationIndexDelegate(UIntPtr agentPointer, int targetFormationIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetTargetPositionDelegate(UIntPtr agentPointer, ref Vec2 targetPosition);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetTargetPositionAndDirectionDelegate(UIntPtr agentPointer, ref Vec2 targetPosition, ref Vec3 targetDirection);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetTeamDelegate(UIntPtr agentPointer, int teamIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetUsageIndexOfWeaponInSlotAsClientDelegate(UIntPtr agentPointer, int slotIndex, int usageIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetWeaponAmmoAsClientDelegate(UIntPtr agentPointer, int equipmentIndex, int ammoEquipmentIndex, short ammo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetWeaponAmountInSlotDelegate(UIntPtr agentPointer, int equipmentSlot, short amount, [MarshalAs(UnmanagedType.U1)] bool enforcePrimaryItem);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetWeaponHitPointsInSlotDelegate(UIntPtr agentPointer, int wieldedItemIndex, short hitPoints);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetWeaponReloadPhaseAsClientDelegate(UIntPtr agentPointer, int wieldedItemIndex, short reloadPhase);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetWieldedItemIndexAsClientDelegate(UIntPtr agentPointer, int handIndex, int wieldedItemIndex, [MarshalAs(UnmanagedType.U1)] bool isWieldedInstantly, [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn, int mainHandCurrentUsageIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void StartFadingOutDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void StartSwitchingWeaponUsageIndexAsClientDelegate(UIntPtr agentPointer, int wieldedItemIndex, int usageIndex, Agent.UsageDirection currentMovementFlagUsageDirection);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void TickActionChannelsDelegate(UIntPtr agentPointer, float dt);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool TryGetImmediateEnemyAgentMovementDataDelegate(UIntPtr agentPointer, out float maximumForwardUnlimitedSpeed, out Vec3 position);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void TryToSheathWeaponInHandDelegate(UIntPtr agentPointer, int handIndex, int type);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void TryToWieldWeaponInSlotDelegate(UIntPtr agentPointer, int equipmentSlot, int type, [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void UpdateDrivenPropertiesDelegate(UIntPtr agentPointer, IntPtr values);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void UpdateWeaponsDelegate(UIntPtr agentPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void WeaponEquippedDelegate(UIntPtr agentPointer, int equipmentSlot, in WeaponDataAsNative weaponData, IntPtr weaponStatsData, int weaponStatsDataLength, in WeaponDataAsNative ammoWeaponData, IntPtr ammoWeaponStatsData, int ammoWeaponStatsDataLength, UIntPtr weaponEntity, [MarshalAs(UnmanagedType.U1)] bool removeOldWeaponFromScene, [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void WieldNextWeaponDelegate(UIntPtr agentPointer, int handIndex, int wieldActionType);

	private static readonly Encoding _utf8 = Encoding.UTF8;

	public static AddMeshToBoneDelegate call_AddMeshToBoneDelegate;

	public static AddPrefabToAgentBoneDelegate call_AddPrefabToAgentBoneDelegate;

	public static AttachWeaponToBoneDelegate call_AttachWeaponToBoneDelegate;

	public static AttachWeaponToWeaponInSlotDelegate call_AttachWeaponToWeaponInSlotDelegate;

	public static AttackDirectionToMovementFlagDelegate call_AttackDirectionToMovementFlagDelegate;

	public static BuildDelegate call_BuildDelegate;

	public static CanMoveDirectlyToPositionDelegate call_CanMoveDirectlyToPositionDelegate;

	public static CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate call_CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate;

	public static ClearEquipmentDelegate call_ClearEquipmentDelegate;

	public static ClearHandInverseKinematicsDelegate call_ClearHandInverseKinematicsDelegate;

	public static ClearTargetFrameDelegate call_ClearTargetFrameDelegate;

	public static ComputeAnimationDisplacementDelegate call_ComputeAnimationDisplacementDelegate;

	public static CreateBloodBurstAtLimbDelegate call_CreateBloodBurstAtLimbDelegate;

	public static DebugMoreDelegate call_DebugMoreDelegate;

	public static DefendDirectionToMovementFlagDelegate call_DefendDirectionToMovementFlagDelegate;

	public static DeleteAttachedWeaponFromBoneDelegate call_DeleteAttachedWeaponFromBoneDelegate;

	public static DieDelegate call_DieDelegate;

	public static DisableLookToPointOfInterestDelegate call_DisableLookToPointOfInterestDelegate;

	public static DisableScriptedCombatMovementDelegate call_DisableScriptedCombatMovementDelegate;

	public static DisableScriptedMovementDelegate call_DisableScriptedMovementDelegate;

	public static DropItemDelegate call_DropItemDelegate;

	public static EnforceShieldUsageDelegate call_EnforceShieldUsageDelegate;

	public static FadeInDelegate call_FadeInDelegate;

	public static FadeOutDelegate call_FadeOutDelegate;

	public static ForceAiBehaviorSelectionDelegate call_ForceAiBehaviorSelectionDelegate;

	public static GetActionChannelCurrentActionWeightDelegate call_GetActionChannelCurrentActionWeightDelegate;

	public static GetActionChannelWeightDelegate call_GetActionChannelWeightDelegate;

	public static GetActionDirectionDelegate call_GetActionDirectionDelegate;

	public static GetActionSetNoDelegate call_GetActionSetNoDelegate;

	public static GetAgentFacialAnimationDelegate call_GetAgentFacialAnimationDelegate;

	public static GetAgentFlagsDelegate call_GetAgentFlagsDelegate;

	public static GetAgentScaleDelegate call_GetAgentScaleDelegate;

	public static GetAgentVisualsDelegate call_GetAgentVisualsDelegate;

	public static GetAgentVoiceDefinitionDelegate call_GetAgentVoiceDefinitionDelegate;

	public static GetAimingTimerDelegate call_GetAimingTimerDelegate;

	public static GetAIStateFlagsDelegate call_GetAIStateFlagsDelegate;

	public static GetAttackDirectionDelegate call_GetAttackDirectionDelegate;

	public static GetAttackDirectionUsageDelegate call_GetAttackDirectionUsageDelegate;

	public static GetAverageVelocityDelegate call_GetAverageVelocityDelegate;

	public static GetBodyRotationConstraintDelegate call_GetBodyRotationConstraintDelegate;

	public static GetChestGlobalPositionDelegate call_GetChestGlobalPositionDelegate;

	public static GetCollisionCapsuleDelegate call_GetCollisionCapsuleDelegate;

	public static GetControllerDelegate call_GetControllerDelegate;

	public static GetCrouchModeDelegate call_GetCrouchModeDelegate;

	public static GetCurrentActionDelegate call_GetCurrentActionDelegate;

	public static GetCurrentActionDirectionDelegate call_GetCurrentActionDirectionDelegate;

	public static GetCurrentActionPriorityDelegate call_GetCurrentActionPriorityDelegate;

	public static GetCurrentActionProgressDelegate call_GetCurrentActionProgressDelegate;

	public static GetCurrentActionStageDelegate call_GetCurrentActionStageDelegate;

	public static GetCurrentActionTypeDelegate call_GetCurrentActionTypeDelegate;

	public static GetCurrentAimingErrorDelegate call_GetCurrentAimingErrorDelegate;

	public static GetCurrentAimingTurbulanceDelegate call_GetCurrentAimingTurbulanceDelegate;

	public static GetCurrentAnimationFlagsDelegate call_GetCurrentAnimationFlagsDelegate;

	public static GetCurrentGuardModeDelegate call_GetCurrentGuardModeDelegate;

	public static GetCurrentNavigationFaceIdDelegate call_GetCurrentNavigationFaceIdDelegate;

	public static GetCurrentSpeedLimitDelegate call_GetCurrentSpeedLimitDelegate;

	public static GetCurrentVelocityDelegate call_GetCurrentVelocityDelegate;

	public static GetCurWeaponOffsetDelegate call_GetCurWeaponOffsetDelegate;

	public static GetDefendMovementFlagDelegate call_GetDefendMovementFlagDelegate;

	public static GetEventControlFlagsDelegate call_GetEventControlFlagsDelegate;

	public static GetEyeGlobalHeightDelegate call_GetEyeGlobalHeightDelegate;

	public static GetEyeGlobalPositionDelegate call_GetEyeGlobalPositionDelegate;

	public static GetFiringOrderDelegate call_GetFiringOrderDelegate;

	public static GetHeadCameraModeDelegate call_GetHeadCameraModeDelegate;

	public static GetImmediateEnemyDelegate call_GetImmediateEnemyDelegate;

	public static GetIsDoingPassiveAttackDelegate call_GetIsDoingPassiveAttackDelegate;

	public static GetIsLeftStanceDelegate call_GetIsLeftStanceDelegate;

	public static GetIsLookDirectionLockedDelegate call_GetIsLookDirectionLockedDelegate;

	public static GetIsPassiveUsageConditionsAreMetDelegate call_GetIsPassiveUsageConditionsAreMetDelegate;

	public static GetLastTargetVisibilityStateDelegate call_GetLastTargetVisibilityStateDelegate;

	public static GetLookAgentDelegate call_GetLookAgentDelegate;

	public static GetLookDirectionDelegate call_GetLookDirectionDelegate;

	public static GetLookDirectionAsAngleDelegate call_GetLookDirectionAsAngleDelegate;

	public static GetLookDownLimitDelegate call_GetLookDownLimitDelegate;

	public static GetMaximumForwardUnlimitedSpeedDelegate call_GetMaximumForwardUnlimitedSpeedDelegate;

	public static GetMaximumNumberOfAgentsDelegate call_GetMaximumNumberOfAgentsDelegate;

	public static GetMaximumSpeedLimitDelegate call_GetMaximumSpeedLimitDelegate;

	public static GetMissileRangeDelegate call_GetMissileRangeDelegate;

	public static GetMissileRangeWithHeightDifferenceDelegate call_GetMissileRangeWithHeightDifferenceDelegate;

	public static GetMonsterUsageIndexDelegate call_GetMonsterUsageIndexDelegate;

	public static GetMountAgentDelegate call_GetMountAgentDelegate;

	public static GetMovementDirectionDelegate call_GetMovementDirectionDelegate;

	public static GetMovementDirectionAsAngleDelegate call_GetMovementDirectionAsAngleDelegate;

	public static GetMovementFlagsDelegate call_GetMovementFlagsDelegate;

	public static GetMovementInputVectorDelegate call_GetMovementInputVectorDelegate;

	public static GetMovementLockedStateDelegate call_GetMovementLockedStateDelegate;

	public static GetMovementVelocityDelegate call_GetMovementVelocityDelegate;

	public static GetNativeActionIndexDelegate call_GetNativeActionIndexDelegate;

	public static GetPathDistanceToPointDelegate call_GetPathDistanceToPointDelegate;

	public static GetPositionDelegate call_GetPositionDelegate;

	public static GetRenderCheckEnabledDelegate call_GetRenderCheckEnabledDelegate;

	public static GetRetreatPosDelegate call_GetRetreatPosDelegate;

	public static GetRiderAgentDelegate call_GetRiderAgentDelegate;

	public static GetRidingOrderDelegate call_GetRidingOrderDelegate;

	public static GetRotationFrameDelegate call_GetRotationFrameDelegate;

	public static GetRunningSimulationDataUntilMaximumSpeedReachedDelegate call_GetRunningSimulationDataUntilMaximumSpeedReachedDelegate;

	public static GetScriptedCombatFlagsDelegate call_GetScriptedCombatFlagsDelegate;

	public static GetScriptedFlagsDelegate call_GetScriptedFlagsDelegate;

	public static GetSelectedMountIndexDelegate call_GetSelectedMountIndexDelegate;

	public static GetStateFlagsDelegate call_GetStateFlagsDelegate;

	public static GetSteppedEntityIdDelegate call_GetSteppedEntityIdDelegate;

	public static GetTargetAgentDelegate call_GetTargetAgentDelegate;

	public static GetTargetDirectionDelegate call_GetTargetDirectionDelegate;

	public static GetTargetFormationIndexDelegate call_GetTargetFormationIndexDelegate;

	public static GetTargetPositionDelegate call_GetTargetPositionDelegate;

	public static GetTeamDelegate call_GetTeamDelegate;

	public static GetTurnSpeedDelegate call_GetTurnSpeedDelegate;

	public static GetVisualPositionDelegate call_GetVisualPositionDelegate;

	public static GetWalkModeDelegate call_GetWalkModeDelegate;

	public static GetWalkSpeedLimitOfMountableDelegate call_GetWalkSpeedLimitOfMountableDelegate;

	public static GetWeaponEntityFromEquipmentSlotDelegate call_GetWeaponEntityFromEquipmentSlotDelegate;

	public static GetWieldedItemIndexDelegate call_GetWieldedItemIndexDelegate;

	public static GetWieldedWeaponInfoDelegate call_GetWieldedWeaponInfoDelegate;

	public static GetWorldPositionDelegate call_GetWorldPositionDelegate;

	public static HandleBlowAuxDelegate call_HandleBlowAuxDelegate;

	public static HasPathThroughNavigationFaceIdFromDirectionDelegate call_HasPathThroughNavigationFaceIdFromDirectionDelegate;

	public static HasPathThroughNavigationFacesIDFromDirectionDelegate call_HasPathThroughNavigationFacesIDFromDirectionDelegate;

	public static InitializeAgentRecordDelegate call_InitializeAgentRecordDelegate;

	public static InvalidateAIWeaponSelectionsDelegate call_InvalidateAIWeaponSelectionsDelegate;

	public static InvalidateTargetAgentDelegate call_InvalidateTargetAgentDelegate;

	public static IsEnemyDelegate call_IsEnemyDelegate;

	public static IsFadingOutDelegate call_IsFadingOutDelegate;

	public static IsFriendDelegate call_IsFriendDelegate;

	public static IsLookRotationInSlowMotionDelegate call_IsLookRotationInSlowMotionDelegate;

	public static IsOnLandDelegate call_IsOnLandDelegate;

	public static IsRetreatingDelegate call_IsRetreatingDelegate;

	public static IsRunningAwayDelegate call_IsRunningAwayDelegate;

	public static IsSlidingDelegate call_IsSlidingDelegate;

	public static KickClearDelegate call_KickClearDelegate;

	public static LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate call_LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate;

	public static MakeDeadDelegate call_MakeDeadDelegate;

	public static MakeVoiceDelegate call_MakeVoiceDelegate;

	public static PlayerAttackDirectionDelegate call_PlayerAttackDirectionDelegate;

	public static PreloadForRenderingDelegate call_PreloadForRenderingDelegate;

	public static PrepareWeaponForDropInEquipmentSlotDelegate call_PrepareWeaponForDropInEquipmentSlotDelegate;

	public static RemoveMeshFromBoneDelegate call_RemoveMeshFromBoneDelegate;

	public static ResetEnemyCachesDelegate call_ResetEnemyCachesDelegate;

	public static ResetGuardDelegate call_ResetGuardDelegate;

	public static SetActionChannelDelegate call_SetActionChannelDelegate;

	public static SetActionSetDelegate call_SetActionSetDelegate;

	public static SetAgentExcludeStateForFaceGroupIdDelegate call_SetAgentExcludeStateForFaceGroupIdDelegate;

	public static SetAgentFacialAnimationDelegate call_SetAgentFacialAnimationDelegate;

	public static SetAgentFlagsDelegate call_SetAgentFlagsDelegate;

	public static SetAgentScaleDelegate call_SetAgentScaleDelegate;

	public static SetAIBehaviorParamsDelegate call_SetAIBehaviorParamsDelegate;

	public static SetAIStateFlagsDelegate call_SetAIStateFlagsDelegate;

	public static SetAllAIBehaviorParamsDelegate call_SetAllAIBehaviorParamsDelegate;

	public static SetAttackStateDelegate call_SetAttackStateDelegate;

	public static SetAutomaticTargetSelectionDelegate call_SetAutomaticTargetSelectionDelegate;

	public static SetAveragePingInMillisecondsDelegate call_SetAveragePingInMillisecondsDelegate;

	public static SetBodyArmorMaterialTypeDelegate call_SetBodyArmorMaterialTypeDelegate;

	public static SetColumnwiseFollowAgentDelegate call_SetColumnwiseFollowAgentDelegate;

	public static SetControllerDelegate call_SetControllerDelegate;

	public static SetCourageDelegate call_SetCourageDelegate;

	public static SetCurrentActionProgressDelegate call_SetCurrentActionProgressDelegate;

	public static SetCurrentActionSpeedDelegate call_SetCurrentActionSpeedDelegate;

	public static SetDirectionChangeTendencyDelegate call_SetDirectionChangeTendencyDelegate;

	public static SetEventControlFlagsDelegate call_SetEventControlFlagsDelegate;

	public static SetFiringOrderDelegate call_SetFiringOrderDelegate;

	public static SetFormationFrameDisabledDelegate call_SetFormationFrameDisabledDelegate;

	public static SetFormationFrameEnabledDelegate call_SetFormationFrameEnabledDelegate;

	public static SetFormationInfoDelegate call_SetFormationInfoDelegate;

	public static SetFormationIntegrityDataDelegate call_SetFormationIntegrityDataDelegate;

	public static SetFormationNoDelegate call_SetFormationNoDelegate;

	public static SetGuardedAgentIndexDelegate call_SetGuardedAgentIndexDelegate;

	public static SetHandInverseKinematicsFrameDelegate call_SetHandInverseKinematicsFrameDelegate;

	public static SetHandInverseKinematicsFrameForMissionObjectUsageDelegate call_SetHandInverseKinematicsFrameForMissionObjectUsageDelegate;

	public static SetHeadCameraModeDelegate call_SetHeadCameraModeDelegate;

	public static SetInitialFrameDelegate call_SetInitialFrameDelegate;

	public static SetInteractionAgentDelegate call_SetInteractionAgentDelegate;

	public static SetIsLookDirectionLockedDelegate call_SetIsLookDirectionLockedDelegate;

	public static SetLookAgentDelegate call_SetLookAgentDelegate;

	public static SetLookDirectionDelegate call_SetLookDirectionDelegate;

	public static SetLookDirectionAsAngleDelegate call_SetLookDirectionAsAngleDelegate;

	public static SetLookToPointOfInterestDelegate call_SetLookToPointOfInterestDelegate;

	public static SetMaximumSpeedLimitDelegate call_SetMaximumSpeedLimitDelegate;

	public static SetMonoObjectDelegate call_SetMonoObjectDelegate;

	public static SetMountAgentDelegate call_SetMountAgentDelegate;

	public static SetMovementDirectionDelegate call_SetMovementDirectionDelegate;

	public static SetMovementFlagsDelegate call_SetMovementFlagsDelegate;

	public static SetMovementInputVectorDelegate call_SetMovementInputVectorDelegate;

	public static SetNetworkPeerDelegate call_SetNetworkPeerDelegate;

	public static SetPositionDelegate call_SetPositionDelegate;

	public static SetReloadAmmoInSlotDelegate call_SetReloadAmmoInSlotDelegate;

	public static SetRenderCheckEnabledDelegate call_SetRenderCheckEnabledDelegate;

	public static SetRetreatModeDelegate call_SetRetreatModeDelegate;

	public static SetRidingOrderDelegate call_SetRidingOrderDelegate;

	public static SetScriptedCombatFlagsDelegate call_SetScriptedCombatFlagsDelegate;

	public static SetScriptedFlagsDelegate call_SetScriptedFlagsDelegate;

	public static SetScriptedPositionDelegate call_SetScriptedPositionDelegate;

	public static SetScriptedPositionAndDirectionDelegate call_SetScriptedPositionAndDirectionDelegate;

	public static SetScriptedTargetEntityDelegate call_SetScriptedTargetEntityDelegate;

	public static SetSelectedMountIndexDelegate call_SetSelectedMountIndexDelegate;

	public static SetShouldCatchUpWithFormationDelegate call_SetShouldCatchUpWithFormationDelegate;

	public static SetStateFlagsDelegate call_SetStateFlagsDelegate;

	public static SetTargetAgentDelegate call_SetTargetAgentDelegate;

	public static SetTargetFormationIndexDelegate call_SetTargetFormationIndexDelegate;

	public static SetTargetPositionDelegate call_SetTargetPositionDelegate;

	public static SetTargetPositionAndDirectionDelegate call_SetTargetPositionAndDirectionDelegate;

	public static SetTeamDelegate call_SetTeamDelegate;

	public static SetUsageIndexOfWeaponInSlotAsClientDelegate call_SetUsageIndexOfWeaponInSlotAsClientDelegate;

	public static SetWeaponAmmoAsClientDelegate call_SetWeaponAmmoAsClientDelegate;

	public static SetWeaponAmountInSlotDelegate call_SetWeaponAmountInSlotDelegate;

	public static SetWeaponHitPointsInSlotDelegate call_SetWeaponHitPointsInSlotDelegate;

	public static SetWeaponReloadPhaseAsClientDelegate call_SetWeaponReloadPhaseAsClientDelegate;

	public static SetWieldedItemIndexAsClientDelegate call_SetWieldedItemIndexAsClientDelegate;

	public static StartFadingOutDelegate call_StartFadingOutDelegate;

	public static StartSwitchingWeaponUsageIndexAsClientDelegate call_StartSwitchingWeaponUsageIndexAsClientDelegate;

	public static TickActionChannelsDelegate call_TickActionChannelsDelegate;

	public static TryGetImmediateEnemyAgentMovementDataDelegate call_TryGetImmediateEnemyAgentMovementDataDelegate;

	public static TryToSheathWeaponInHandDelegate call_TryToSheathWeaponInHandDelegate;

	public static TryToWieldWeaponInSlotDelegate call_TryToWieldWeaponInSlotDelegate;

	public static UpdateDrivenPropertiesDelegate call_UpdateDrivenPropertiesDelegate;

	public static UpdateWeaponsDelegate call_UpdateWeaponsDelegate;

	public static WeaponEquippedDelegate call_WeaponEquippedDelegate;

	public static WieldNextWeaponDelegate call_WieldNextWeaponDelegate;

	public void AddMeshToBone(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex)
	{
		call_AddMeshToBoneDelegate(agentPointer, meshPointer, boneIndex);
	}

	public CompositeComponent AddPrefabToAgentBone(UIntPtr agentPointer, string prefabName, sbyte boneIndex)
	{
		byte[] array = null;
		if (prefabName != null)
		{
			int byteCount = _utf8.GetByteCount(prefabName);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(prefabName, 0, prefabName.Length, array, 0);
			array[byteCount] = 0;
		}
		NativeObjectPointer nativeObjectPointer = call_AddPrefabToAgentBoneDelegate(agentPointer, array, boneIndex);
		CompositeComponent result = null;
		if (nativeObjectPointer.Pointer != UIntPtr.Zero)
		{
			result = new CompositeComponent(nativeObjectPointer.Pointer);
			LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
		}
		return result;
	}

	public void AttachWeaponToBone(UIntPtr agentPointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, sbyte boneIndex, ref MatrixFrame attachLocalFrame)
	{
		WeaponDataAsNative weaponData2 = new WeaponDataAsNative(weaponData);
		PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
		IntPtr pointer = pinnedArrayData.Pointer;
		call_AttachWeaponToBoneDelegate(agentPointer, in weaponData2, pointer, weaponStatsDataLength, weaponEntity, boneIndex, ref attachLocalFrame);
		pinnedArrayData.Dispose();
	}

	public void AttachWeaponToWeaponInSlot(UIntPtr agentPointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, int slotIndex, ref MatrixFrame attachLocalFrame)
	{
		WeaponDataAsNative weaponData2 = new WeaponDataAsNative(weaponData);
		PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
		IntPtr pointer = pinnedArrayData.Pointer;
		call_AttachWeaponToWeaponInSlotDelegate(agentPointer, in weaponData2, pointer, weaponStatsDataLength, weaponEntity, slotIndex, ref attachLocalFrame);
		pinnedArrayData.Dispose();
	}

	public Agent.MovementControlFlag AttackDirectionToMovementFlag(UIntPtr agentPointer, Agent.UsageDirection direction)
	{
		return call_AttackDirectionToMovementFlagDelegate(agentPointer, direction);
	}

	public void Build(UIntPtr agentPointer, Vec3 eyeOffsetWrtHead)
	{
		call_BuildDelegate(agentPointer, eyeOffsetWrtHead);
	}

	public bool CanMoveDirectlyToPosition(UIntPtr agentPointer, in Vec2 position)
	{
		return call_CanMoveDirectlyToPositionDelegate(agentPointer, in position);
	}

	public bool CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirection(UIntPtr agentPointer, int navigationFaceId, ref Vec3 direction, float overridenCostForFaceId)
	{
		return call_CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate(agentPointer, navigationFaceId, ref direction, overridenCostForFaceId);
	}

	public void ClearEquipment(UIntPtr agentPointer)
	{
		call_ClearEquipmentDelegate(agentPointer);
	}

	public void ClearHandInverseKinematics(UIntPtr agentPointer)
	{
		call_ClearHandInverseKinematicsDelegate(agentPointer);
	}

	public void ClearTargetFrame(UIntPtr agentPointer)
	{
		call_ClearTargetFrameDelegate(agentPointer);
	}

	public Vec3 ComputeAnimationDisplacement(UIntPtr agentPointer, float dt)
	{
		return call_ComputeAnimationDisplacementDelegate(agentPointer, dt);
	}

	public void CreateBloodBurstAtLimb(UIntPtr agentPointer, sbyte realBoneIndex, float scale)
	{
		call_CreateBloodBurstAtLimbDelegate(agentPointer, realBoneIndex, scale);
	}

	public void DebugMore(UIntPtr agentPointer)
	{
		call_DebugMoreDelegate(agentPointer);
	}

	public Agent.MovementControlFlag DefendDirectionToMovementFlag(UIntPtr agentPointer, Agent.UsageDirection direction)
	{
		return call_DefendDirectionToMovementFlagDelegate(agentPointer, direction);
	}

	public void DeleteAttachedWeaponFromBone(UIntPtr agentPointer, int attachedWeaponIndex)
	{
		call_DeleteAttachedWeaponFromBoneDelegate(agentPointer, attachedWeaponIndex);
	}

	public void Die(UIntPtr agentPointer, ref Blow b, sbyte overrideKillInfo)
	{
		call_DieDelegate(agentPointer, ref b, overrideKillInfo);
	}

	public void DisableLookToPointOfInterest(UIntPtr agentPointer)
	{
		call_DisableLookToPointOfInterestDelegate(agentPointer);
	}

	public void DisableScriptedCombatMovement(UIntPtr agentPointer)
	{
		call_DisableScriptedCombatMovementDelegate(agentPointer);
	}

	public void DisableScriptedMovement(UIntPtr agentPointer)
	{
		call_DisableScriptedMovementDelegate(agentPointer);
	}

	public void DropItem(UIntPtr agentPointer, int itemIndex, int pickedUpItemType)
	{
		call_DropItemDelegate(agentPointer, itemIndex, pickedUpItemType);
	}

	public void EnforceShieldUsage(UIntPtr agentPointer, Agent.UsageDirection direction)
	{
		call_EnforceShieldUsageDelegate(agentPointer, direction);
	}

	public void FadeIn(UIntPtr agentPointer)
	{
		call_FadeInDelegate(agentPointer);
	}

	public void FadeOut(UIntPtr agentPointer, bool hideInstantly)
	{
		call_FadeOutDelegate(agentPointer, hideInstantly);
	}

	public void ForceAiBehaviorSelection(UIntPtr agentPointer)
	{
		call_ForceAiBehaviorSelectionDelegate(agentPointer);
	}

	public float GetActionChannelCurrentActionWeight(UIntPtr agentPointer, int channelNo)
	{
		return call_GetActionChannelCurrentActionWeightDelegate(agentPointer, channelNo);
	}

	public float GetActionChannelWeight(UIntPtr agentPointer, int channelNo)
	{
		return call_GetActionChannelWeightDelegate(agentPointer, channelNo);
	}

	public Agent.UsageDirection GetActionDirection(int actionIndex)
	{
		return call_GetActionDirectionDelegate(actionIndex);
	}

	public int GetActionSetNo(UIntPtr agentPointer)
	{
		return call_GetActionSetNoDelegate(agentPointer);
	}

	public string GetAgentFacialAnimation(UIntPtr agentPointer)
	{
		if (call_GetAgentFacialAnimationDelegate(agentPointer) != 1)
		{
			return null;
		}
		return Managed.ReturnValueFromEngine;
	}

	public uint GetAgentFlags(UIntPtr agentPointer)
	{
		return call_GetAgentFlagsDelegate(agentPointer);
	}

	public float GetAgentScale(UIntPtr agentPointer)
	{
		return call_GetAgentScaleDelegate(agentPointer);
	}

	public MBAgentVisuals GetAgentVisuals(UIntPtr agentPointer)
	{
		NativeObjectPointer nativeObjectPointer = call_GetAgentVisualsDelegate(agentPointer);
		MBAgentVisuals result = null;
		if (nativeObjectPointer.Pointer != UIntPtr.Zero)
		{
			result = new MBAgentVisuals(nativeObjectPointer.Pointer);
			LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
		}
		return result;
	}

	public string GetAgentVoiceDefinition(UIntPtr agentPointer)
	{
		if (call_GetAgentVoiceDefinitionDelegate(agentPointer) != 1)
		{
			return null;
		}
		return Managed.ReturnValueFromEngine;
	}

	public float GetAimingTimer(UIntPtr agentPointer)
	{
		return call_GetAimingTimerDelegate(agentPointer);
	}

	public Agent.AIStateFlag GetAIStateFlags(UIntPtr agentPointer)
	{
		return call_GetAIStateFlagsDelegate(agentPointer);
	}

	public Agent.UsageDirection GetAttackDirection(UIntPtr agentPointer)
	{
		return call_GetAttackDirectionDelegate(agentPointer);
	}

	public Agent.UsageDirection GetAttackDirectionUsage(UIntPtr agentPointer)
	{
		return call_GetAttackDirectionUsageDelegate(agentPointer);
	}

	public Vec3 GetAverageVelocity(UIntPtr agentPointer)
	{
		return call_GetAverageVelocityDelegate(agentPointer);
	}

	public Vec3 GetBodyRotationConstraint(UIntPtr agentPointer, int channelIndex)
	{
		return call_GetBodyRotationConstraintDelegate(agentPointer, channelIndex);
	}

	public Vec3 GetChestGlobalPosition(UIntPtr agentPointer)
	{
		return call_GetChestGlobalPositionDelegate(agentPointer);
	}

	public void GetCollisionCapsule(UIntPtr agentPointer, ref CapsuleData value)
	{
		call_GetCollisionCapsuleDelegate(agentPointer, ref value);
	}

	public Agent.ControllerType GetController(UIntPtr agentPointer)
	{
		return call_GetControllerDelegate(agentPointer);
	}

	public bool GetCrouchMode(UIntPtr agentPointer)
	{
		return call_GetCrouchModeDelegate(agentPointer);
	}

	public int GetCurrentAction(UIntPtr agentPointer, int channelNo)
	{
		return call_GetCurrentActionDelegate(agentPointer, channelNo);
	}

	public int GetCurrentActionDirection(UIntPtr agentPointer, int channelNo)
	{
		return call_GetCurrentActionDirectionDelegate(agentPointer, channelNo);
	}

	public int GetCurrentActionPriority(UIntPtr agentPointer, int channelNo)
	{
		return call_GetCurrentActionPriorityDelegate(agentPointer, channelNo);
	}

	public float GetCurrentActionProgress(UIntPtr agentPointer, int channelNo)
	{
		return call_GetCurrentActionProgressDelegate(agentPointer, channelNo);
	}

	public int GetCurrentActionStage(UIntPtr agentPointer, int channelNo)
	{
		return call_GetCurrentActionStageDelegate(agentPointer, channelNo);
	}

	public int GetCurrentActionType(UIntPtr agentPointer, int channelNo)
	{
		return call_GetCurrentActionTypeDelegate(agentPointer, channelNo);
	}

	public float GetCurrentAimingError(UIntPtr agentPointer)
	{
		return call_GetCurrentAimingErrorDelegate(agentPointer);
	}

	public float GetCurrentAimingTurbulance(UIntPtr agentPointer)
	{
		return call_GetCurrentAimingTurbulanceDelegate(agentPointer);
	}

	public ulong GetCurrentAnimationFlags(UIntPtr agentPointer, int channelNo)
	{
		return call_GetCurrentAnimationFlagsDelegate(agentPointer, channelNo);
	}

	public Agent.GuardMode GetCurrentGuardMode(UIntPtr agentPointer)
	{
		return call_GetCurrentGuardModeDelegate(agentPointer);
	}

	public int GetCurrentNavigationFaceId(UIntPtr agentPointer)
	{
		return call_GetCurrentNavigationFaceIdDelegate(agentPointer);
	}

	public float GetCurrentSpeedLimit(UIntPtr agentPointer)
	{
		return call_GetCurrentSpeedLimitDelegate(agentPointer);
	}

	public Vec2 GetCurrentVelocity(UIntPtr agentPointer)
	{
		return call_GetCurrentVelocityDelegate(agentPointer);
	}

	public Vec3 GetCurWeaponOffset(UIntPtr agentPointer)
	{
		return call_GetCurWeaponOffsetDelegate(agentPointer);
	}

	public Agent.MovementControlFlag GetDefendMovementFlag(UIntPtr agentPointer)
	{
		return call_GetDefendMovementFlagDelegate(agentPointer);
	}

	public uint GetEventControlFlags(UIntPtr agentPointer)
	{
		return call_GetEventControlFlagsDelegate(agentPointer);
	}

	public float GetEyeGlobalHeight(UIntPtr agentPointer)
	{
		return call_GetEyeGlobalHeightDelegate(agentPointer);
	}

	public Vec3 GetEyeGlobalPosition(UIntPtr agentPointer)
	{
		return call_GetEyeGlobalPositionDelegate(agentPointer);
	}

	public int GetFiringOrder(UIntPtr agentPointer)
	{
		return call_GetFiringOrderDelegate(agentPointer);
	}

	public bool GetHeadCameraMode(UIntPtr agentPointer)
	{
		return call_GetHeadCameraModeDelegate(agentPointer);
	}

	public Agent GetImmediateEnemy(UIntPtr agentPointer)
	{
		return DotNetObject.GetManagedObjectWithId(call_GetImmediateEnemyDelegate(agentPointer)) as Agent;
	}

	public bool GetIsDoingPassiveAttack(UIntPtr agentPointer)
	{
		return call_GetIsDoingPassiveAttackDelegate(agentPointer);
	}

	public bool GetIsLeftStance(UIntPtr agentPointer)
	{
		return call_GetIsLeftStanceDelegate(agentPointer);
	}

	public bool GetIsLookDirectionLocked(UIntPtr agentPointer)
	{
		return call_GetIsLookDirectionLockedDelegate(agentPointer);
	}

	public bool GetIsPassiveUsageConditionsAreMet(UIntPtr agentPointer)
	{
		return call_GetIsPassiveUsageConditionsAreMetDelegate(agentPointer);
	}

	public int GetLastTargetVisibilityState(UIntPtr agentPointer)
	{
		return call_GetLastTargetVisibilityStateDelegate(agentPointer);
	}

	public Agent GetLookAgent(UIntPtr agentPointer)
	{
		return DotNetObject.GetManagedObjectWithId(call_GetLookAgentDelegate(agentPointer)) as Agent;
	}

	public Vec3 GetLookDirection(UIntPtr agentPointer)
	{
		return call_GetLookDirectionDelegate(agentPointer);
	}

	public float GetLookDirectionAsAngle(UIntPtr agentPointer)
	{
		return call_GetLookDirectionAsAngleDelegate(agentPointer);
	}

	public float GetLookDownLimit(UIntPtr agentPointer)
	{
		return call_GetLookDownLimitDelegate(agentPointer);
	}

	public float GetMaximumForwardUnlimitedSpeed(UIntPtr agentPointer)
	{
		return call_GetMaximumForwardUnlimitedSpeedDelegate(agentPointer);
	}

	public int GetMaximumNumberOfAgents()
	{
		return call_GetMaximumNumberOfAgentsDelegate();
	}

	public float GetMaximumSpeedLimit(UIntPtr agentPointer)
	{
		return call_GetMaximumSpeedLimitDelegate(agentPointer);
	}

	public float GetMissileRange(UIntPtr agentPointer)
	{
		return call_GetMissileRangeDelegate(agentPointer);
	}

	public float GetMissileRangeWithHeightDifference(UIntPtr agentPointer, float targetZ)
	{
		return call_GetMissileRangeWithHeightDifferenceDelegate(agentPointer, targetZ);
	}

	public int GetMonsterUsageIndex(string monsterUsage)
	{
		byte[] array = null;
		if (monsterUsage != null)
		{
			int byteCount = _utf8.GetByteCount(monsterUsage);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(monsterUsage, 0, monsterUsage.Length, array, 0);
			array[byteCount] = 0;
		}
		return call_GetMonsterUsageIndexDelegate(array);
	}

	public Agent GetMountAgent(UIntPtr agentPointer)
	{
		return DotNetObject.GetManagedObjectWithId(call_GetMountAgentDelegate(agentPointer)) as Agent;
	}

	public Vec2 GetMovementDirection(UIntPtr agentPointer)
	{
		return call_GetMovementDirectionDelegate(agentPointer);
	}

	public float GetMovementDirectionAsAngle(UIntPtr agentPointer)
	{
		return call_GetMovementDirectionAsAngleDelegate(agentPointer);
	}

	public uint GetMovementFlags(UIntPtr agentPointer)
	{
		return call_GetMovementFlagsDelegate(agentPointer);
	}

	public Vec2 GetMovementInputVector(UIntPtr agentPointer)
	{
		return call_GetMovementInputVectorDelegate(agentPointer);
	}

	public AgentMovementLockedState GetMovementLockedState(UIntPtr agentPointer)
	{
		return call_GetMovementLockedStateDelegate(agentPointer);
	}

	public Vec2 GetMovementVelocity(UIntPtr agentPointer)
	{
		return call_GetMovementVelocityDelegate(agentPointer);
	}

	public int GetNativeActionIndex(string actionName)
	{
		byte[] array = null;
		if (actionName != null)
		{
			int byteCount = _utf8.GetByteCount(actionName);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(actionName, 0, actionName.Length, array, 0);
			array[byteCount] = 0;
		}
		return call_GetNativeActionIndexDelegate(array);
	}

	public float GetPathDistanceToPoint(UIntPtr agentPointer, ref Vec3 direction)
	{
		return call_GetPathDistanceToPointDelegate(agentPointer, ref direction);
	}

	public Vec3 GetPosition(UIntPtr agentPointer)
	{
		return call_GetPositionDelegate(agentPointer);
	}

	public bool GetRenderCheckEnabled(UIntPtr agentPointer)
	{
		return call_GetRenderCheckEnabledDelegate(agentPointer);
	}

	public WorldPosition GetRetreatPos(UIntPtr agentPointer)
	{
		return call_GetRetreatPosDelegate(agentPointer);
	}

	public Agent GetRiderAgent(UIntPtr agentPointer)
	{
		return DotNetObject.GetManagedObjectWithId(call_GetRiderAgentDelegate(agentPointer)) as Agent;
	}

	public int GetRidingOrder(UIntPtr agentPointer)
	{
		return call_GetRidingOrderDelegate(agentPointer);
	}

	public void GetRotationFrame(UIntPtr agentPointer, ref MatrixFrame outFrame)
	{
		call_GetRotationFrameDelegate(agentPointer, ref outFrame);
	}

	public void GetRunningSimulationDataUntilMaximumSpeedReached(UIntPtr agentPointer, ref float combatAccelerationTime, ref float maxSpeed, float[] speedValues)
	{
		PinnedArrayData<float> pinnedArrayData = new PinnedArrayData<float>(speedValues);
		IntPtr pointer = pinnedArrayData.Pointer;
		call_GetRunningSimulationDataUntilMaximumSpeedReachedDelegate(agentPointer, ref combatAccelerationTime, ref maxSpeed, pointer);
		pinnedArrayData.Dispose();
	}

	public int GetScriptedCombatFlags(UIntPtr agentPointer)
	{
		return call_GetScriptedCombatFlagsDelegate(agentPointer);
	}

	public int GetScriptedFlags(UIntPtr agentPointer)
	{
		return call_GetScriptedFlagsDelegate(agentPointer);
	}

	public int GetSelectedMountIndex(UIntPtr agentPointer)
	{
		return call_GetSelectedMountIndexDelegate(agentPointer);
	}

	public AgentState GetStateFlags(UIntPtr agentPointer)
	{
		return call_GetStateFlagsDelegate(agentPointer);
	}

	public UIntPtr GetSteppedEntityId(UIntPtr agentPointer)
	{
		return call_GetSteppedEntityIdDelegate(agentPointer);
	}

	public Agent GetTargetAgent(UIntPtr agentPointer)
	{
		return DotNetObject.GetManagedObjectWithId(call_GetTargetAgentDelegate(agentPointer)) as Agent;
	}

	public Vec3 GetTargetDirection(UIntPtr agentPointer)
	{
		return call_GetTargetDirectionDelegate(agentPointer);
	}

	public int GetTargetFormationIndex(UIntPtr agentPointer)
	{
		return call_GetTargetFormationIndexDelegate(agentPointer);
	}

	public Vec2 GetTargetPosition(UIntPtr agentPointer)
	{
		return call_GetTargetPositionDelegate(agentPointer);
	}

	public int GetTeam(UIntPtr agentPointer)
	{
		return call_GetTeamDelegate(agentPointer);
	}

	public float GetTurnSpeed(UIntPtr agentPointer)
	{
		return call_GetTurnSpeedDelegate(agentPointer);
	}

	public Vec3 GetVisualPosition(UIntPtr agentPointer)
	{
		return call_GetVisualPositionDelegate(agentPointer);
	}

	public bool GetWalkMode(UIntPtr agentPointer)
	{
		return call_GetWalkModeDelegate(agentPointer);
	}

	public float GetWalkSpeedLimitOfMountable(UIntPtr agentPointer)
	{
		return call_GetWalkSpeedLimitOfMountableDelegate(agentPointer);
	}

	public UIntPtr GetWeaponEntityFromEquipmentSlot(UIntPtr agentPointer, int equipmentSlot)
	{
		return call_GetWeaponEntityFromEquipmentSlotDelegate(agentPointer, equipmentSlot);
	}

	public EquipmentIndex GetWieldedItemIndex(UIntPtr agentPointer, int handIndex)
	{
		return call_GetWieldedItemIndexDelegate(agentPointer, handIndex);
	}

	public bool GetWieldedWeaponInfo(UIntPtr agentPointer, int handIndex, ref bool isMeleeWeapon, ref bool isRangedWeapon)
	{
		return call_GetWieldedWeaponInfoDelegate(agentPointer, handIndex, ref isMeleeWeapon, ref isRangedWeapon);
	}

	public WorldPosition GetWorldPosition(UIntPtr agentPointer)
	{
		return call_GetWorldPositionDelegate(agentPointer);
	}

	public void HandleBlowAux(UIntPtr agentPointer, ref Blow blow)
	{
		call_HandleBlowAuxDelegate(agentPointer, ref blow);
	}

	public bool HasPathThroughNavigationFaceIdFromDirection(UIntPtr agentPointer, int navigationFaceId, ref Vec2 direction)
	{
		return call_HasPathThroughNavigationFaceIdFromDirectionDelegate(agentPointer, navigationFaceId, ref direction);
	}

	public bool HasPathThroughNavigationFacesIDFromDirection(UIntPtr agentPointer, int navigationFaceID_1, int navigationFaceID_2, int navigationFaceID_3, ref Vec2 direction)
	{
		return call_HasPathThroughNavigationFacesIDFromDirectionDelegate(agentPointer, navigationFaceID_1, navigationFaceID_2, navigationFaceID_3, ref direction);
	}

	public void InitializeAgentRecord(UIntPtr agentPointer)
	{
		call_InitializeAgentRecordDelegate(agentPointer);
	}

	public void InvalidateAIWeaponSelections(UIntPtr agentPointer)
	{
		call_InvalidateAIWeaponSelectionsDelegate(agentPointer);
	}

	public void InvalidateTargetAgent(UIntPtr agentPointer)
	{
		call_InvalidateTargetAgentDelegate(agentPointer);
	}

	public bool IsEnemy(UIntPtr agentPointer1, UIntPtr agentPointer2)
	{
		return call_IsEnemyDelegate(agentPointer1, agentPointer2);
	}

	public bool IsFadingOut(UIntPtr agentPointer)
	{
		return call_IsFadingOutDelegate(agentPointer);
	}

	public bool IsFriend(UIntPtr agentPointer1, UIntPtr agentPointer2)
	{
		return call_IsFriendDelegate(agentPointer1, agentPointer2);
	}

	public bool IsLookRotationInSlowMotion(UIntPtr agentPointer)
	{
		return call_IsLookRotationInSlowMotionDelegate(agentPointer);
	}

	public bool IsOnLand(UIntPtr agentPointer)
	{
		return call_IsOnLandDelegate(agentPointer);
	}

	public bool IsRetreating(UIntPtr agentPointer)
	{
		return call_IsRetreatingDelegate(agentPointer);
	}

	public bool IsRunningAway(UIntPtr agentPointer)
	{
		return call_IsRunningAwayDelegate(agentPointer);
	}

	public bool IsSliding(UIntPtr agentPointer)
	{
		return call_IsSlidingDelegate(agentPointer);
	}

	public bool KickClear(UIntPtr agentPointer)
	{
		return call_KickClearDelegate(agentPointer);
	}

	public void LockAgentReplicationTableDataWithCurrentReliableSequenceNo(UIntPtr agentPointer, int peerIndex)
	{
		call_LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate(agentPointer, peerIndex);
	}

	public void MakeDead(UIntPtr agentPointer, bool isKilled, int actionIndex)
	{
		call_MakeDeadDelegate(agentPointer, isKilled, actionIndex);
	}

	public void MakeVoice(UIntPtr agentPointer, int voiceType, int predictionType)
	{
		call_MakeVoiceDelegate(agentPointer, voiceType, predictionType);
	}

	public Agent.UsageDirection PlayerAttackDirection(UIntPtr agentPointer)
	{
		return call_PlayerAttackDirectionDelegate(agentPointer);
	}

	public void PreloadForRendering(UIntPtr agentPointer)
	{
		call_PreloadForRenderingDelegate(agentPointer);
	}

	public void PrepareWeaponForDropInEquipmentSlot(UIntPtr agentPointer, int equipmentSlot, bool dropWithHolster)
	{
		call_PrepareWeaponForDropInEquipmentSlotDelegate(agentPointer, equipmentSlot, dropWithHolster);
	}

	public void RemoveMeshFromBone(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex)
	{
		call_RemoveMeshFromBoneDelegate(agentPointer, meshPointer, boneIndex);
	}

	public void ResetEnemyCaches(UIntPtr agentPointer)
	{
		call_ResetEnemyCachesDelegate(agentPointer);
	}

	public void ResetGuard(UIntPtr agentPointer)
	{
		call_ResetGuardDelegate(agentPointer);
	}

	public bool SetActionChannel(UIntPtr agentPointer, int channelNo, int actionNo, ulong additionalFlags, bool ignorePriority, float blendWithNextActionFactor, float actionSpeed, float blendInPeriod, float blendOutPeriodToNoAnim, float startProgress, bool useLinearSmoothing, float blendOutPeriod, bool forceFaceMorphRestart)
	{
		return call_SetActionChannelDelegate(agentPointer, channelNo, actionNo, additionalFlags, ignorePriority, blendWithNextActionFactor, actionSpeed, blendInPeriod, blendOutPeriodToNoAnim, startProgress, useLinearSmoothing, blendOutPeriod, forceFaceMorphRestart);
	}

	public void SetActionSet(UIntPtr agentPointer, ref AnimationSystemData animationSystemData)
	{
		call_SetActionSetDelegate(agentPointer, ref animationSystemData);
	}

	public void SetAgentExcludeStateForFaceGroupId(UIntPtr agentPointer, int faceGroupId, bool isExcluded)
	{
		call_SetAgentExcludeStateForFaceGroupIdDelegate(agentPointer, faceGroupId, isExcluded);
	}

	public void SetAgentFacialAnimation(UIntPtr agentPointer, int channel, string animationName, bool loop)
	{
		byte[] array = null;
		if (animationName != null)
		{
			int byteCount = _utf8.GetByteCount(animationName);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(animationName, 0, animationName.Length, array, 0);
			array[byteCount] = 0;
		}
		call_SetAgentFacialAnimationDelegate(agentPointer, channel, array, loop);
	}

	public void SetAgentFlags(UIntPtr agentPointer, uint agentFlags)
	{
		call_SetAgentFlagsDelegate(agentPointer, agentFlags);
	}

	public void SetAgentScale(UIntPtr agentPointer, float scale)
	{
		call_SetAgentScaleDelegate(agentPointer, scale);
	}

	public void SetAIBehaviorParams(UIntPtr agentPointer, int behavior, float y1, float x2, float y2, float x3, float y3)
	{
		call_SetAIBehaviorParamsDelegate(agentPointer, behavior, y1, x2, y2, x3, y3);
	}

	public void SetAIStateFlags(UIntPtr agentPointer, Agent.AIStateFlag aiStateFlags)
	{
		call_SetAIStateFlagsDelegate(agentPointer, aiStateFlags);
	}

	public void SetAllAIBehaviorParams(UIntPtr agentPointer, HumanAIComponent.BehaviorValues[] behaviorParams)
	{
		PinnedArrayData<HumanAIComponent.BehaviorValues> pinnedArrayData = new PinnedArrayData<HumanAIComponent.BehaviorValues>(behaviorParams);
		IntPtr pointer = pinnedArrayData.Pointer;
		call_SetAllAIBehaviorParamsDelegate(agentPointer, pointer);
		pinnedArrayData.Dispose();
	}

	public void SetAttackState(UIntPtr agentPointer, int attackState)
	{
		call_SetAttackStateDelegate(agentPointer, attackState);
	}

	public void SetAutomaticTargetSelection(UIntPtr agentPointer, bool enable)
	{
		call_SetAutomaticTargetSelectionDelegate(agentPointer, enable);
	}

	public void SetAveragePingInMilliseconds(UIntPtr agentPointer, double averagePingInMilliseconds)
	{
		call_SetAveragePingInMillisecondsDelegate(agentPointer, averagePingInMilliseconds);
	}

	public void SetBodyArmorMaterialType(UIntPtr agentPointer, ArmorComponent.ArmorMaterialTypes bodyArmorMaterialType)
	{
		call_SetBodyArmorMaterialTypeDelegate(agentPointer, bodyArmorMaterialType);
	}

	public void SetColumnwiseFollowAgent(UIntPtr agentPointer, int followAgentIndex, ref Vec2 followPosition)
	{
		call_SetColumnwiseFollowAgentDelegate(agentPointer, followAgentIndex, ref followPosition);
	}

	public void SetController(UIntPtr agentPointer, Agent.ControllerType controller)
	{
		call_SetControllerDelegate(agentPointer, controller);
	}

	public void SetCourage(UIntPtr agentPointer, float courage)
	{
		call_SetCourageDelegate(agentPointer, courage);
	}

	public void SetCurrentActionProgress(UIntPtr agentPointer, int channelNo, float progress)
	{
		call_SetCurrentActionProgressDelegate(agentPointer, channelNo, progress);
	}

	public void SetCurrentActionSpeed(UIntPtr agentPointer, int channelNo, float actionSpeed)
	{
		call_SetCurrentActionSpeedDelegate(agentPointer, channelNo, actionSpeed);
	}

	public void SetDirectionChangeTendency(UIntPtr agentPointer, float tendency)
	{
		call_SetDirectionChangeTendencyDelegate(agentPointer, tendency);
	}

	public void SetEventControlFlags(UIntPtr agentPointer, Agent.EventControlFlag eventflag)
	{
		call_SetEventControlFlagsDelegate(agentPointer, eventflag);
	}

	public void SetFiringOrder(UIntPtr agentPointer, int order)
	{
		call_SetFiringOrderDelegate(agentPointer, order);
	}

	public void SetFormationFrameDisabled(UIntPtr agentPointer)
	{
		call_SetFormationFrameDisabledDelegate(agentPointer);
	}

	public bool SetFormationFrameEnabled(UIntPtr agentPointer, WorldPosition position, Vec2 direction, Vec2 positionVelocity, float formationDirectionEnforcingFactor)
	{
		return call_SetFormationFrameEnabledDelegate(agentPointer, position, direction, positionVelocity, formationDirectionEnforcingFactor);
	}

	public void SetFormationInfo(UIntPtr agentPointer, int fileIndex, int rankIndex, int fileCount, int rankCount, Vec2 wallDir, int unitSpacing)
	{
		call_SetFormationInfoDelegate(agentPointer, fileIndex, rankIndex, fileCount, rankCount, wallDir, unitSpacing);
	}

	public void SetFormationIntegrityData(UIntPtr agentPointer, Vec2 position, Vec2 currentFormationDirection, Vec2 averageVelocityOfCloseAgents, float averageMaxUnlimitedSpeedOfCloseAgents, float deviationOfPositions)
	{
		call_SetFormationIntegrityDataDelegate(agentPointer, position, currentFormationDirection, averageVelocityOfCloseAgents, averageMaxUnlimitedSpeedOfCloseAgents, deviationOfPositions);
	}

	public void SetFormationNo(UIntPtr agentPointer, int formationNo)
	{
		call_SetFormationNoDelegate(agentPointer, formationNo);
	}

	public void SetGuardedAgentIndex(UIntPtr agentPointer, int guardedAgentIndex)
	{
		call_SetGuardedAgentIndexDelegate(agentPointer, guardedAgentIndex);
	}

	public bool SetHandInverseKinematicsFrame(UIntPtr agentPointer, ref MatrixFrame leftGlobalFrame, ref MatrixFrame rightGlobalFrame)
	{
		return call_SetHandInverseKinematicsFrameDelegate(agentPointer, ref leftGlobalFrame, ref rightGlobalFrame);
	}

	public bool SetHandInverseKinematicsFrameForMissionObjectUsage(UIntPtr agentPointer, in MatrixFrame localIKFrame, in MatrixFrame boundEntityGlobalFrame, float animationHeightDifference)
	{
		return call_SetHandInverseKinematicsFrameForMissionObjectUsageDelegate(agentPointer, in localIKFrame, in boundEntityGlobalFrame, animationHeightDifference);
	}

	public void SetHeadCameraMode(UIntPtr agentPointer, bool value)
	{
		call_SetHeadCameraModeDelegate(agentPointer, value);
	}

	public void SetInitialFrame(UIntPtr agentPointer, in Vec3 initialPosition, in Vec2 initialDirection, bool canSpawnOutsideOfMissionBoundary)
	{
		call_SetInitialFrameDelegate(agentPointer, in initialPosition, in initialDirection, canSpawnOutsideOfMissionBoundary);
	}

	public void SetInteractionAgent(UIntPtr agentPointer, UIntPtr interactionAgentPointer)
	{
		call_SetInteractionAgentDelegate(agentPointer, interactionAgentPointer);
	}

	public void SetIsLookDirectionLocked(UIntPtr agentPointer, bool isLocked)
	{
		call_SetIsLookDirectionLockedDelegate(agentPointer, isLocked);
	}

	public void SetLookAgent(UIntPtr agentPointer, UIntPtr lookAtAgentPointer)
	{
		call_SetLookAgentDelegate(agentPointer, lookAtAgentPointer);
	}

	public void SetLookDirection(UIntPtr agentPointer, Vec3 lookDirection)
	{
		call_SetLookDirectionDelegate(agentPointer, lookDirection);
	}

	public void SetLookDirectionAsAngle(UIntPtr agentPointer, float value)
	{
		call_SetLookDirectionAsAngleDelegate(agentPointer, value);
	}

	public void SetLookToPointOfInterest(UIntPtr agentPointer, Vec3 point)
	{
		call_SetLookToPointOfInterestDelegate(agentPointer, point);
	}

	public void SetMaximumSpeedLimit(UIntPtr agentPointer, float maximumSpeedLimit, bool isMultiplier)
	{
		call_SetMaximumSpeedLimitDelegate(agentPointer, maximumSpeedLimit, isMultiplier);
	}

	public void SetMonoObject(UIntPtr agentPointer, Agent monoObject)
	{
		call_SetMonoObjectDelegate(agentPointer, monoObject?.GetManagedId() ?? 0);
	}

	public void SetMountAgent(UIntPtr agentPointer, int mountAgentIndex)
	{
		call_SetMountAgentDelegate(agentPointer, mountAgentIndex);
	}

	public void SetMovementDirection(UIntPtr agentPointer, in Vec2 direction)
	{
		call_SetMovementDirectionDelegate(agentPointer, in direction);
	}

	public void SetMovementFlags(UIntPtr agentPointer, Agent.MovementControlFlag value)
	{
		call_SetMovementFlagsDelegate(agentPointer, value);
	}

	public void SetMovementInputVector(UIntPtr agentPointer, Vec2 value)
	{
		call_SetMovementInputVectorDelegate(agentPointer, value);
	}

	public void SetNetworkPeer(UIntPtr agentPointer, int networkPeerIndex)
	{
		call_SetNetworkPeerDelegate(agentPointer, networkPeerIndex);
	}

	public void SetPosition(UIntPtr agentPointer, ref Vec3 position)
	{
		call_SetPositionDelegate(agentPointer, ref position);
	}

	public void SetReloadAmmoInSlot(UIntPtr agentPointer, int slotIndex, int ammoSlotIndex, short reloadedAmmo)
	{
		call_SetReloadAmmoInSlotDelegate(agentPointer, slotIndex, ammoSlotIndex, reloadedAmmo);
	}

	public void SetRenderCheckEnabled(UIntPtr agentPointer, bool value)
	{
		call_SetRenderCheckEnabledDelegate(agentPointer, value);
	}

	public void SetRetreatMode(UIntPtr agentPointer, WorldPosition retreatPos, bool retreat)
	{
		call_SetRetreatModeDelegate(agentPointer, retreatPos, retreat);
	}

	public void SetRidingOrder(UIntPtr agentPointer, int order)
	{
		call_SetRidingOrderDelegate(agentPointer, order);
	}

	public void SetScriptedCombatFlags(UIntPtr agentPointer, int flags)
	{
		call_SetScriptedCombatFlagsDelegate(agentPointer, flags);
	}

	public void SetScriptedFlags(UIntPtr agentPointer, int flags)
	{
		call_SetScriptedFlagsDelegate(agentPointer, flags);
	}

	public bool SetScriptedPosition(UIntPtr agentPointer, ref WorldPosition targetPosition, bool addHumanLikeDelay, int additionalFlags)
	{
		return call_SetScriptedPositionDelegate(agentPointer, ref targetPosition, addHumanLikeDelay, additionalFlags);
	}

	public bool SetScriptedPositionAndDirection(UIntPtr agentPointer, ref WorldPosition targetPosition, float targetDirection, bool addHumanLikeDelay, int additionalFlags)
	{
		return call_SetScriptedPositionAndDirectionDelegate(agentPointer, ref targetPosition, targetDirection, addHumanLikeDelay, additionalFlags);
	}

	public void SetScriptedTargetEntity(UIntPtr agentPointer, UIntPtr entityId, ref WorldPosition specialPosition, int additionalFlags, bool ignoreIfAlreadyAttacking)
	{
		call_SetScriptedTargetEntityDelegate(agentPointer, entityId, ref specialPosition, additionalFlags, ignoreIfAlreadyAttacking);
	}

	public void SetSelectedMountIndex(UIntPtr agentPointer, int mount_index)
	{
		call_SetSelectedMountIndexDelegate(agentPointer, mount_index);
	}

	public void SetShouldCatchUpWithFormation(UIntPtr agentPointer, bool value)
	{
		call_SetShouldCatchUpWithFormationDelegate(agentPointer, value);
	}

	public void SetStateFlags(UIntPtr agentPointer, AgentState StateFlags)
	{
		call_SetStateFlagsDelegate(agentPointer, StateFlags);
	}

	public void SetTargetAgent(UIntPtr agentPointer, int targetAgentIndex)
	{
		call_SetTargetAgentDelegate(agentPointer, targetAgentIndex);
	}

	public void SetTargetFormationIndex(UIntPtr agentPointer, int targetFormationIndex)
	{
		call_SetTargetFormationIndexDelegate(agentPointer, targetFormationIndex);
	}

	public void SetTargetPosition(UIntPtr agentPointer, ref Vec2 targetPosition)
	{
		call_SetTargetPositionDelegate(agentPointer, ref targetPosition);
	}

	public void SetTargetPositionAndDirection(UIntPtr agentPointer, ref Vec2 targetPosition, ref Vec3 targetDirection)
	{
		call_SetTargetPositionAndDirectionDelegate(agentPointer, ref targetPosition, ref targetDirection);
	}

	public void SetTeam(UIntPtr agentPointer, int teamIndex)
	{
		call_SetTeamDelegate(agentPointer, teamIndex);
	}

	public void SetUsageIndexOfWeaponInSlotAsClient(UIntPtr agentPointer, int slotIndex, int usageIndex)
	{
		call_SetUsageIndexOfWeaponInSlotAsClientDelegate(agentPointer, slotIndex, usageIndex);
	}

	public void SetWeaponAmmoAsClient(UIntPtr agentPointer, int equipmentIndex, int ammoEquipmentIndex, short ammo)
	{
		call_SetWeaponAmmoAsClientDelegate(agentPointer, equipmentIndex, ammoEquipmentIndex, ammo);
	}

	public void SetWeaponAmountInSlot(UIntPtr agentPointer, int equipmentSlot, short amount, bool enforcePrimaryItem)
	{
		call_SetWeaponAmountInSlotDelegate(agentPointer, equipmentSlot, amount, enforcePrimaryItem);
	}

	public void SetWeaponHitPointsInSlot(UIntPtr agentPointer, int wieldedItemIndex, short hitPoints)
	{
		call_SetWeaponHitPointsInSlotDelegate(agentPointer, wieldedItemIndex, hitPoints);
	}

	public void SetWeaponReloadPhaseAsClient(UIntPtr agentPointer, int wieldedItemIndex, short reloadPhase)
	{
		call_SetWeaponReloadPhaseAsClientDelegate(agentPointer, wieldedItemIndex, reloadPhase);
	}

	public void SetWieldedItemIndexAsClient(UIntPtr agentPointer, int handIndex, int wieldedItemIndex, bool isWieldedInstantly, bool isWieldedOnSpawn, int mainHandCurrentUsageIndex)
	{
		call_SetWieldedItemIndexAsClientDelegate(agentPointer, handIndex, wieldedItemIndex, isWieldedInstantly, isWieldedOnSpawn, mainHandCurrentUsageIndex);
	}

	public void StartFadingOut(UIntPtr agentPointer)
	{
		call_StartFadingOutDelegate(agentPointer);
	}

	public void StartSwitchingWeaponUsageIndexAsClient(UIntPtr agentPointer, int wieldedItemIndex, int usageIndex, Agent.UsageDirection currentMovementFlagUsageDirection)
	{
		call_StartSwitchingWeaponUsageIndexAsClientDelegate(agentPointer, wieldedItemIndex, usageIndex, currentMovementFlagUsageDirection);
	}

	public void TickActionChannels(UIntPtr agentPointer, float dt)
	{
		call_TickActionChannelsDelegate(agentPointer, dt);
	}

	public bool TryGetImmediateEnemyAgentMovementData(UIntPtr agentPointer, out float maximumForwardUnlimitedSpeed, out Vec3 position)
	{
		return call_TryGetImmediateEnemyAgentMovementDataDelegate(agentPointer, out maximumForwardUnlimitedSpeed, out position);
	}

	public void TryToSheathWeaponInHand(UIntPtr agentPointer, int handIndex, int type)
	{
		call_TryToSheathWeaponInHandDelegate(agentPointer, handIndex, type);
	}

	public void TryToWieldWeaponInSlot(UIntPtr agentPointer, int equipmentSlot, int type, bool isWieldedOnSpawn)
	{
		call_TryToWieldWeaponInSlotDelegate(agentPointer, equipmentSlot, type, isWieldedOnSpawn);
	}

	public void UpdateDrivenProperties(UIntPtr agentPointer, float[] values)
	{
		PinnedArrayData<float> pinnedArrayData = new PinnedArrayData<float>(values);
		IntPtr pointer = pinnedArrayData.Pointer;
		call_UpdateDrivenPropertiesDelegate(agentPointer, pointer);
		pinnedArrayData.Dispose();
	}

	public void UpdateWeapons(UIntPtr agentPointer)
	{
		call_UpdateWeaponsDelegate(agentPointer);
	}

	public void WeaponEquipped(UIntPtr agentPointer, int equipmentSlot, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData ammoWeaponData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, UIntPtr weaponEntity, bool removeOldWeaponFromScene, bool isWieldedOnSpawn)
	{
		WeaponDataAsNative weaponData2 = new WeaponDataAsNative(weaponData);
		PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
		IntPtr pointer = pinnedArrayData.Pointer;
		WeaponDataAsNative ammoWeaponData2 = new WeaponDataAsNative(ammoWeaponData);
		PinnedArrayData<WeaponStatsData> pinnedArrayData2 = new PinnedArrayData<WeaponStatsData>(ammoWeaponStatsData);
		IntPtr pointer2 = pinnedArrayData2.Pointer;
		call_WeaponEquippedDelegate(agentPointer, equipmentSlot, in weaponData2, pointer, weaponStatsDataLength, in ammoWeaponData2, pointer2, ammoWeaponStatsDataLength, weaponEntity, removeOldWeaponFromScene, isWieldedOnSpawn);
		pinnedArrayData.Dispose();
		pinnedArrayData2.Dispose();
	}

	public void WieldNextWeapon(UIntPtr agentPointer, int handIndex, int wieldActionType)
	{
		call_WieldNextWeaponDelegate(agentPointer, handIndex, wieldActionType);
	}

	void IMBAgent.SetInitialFrame(UIntPtr agentPointer, in Vec3 initialPosition, in Vec2 initialDirection, bool canSpawnOutsideOfMissionBoundary)
	{
		SetInitialFrame(agentPointer, in initialPosition, in initialDirection, canSpawnOutsideOfMissionBoundary);
	}

	void IMBAgent.WeaponEquipped(UIntPtr agentPointer, int equipmentSlot, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData ammoWeaponData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, UIntPtr weaponEntity, bool removeOldWeaponFromScene, bool isWieldedOnSpawn)
	{
		WeaponEquipped(agentPointer, equipmentSlot, in weaponData, weaponStatsData, weaponStatsDataLength, in ammoWeaponData, ammoWeaponStatsData, ammoWeaponStatsDataLength, weaponEntity, removeOldWeaponFromScene, isWieldedOnSpawn);
	}

	void IMBAgent.AttachWeaponToBone(UIntPtr agentPointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, sbyte boneIndex, ref MatrixFrame attachLocalFrame)
	{
		AttachWeaponToBone(agentPointer, in weaponData, weaponStatsData, weaponStatsDataLength, weaponEntity, boneIndex, ref attachLocalFrame);
	}

	void IMBAgent.AttachWeaponToWeaponInSlot(UIntPtr agentPointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, int slotIndex, ref MatrixFrame attachLocalFrame)
	{
		AttachWeaponToWeaponInSlot(agentPointer, in weaponData, weaponStatsData, weaponStatsDataLength, weaponEntity, slotIndex, ref attachLocalFrame);
	}

	void IMBAgent.SetMovementDirection(UIntPtr agentPointer, in Vec2 direction)
	{
		SetMovementDirection(agentPointer, in direction);
	}

	bool IMBAgent.CanMoveDirectlyToPosition(UIntPtr agentPointer, in Vec2 position)
	{
		return CanMoveDirectlyToPosition(agentPointer, in position);
	}

	bool IMBAgent.SetHandInverseKinematicsFrameForMissionObjectUsage(UIntPtr agentPointer, in MatrixFrame localIKFrame, in MatrixFrame boundEntityGlobalFrame, float animationHeightDifference)
	{
		return SetHandInverseKinematicsFrameForMissionObjectUsage(agentPointer, in localIKFrame, in boundEntityGlobalFrame, animationHeightDifference);
	}
}
