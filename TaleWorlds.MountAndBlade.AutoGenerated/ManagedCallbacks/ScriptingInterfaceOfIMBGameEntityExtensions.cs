using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.AutoGenerated;

namespace ManagedCallbacks;

internal class ScriptingInterfaceOfIMBGameEntityExtensions : IMBGameEntityExtensions
{
	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate NativeObjectPointer CreateFromWeaponDelegate(UIntPtr scenePointer, in WeaponDataAsNative weaponData, IntPtr weaponStatsData, int weaponStatsDataLength, in WeaponDataAsNative ammoWeaponData, IntPtr ammoWeaponStatsData, int ammoWeaponStatsDataLength, [MarshalAs(UnmanagedType.U1)] bool showHolsterWithWeapon);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void FadeInDelegate(UIntPtr entityPointer, [MarshalAs(UnmanagedType.U1)] bool resetAlpha);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void FadeOutDelegate(UIntPtr entityPointer, float interval, [MarshalAs(UnmanagedType.U1)] bool isRemovingFromScene);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void HideIfNotFadingOutDelegate(UIntPtr entityPointer);

	private static readonly Encoding _utf8 = Encoding.UTF8;

	public static CreateFromWeaponDelegate call_CreateFromWeaponDelegate;

	public static FadeInDelegate call_FadeInDelegate;

	public static FadeOutDelegate call_FadeOutDelegate;

	public static HideIfNotFadingOutDelegate call_HideIfNotFadingOutDelegate;

	public GameEntity CreateFromWeapon(UIntPtr scenePointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData ammoWeaponData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, bool showHolsterWithWeapon)
	{
		WeaponDataAsNative weaponData2 = new WeaponDataAsNative(weaponData);
		PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
		IntPtr pointer = pinnedArrayData.Pointer;
		WeaponDataAsNative ammoWeaponData2 = new WeaponDataAsNative(ammoWeaponData);
		PinnedArrayData<WeaponStatsData> pinnedArrayData2 = new PinnedArrayData<WeaponStatsData>(ammoWeaponStatsData);
		IntPtr pointer2 = pinnedArrayData2.Pointer;
		NativeObjectPointer nativeObjectPointer = call_CreateFromWeaponDelegate(scenePointer, in weaponData2, pointer, weaponStatsDataLength, in ammoWeaponData2, pointer2, ammoWeaponStatsDataLength, showHolsterWithWeapon);
		pinnedArrayData.Dispose();
		pinnedArrayData2.Dispose();
		GameEntity result = null;
		if (nativeObjectPointer.Pointer != UIntPtr.Zero)
		{
			result = new GameEntity(nativeObjectPointer.Pointer);
			LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
		}
		return result;
	}

	public void FadeIn(UIntPtr entityPointer, bool resetAlpha)
	{
		call_FadeInDelegate(entityPointer, resetAlpha);
	}

	public void FadeOut(UIntPtr entityPointer, float interval, bool isRemovingFromScene)
	{
		call_FadeOutDelegate(entityPointer, interval, isRemovingFromScene);
	}

	public void HideIfNotFadingOut(UIntPtr entityPointer)
	{
		call_HideIfNotFadingOutDelegate(entityPointer);
	}

	GameEntity IMBGameEntityExtensions.CreateFromWeapon(UIntPtr scenePointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData ammoWeaponData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, bool showHolsterWithWeapon)
	{
		return CreateFromWeapon(scenePointer, in weaponData, weaponStatsData, weaponStatsDataLength, in ammoWeaponData, ammoWeaponStatsData, ammoWeaponStatsDataLength, showHolsterWithWeapon);
	}
}
