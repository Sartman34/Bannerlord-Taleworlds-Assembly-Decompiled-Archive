using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.AutoGenerated;

namespace ManagedCallbacks;

internal class ScriptingInterfaceOfIMBMission : IMBMission
{
	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AddAiDebugTextDelegate(UIntPtr missionPointer, byte[] text);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool AddBoundaryDelegate(UIntPtr missionPointer, byte[] name, IntPtr boundaryPoints, int boundaryPointCount, [MarshalAs(UnmanagedType.U1)] bool isAllowanceInside);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int AddMissileDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool isPrediction, int shooterAgentIndex, in WeaponDataAsNative weaponData, IntPtr weaponStatsData, int weaponStatsDataLength, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, [MarshalAs(UnmanagedType.U1)] bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, [MarshalAs(UnmanagedType.U1)] bool isPrimaryWeaponShot, out UIntPtr missileEntity);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int AddMissileSingleUsageDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool isPrediction, int shooterAgentIndex, in WeaponDataAsNative weaponData, in WeaponStatsData weaponStatsData, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, [MarshalAs(UnmanagedType.U1)] bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, [MarshalAs(UnmanagedType.U1)] bool isPrimaryWeaponShot, out UIntPtr missileEntity);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AddParticleSystemBurstByNameDelegate(UIntPtr missionPointer, byte[] particleSystem, ref MatrixFrame frame, [MarshalAs(UnmanagedType.U1)] bool synchThroughNetwork);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AddSoundAlarmFactorToAgentsDelegate(UIntPtr pointer, int ownerId, Vec3 position, float alarmFactor);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int AddTeamDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void BackupRecordToFileDelegate(UIntPtr missionPointer, byte[] fileName, byte[] gameType, byte[] sceneLevels);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void BatchFormationUnitPositionsDelegate(UIntPtr missionPointer, IntPtr orderedPositionIndices, IntPtr orderedLocalPositions, IntPtr availabilityTable, IntPtr globalPositionTable, WorldPosition orderPosition, Vec2 direction, int fileCount, int rankCount);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearAgentActionsDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearCorpsesDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool isMissionReset);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearMissilesDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearRecordBuffersDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearResourcesDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearSceneDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float ComputeExactMissileRangeAtHeightDifferenceDelegate(float targetHeightDifference, float initialSpeed, float airFrictionConstant, float maxDuration);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Mission.AgentCreationResult CreateAgentDelegate(UIntPtr missionPointer, ulong monsterFlag, int forcedAgentIndex, [MarshalAs(UnmanagedType.U1)] bool isFemale, ref AgentSpawnData spawnData, ref CapsuleData bodyCapsule, ref CapsuleData crouchedBodyCapsule, ref AnimationSystemData animationSystemData, int instanceNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate UIntPtr CreateMissionDelegate(int mission);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool EndOfRecordDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void FastForwardMissionDelegate(UIntPtr missionPointer, float startTime, float endTime);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void FinalizeMissionDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int FindAgentWithIndexDelegate(UIntPtr missionPointer, int index);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void FindConvexHullDelegate(IntPtr boundaryPoints, int boundaryPointCount, ref int convexPointCount);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetAgentCountAroundPositionDelegate(UIntPtr missionPointer, int teamIndex, Vec2 position, float radius, ref int allyCount, ref int enemyCount);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate WorldPosition GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate(UIntPtr ptr, ref Vec2 directionTowards, ref WorldPosition originalPosition, ref float positionPenalty);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetAtmosphereNameForReplayDelegate(PlatformFilePath replayName);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetAtmosphereSeasonForReplayDelegate(PlatformFilePath replayName);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetAverageFpsDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetAverageMoraleOfAgentsDelegate(UIntPtr missionPointer, int agentCount, IntPtr agentIndices);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate WorldPosition GetBestSlopeAngleHeightPosForDefendingDelegate(UIntPtr missionPointer, WorldPosition enemyPosition, WorldPosition defendingPosition, int sampleSize, float distanceRatioAllowedFromDefendedPos, float distanceSqrdAllowedFromBoundary, float cosinusOfBestSlope, float cosinusOfMaxAcceptedSlope, float minSlopeScore, float maxSlopeScore, float excessiveSlopePenalty, float nearConeCenterRatio, float nearConeCenterBonus, float heightDifferenceCeiling, float maxDisplacementPenalty);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate WorldPosition GetBestSlopeTowardsDirectionDelegate(UIntPtr missionPointer, ref WorldPosition centerPosition, float halfsize, ref WorldPosition referencePosition);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetBiggestAgentCollisionPaddingDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetBoundaryCountDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetBoundaryNameDelegate(UIntPtr missionPointer, int boundaryIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetBoundaryPointsDelegate(UIntPtr missionPointer, byte[] name, int boundaryPointOffset, IntPtr boundaryPoints, int boundaryPointsSize, ref int retrievedPointCount);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetBoundaryRadiusDelegate(UIntPtr missionPointer, byte[] name);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate MatrixFrame GetCameraFrameDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetClearSceneTimerElapsedTimeDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetClosestAllyDelegate(UIntPtr missionPointer, int teamIndex, Vec3 position, float radius);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec2 GetClosestBoundaryPositionDelegate(UIntPtr missionPointer, Vec2 position);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetClosestEnemyDelegate(UIntPtr missionPointer, int teamIndex, Vec3 position, float radius);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetCombatTypeDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetDebugAgentDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetEnemyAlarmStateIndicatorDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetGameTypeForReplayDelegate(PlatformFilePath replayName);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetIsLoadingFinishedDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetMissileCollisionPointDelegate(UIntPtr missionPointer, Vec3 missileStartingPosition, Vec3 missileDirection, float missileStartingSpeed, in WeaponDataAsNative weaponData);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetMissileHasRigidBodyDelegate(UIntPtr missionPointer, int index);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetMissileRangeDelegate(float missileStartingSpeed, float heightDifference);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetMissileVerticalAimCorrectionDelegate(Vec3 vecToTarget, float missileStartingSpeed, ref WeaponStatsData weaponStatsData, float airFrictionConstant);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetNavigationPointsDelegate(UIntPtr missionPointer, ref NavigationData navigationData);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetNearbyAgentsAuxDelegate(UIntPtr missionPointer, Vec2 center, float radius, int teamIndex, int friendOrEnemyOrAll, int agentsArrayOffset, ref EngineStackArray.StackArray40Int agentIds, ref int retrievedAgentCount);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetNumberOfTeamsDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetPauseAITickDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetPlayerAlarmIndicatorDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetPositionOfMissileDelegate(UIntPtr missionPointer, int index);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetSceneLevelsForReplayDelegate(PlatformFilePath replayName);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int GetSceneNameForReplayDelegate(PlatformFilePath replayName);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate WorldPosition GetStraightPathToTargetDelegate(UIntPtr scenePointer, Vec2 targetPosition, WorldPosition startingPosition, float samplingDistance, [MarshalAs(UnmanagedType.U1)] bool stopAtObstacle);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetTimeDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetVelocityOfMissileDelegate(UIntPtr missionPointer, int index);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float GetWaterLevelAtPositionDelegate(UIntPtr missionPointer, Vec2 position);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec2 GetWeightedPointOfEnemiesDelegate(UIntPtr missionPointer, int agentIndex, Vec2 basePoint);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool HasAnyAgentsOfTeamAroundDelegate(UIntPtr missionPointer, Vec3 origin, float radius, int teamNo);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void IdleTickDelegate(UIntPtr missionPointer, float dt);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void InitializeMissionDelegate(UIntPtr missionPointer, ref MissionInitializerRecord rec);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsAgentInProximityMapDelegate(UIntPtr missionPointer, int agentIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsFormationUnitPositionAvailableDelegate(UIntPtr missionPointer, ref WorldPosition orderPosition, ref WorldPosition unitPosition, ref WorldPosition nearestAvailableUnitPosition, float manhattanDistance);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsPositionInsideAnyBlockerNavMeshFace2DDelegate(UIntPtr missionPointer, Vec2 position);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsPositionInsideBoundariesDelegate(UIntPtr missionPointer, Vec2 position);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void MakeSoundDelegate(UIntPtr pointer, int nativeSoundCode, Vec3 position, [MarshalAs(UnmanagedType.U1)] bool soundCanBePredicted, [MarshalAs(UnmanagedType.U1)] bool isReliable, int relatedAgent1, int relatedAgent2);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void MakeSoundOnlyOnRelatedPeerDelegate(UIntPtr pointer, int nativeSoundCode, Vec3 position, int relatedAgent);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void MakeSoundWithParameterDelegate(UIntPtr pointer, int nativeSoundCode, Vec3 position, [MarshalAs(UnmanagedType.U1)] bool soundCanBePredicted, [MarshalAs(UnmanagedType.U1)] bool isReliable, int relatedAgent1, int relatedAgent2, SoundEventParameter parameter);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void PauseMissionSceneSoundsDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void PrepareMissileWeaponForDropDelegate(UIntPtr missionPointer, int missileIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ProcessRecordUntilTimeDelegate(UIntPtr missionPointer, float time);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate AgentProximityMap.ProximityMapSearchStructInternal ProximityMapBeginSearchDelegate(UIntPtr missionPointer, Vec2 searchPos, float searchRadius);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ProximityMapFindNextDelegate(UIntPtr missionPointer, ref AgentProximityMap.ProximityMapSearchStructInternal searchStruct);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate float ProximityMapMaxSearchRadiusDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate int RayCastForClosestAgentDelegate(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int ExcludeAgentIndex, ref float CollisionDistance, float RayThickness);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool RayCastForClosestAgentsLimbsDelegate(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int ExcludeAgentIndex, ref float CollisionDistance, ref int AgentIndex, ref sbyte BoneIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool RayCastForGivenAgentsLimbsDelegate(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int GivenAgentIndex, ref float CollisionDistance, ref sbyte BoneIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void RecordCurrentStateDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool RemoveBoundaryDelegate(UIntPtr missionPointer, byte[] name);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void RemoveMissileDelegate(UIntPtr missionPointer, int missileIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ResetFirstThirdPersonViewDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ResetTeamsDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void RestartRecordDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void RestoreRecordFromFileDelegate(UIntPtr missionPointer, byte[] fileName);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ResumeMissionSceneSoundsDelegate(UIntPtr missionPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetBowMissileSpeedModifierDelegate(UIntPtr missionPointer, float modifier);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetCameraFrameDelegate(UIntPtr missionPointer, ref MatrixFrame cameraFrame, float zoomFactor, ref Vec3 attenuationPosition);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetCameraIsFirstPersonDelegate([MarshalAs(UnmanagedType.U1)] bool value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetCombatTypeDelegate(UIntPtr missionPointer, int combatType);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetCrossbowMissileSpeedModifierDelegate(UIntPtr missionPointer, float modifier);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetDebugAgentDelegate(UIntPtr missionPointer, int index);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetLastMovementKeyPressedDelegate(UIntPtr missionPointer, Agent.MovementControlFlag lastMovementKeyPressed);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetMissileRangeModifierDelegate(UIntPtr missionPointer, float modifier);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetMissionCorpseFadeOutTimeInSecondsDelegate(UIntPtr missionPointer, float corpseFadeOutTimeInSeconds);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetNavigationFaceCostWithIdAroundPositionDelegate(UIntPtr missionPointer, int navigationFaceId, Vec3 position, float cost);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetPauseAITickDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool I);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetRandomDecideTimeOfAgentsDelegate(UIntPtr missionPointer, int agentCount, IntPtr agentIndices, float minAIReactionTime, float maxAIReactionTime);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetReportStuckAgentsModeDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetThrowingMissileSpeedModifierDelegate(UIntPtr missionPointer, float modifier);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void StartRecordingDelegate();

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void TickDelegate(UIntPtr missionPointer, float dt);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void tickAgentsAndTeamsAsyncDelegate(UIntPtr missionPointer, float dt);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool ToggleDisableFallAvoidDelegate();

	private static readonly Encoding _utf8 = Encoding.UTF8;

	public static AddAiDebugTextDelegate call_AddAiDebugTextDelegate;

	public static AddBoundaryDelegate call_AddBoundaryDelegate;

	public static AddMissileDelegate call_AddMissileDelegate;

	public static AddMissileSingleUsageDelegate call_AddMissileSingleUsageDelegate;

	public static AddParticleSystemBurstByNameDelegate call_AddParticleSystemBurstByNameDelegate;

	public static AddSoundAlarmFactorToAgentsDelegate call_AddSoundAlarmFactorToAgentsDelegate;

	public static AddTeamDelegate call_AddTeamDelegate;

	public static BackupRecordToFileDelegate call_BackupRecordToFileDelegate;

	public static BatchFormationUnitPositionsDelegate call_BatchFormationUnitPositionsDelegate;

	public static ClearAgentActionsDelegate call_ClearAgentActionsDelegate;

	public static ClearCorpsesDelegate call_ClearCorpsesDelegate;

	public static ClearMissilesDelegate call_ClearMissilesDelegate;

	public static ClearRecordBuffersDelegate call_ClearRecordBuffersDelegate;

	public static ClearResourcesDelegate call_ClearResourcesDelegate;

	public static ClearSceneDelegate call_ClearSceneDelegate;

	public static ComputeExactMissileRangeAtHeightDifferenceDelegate call_ComputeExactMissileRangeAtHeightDifferenceDelegate;

	public static CreateAgentDelegate call_CreateAgentDelegate;

	public static CreateMissionDelegate call_CreateMissionDelegate;

	public static EndOfRecordDelegate call_EndOfRecordDelegate;

	public static FastForwardMissionDelegate call_FastForwardMissionDelegate;

	public static FinalizeMissionDelegate call_FinalizeMissionDelegate;

	public static FindAgentWithIndexDelegate call_FindAgentWithIndexDelegate;

	public static FindConvexHullDelegate call_FindConvexHullDelegate;

	public static GetAgentCountAroundPositionDelegate call_GetAgentCountAroundPositionDelegate;

	public static GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate call_GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate;

	public static GetAtmosphereNameForReplayDelegate call_GetAtmosphereNameForReplayDelegate;

	public static GetAtmosphereSeasonForReplayDelegate call_GetAtmosphereSeasonForReplayDelegate;

	public static GetAverageFpsDelegate call_GetAverageFpsDelegate;

	public static GetAverageMoraleOfAgentsDelegate call_GetAverageMoraleOfAgentsDelegate;

	public static GetBestSlopeAngleHeightPosForDefendingDelegate call_GetBestSlopeAngleHeightPosForDefendingDelegate;

	public static GetBestSlopeTowardsDirectionDelegate call_GetBestSlopeTowardsDirectionDelegate;

	public static GetBiggestAgentCollisionPaddingDelegate call_GetBiggestAgentCollisionPaddingDelegate;

	public static GetBoundaryCountDelegate call_GetBoundaryCountDelegate;

	public static GetBoundaryNameDelegate call_GetBoundaryNameDelegate;

	public static GetBoundaryPointsDelegate call_GetBoundaryPointsDelegate;

	public static GetBoundaryRadiusDelegate call_GetBoundaryRadiusDelegate;

	public static GetCameraFrameDelegate call_GetCameraFrameDelegate;

	public static GetClearSceneTimerElapsedTimeDelegate call_GetClearSceneTimerElapsedTimeDelegate;

	public static GetClosestAllyDelegate call_GetClosestAllyDelegate;

	public static GetClosestBoundaryPositionDelegate call_GetClosestBoundaryPositionDelegate;

	public static GetClosestEnemyDelegate call_GetClosestEnemyDelegate;

	public static GetCombatTypeDelegate call_GetCombatTypeDelegate;

	public static GetDebugAgentDelegate call_GetDebugAgentDelegate;

	public static GetEnemyAlarmStateIndicatorDelegate call_GetEnemyAlarmStateIndicatorDelegate;

	public static GetGameTypeForReplayDelegate call_GetGameTypeForReplayDelegate;

	public static GetIsLoadingFinishedDelegate call_GetIsLoadingFinishedDelegate;

	public static GetMissileCollisionPointDelegate call_GetMissileCollisionPointDelegate;

	public static GetMissileHasRigidBodyDelegate call_GetMissileHasRigidBodyDelegate;

	public static GetMissileRangeDelegate call_GetMissileRangeDelegate;

	public static GetMissileVerticalAimCorrectionDelegate call_GetMissileVerticalAimCorrectionDelegate;

	public static GetNavigationPointsDelegate call_GetNavigationPointsDelegate;

	public static GetNearbyAgentsAuxDelegate call_GetNearbyAgentsAuxDelegate;

	public static GetNumberOfTeamsDelegate call_GetNumberOfTeamsDelegate;

	public static GetPauseAITickDelegate call_GetPauseAITickDelegate;

	public static GetPlayerAlarmIndicatorDelegate call_GetPlayerAlarmIndicatorDelegate;

	public static GetPositionOfMissileDelegate call_GetPositionOfMissileDelegate;

	public static GetSceneLevelsForReplayDelegate call_GetSceneLevelsForReplayDelegate;

	public static GetSceneNameForReplayDelegate call_GetSceneNameForReplayDelegate;

	public static GetStraightPathToTargetDelegate call_GetStraightPathToTargetDelegate;

	public static GetTimeDelegate call_GetTimeDelegate;

	public static GetVelocityOfMissileDelegate call_GetVelocityOfMissileDelegate;

	public static GetWaterLevelAtPositionDelegate call_GetWaterLevelAtPositionDelegate;

	public static GetWeightedPointOfEnemiesDelegate call_GetWeightedPointOfEnemiesDelegate;

	public static HasAnyAgentsOfTeamAroundDelegate call_HasAnyAgentsOfTeamAroundDelegate;

	public static IdleTickDelegate call_IdleTickDelegate;

	public static InitializeMissionDelegate call_InitializeMissionDelegate;

	public static IsAgentInProximityMapDelegate call_IsAgentInProximityMapDelegate;

	public static IsFormationUnitPositionAvailableDelegate call_IsFormationUnitPositionAvailableDelegate;

	public static IsPositionInsideAnyBlockerNavMeshFace2DDelegate call_IsPositionInsideAnyBlockerNavMeshFace2DDelegate;

	public static IsPositionInsideBoundariesDelegate call_IsPositionInsideBoundariesDelegate;

	public static MakeSoundDelegate call_MakeSoundDelegate;

	public static MakeSoundOnlyOnRelatedPeerDelegate call_MakeSoundOnlyOnRelatedPeerDelegate;

	public static MakeSoundWithParameterDelegate call_MakeSoundWithParameterDelegate;

	public static PauseMissionSceneSoundsDelegate call_PauseMissionSceneSoundsDelegate;

	public static PrepareMissileWeaponForDropDelegate call_PrepareMissileWeaponForDropDelegate;

	public static ProcessRecordUntilTimeDelegate call_ProcessRecordUntilTimeDelegate;

	public static ProximityMapBeginSearchDelegate call_ProximityMapBeginSearchDelegate;

	public static ProximityMapFindNextDelegate call_ProximityMapFindNextDelegate;

	public static ProximityMapMaxSearchRadiusDelegate call_ProximityMapMaxSearchRadiusDelegate;

	public static RayCastForClosestAgentDelegate call_RayCastForClosestAgentDelegate;

	public static RayCastForClosestAgentsLimbsDelegate call_RayCastForClosestAgentsLimbsDelegate;

	public static RayCastForGivenAgentsLimbsDelegate call_RayCastForGivenAgentsLimbsDelegate;

	public static RecordCurrentStateDelegate call_RecordCurrentStateDelegate;

	public static RemoveBoundaryDelegate call_RemoveBoundaryDelegate;

	public static RemoveMissileDelegate call_RemoveMissileDelegate;

	public static ResetFirstThirdPersonViewDelegate call_ResetFirstThirdPersonViewDelegate;

	public static ResetTeamsDelegate call_ResetTeamsDelegate;

	public static RestartRecordDelegate call_RestartRecordDelegate;

	public static RestoreRecordFromFileDelegate call_RestoreRecordFromFileDelegate;

	public static ResumeMissionSceneSoundsDelegate call_ResumeMissionSceneSoundsDelegate;

	public static SetBowMissileSpeedModifierDelegate call_SetBowMissileSpeedModifierDelegate;

	public static SetCameraFrameDelegate call_SetCameraFrameDelegate;

	public static SetCameraIsFirstPersonDelegate call_SetCameraIsFirstPersonDelegate;

	public static SetCombatTypeDelegate call_SetCombatTypeDelegate;

	public static SetCrossbowMissileSpeedModifierDelegate call_SetCrossbowMissileSpeedModifierDelegate;

	public static SetDebugAgentDelegate call_SetDebugAgentDelegate;

	public static SetLastMovementKeyPressedDelegate call_SetLastMovementKeyPressedDelegate;

	public static SetMissileRangeModifierDelegate call_SetMissileRangeModifierDelegate;

	public static SetMissionCorpseFadeOutTimeInSecondsDelegate call_SetMissionCorpseFadeOutTimeInSecondsDelegate;

	public static SetNavigationFaceCostWithIdAroundPositionDelegate call_SetNavigationFaceCostWithIdAroundPositionDelegate;

	public static SetPauseAITickDelegate call_SetPauseAITickDelegate;

	public static SetRandomDecideTimeOfAgentsDelegate call_SetRandomDecideTimeOfAgentsDelegate;

	public static SetReportStuckAgentsModeDelegate call_SetReportStuckAgentsModeDelegate;

	public static SetThrowingMissileSpeedModifierDelegate call_SetThrowingMissileSpeedModifierDelegate;

	public static StartRecordingDelegate call_StartRecordingDelegate;

	public static TickDelegate call_TickDelegate;

	public static tickAgentsAndTeamsAsyncDelegate call_tickAgentsAndTeamsAsyncDelegate;

	public static ToggleDisableFallAvoidDelegate call_ToggleDisableFallAvoidDelegate;

	public void AddAiDebugText(UIntPtr missionPointer, string text)
	{
		byte[] array = null;
		if (text != null)
		{
			int byteCount = _utf8.GetByteCount(text);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(text, 0, text.Length, array, 0);
			array[byteCount] = 0;
		}
		call_AddAiDebugTextDelegate(missionPointer, array);
	}

	public bool AddBoundary(UIntPtr missionPointer, string name, Vec2[] boundaryPoints, int boundaryPointCount, bool isAllowanceInside)
	{
		byte[] array = null;
		if (name != null)
		{
			int byteCount = _utf8.GetByteCount(name);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(name, 0, name.Length, array, 0);
			array[byteCount] = 0;
		}
		PinnedArrayData<Vec2> pinnedArrayData = new PinnedArrayData<Vec2>(boundaryPoints);
		IntPtr pointer = pinnedArrayData.Pointer;
		bool result = call_AddBoundaryDelegate(missionPointer, array, pointer, boundaryPointCount, isAllowanceInside);
		pinnedArrayData.Dispose();
		return result;
	}

	public int AddMissile(UIntPtr missionPointer, bool isPrediction, int shooterAgentIndex, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, bool isPrimaryWeaponShot, out UIntPtr missileEntity)
	{
		WeaponDataAsNative weaponData2 = new WeaponDataAsNative(weaponData);
		PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
		IntPtr pointer = pinnedArrayData.Pointer;
		int result = call_AddMissileDelegate(missionPointer, isPrediction, shooterAgentIndex, in weaponData2, pointer, weaponStatsDataLength, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
		pinnedArrayData.Dispose();
		return result;
	}

	public int AddMissileSingleUsage(UIntPtr missionPointer, bool isPrediction, int shooterAgentIndex, in WeaponData weaponData, in WeaponStatsData weaponStatsData, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, bool isPrimaryWeaponShot, out UIntPtr missileEntity)
	{
		WeaponDataAsNative weaponData2 = new WeaponDataAsNative(weaponData);
		return call_AddMissileSingleUsageDelegate(missionPointer, isPrediction, shooterAgentIndex, in weaponData2, in weaponStatsData, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
	}

	public void AddParticleSystemBurstByName(UIntPtr missionPointer, string particleSystem, ref MatrixFrame frame, bool synchThroughNetwork)
	{
		byte[] array = null;
		if (particleSystem != null)
		{
			int byteCount = _utf8.GetByteCount(particleSystem);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(particleSystem, 0, particleSystem.Length, array, 0);
			array[byteCount] = 0;
		}
		call_AddParticleSystemBurstByNameDelegate(missionPointer, array, ref frame, synchThroughNetwork);
	}

	public void AddSoundAlarmFactorToAgents(UIntPtr pointer, int ownerId, Vec3 position, float alarmFactor)
	{
		call_AddSoundAlarmFactorToAgentsDelegate(pointer, ownerId, position, alarmFactor);
	}

	public int AddTeam(UIntPtr missionPointer)
	{
		return call_AddTeamDelegate(missionPointer);
	}

	public void BackupRecordToFile(UIntPtr missionPointer, string fileName, string gameType, string sceneLevels)
	{
		byte[] array = null;
		if (fileName != null)
		{
			int byteCount = _utf8.GetByteCount(fileName);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(fileName, 0, fileName.Length, array, 0);
			array[byteCount] = 0;
		}
		byte[] array2 = null;
		if (gameType != null)
		{
			int byteCount2 = _utf8.GetByteCount(gameType);
			array2 = ((byteCount2 < 1024) ? CallbackStringBufferManager.StringBuffer1 : new byte[byteCount2 + 1]);
			_utf8.GetBytes(gameType, 0, gameType.Length, array2, 0);
			array2[byteCount2] = 0;
		}
		byte[] array3 = null;
		if (sceneLevels != null)
		{
			int byteCount3 = _utf8.GetByteCount(sceneLevels);
			array3 = ((byteCount3 < 1024) ? CallbackStringBufferManager.StringBuffer2 : new byte[byteCount3 + 1]);
			_utf8.GetBytes(sceneLevels, 0, sceneLevels.Length, array3, 0);
			array3[byteCount3] = 0;
		}
		call_BackupRecordToFileDelegate(missionPointer, array, array2, array3);
	}

	public void BatchFormationUnitPositions(UIntPtr missionPointer, Vec2i[] orderedPositionIndices, Vec2[] orderedLocalPositions, int[] availabilityTable, WorldPosition[] globalPositionTable, WorldPosition orderPosition, Vec2 direction, int fileCount, int rankCount)
	{
		PinnedArrayData<Vec2i> pinnedArrayData = new PinnedArrayData<Vec2i>(orderedPositionIndices);
		IntPtr pointer = pinnedArrayData.Pointer;
		PinnedArrayData<Vec2> pinnedArrayData2 = new PinnedArrayData<Vec2>(orderedLocalPositions);
		IntPtr pointer2 = pinnedArrayData2.Pointer;
		PinnedArrayData<int> pinnedArrayData3 = new PinnedArrayData<int>(availabilityTable);
		IntPtr pointer3 = pinnedArrayData3.Pointer;
		PinnedArrayData<WorldPosition> pinnedArrayData4 = new PinnedArrayData<WorldPosition>(globalPositionTable);
		IntPtr pointer4 = pinnedArrayData4.Pointer;
		call_BatchFormationUnitPositionsDelegate(missionPointer, pointer, pointer2, pointer3, pointer4, orderPosition, direction, fileCount, rankCount);
		pinnedArrayData.Dispose();
		pinnedArrayData2.Dispose();
		pinnedArrayData3.Dispose();
		pinnedArrayData4.Dispose();
	}

	public void ClearAgentActions(UIntPtr missionPointer)
	{
		call_ClearAgentActionsDelegate(missionPointer);
	}

	public void ClearCorpses(UIntPtr missionPointer, bool isMissionReset)
	{
		call_ClearCorpsesDelegate(missionPointer, isMissionReset);
	}

	public void ClearMissiles(UIntPtr missionPointer)
	{
		call_ClearMissilesDelegate(missionPointer);
	}

	public void ClearRecordBuffers(UIntPtr missionPointer)
	{
		call_ClearRecordBuffersDelegate(missionPointer);
	}

	public void ClearResources(UIntPtr missionPointer)
	{
		call_ClearResourcesDelegate(missionPointer);
	}

	public void ClearScene(UIntPtr missionPointer)
	{
		call_ClearSceneDelegate(missionPointer);
	}

	public float ComputeExactMissileRangeAtHeightDifference(float targetHeightDifference, float initialSpeed, float airFrictionConstant, float maxDuration)
	{
		return call_ComputeExactMissileRangeAtHeightDifferenceDelegate(targetHeightDifference, initialSpeed, airFrictionConstant, maxDuration);
	}

	public Mission.AgentCreationResult CreateAgent(UIntPtr missionPointer, ulong monsterFlag, int forcedAgentIndex, bool isFemale, ref AgentSpawnData spawnData, ref CapsuleData bodyCapsule, ref CapsuleData crouchedBodyCapsule, ref AnimationSystemData animationSystemData, int instanceNo)
	{
		return call_CreateAgentDelegate(missionPointer, monsterFlag, forcedAgentIndex, isFemale, ref spawnData, ref bodyCapsule, ref crouchedBodyCapsule, ref animationSystemData, instanceNo);
	}

	public UIntPtr CreateMission(Mission mission)
	{
		return call_CreateMissionDelegate(mission?.GetManagedId() ?? 0);
	}

	public bool EndOfRecord(UIntPtr missionPointer)
	{
		return call_EndOfRecordDelegate(missionPointer);
	}

	public void FastForwardMission(UIntPtr missionPointer, float startTime, float endTime)
	{
		call_FastForwardMissionDelegate(missionPointer, startTime, endTime);
	}

	public void FinalizeMission(UIntPtr missionPointer)
	{
		call_FinalizeMissionDelegate(missionPointer);
	}

	public Agent FindAgentWithIndex(UIntPtr missionPointer, int index)
	{
		return DotNetObject.GetManagedObjectWithId(call_FindAgentWithIndexDelegate(missionPointer, index)) as Agent;
	}

	public void FindConvexHull(Vec2[] boundaryPoints, int boundaryPointCount, ref int convexPointCount)
	{
		PinnedArrayData<Vec2> pinnedArrayData = new PinnedArrayData<Vec2>(boundaryPoints);
		IntPtr pointer = pinnedArrayData.Pointer;
		call_FindConvexHullDelegate(pointer, boundaryPointCount, ref convexPointCount);
		pinnedArrayData.Dispose();
	}

	public void GetAgentCountAroundPosition(UIntPtr missionPointer, int teamIndex, Vec2 position, float radius, ref int allyCount, ref int enemyCount)
	{
		call_GetAgentCountAroundPositionDelegate(missionPointer, teamIndex, position, radius, ref allyCount, ref enemyCount);
	}

	public WorldPosition GetAlternatePositionForNavmeshlessOrOutOfBoundsPosition(UIntPtr ptr, ref Vec2 directionTowards, ref WorldPosition originalPosition, ref float positionPenalty)
	{
		return call_GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate(ptr, ref directionTowards, ref originalPosition, ref positionPenalty);
	}

	public string GetAtmosphereNameForReplay(PlatformFilePath replayName)
	{
		if (call_GetAtmosphereNameForReplayDelegate(replayName) != 1)
		{
			return null;
		}
		return Managed.ReturnValueFromEngine;
	}

	public int GetAtmosphereSeasonForReplay(PlatformFilePath replayName)
	{
		return call_GetAtmosphereSeasonForReplayDelegate(replayName);
	}

	public float GetAverageFps(UIntPtr missionPointer)
	{
		return call_GetAverageFpsDelegate(missionPointer);
	}

	public float GetAverageMoraleOfAgents(UIntPtr missionPointer, int agentCount, int[] agentIndices)
	{
		PinnedArrayData<int> pinnedArrayData = new PinnedArrayData<int>(agentIndices);
		IntPtr pointer = pinnedArrayData.Pointer;
		float result = call_GetAverageMoraleOfAgentsDelegate(missionPointer, agentCount, pointer);
		pinnedArrayData.Dispose();
		return result;
	}

	public WorldPosition GetBestSlopeAngleHeightPosForDefending(UIntPtr missionPointer, WorldPosition enemyPosition, WorldPosition defendingPosition, int sampleSize, float distanceRatioAllowedFromDefendedPos, float distanceSqrdAllowedFromBoundary, float cosinusOfBestSlope, float cosinusOfMaxAcceptedSlope, float minSlopeScore, float maxSlopeScore, float excessiveSlopePenalty, float nearConeCenterRatio, float nearConeCenterBonus, float heightDifferenceCeiling, float maxDisplacementPenalty)
	{
		return call_GetBestSlopeAngleHeightPosForDefendingDelegate(missionPointer, enemyPosition, defendingPosition, sampleSize, distanceRatioAllowedFromDefendedPos, distanceSqrdAllowedFromBoundary, cosinusOfBestSlope, cosinusOfMaxAcceptedSlope, minSlopeScore, maxSlopeScore, excessiveSlopePenalty, nearConeCenterRatio, nearConeCenterBonus, heightDifferenceCeiling, maxDisplacementPenalty);
	}

	public WorldPosition GetBestSlopeTowardsDirection(UIntPtr missionPointer, ref WorldPosition centerPosition, float halfsize, ref WorldPosition referencePosition)
	{
		return call_GetBestSlopeTowardsDirectionDelegate(missionPointer, ref centerPosition, halfsize, ref referencePosition);
	}

	public float GetBiggestAgentCollisionPadding(UIntPtr missionPointer)
	{
		return call_GetBiggestAgentCollisionPaddingDelegate(missionPointer);
	}

	public int GetBoundaryCount(UIntPtr missionPointer)
	{
		return call_GetBoundaryCountDelegate(missionPointer);
	}

	public string GetBoundaryName(UIntPtr missionPointer, int boundaryIndex)
	{
		if (call_GetBoundaryNameDelegate(missionPointer, boundaryIndex) != 1)
		{
			return null;
		}
		return Managed.ReturnValueFromEngine;
	}

	public void GetBoundaryPoints(UIntPtr missionPointer, string name, int boundaryPointOffset, Vec2[] boundaryPoints, int boundaryPointsSize, ref int retrievedPointCount)
	{
		byte[] array = null;
		if (name != null)
		{
			int byteCount = _utf8.GetByteCount(name);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(name, 0, name.Length, array, 0);
			array[byteCount] = 0;
		}
		PinnedArrayData<Vec2> pinnedArrayData = new PinnedArrayData<Vec2>(boundaryPoints);
		IntPtr pointer = pinnedArrayData.Pointer;
		call_GetBoundaryPointsDelegate(missionPointer, array, boundaryPointOffset, pointer, boundaryPointsSize, ref retrievedPointCount);
		pinnedArrayData.Dispose();
	}

	public float GetBoundaryRadius(UIntPtr missionPointer, string name)
	{
		byte[] array = null;
		if (name != null)
		{
			int byteCount = _utf8.GetByteCount(name);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(name, 0, name.Length, array, 0);
			array[byteCount] = 0;
		}
		return call_GetBoundaryRadiusDelegate(missionPointer, array);
	}

	public MatrixFrame GetCameraFrame(UIntPtr missionPointer)
	{
		return call_GetCameraFrameDelegate(missionPointer);
	}

	public float GetClearSceneTimerElapsedTime(UIntPtr missionPointer)
	{
		return call_GetClearSceneTimerElapsedTimeDelegate(missionPointer);
	}

	public Agent GetClosestAlly(UIntPtr missionPointer, int teamIndex, Vec3 position, float radius)
	{
		return DotNetObject.GetManagedObjectWithId(call_GetClosestAllyDelegate(missionPointer, teamIndex, position, radius)) as Agent;
	}

	public Vec2 GetClosestBoundaryPosition(UIntPtr missionPointer, Vec2 position)
	{
		return call_GetClosestBoundaryPositionDelegate(missionPointer, position);
	}

	public Agent GetClosestEnemy(UIntPtr missionPointer, int teamIndex, Vec3 position, float radius)
	{
		return DotNetObject.GetManagedObjectWithId(call_GetClosestEnemyDelegate(missionPointer, teamIndex, position, radius)) as Agent;
	}

	public int GetCombatType(UIntPtr missionPointer)
	{
		return call_GetCombatTypeDelegate(missionPointer);
	}

	public int GetDebugAgent(UIntPtr missionPointer)
	{
		return call_GetDebugAgentDelegate(missionPointer);
	}

	public int GetEnemyAlarmStateIndicator(UIntPtr missionPointer)
	{
		return call_GetEnemyAlarmStateIndicatorDelegate(missionPointer);
	}

	public string GetGameTypeForReplay(PlatformFilePath replayName)
	{
		if (call_GetGameTypeForReplayDelegate(replayName) != 1)
		{
			return null;
		}
		return Managed.ReturnValueFromEngine;
	}

	public bool GetIsLoadingFinished(UIntPtr missionPointer)
	{
		return call_GetIsLoadingFinishedDelegate(missionPointer);
	}

	public Vec3 GetMissileCollisionPoint(UIntPtr missionPointer, Vec3 missileStartingPosition, Vec3 missileDirection, float missileStartingSpeed, in WeaponData weaponData)
	{
		WeaponDataAsNative weaponData2 = new WeaponDataAsNative(weaponData);
		return call_GetMissileCollisionPointDelegate(missionPointer, missileStartingPosition, missileDirection, missileStartingSpeed, in weaponData2);
	}

	public bool GetMissileHasRigidBody(UIntPtr missionPointer, int index)
	{
		return call_GetMissileHasRigidBodyDelegate(missionPointer, index);
	}

	public float GetMissileRange(float missileStartingSpeed, float heightDifference)
	{
		return call_GetMissileRangeDelegate(missileStartingSpeed, heightDifference);
	}

	public float GetMissileVerticalAimCorrection(Vec3 vecToTarget, float missileStartingSpeed, ref WeaponStatsData weaponStatsData, float airFrictionConstant)
	{
		return call_GetMissileVerticalAimCorrectionDelegate(vecToTarget, missileStartingSpeed, ref weaponStatsData, airFrictionConstant);
	}

	public bool GetNavigationPoints(UIntPtr missionPointer, ref NavigationData navigationData)
	{
		return call_GetNavigationPointsDelegate(missionPointer, ref navigationData);
	}

	public void GetNearbyAgentsAux(UIntPtr missionPointer, Vec2 center, float radius, int teamIndex, int friendOrEnemyOrAll, int agentsArrayOffset, ref EngineStackArray.StackArray40Int agentIds, ref int retrievedAgentCount)
	{
		call_GetNearbyAgentsAuxDelegate(missionPointer, center, radius, teamIndex, friendOrEnemyOrAll, agentsArrayOffset, ref agentIds, ref retrievedAgentCount);
	}

	public int GetNumberOfTeams(UIntPtr missionPointer)
	{
		return call_GetNumberOfTeamsDelegate(missionPointer);
	}

	public bool GetPauseAITick(UIntPtr missionPointer)
	{
		return call_GetPauseAITickDelegate(missionPointer);
	}

	public float GetPlayerAlarmIndicator(UIntPtr missionPointer)
	{
		return call_GetPlayerAlarmIndicatorDelegate(missionPointer);
	}

	public Vec3 GetPositionOfMissile(UIntPtr missionPointer, int index)
	{
		return call_GetPositionOfMissileDelegate(missionPointer, index);
	}

	public string GetSceneLevelsForReplay(PlatformFilePath replayName)
	{
		if (call_GetSceneLevelsForReplayDelegate(replayName) != 1)
		{
			return null;
		}
		return Managed.ReturnValueFromEngine;
	}

	public string GetSceneNameForReplay(PlatformFilePath replayName)
	{
		if (call_GetSceneNameForReplayDelegate(replayName) != 1)
		{
			return null;
		}
		return Managed.ReturnValueFromEngine;
	}

	public WorldPosition GetStraightPathToTarget(UIntPtr scenePointer, Vec2 targetPosition, WorldPosition startingPosition, float samplingDistance, bool stopAtObstacle)
	{
		return call_GetStraightPathToTargetDelegate(scenePointer, targetPosition, startingPosition, samplingDistance, stopAtObstacle);
	}

	public float GetTime(UIntPtr missionPointer)
	{
		return call_GetTimeDelegate(missionPointer);
	}

	public Vec3 GetVelocityOfMissile(UIntPtr missionPointer, int index)
	{
		return call_GetVelocityOfMissileDelegate(missionPointer, index);
	}

	public float GetWaterLevelAtPosition(UIntPtr missionPointer, Vec2 position)
	{
		return call_GetWaterLevelAtPositionDelegate(missionPointer, position);
	}

	public Vec2 GetWeightedPointOfEnemies(UIntPtr missionPointer, int agentIndex, Vec2 basePoint)
	{
		return call_GetWeightedPointOfEnemiesDelegate(missionPointer, agentIndex, basePoint);
	}

	public bool HasAnyAgentsOfTeamAround(UIntPtr missionPointer, Vec3 origin, float radius, int teamNo)
	{
		return call_HasAnyAgentsOfTeamAroundDelegate(missionPointer, origin, radius, teamNo);
	}

	public void IdleTick(UIntPtr missionPointer, float dt)
	{
		call_IdleTickDelegate(missionPointer, dt);
	}

	public void InitializeMission(UIntPtr missionPointer, ref MissionInitializerRecord rec)
	{
		call_InitializeMissionDelegate(missionPointer, ref rec);
	}

	public bool IsAgentInProximityMap(UIntPtr missionPointer, int agentIndex)
	{
		return call_IsAgentInProximityMapDelegate(missionPointer, agentIndex);
	}

	public bool IsFormationUnitPositionAvailable(UIntPtr missionPointer, ref WorldPosition orderPosition, ref WorldPosition unitPosition, ref WorldPosition nearestAvailableUnitPosition, float manhattanDistance)
	{
		return call_IsFormationUnitPositionAvailableDelegate(missionPointer, ref orderPosition, ref unitPosition, ref nearestAvailableUnitPosition, manhattanDistance);
	}

	public bool IsPositionInsideAnyBlockerNavMeshFace2D(UIntPtr missionPointer, Vec2 position)
	{
		return call_IsPositionInsideAnyBlockerNavMeshFace2DDelegate(missionPointer, position);
	}

	public bool IsPositionInsideBoundaries(UIntPtr missionPointer, Vec2 position)
	{
		return call_IsPositionInsideBoundariesDelegate(missionPointer, position);
	}

	public void MakeSound(UIntPtr pointer, int nativeSoundCode, Vec3 position, bool soundCanBePredicted, bool isReliable, int relatedAgent1, int relatedAgent2)
	{
		call_MakeSoundDelegate(pointer, nativeSoundCode, position, soundCanBePredicted, isReliable, relatedAgent1, relatedAgent2);
	}

	public void MakeSoundOnlyOnRelatedPeer(UIntPtr pointer, int nativeSoundCode, Vec3 position, int relatedAgent)
	{
		call_MakeSoundOnlyOnRelatedPeerDelegate(pointer, nativeSoundCode, position, relatedAgent);
	}

	public void MakeSoundWithParameter(UIntPtr pointer, int nativeSoundCode, Vec3 position, bool soundCanBePredicted, bool isReliable, int relatedAgent1, int relatedAgent2, SoundEventParameter parameter)
	{
		call_MakeSoundWithParameterDelegate(pointer, nativeSoundCode, position, soundCanBePredicted, isReliable, relatedAgent1, relatedAgent2, parameter);
	}

	public void PauseMissionSceneSounds(UIntPtr missionPointer)
	{
		call_PauseMissionSceneSoundsDelegate(missionPointer);
	}

	public void PrepareMissileWeaponForDrop(UIntPtr missionPointer, int missileIndex)
	{
		call_PrepareMissileWeaponForDropDelegate(missionPointer, missileIndex);
	}

	public void ProcessRecordUntilTime(UIntPtr missionPointer, float time)
	{
		call_ProcessRecordUntilTimeDelegate(missionPointer, time);
	}

	public AgentProximityMap.ProximityMapSearchStructInternal ProximityMapBeginSearch(UIntPtr missionPointer, Vec2 searchPos, float searchRadius)
	{
		return call_ProximityMapBeginSearchDelegate(missionPointer, searchPos, searchRadius);
	}

	public void ProximityMapFindNext(UIntPtr missionPointer, ref AgentProximityMap.ProximityMapSearchStructInternal searchStruct)
	{
		call_ProximityMapFindNextDelegate(missionPointer, ref searchStruct);
	}

	public float ProximityMapMaxSearchRadius(UIntPtr missionPointer)
	{
		return call_ProximityMapMaxSearchRadiusDelegate(missionPointer);
	}

	public Agent RayCastForClosestAgent(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int ExcludeAgentIndex, ref float CollisionDistance, float RayThickness)
	{
		return DotNetObject.GetManagedObjectWithId(call_RayCastForClosestAgentDelegate(missionPointer, SourcePoint, RayFinishPoint, ExcludeAgentIndex, ref CollisionDistance, RayThickness)) as Agent;
	}

	public bool RayCastForClosestAgentsLimbs(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int ExcludeAgentIndex, ref float CollisionDistance, ref int AgentIndex, ref sbyte BoneIndex)
	{
		return call_RayCastForClosestAgentsLimbsDelegate(missionPointer, SourcePoint, RayFinishPoint, ExcludeAgentIndex, ref CollisionDistance, ref AgentIndex, ref BoneIndex);
	}

	public bool RayCastForGivenAgentsLimbs(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int GivenAgentIndex, ref float CollisionDistance, ref sbyte BoneIndex)
	{
		return call_RayCastForGivenAgentsLimbsDelegate(missionPointer, SourcePoint, RayFinishPoint, GivenAgentIndex, ref CollisionDistance, ref BoneIndex);
	}

	public void RecordCurrentState(UIntPtr missionPointer)
	{
		call_RecordCurrentStateDelegate(missionPointer);
	}

	public bool RemoveBoundary(UIntPtr missionPointer, string name)
	{
		byte[] array = null;
		if (name != null)
		{
			int byteCount = _utf8.GetByteCount(name);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(name, 0, name.Length, array, 0);
			array[byteCount] = 0;
		}
		return call_RemoveBoundaryDelegate(missionPointer, array);
	}

	public void RemoveMissile(UIntPtr missionPointer, int missileIndex)
	{
		call_RemoveMissileDelegate(missionPointer, missileIndex);
	}

	public void ResetFirstThirdPersonView(UIntPtr missionPointer)
	{
		call_ResetFirstThirdPersonViewDelegate(missionPointer);
	}

	public void ResetTeams(UIntPtr missionPointer)
	{
		call_ResetTeamsDelegate(missionPointer);
	}

	public void RestartRecord(UIntPtr missionPointer)
	{
		call_RestartRecordDelegate(missionPointer);
	}

	public void RestoreRecordFromFile(UIntPtr missionPointer, string fileName)
	{
		byte[] array = null;
		if (fileName != null)
		{
			int byteCount = _utf8.GetByteCount(fileName);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(fileName, 0, fileName.Length, array, 0);
			array[byteCount] = 0;
		}
		call_RestoreRecordFromFileDelegate(missionPointer, array);
	}

	public void ResumeMissionSceneSounds(UIntPtr missionPointer)
	{
		call_ResumeMissionSceneSoundsDelegate(missionPointer);
	}

	public void SetBowMissileSpeedModifier(UIntPtr missionPointer, float modifier)
	{
		call_SetBowMissileSpeedModifierDelegate(missionPointer, modifier);
	}

	public void SetCameraFrame(UIntPtr missionPointer, ref MatrixFrame cameraFrame, float zoomFactor, ref Vec3 attenuationPosition)
	{
		call_SetCameraFrameDelegate(missionPointer, ref cameraFrame, zoomFactor, ref attenuationPosition);
	}

	public void SetCameraIsFirstPerson(bool value)
	{
		call_SetCameraIsFirstPersonDelegate(value);
	}

	public void SetCombatType(UIntPtr missionPointer, int combatType)
	{
		call_SetCombatTypeDelegate(missionPointer, combatType);
	}

	public void SetCrossbowMissileSpeedModifier(UIntPtr missionPointer, float modifier)
	{
		call_SetCrossbowMissileSpeedModifierDelegate(missionPointer, modifier);
	}

	public void SetDebugAgent(UIntPtr missionPointer, int index)
	{
		call_SetDebugAgentDelegate(missionPointer, index);
	}

	public void SetLastMovementKeyPressed(UIntPtr missionPointer, Agent.MovementControlFlag lastMovementKeyPressed)
	{
		call_SetLastMovementKeyPressedDelegate(missionPointer, lastMovementKeyPressed);
	}

	public void SetMissileRangeModifier(UIntPtr missionPointer, float modifier)
	{
		call_SetMissileRangeModifierDelegate(missionPointer, modifier);
	}

	public void SetMissionCorpseFadeOutTimeInSeconds(UIntPtr missionPointer, float corpseFadeOutTimeInSeconds)
	{
		call_SetMissionCorpseFadeOutTimeInSecondsDelegate(missionPointer, corpseFadeOutTimeInSeconds);
	}

	public void SetNavigationFaceCostWithIdAroundPosition(UIntPtr missionPointer, int navigationFaceId, Vec3 position, float cost)
	{
		call_SetNavigationFaceCostWithIdAroundPositionDelegate(missionPointer, navigationFaceId, position, cost);
	}

	public void SetPauseAITick(UIntPtr missionPointer, bool I)
	{
		call_SetPauseAITickDelegate(missionPointer, I);
	}

	public void SetRandomDecideTimeOfAgents(UIntPtr missionPointer, int agentCount, int[] agentIndices, float minAIReactionTime, float maxAIReactionTime)
	{
		PinnedArrayData<int> pinnedArrayData = new PinnedArrayData<int>(agentIndices);
		IntPtr pointer = pinnedArrayData.Pointer;
		call_SetRandomDecideTimeOfAgentsDelegate(missionPointer, agentCount, pointer, minAIReactionTime, maxAIReactionTime);
		pinnedArrayData.Dispose();
	}

	public void SetReportStuckAgentsMode(UIntPtr missionPointer, bool value)
	{
		call_SetReportStuckAgentsModeDelegate(missionPointer, value);
	}

	public void SetThrowingMissileSpeedModifier(UIntPtr missionPointer, float modifier)
	{
		call_SetThrowingMissileSpeedModifierDelegate(missionPointer, modifier);
	}

	public void StartRecording()
	{
		call_StartRecordingDelegate();
	}

	public void Tick(UIntPtr missionPointer, float dt)
	{
		call_TickDelegate(missionPointer, dt);
	}

	public void tickAgentsAndTeamsAsync(UIntPtr missionPointer, float dt)
	{
		call_tickAgentsAndTeamsAsyncDelegate(missionPointer, dt);
	}

	public bool ToggleDisableFallAvoid()
	{
		return call_ToggleDisableFallAvoidDelegate();
	}

	int IMBMission.AddMissile(UIntPtr missionPointer, bool isPrediction, int shooterAgentIndex, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, bool isPrimaryWeaponShot, out UIntPtr missileEntity)
	{
		return AddMissile(missionPointer, isPrediction, shooterAgentIndex, in weaponData, weaponStatsData, weaponStatsDataLength, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
	}

	int IMBMission.AddMissileSingleUsage(UIntPtr missionPointer, bool isPrediction, int shooterAgentIndex, in WeaponData weaponData, in WeaponStatsData weaponStatsData, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, bool isPrimaryWeaponShot, out UIntPtr missileEntity)
	{
		return AddMissileSingleUsage(missionPointer, isPrediction, shooterAgentIndex, in weaponData, in weaponStatsData, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
	}

	Vec3 IMBMission.GetMissileCollisionPoint(UIntPtr missionPointer, Vec3 missileStartingPosition, Vec3 missileDirection, float missileStartingSpeed, in WeaponData weaponData)
	{
		return GetMissileCollisionPoint(missionPointer, missileStartingPosition, missileDirection, missileStartingSpeed, in weaponData);
	}
}
