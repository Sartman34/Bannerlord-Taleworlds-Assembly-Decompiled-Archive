using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.AutoGenerated;

namespace ManagedCallbacks;

internal class ScriptingInterfaceOfIMBAgentVisuals : IMBAgentVisuals
{
	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool AddChildEntityDelegate(UIntPtr agentVisualsPtr, UIntPtr EntityId);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AddHorseReinsClothMeshDelegate(UIntPtr agentVisualsPtr, UIntPtr reinMeshPointer, UIntPtr ropeMeshPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AddMeshDelegate(UIntPtr agentVisualsId, UIntPtr meshPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AddMultiMeshDelegate(UIntPtr agentVisualsPtr, UIntPtr multiMeshPointer, int bodyMeshIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate NativeObjectPointer AddPrefabToAgentVisualBoneByBoneTypeDelegate(UIntPtr agentVisualsPtr, byte[] prefabName, HumanBone boneType);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate NativeObjectPointer AddPrefabToAgentVisualBoneByRealBoneIndexDelegate(UIntPtr agentVisualsPtr, byte[] prefabName, sbyte realBoneIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AddSkinMeshesToAgentEntityDelegate(UIntPtr agentVisualsId, ref SkinGenerationParams skinParams, ref BodyProperties bodyProperties, [MarshalAs(UnmanagedType.U1)] bool useGPUMorph, [MarshalAs(UnmanagedType.U1)] bool useFaceCache);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void AddWeaponToAgentEntityDelegate(UIntPtr agentVisualsPtr, int slotIndex, in WeaponDataAsNative agentEntityData, IntPtr weaponStatsData, int weaponStatsDataLength, in WeaponDataAsNative agentEntityAmmoData, IntPtr ammoWeaponStatsData, int ammoWeaponStatsDataLength, UIntPtr cachedEntity);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ApplySkeletonScaleDelegate(UIntPtr agentVisualsId, Vec3 mountSitBoneScale, float mountRadiusAdder, byte boneCount, IntPtr boneIndices, IntPtr boneScales);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void BatchLastLodMeshesDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool CheckResourcesDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool addToQueue);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearAllWeaponMeshesDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearVisualComponentsDelegate(UIntPtr agentVisualsId, [MarshalAs(UnmanagedType.U1)] bool removeSkeleton);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ClearWeaponMeshesDelegate(UIntPtr agentVisualsPtr, int weaponVisualIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate UIntPtr CreateAgentRendererSceneControllerDelegate(UIntPtr scenePointer, int maxRenderCount);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate NativeObjectPointer CreateAgentVisualsDelegate(UIntPtr scenePtr, byte[] ownerName, Vec3 eyeOffset);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void CreateParticleSystemAttachedToBoneDelegate(UIntPtr agentVisualsPtr, int runtimeParticleindex, sbyte boneIndex, ref MatrixFrame boneLocalParticleFrame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void DestructAgentRendererSceneControllerDelegate(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer, [MarshalAs(UnmanagedType.U1)] bool deleteThisFrame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void DisableContourDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void FillEntityWithBodyMeshesWithoutAgentVisualsDelegate(UIntPtr entityPoinbter, ref SkinGenerationParams skinParams, ref BodyProperties bodyProperties, UIntPtr glovesMesh);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate NativeObjectPointer GetAttachedWeaponEntityDelegate(UIntPtr agentVisualsPtr, int attachedWeaponIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetBoneEntitialFrameDelegate(UIntPtr agentVisualsPtr, sbyte bone, [MarshalAs(UnmanagedType.U1)] bool useBoneMapping, ref MatrixFrame outFrame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetBoneTypeDataDelegate(UIntPtr pointer, sbyte boneIndex, ref BoneBodyTypeData boneBodyTypeData);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetCurrentHelmetScalingFactorDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate RagdollState GetCurrentRagdollStateDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate NativeObjectPointer GetEntityDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetFrameDelegate(UIntPtr agentVisualsPtr, ref MatrixFrame outFrame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void GetGlobalFrameDelegate(UIntPtr agentVisualsPtr, ref MatrixFrame outFrame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetGlobalStableEyePointDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool isHumanoid);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate Vec3 GetGlobalStableNeckPointDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool isHumanoid);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate sbyte GetRealBoneIndexDelegate(UIntPtr agentVisualsPtr, HumanBone boneType);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate NativeObjectPointer GetSkeletonDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool GetVisibleDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	[return: MarshalAs(UnmanagedType.U1)]
	public delegate bool IsValidDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void LazyUpdateAgentRendererDataDelegate(UIntPtr agentVisualsId);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void MakeVoiceDelegate(UIntPtr agentVisualsPtr, int voiceId, ref Vec3 position);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void RemoveChildEntityDelegate(UIntPtr agentVisualsPtr, UIntPtr EntityId, int removeReason);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void RemoveMeshDelegate(UIntPtr agentVisualsPtr, UIntPtr meshPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void RemoveMultiMeshDelegate(UIntPtr agentVisualsPtr, UIntPtr multiMeshPointer, int bodyMeshIndex);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ResetDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ResetNextFrameDelegate(UIntPtr agentVisualsPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAgentLocalSpeedDelegate(UIntPtr agentVisualsPtr, Vec2 speed);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAgentLodMakeZeroOrMaxDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool makeZero);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetAsContourEntityDelegate(UIntPtr agentVisualsPtr, uint color);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetClothComponentKeepStateOfAllMeshesDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool keepState);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetClothWindToWeaponAtIndexDelegate(UIntPtr agentVisualsPtr, Vec3 windDirection, [MarshalAs(UnmanagedType.U1)] bool isLocal, int index);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetContourStateDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool alwaysVisible);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetDoTimerBasedForcedSkeletonUpdatesDelegate(UIntPtr agentRendererSceneControllerPointer, [MarshalAs(UnmanagedType.U1)] bool value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetEnableOcclusionCullingDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool enable);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetEnforcedVisibilityForAllAgentsDelegate(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetEntityDelegate(UIntPtr agentVisualsId, UIntPtr entityPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetFaceGenerationParamsDelegate(UIntPtr agentVisualsId, FaceGenerationParams faceGenerationParams);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetFrameDelegate(UIntPtr agentVisualsPtr, ref MatrixFrame frame);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetLodAtlasShadingIndexDelegate(UIntPtr agentVisualsId, int index, [MarshalAs(UnmanagedType.U1)] bool useTeamColor, uint teamColor1, uint teamColor2);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetLookDirectionDelegate(UIntPtr agentVisualsPtr, Vec3 direction);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetSetupMorphNodeDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetSkeletonDelegate(UIntPtr agentVisualsId, UIntPtr skeletonPtr);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetVisibleDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetVoiceDefinitionIndexDelegate(UIntPtr agentVisualsPtr, int voiceDefinitionIndex, float voicePitch);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void SetWieldedWeaponIndicesDelegate(UIntPtr agentVisualsId, int slotIndexRightHand, int slotIndexLeftHand);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void StartRhubarbRecordDelegate(UIntPtr agentVisualsId, byte[] path, int soundId);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void TickDelegate(UIntPtr agentVisualsId, UIntPtr parentAgentVisualsId, float dt, [MarshalAs(UnmanagedType.U1)] bool entityMoving, float speed);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void UpdateQuiverMeshesWithoutAgentDelegate(UIntPtr agentVisualsId, int weaponIndex, int ammoCountToShow);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void UpdateSkeletonScaleDelegate(UIntPtr agentVisualsId, int bodyDeformType);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void UseScaledWeaponsDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool value);

	[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
	[SuppressUnmanagedCodeSecurity]
	[MonoNativeFunctionWrapper]
	public delegate void ValidateAgentVisualsResetedDelegate(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer);

	private static readonly Encoding _utf8 = Encoding.UTF8;

	public static AddChildEntityDelegate call_AddChildEntityDelegate;

	public static AddHorseReinsClothMeshDelegate call_AddHorseReinsClothMeshDelegate;

	public static AddMeshDelegate call_AddMeshDelegate;

	public static AddMultiMeshDelegate call_AddMultiMeshDelegate;

	public static AddPrefabToAgentVisualBoneByBoneTypeDelegate call_AddPrefabToAgentVisualBoneByBoneTypeDelegate;

	public static AddPrefabToAgentVisualBoneByRealBoneIndexDelegate call_AddPrefabToAgentVisualBoneByRealBoneIndexDelegate;

	public static AddSkinMeshesToAgentEntityDelegate call_AddSkinMeshesToAgentEntityDelegate;

	public static AddWeaponToAgentEntityDelegate call_AddWeaponToAgentEntityDelegate;

	public static ApplySkeletonScaleDelegate call_ApplySkeletonScaleDelegate;

	public static BatchLastLodMeshesDelegate call_BatchLastLodMeshesDelegate;

	public static CheckResourcesDelegate call_CheckResourcesDelegate;

	public static ClearAllWeaponMeshesDelegate call_ClearAllWeaponMeshesDelegate;

	public static ClearVisualComponentsDelegate call_ClearVisualComponentsDelegate;

	public static ClearWeaponMeshesDelegate call_ClearWeaponMeshesDelegate;

	public static CreateAgentRendererSceneControllerDelegate call_CreateAgentRendererSceneControllerDelegate;

	public static CreateAgentVisualsDelegate call_CreateAgentVisualsDelegate;

	public static CreateParticleSystemAttachedToBoneDelegate call_CreateParticleSystemAttachedToBoneDelegate;

	public static DestructAgentRendererSceneControllerDelegate call_DestructAgentRendererSceneControllerDelegate;

	public static DisableContourDelegate call_DisableContourDelegate;

	public static FillEntityWithBodyMeshesWithoutAgentVisualsDelegate call_FillEntityWithBodyMeshesWithoutAgentVisualsDelegate;

	public static GetAttachedWeaponEntityDelegate call_GetAttachedWeaponEntityDelegate;

	public static GetBoneEntitialFrameDelegate call_GetBoneEntitialFrameDelegate;

	public static GetBoneTypeDataDelegate call_GetBoneTypeDataDelegate;

	public static GetCurrentHelmetScalingFactorDelegate call_GetCurrentHelmetScalingFactorDelegate;

	public static GetCurrentRagdollStateDelegate call_GetCurrentRagdollStateDelegate;

	public static GetEntityDelegate call_GetEntityDelegate;

	public static GetFrameDelegate call_GetFrameDelegate;

	public static GetGlobalFrameDelegate call_GetGlobalFrameDelegate;

	public static GetGlobalStableEyePointDelegate call_GetGlobalStableEyePointDelegate;

	public static GetGlobalStableNeckPointDelegate call_GetGlobalStableNeckPointDelegate;

	public static GetRealBoneIndexDelegate call_GetRealBoneIndexDelegate;

	public static GetSkeletonDelegate call_GetSkeletonDelegate;

	public static GetVisibleDelegate call_GetVisibleDelegate;

	public static IsValidDelegate call_IsValidDelegate;

	public static LazyUpdateAgentRendererDataDelegate call_LazyUpdateAgentRendererDataDelegate;

	public static MakeVoiceDelegate call_MakeVoiceDelegate;

	public static RemoveChildEntityDelegate call_RemoveChildEntityDelegate;

	public static RemoveMeshDelegate call_RemoveMeshDelegate;

	public static RemoveMultiMeshDelegate call_RemoveMultiMeshDelegate;

	public static ResetDelegate call_ResetDelegate;

	public static ResetNextFrameDelegate call_ResetNextFrameDelegate;

	public static SetAgentLocalSpeedDelegate call_SetAgentLocalSpeedDelegate;

	public static SetAgentLodMakeZeroOrMaxDelegate call_SetAgentLodMakeZeroOrMaxDelegate;

	public static SetAsContourEntityDelegate call_SetAsContourEntityDelegate;

	public static SetClothComponentKeepStateOfAllMeshesDelegate call_SetClothComponentKeepStateOfAllMeshesDelegate;

	public static SetClothWindToWeaponAtIndexDelegate call_SetClothWindToWeaponAtIndexDelegate;

	public static SetContourStateDelegate call_SetContourStateDelegate;

	public static SetDoTimerBasedForcedSkeletonUpdatesDelegate call_SetDoTimerBasedForcedSkeletonUpdatesDelegate;

	public static SetEnableOcclusionCullingDelegate call_SetEnableOcclusionCullingDelegate;

	public static SetEnforcedVisibilityForAllAgentsDelegate call_SetEnforcedVisibilityForAllAgentsDelegate;

	public static SetEntityDelegate call_SetEntityDelegate;

	public static SetFaceGenerationParamsDelegate call_SetFaceGenerationParamsDelegate;

	public static SetFrameDelegate call_SetFrameDelegate;

	public static SetLodAtlasShadingIndexDelegate call_SetLodAtlasShadingIndexDelegate;

	public static SetLookDirectionDelegate call_SetLookDirectionDelegate;

	public static SetSetupMorphNodeDelegate call_SetSetupMorphNodeDelegate;

	public static SetSkeletonDelegate call_SetSkeletonDelegate;

	public static SetVisibleDelegate call_SetVisibleDelegate;

	public static SetVoiceDefinitionIndexDelegate call_SetVoiceDefinitionIndexDelegate;

	public static SetWieldedWeaponIndicesDelegate call_SetWieldedWeaponIndicesDelegate;

	public static StartRhubarbRecordDelegate call_StartRhubarbRecordDelegate;

	public static TickDelegate call_TickDelegate;

	public static UpdateQuiverMeshesWithoutAgentDelegate call_UpdateQuiverMeshesWithoutAgentDelegate;

	public static UpdateSkeletonScaleDelegate call_UpdateSkeletonScaleDelegate;

	public static UseScaledWeaponsDelegate call_UseScaledWeaponsDelegate;

	public static ValidateAgentVisualsResetedDelegate call_ValidateAgentVisualsResetedDelegate;

	public bool AddChildEntity(UIntPtr agentVisualsPtr, UIntPtr EntityId)
	{
		return call_AddChildEntityDelegate(agentVisualsPtr, EntityId);
	}

	public void AddHorseReinsClothMesh(UIntPtr agentVisualsPtr, UIntPtr reinMeshPointer, UIntPtr ropeMeshPointer)
	{
		call_AddHorseReinsClothMeshDelegate(agentVisualsPtr, reinMeshPointer, ropeMeshPointer);
	}

	public void AddMesh(UIntPtr agentVisualsId, UIntPtr meshPointer)
	{
		call_AddMeshDelegate(agentVisualsId, meshPointer);
	}

	public void AddMultiMesh(UIntPtr agentVisualsPtr, UIntPtr multiMeshPointer, int bodyMeshIndex)
	{
		call_AddMultiMeshDelegate(agentVisualsPtr, multiMeshPointer, bodyMeshIndex);
	}

	public CompositeComponent AddPrefabToAgentVisualBoneByBoneType(UIntPtr agentVisualsPtr, string prefabName, HumanBone boneType)
	{
		byte[] array = null;
		if (prefabName != null)
		{
			int byteCount = _utf8.GetByteCount(prefabName);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(prefabName, 0, prefabName.Length, array, 0);
			array[byteCount] = 0;
		}
		NativeObjectPointer nativeObjectPointer = call_AddPrefabToAgentVisualBoneByBoneTypeDelegate(agentVisualsPtr, array, boneType);
		CompositeComponent result = null;
		if (nativeObjectPointer.Pointer != UIntPtr.Zero)
		{
			result = new CompositeComponent(nativeObjectPointer.Pointer);
			LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
		}
		return result;
	}

	public CompositeComponent AddPrefabToAgentVisualBoneByRealBoneIndex(UIntPtr agentVisualsPtr, string prefabName, sbyte realBoneIndex)
	{
		byte[] array = null;
		if (prefabName != null)
		{
			int byteCount = _utf8.GetByteCount(prefabName);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(prefabName, 0, prefabName.Length, array, 0);
			array[byteCount] = 0;
		}
		NativeObjectPointer nativeObjectPointer = call_AddPrefabToAgentVisualBoneByRealBoneIndexDelegate(agentVisualsPtr, array, realBoneIndex);
		CompositeComponent result = null;
		if (nativeObjectPointer.Pointer != UIntPtr.Zero)
		{
			result = new CompositeComponent(nativeObjectPointer.Pointer);
			LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
		}
		return result;
	}

	public void AddSkinMeshesToAgentEntity(UIntPtr agentVisualsId, ref SkinGenerationParams skinParams, ref BodyProperties bodyProperties, bool useGPUMorph, bool useFaceCache)
	{
		call_AddSkinMeshesToAgentEntityDelegate(agentVisualsId, ref skinParams, ref bodyProperties, useGPUMorph, useFaceCache);
	}

	public void AddWeaponToAgentEntity(UIntPtr agentVisualsPtr, int slotIndex, in WeaponData agentEntityData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData agentEntityAmmoData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, GameEntity cachedEntity)
	{
		WeaponDataAsNative agentEntityData2 = new WeaponDataAsNative(agentEntityData);
		PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData);
		IntPtr pointer = pinnedArrayData.Pointer;
		WeaponDataAsNative agentEntityAmmoData2 = new WeaponDataAsNative(agentEntityAmmoData);
		PinnedArrayData<WeaponStatsData> pinnedArrayData2 = new PinnedArrayData<WeaponStatsData>(ammoWeaponStatsData);
		IntPtr pointer2 = pinnedArrayData2.Pointer;
		UIntPtr cachedEntity2 = ((cachedEntity != null) ? cachedEntity.Pointer : UIntPtr.Zero);
		call_AddWeaponToAgentEntityDelegate(agentVisualsPtr, slotIndex, in agentEntityData2, pointer, weaponStatsDataLength, in agentEntityAmmoData2, pointer2, ammoWeaponStatsDataLength, cachedEntity2);
		pinnedArrayData.Dispose();
		pinnedArrayData2.Dispose();
	}

	public void ApplySkeletonScale(UIntPtr agentVisualsId, Vec3 mountSitBoneScale, float mountRadiusAdder, byte boneCount, sbyte[] boneIndices, Vec3[] boneScales)
	{
		PinnedArrayData<sbyte> pinnedArrayData = new PinnedArrayData<sbyte>(boneIndices);
		IntPtr pointer = pinnedArrayData.Pointer;
		PinnedArrayData<Vec3> pinnedArrayData2 = new PinnedArrayData<Vec3>(boneScales);
		IntPtr pointer2 = pinnedArrayData2.Pointer;
		call_ApplySkeletonScaleDelegate(agentVisualsId, mountSitBoneScale, mountRadiusAdder, boneCount, pointer, pointer2);
		pinnedArrayData.Dispose();
		pinnedArrayData2.Dispose();
	}

	public void BatchLastLodMeshes(UIntPtr agentVisualsPtr)
	{
		call_BatchLastLodMeshesDelegate(agentVisualsPtr);
	}

	public bool CheckResources(UIntPtr agentVisualsPtr, bool addToQueue)
	{
		return call_CheckResourcesDelegate(agentVisualsPtr, addToQueue);
	}

	public void ClearAllWeaponMeshes(UIntPtr agentVisualsPtr)
	{
		call_ClearAllWeaponMeshesDelegate(agentVisualsPtr);
	}

	public void ClearVisualComponents(UIntPtr agentVisualsId, bool removeSkeleton)
	{
		call_ClearVisualComponentsDelegate(agentVisualsId, removeSkeleton);
	}

	public void ClearWeaponMeshes(UIntPtr agentVisualsPtr, int weaponVisualIndex)
	{
		call_ClearWeaponMeshesDelegate(agentVisualsPtr, weaponVisualIndex);
	}

	public UIntPtr CreateAgentRendererSceneController(UIntPtr scenePointer, int maxRenderCount)
	{
		return call_CreateAgentRendererSceneControllerDelegate(scenePointer, maxRenderCount);
	}

	public MBAgentVisuals CreateAgentVisuals(UIntPtr scenePtr, string ownerName, Vec3 eyeOffset)
	{
		byte[] array = null;
		if (ownerName != null)
		{
			int byteCount = _utf8.GetByteCount(ownerName);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(ownerName, 0, ownerName.Length, array, 0);
			array[byteCount] = 0;
		}
		NativeObjectPointer nativeObjectPointer = call_CreateAgentVisualsDelegate(scenePtr, array, eyeOffset);
		MBAgentVisuals result = null;
		if (nativeObjectPointer.Pointer != UIntPtr.Zero)
		{
			result = new MBAgentVisuals(nativeObjectPointer.Pointer);
			LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
		}
		return result;
	}

	public void CreateParticleSystemAttachedToBone(UIntPtr agentVisualsPtr, int runtimeParticleindex, sbyte boneIndex, ref MatrixFrame boneLocalParticleFrame)
	{
		call_CreateParticleSystemAttachedToBoneDelegate(agentVisualsPtr, runtimeParticleindex, boneIndex, ref boneLocalParticleFrame);
	}

	public void DestructAgentRendererSceneController(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer, bool deleteThisFrame)
	{
		call_DestructAgentRendererSceneControllerDelegate(scenePointer, agentRendererSceneControllerPointer, deleteThisFrame);
	}

	public void DisableContour(UIntPtr agentVisualsPtr)
	{
		call_DisableContourDelegate(agentVisualsPtr);
	}

	public void FillEntityWithBodyMeshesWithoutAgentVisuals(UIntPtr entityPoinbter, ref SkinGenerationParams skinParams, ref BodyProperties bodyProperties, MetaMesh glovesMesh)
	{
		UIntPtr glovesMesh2 = ((glovesMesh != null) ? glovesMesh.Pointer : UIntPtr.Zero);
		call_FillEntityWithBodyMeshesWithoutAgentVisualsDelegate(entityPoinbter, ref skinParams, ref bodyProperties, glovesMesh2);
	}

	public GameEntity GetAttachedWeaponEntity(UIntPtr agentVisualsPtr, int attachedWeaponIndex)
	{
		NativeObjectPointer nativeObjectPointer = call_GetAttachedWeaponEntityDelegate(agentVisualsPtr, attachedWeaponIndex);
		GameEntity result = null;
		if (nativeObjectPointer.Pointer != UIntPtr.Zero)
		{
			result = new GameEntity(nativeObjectPointer.Pointer);
			LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
		}
		return result;
	}

	public void GetBoneEntitialFrame(UIntPtr agentVisualsPtr, sbyte bone, bool useBoneMapping, ref MatrixFrame outFrame)
	{
		call_GetBoneEntitialFrameDelegate(agentVisualsPtr, bone, useBoneMapping, ref outFrame);
	}

	public void GetBoneTypeData(UIntPtr pointer, sbyte boneIndex, ref BoneBodyTypeData boneBodyTypeData)
	{
		call_GetBoneTypeDataDelegate(pointer, boneIndex, ref boneBodyTypeData);
	}

	public Vec3 GetCurrentHelmetScalingFactor(UIntPtr agentVisualsPtr)
	{
		return call_GetCurrentHelmetScalingFactorDelegate(agentVisualsPtr);
	}

	public RagdollState GetCurrentRagdollState(UIntPtr agentVisualsPtr)
	{
		return call_GetCurrentRagdollStateDelegate(agentVisualsPtr);
	}

	public GameEntity GetEntity(UIntPtr agentVisualsPtr)
	{
		NativeObjectPointer nativeObjectPointer = call_GetEntityDelegate(agentVisualsPtr);
		GameEntity result = null;
		if (nativeObjectPointer.Pointer != UIntPtr.Zero)
		{
			result = new GameEntity(nativeObjectPointer.Pointer);
			LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
		}
		return result;
	}

	public void GetFrame(UIntPtr agentVisualsPtr, ref MatrixFrame outFrame)
	{
		call_GetFrameDelegate(agentVisualsPtr, ref outFrame);
	}

	public void GetGlobalFrame(UIntPtr agentVisualsPtr, ref MatrixFrame outFrame)
	{
		call_GetGlobalFrameDelegate(agentVisualsPtr, ref outFrame);
	}

	public Vec3 GetGlobalStableEyePoint(UIntPtr agentVisualsPtr, bool isHumanoid)
	{
		return call_GetGlobalStableEyePointDelegate(agentVisualsPtr, isHumanoid);
	}

	public Vec3 GetGlobalStableNeckPoint(UIntPtr agentVisualsPtr, bool isHumanoid)
	{
		return call_GetGlobalStableNeckPointDelegate(agentVisualsPtr, isHumanoid);
	}

	public sbyte GetRealBoneIndex(UIntPtr agentVisualsPtr, HumanBone boneType)
	{
		return call_GetRealBoneIndexDelegate(agentVisualsPtr, boneType);
	}

	public Skeleton GetSkeleton(UIntPtr agentVisualsPtr)
	{
		NativeObjectPointer nativeObjectPointer = call_GetSkeletonDelegate(agentVisualsPtr);
		Skeleton result = null;
		if (nativeObjectPointer.Pointer != UIntPtr.Zero)
		{
			result = new Skeleton(nativeObjectPointer.Pointer);
			LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
		}
		return result;
	}

	public bool GetVisible(UIntPtr agentVisualsPtr)
	{
		return call_GetVisibleDelegate(agentVisualsPtr);
	}

	public bool IsValid(UIntPtr agentVisualsPtr)
	{
		return call_IsValidDelegate(agentVisualsPtr);
	}

	public void LazyUpdateAgentRendererData(UIntPtr agentVisualsId)
	{
		call_LazyUpdateAgentRendererDataDelegate(agentVisualsId);
	}

	public void MakeVoice(UIntPtr agentVisualsPtr, int voiceId, ref Vec3 position)
	{
		call_MakeVoiceDelegate(agentVisualsPtr, voiceId, ref position);
	}

	public void RemoveChildEntity(UIntPtr agentVisualsPtr, UIntPtr EntityId, int removeReason)
	{
		call_RemoveChildEntityDelegate(agentVisualsPtr, EntityId, removeReason);
	}

	public void RemoveMesh(UIntPtr agentVisualsPtr, UIntPtr meshPointer)
	{
		call_RemoveMeshDelegate(agentVisualsPtr, meshPointer);
	}

	public void RemoveMultiMesh(UIntPtr agentVisualsPtr, UIntPtr multiMeshPointer, int bodyMeshIndex)
	{
		call_RemoveMultiMeshDelegate(agentVisualsPtr, multiMeshPointer, bodyMeshIndex);
	}

	public void Reset(UIntPtr agentVisualsPtr)
	{
		call_ResetDelegate(agentVisualsPtr);
	}

	public void ResetNextFrame(UIntPtr agentVisualsPtr)
	{
		call_ResetNextFrameDelegate(agentVisualsPtr);
	}

	public void SetAgentLocalSpeed(UIntPtr agentVisualsPtr, Vec2 speed)
	{
		call_SetAgentLocalSpeedDelegate(agentVisualsPtr, speed);
	}

	public void SetAgentLodMakeZeroOrMax(UIntPtr agentVisualsPtr, bool makeZero)
	{
		call_SetAgentLodMakeZeroOrMaxDelegate(agentVisualsPtr, makeZero);
	}

	public void SetAsContourEntity(UIntPtr agentVisualsPtr, uint color)
	{
		call_SetAsContourEntityDelegate(agentVisualsPtr, color);
	}

	public void SetClothComponentKeepStateOfAllMeshes(UIntPtr agentVisualsPtr, bool keepState)
	{
		call_SetClothComponentKeepStateOfAllMeshesDelegate(agentVisualsPtr, keepState);
	}

	public void SetClothWindToWeaponAtIndex(UIntPtr agentVisualsPtr, Vec3 windDirection, bool isLocal, int index)
	{
		call_SetClothWindToWeaponAtIndexDelegate(agentVisualsPtr, windDirection, isLocal, index);
	}

	public void SetContourState(UIntPtr agentVisualsPtr, bool alwaysVisible)
	{
		call_SetContourStateDelegate(agentVisualsPtr, alwaysVisible);
	}

	public void SetDoTimerBasedForcedSkeletonUpdates(UIntPtr agentRendererSceneControllerPointer, bool value)
	{
		call_SetDoTimerBasedForcedSkeletonUpdatesDelegate(agentRendererSceneControllerPointer, value);
	}

	public void SetEnableOcclusionCulling(UIntPtr agentVisualsPtr, bool enable)
	{
		call_SetEnableOcclusionCullingDelegate(agentVisualsPtr, enable);
	}

	public void SetEnforcedVisibilityForAllAgents(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer)
	{
		call_SetEnforcedVisibilityForAllAgentsDelegate(scenePointer, agentRendererSceneControllerPointer);
	}

	public void SetEntity(UIntPtr agentVisualsId, UIntPtr entityPtr)
	{
		call_SetEntityDelegate(agentVisualsId, entityPtr);
	}

	public void SetFaceGenerationParams(UIntPtr agentVisualsId, FaceGenerationParams faceGenerationParams)
	{
		call_SetFaceGenerationParamsDelegate(agentVisualsId, faceGenerationParams);
	}

	public void SetFrame(UIntPtr agentVisualsPtr, ref MatrixFrame frame)
	{
		call_SetFrameDelegate(agentVisualsPtr, ref frame);
	}

	public void SetLodAtlasShadingIndex(UIntPtr agentVisualsId, int index, bool useTeamColor, uint teamColor1, uint teamColor2)
	{
		call_SetLodAtlasShadingIndexDelegate(agentVisualsId, index, useTeamColor, teamColor1, teamColor2);
	}

	public void SetLookDirection(UIntPtr agentVisualsPtr, Vec3 direction)
	{
		call_SetLookDirectionDelegate(agentVisualsPtr, direction);
	}

	public void SetSetupMorphNode(UIntPtr agentVisualsPtr, bool value)
	{
		call_SetSetupMorphNodeDelegate(agentVisualsPtr, value);
	}

	public void SetSkeleton(UIntPtr agentVisualsId, UIntPtr skeletonPtr)
	{
		call_SetSkeletonDelegate(agentVisualsId, skeletonPtr);
	}

	public void SetVisible(UIntPtr agentVisualsPtr, bool value)
	{
		call_SetVisibleDelegate(agentVisualsPtr, value);
	}

	public void SetVoiceDefinitionIndex(UIntPtr agentVisualsPtr, int voiceDefinitionIndex, float voicePitch)
	{
		call_SetVoiceDefinitionIndexDelegate(agentVisualsPtr, voiceDefinitionIndex, voicePitch);
	}

	public void SetWieldedWeaponIndices(UIntPtr agentVisualsId, int slotIndexRightHand, int slotIndexLeftHand)
	{
		call_SetWieldedWeaponIndicesDelegate(agentVisualsId, slotIndexRightHand, slotIndexLeftHand);
	}

	public void StartRhubarbRecord(UIntPtr agentVisualsId, string path, int soundId)
	{
		byte[] array = null;
		if (path != null)
		{
			int byteCount = _utf8.GetByteCount(path);
			array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
			_utf8.GetBytes(path, 0, path.Length, array, 0);
			array[byteCount] = 0;
		}
		call_StartRhubarbRecordDelegate(agentVisualsId, array, soundId);
	}

	public void Tick(UIntPtr agentVisualsId, UIntPtr parentAgentVisualsId, float dt, bool entityMoving, float speed)
	{
		call_TickDelegate(agentVisualsId, parentAgentVisualsId, dt, entityMoving, speed);
	}

	public void UpdateQuiverMeshesWithoutAgent(UIntPtr agentVisualsId, int weaponIndex, int ammoCountToShow)
	{
		call_UpdateQuiverMeshesWithoutAgentDelegate(agentVisualsId, weaponIndex, ammoCountToShow);
	}

	public void UpdateSkeletonScale(UIntPtr agentVisualsId, int bodyDeformType)
	{
		call_UpdateSkeletonScaleDelegate(agentVisualsId, bodyDeformType);
	}

	public void UseScaledWeapons(UIntPtr agentVisualsPtr, bool value)
	{
		call_UseScaledWeaponsDelegate(agentVisualsPtr, value);
	}

	public void ValidateAgentVisualsReseted(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer)
	{
		call_ValidateAgentVisualsResetedDelegate(scenePointer, agentRendererSceneControllerPointer);
	}

	void IMBAgentVisuals.AddWeaponToAgentEntity(UIntPtr agentVisualsPtr, int slotIndex, in WeaponData agentEntityData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData agentEntityAmmoData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, GameEntity cachedEntity)
	{
		AddWeaponToAgentEntity(agentVisualsPtr, slotIndex, in agentEntityData, weaponStatsData, weaponStatsDataLength, in agentEntityAmmoData, ammoWeaponStatsData, ammoWeaponStatsDataLength, cachedEntity);
	}
}
