using System;
using System.Runtime.InteropServices;
using TaleWorlds.Core;
using TaleWorlds.Engine;
using TaleWorlds.Library;

namespace TaleWorlds.MountAndBlade.AutoGenerated;

internal struct WeaponDataAsNative
{
	internal UIntPtr WeaponMesh;

	internal UIntPtr HolsterMesh;

	internal UIntPtr HolsterMeshWithWeapon;

	internal UIntPtr FlyingMesh;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
	internal string Prefab;

	internal UIntPtr Shape;

	internal UIntPtr CollisionShape;

	internal UIntPtr TableauMaterial;

	internal MatrixFrame WeaponFrame;

	internal int PhysicsMaterialIndex;

	internal int WeaponKind;

	internal StackArray.StackArray4Int ItemHolsterIndices;

	internal int Difficulty;

	internal float BaseWeight;

	internal float Inertia;

	internal short ReloadPhase;

	[MarshalAs(UnmanagedType.U1)]
	internal bool HasFlagAnimation;

	internal Vec3 AmmoOffset;

	internal MatrixFrame StickingFrame;

	internal float ScaleFactor;

	internal float CenterOfMass;

	internal Vec3 CenterOfMass3D;

	internal Vec3 HolsterPositionShift;

	internal int FlyingSoundCode;

	internal int PassbySoundCode;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
	internal string TrailParticleName;

	internal Vec3 CenterOfMassShift;

	internal short DataValue;

	internal int CurrentUsageIndex;

	internal float AirFrictionConstant;

	[MarshalAs(UnmanagedType.U1)]
	internal bool HasLowerHolsterPriority;

	internal float GlossMultiplier;

	internal WeaponDataAsNative(WeaponData weaponData)
	{
		WeaponMesh = ((weaponData.WeaponMesh != null) ? weaponData.WeaponMesh.Pointer : UIntPtr.Zero);
		HolsterMesh = ((weaponData.HolsterMesh != null) ? weaponData.HolsterMesh.Pointer : UIntPtr.Zero);
		Prefab = weaponData.Prefab;
		HolsterMeshWithWeapon = ((weaponData.HolsterMeshWithWeapon != null) ? weaponData.HolsterMeshWithWeapon.Pointer : UIntPtr.Zero);
		FlyingMesh = ((weaponData.FlyingMesh != null) ? weaponData.FlyingMesh.Pointer : UIntPtr.Zero);
		Shape = ((weaponData.Shape != null) ? weaponData.Shape.Pointer : UIntPtr.Zero);
		CollisionShape = ((weaponData.CollisionShape != null) ? weaponData.CollisionShape.Pointer : UIntPtr.Zero);
		TableauMaterial = ((weaponData.TableauMaterial != null) ? weaponData.TableauMaterial.Pointer : UIntPtr.Zero);
		WeaponFrame = weaponData.WeaponFrame;
		PhysicsMaterialIndex = weaponData.PhysicsMaterialIndex;
		WeaponKind = weaponData.WeaponKind;
		ItemHolsterIndices = weaponData.ItemHolsterIndices;
		Difficulty = weaponData.Difficulty;
		BaseWeight = weaponData.BaseWeight;
		Inertia = weaponData.Inertia;
		ReloadPhase = weaponData.ReloadPhase;
		HasFlagAnimation = weaponData.HasFlagAnimation;
		AmmoOffset = weaponData.AmmoOffset;
		StickingFrame = weaponData.StickingFrame;
		ScaleFactor = weaponData.ScaleFactor;
		CenterOfMass = weaponData.CenterOfMass;
		CenterOfMass3D = weaponData.CenterOfMass3D;
		HolsterPositionShift = weaponData.HolsterPositionShift;
		FlyingSoundCode = weaponData.FlyingSoundCode;
		PassbySoundCode = weaponData.PassbySoundCode;
		TrailParticleName = weaponData.TrailParticleName;
		CenterOfMassShift = weaponData.CenterOfMassShift;
		DataValue = weaponData.DataValue;
		CurrentUsageIndex = weaponData.CurrentUsageIndex;
		AirFrictionConstant = weaponData.AirFrictionConstant;
		HasLowerHolsterPriority = weaponData.HasLowerHolsterPriority;
		GlossMultiplier = weaponData.GlossMultiplier;
	}

	public static implicit operator WeaponData(WeaponDataAsNative agentEntityDataAsNative)
	{
		WeaponData result = default(WeaponData);
		result.WeaponMesh = ((agentEntityDataAsNative.WeaponMesh != UIntPtr.Zero) ? new MetaMesh(agentEntityDataAsNative.WeaponMesh) : null);
		result.HolsterMesh = ((agentEntityDataAsNative.HolsterMesh != UIntPtr.Zero) ? new MetaMesh(agentEntityDataAsNative.HolsterMesh) : null);
		result.Prefab = agentEntityDataAsNative.Prefab;
		result.HolsterMeshWithWeapon = ((agentEntityDataAsNative.HolsterMeshWithWeapon != UIntPtr.Zero) ? new MetaMesh(agentEntityDataAsNative.HolsterMeshWithWeapon) : null);
		result.FlyingMesh = ((agentEntityDataAsNative.FlyingMesh != UIntPtr.Zero) ? new MetaMesh(agentEntityDataAsNative.FlyingMesh) : null);
		result.Shape = ((agentEntityDataAsNative.Shape != UIntPtr.Zero) ? new PhysicsShape(agentEntityDataAsNative.Shape) : null);
		result.CollisionShape = ((agentEntityDataAsNative.CollisionShape != UIntPtr.Zero) ? new PhysicsShape(agentEntityDataAsNative.CollisionShape) : null);
		result.TableauMaterial = ((agentEntityDataAsNative.TableauMaterial != UIntPtr.Zero) ? new Material(agentEntityDataAsNative.TableauMaterial) : null);
		result.WeaponFrame = agentEntityDataAsNative.WeaponFrame;
		result.PhysicsMaterialIndex = agentEntityDataAsNative.PhysicsMaterialIndex;
		result.WeaponKind = agentEntityDataAsNative.WeaponKind;
		result.ItemHolsterIndices = agentEntityDataAsNative.ItemHolsterIndices;
		result.Difficulty = agentEntityDataAsNative.Difficulty;
		result.BaseWeight = agentEntityDataAsNative.BaseWeight;
		result.Inertia = agentEntityDataAsNative.Inertia;
		result.ReloadPhase = agentEntityDataAsNative.ReloadPhase;
		result.HasFlagAnimation = agentEntityDataAsNative.HasFlagAnimation;
		result.AmmoOffset = agentEntityDataAsNative.AmmoOffset;
		result.StickingFrame = agentEntityDataAsNative.StickingFrame;
		result.ScaleFactor = agentEntityDataAsNative.ScaleFactor;
		result.CenterOfMass = agentEntityDataAsNative.CenterOfMass;
		result.CenterOfMass3D = agentEntityDataAsNative.CenterOfMass3D;
		result.HolsterPositionShift = agentEntityDataAsNative.HolsterPositionShift;
		result.FlyingSoundCode = agentEntityDataAsNative.FlyingSoundCode;
		result.PassbySoundCode = agentEntityDataAsNative.PassbySoundCode;
		result.TrailParticleName = agentEntityDataAsNative.TrailParticleName;
		result.CenterOfMassShift = agentEntityDataAsNative.CenterOfMassShift;
		result.DataValue = agentEntityDataAsNative.DataValue;
		result.CurrentUsageIndex = agentEntityDataAsNative.CurrentUsageIndex;
		result.AirFrictionConstant = agentEntityDataAsNative.AirFrictionConstant;
		result.HasLowerHolsterPriority = agentEntityDataAsNative.HasLowerHolsterPriority;
		result.GlossMultiplier = agentEntityDataAsNative.GlossMultiplier;
		return result;
	}
}
