using System.ComponentModel;
using System.Numerics;
using TaleWorlds.GauntletUI;
using TaleWorlds.GauntletUI.BaseTypes;
using TaleWorlds.GauntletUI.Data;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade.Multiplayer.ViewModelCollection;

namespace TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated0;

public class MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_3_MPDuelTargetMarkers__DependendPrefab : Widget
{
	private Widget _widget;

	private Widget _widget_0;

	private Widget _widget_1;

	private MissionDuelMarkersVM _datasource_Root;

	private MBBindingList<MissionDuelPeerMarkerVM> _datasource_Root_Targets;

	private MBBindingList<MissionDuelLandmarkMarkerVM> _datasource_Root_Landmarks;

	public MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_3_MPDuelTargetMarkers__DependendPrefab(UIContext context)
		: base(context)
	{
	}

	public void CreateWidgets()
	{
		_widget = this;
		_widget_0 = new Widget(base.Context);
		_widget.AddChild(_widget_0);
		_widget_1 = new Widget(base.Context);
		_widget.AddChild(_widget_1);
	}

	public void SetIds()
	{
	}

	public void SetAttributes()
	{
		base.WidthSizePolicy = SizePolicy.StretchToParent;
		base.HeightSizePolicy = SizePolicy.StretchToParent;
		_widget_0.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_0.HeightSizePolicy = SizePolicy.StretchToParent;
		_widget_1.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_1.HeightSizePolicy = SizePolicy.StretchToParent;
	}

	public void DestroyDataSource()
	{
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget.PropertyChanged -= PropertyChangedListenerOf_widget;
		_widget.boolPropertyChanged -= boolPropertyChangedListenerOf_widget;
		_widget.floatPropertyChanged -= floatPropertyChangedListenerOf_widget;
		_widget.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget;
		_widget.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget;
		_widget.doublePropertyChanged -= doublePropertyChangedListenerOf_widget;
		_widget.intPropertyChanged -= intPropertyChangedListenerOf_widget;
		_widget.uintPropertyChanged -= uintPropertyChangedListenerOf_widget;
		_widget.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget;
		if (_datasource_Root_Targets != null)
		{
			_datasource_Root_Targets.ListChanged -= OnList_datasource_Root_TargetsChanged;
			for (int num = _widget_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_0.GetChild(num);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)child).OnBeforeRemovedChild(child);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)_widget_0.GetChild(num)).DestroyDataSource();
			}
			_datasource_Root_Targets = null;
		}
		if (_datasource_Root_Landmarks != null)
		{
			_datasource_Root_Landmarks.ListChanged -= OnList_datasource_Root_LandmarksChanged;
			for (int num2 = _widget_1.ChildCount - 1; num2 >= 0; num2--)
			{
				Widget child2 = _widget_1.GetChild(num2);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)child2).OnBeforeRemovedChild(child2);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)_widget_1.GetChild(num2)).DestroyDataSource();
			}
			_datasource_Root_Landmarks = null;
		}
		_datasource_Root = null;
	}

	public void SetDataSource(MissionDuelMarkersVM dataSource)
	{
		RefreshDataSource_datasource_Root(dataSource);
	}

	private void PropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void intPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget(string propertyName)
	{
		if (propertyName == "IsVisible")
		{
			_datasource_Root.IsEnabled = _widget.IsVisible;
		}
	}

	private void ViewModelPropertyChangedListenerOf_datasource_Root(object sender, PropertyChangedEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithValueListenerOf_datasource_Root(object sender, PropertyChangedWithValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root(object sender, PropertyChangedWithBoolValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root(object sender, PropertyChangedWithFloatValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithUIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root(object sender, PropertyChangedWithColorValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root(object sender, PropertyChangedWithDoubleValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root(object sender, PropertyChangedWithVec2ValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void HandleViewModelPropertyChangeOf_datasource_Root(string propertyName)
	{
		switch (propertyName)
		{
		case "Targets":
			RefreshDataSource_datasource_Root_Targets(_datasource_Root.Targets);
			break;
		case "Landmarks":
			RefreshDataSource_datasource_Root_Landmarks(_datasource_Root.Landmarks);
			break;
		case "IsEnabled":
			_widget.IsVisible = _datasource_Root.IsEnabled;
			break;
		}
	}

	public void OnList_datasource_Root_TargetsChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_0.GetChild(num);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_0.GetChild(num);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)child4).SetDataSource(null);
				_widget_0.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_Targets.Count; i++)
			{
				MissionDuelPeerMarkerVM bindingObject = _datasource_Root_Targets[i];
				_widget_0.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate = new MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate);
			MissionDuelPeerMarkerVM dataSource = (MissionDuelPeerMarkerVM)(generatedWidgetData.Data = _datasource_Root_Targets[e.NewIndex]);
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_0.AddChildAtIndex(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate, e.NewIndex);
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.CreateWidgets();
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.SetIds();
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.SetAttributes();
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_0.GetChild(e.NewIndex);
			((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_0.GetChild(e.NewIndex);
			((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)child).SetDataSource(null);
			_widget_0.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	public void OnList_datasource_Root_LandmarksChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_1.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_1.GetChild(num);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_1.GetChild(num);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)child4).SetDataSource(null);
				_widget_1.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_Landmarks.Count; i++)
			{
				MissionDuelLandmarkMarkerVM bindingObject = _datasource_Root_Landmarks[i];
				_widget_1.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate = new MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate);
			MissionDuelLandmarkMarkerVM dataSource = (MissionDuelLandmarkMarkerVM)(generatedWidgetData.Data = _datasource_Root_Landmarks[e.NewIndex]);
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_1.AddChildAtIndex(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate, e.NewIndex);
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.CreateWidgets();
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.SetIds();
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.SetAttributes();
			multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_1.GetChild(e.NewIndex);
			((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_1.GetChild(e.NewIndex);
			((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)child).SetDataSource(null);
			_widget_1.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	private void RefreshDataSource_datasource_Root(MissionDuelMarkersVM newDataSource)
	{
		if (_datasource_Root != null)
		{
			_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
			_widget.PropertyChanged -= PropertyChangedListenerOf_widget;
			_widget.boolPropertyChanged -= boolPropertyChangedListenerOf_widget;
			_widget.floatPropertyChanged -= floatPropertyChangedListenerOf_widget;
			_widget.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget;
			_widget.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget;
			_widget.doublePropertyChanged -= doublePropertyChangedListenerOf_widget;
			_widget.intPropertyChanged -= intPropertyChangedListenerOf_widget;
			_widget.uintPropertyChanged -= uintPropertyChangedListenerOf_widget;
			_widget.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget;
			if (_datasource_Root_Targets != null)
			{
				_datasource_Root_Targets.ListChanged -= OnList_datasource_Root_TargetsChanged;
				for (int num = _widget_0.ChildCount - 1; num >= 0; num--)
				{
					Widget child = _widget_0.GetChild(num);
					((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)child).OnBeforeRemovedChild(child);
					Widget child2 = _widget_0.GetChild(num);
					((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)child2).SetDataSource(null);
					_widget_0.RemoveChild(child2);
				}
				_datasource_Root_Targets = null;
			}
			if (_datasource_Root_Landmarks != null)
			{
				_datasource_Root_Landmarks.ListChanged -= OnList_datasource_Root_LandmarksChanged;
				for (int num2 = _widget_1.ChildCount - 1; num2 >= 0; num2--)
				{
					Widget child3 = _widget_1.GetChild(num2);
					((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)child3).OnBeforeRemovedChild(child3);
					Widget child4 = _widget_1.GetChild(num2);
					((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)child4).SetDataSource(null);
					_widget_1.RemoveChild(child4);
				}
				_datasource_Root_Landmarks = null;
			}
			_datasource_Root = null;
		}
		_datasource_Root = newDataSource;
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged += ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue += ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue += ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue += ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue += ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue += ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue += ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue += ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value += ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget.IsVisible = _datasource_Root.IsEnabled;
		_widget.PropertyChanged += PropertyChangedListenerOf_widget;
		_widget.boolPropertyChanged += boolPropertyChangedListenerOf_widget;
		_widget.floatPropertyChanged += floatPropertyChangedListenerOf_widget;
		_widget.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget;
		_widget.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget;
		_widget.doublePropertyChanged += doublePropertyChangedListenerOf_widget;
		_widget.intPropertyChanged += intPropertyChangedListenerOf_widget;
		_widget.uintPropertyChanged += uintPropertyChangedListenerOf_widget;
		_widget.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget;
		_datasource_Root_Targets = _datasource_Root.Targets;
		if (_datasource_Root_Targets != null)
		{
			_datasource_Root_Targets.ListChanged += OnList_datasource_Root_TargetsChanged;
			for (int i = 0; i < _datasource_Root_Targets.Count; i++)
			{
				MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate = new MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate);
				MissionDuelPeerMarkerVM dataSource = (MissionDuelPeerMarkerVM)(generatedWidgetData.Data = _datasource_Root_Targets[i]);
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_0.AddChildAtIndex(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate, i);
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.CreateWidgets();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.SetIds();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.SetAttributes();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.SetDataSource(dataSource);
			}
		}
		_datasource_Root_Landmarks = _datasource_Root.Landmarks;
		if (_datasource_Root_Landmarks != null)
		{
			_datasource_Root_Landmarks.ListChanged += OnList_datasource_Root_LandmarksChanged;
			for (int j = 0; j < _datasource_Root_Landmarks.Count; j++)
			{
				MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate = new MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData2 = new GeneratedWidgetData(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate);
				MissionDuelLandmarkMarkerVM dataSource2 = (MissionDuelLandmarkMarkerVM)(generatedWidgetData2.Data = _datasource_Root_Landmarks[j]);
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.AddComponent(generatedWidgetData2);
				_widget_1.AddChildAtIndex(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate, j);
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.CreateWidgets();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.SetIds();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.SetAttributes();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.SetDataSource(dataSource2);
			}
		}
	}

	private void RefreshDataSource_datasource_Root_Targets(MBBindingList<MissionDuelPeerMarkerVM> newDataSource)
	{
		if (_datasource_Root_Targets != null)
		{
			_datasource_Root_Targets.ListChanged -= OnList_datasource_Root_TargetsChanged;
			for (int num = _widget_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_0.GetChild(num);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_0.GetChild(num);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate)child2).SetDataSource(null);
				_widget_0.RemoveChild(child2);
			}
			_datasource_Root_Targets = null;
		}
		_datasource_Root_Targets = newDataSource;
		_datasource_Root_Targets = _datasource_Root.Targets;
		if (_datasource_Root_Targets != null)
		{
			_datasource_Root_Targets.ListChanged += OnList_datasource_Root_TargetsChanged;
			for (int i = 0; i < _datasource_Root_Targets.Count; i++)
			{
				MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate = new MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate);
				MissionDuelPeerMarkerVM dataSource = (MissionDuelPeerMarkerVM)(generatedWidgetData.Data = _datasource_Root_Targets[i]);
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_0.AddChildAtIndex(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate, i);
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.CreateWidgets();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.SetIds();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.SetAttributes();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_5_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}

	private void RefreshDataSource_datasource_Root_Landmarks(MBBindingList<MissionDuelLandmarkMarkerVM> newDataSource)
	{
		if (_datasource_Root_Landmarks != null)
		{
			_datasource_Root_Landmarks.ListChanged -= OnList_datasource_Root_LandmarksChanged;
			for (int num = _widget_1.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_1.GetChild(num);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_1.GetChild(num);
				((MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate)child2).SetDataSource(null);
				_widget_1.RemoveChild(child2);
			}
			_datasource_Root_Landmarks = null;
		}
		_datasource_Root_Landmarks = newDataSource;
		_datasource_Root_Landmarks = _datasource_Root.Landmarks;
		if (_datasource_Root_Landmarks != null)
		{
			_datasource_Root_Landmarks.ListChanged += OnList_datasource_Root_LandmarksChanged;
			for (int i = 0; i < _datasource_Root_Landmarks.Count; i++)
			{
				MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate = new MultiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate);
				MissionDuelLandmarkMarkerVM dataSource = (MissionDuelLandmarkMarkerVM)(generatedWidgetData.Data = _datasource_Root_Landmarks[i]);
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_1.AddChildAtIndex(multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate, i);
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.CreateWidgets();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.SetIds();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.SetAttributes();
				multiplayerDuel__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_MultiplayerDuelVM_Dependency_6_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}
}
