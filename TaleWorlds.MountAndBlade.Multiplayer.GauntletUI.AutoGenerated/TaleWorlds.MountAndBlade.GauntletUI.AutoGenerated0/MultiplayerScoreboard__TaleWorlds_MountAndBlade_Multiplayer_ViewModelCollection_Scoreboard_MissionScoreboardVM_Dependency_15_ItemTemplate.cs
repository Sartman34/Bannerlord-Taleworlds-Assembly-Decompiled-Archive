using System.ComponentModel;
using System.Numerics;
using TaleWorlds.GauntletUI;
using TaleWorlds.GauntletUI.BaseTypes;
using TaleWorlds.GauntletUI.Data;
using TaleWorlds.GauntletUI.Layout;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade.GauntletUI.Widgets.Multiplayer.Scoreboard;
using TaleWorlds.MountAndBlade.Multiplayer.ViewModelCollection.Scoreboard;

namespace TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated0;

public class MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_15_ItemTemplate : ButtonWidget
{
	private ButtonWidget _widget;

	private Widget _widget_0;

	private MultiplayerScoreboardStatsParentWidget _widget_1;

	private MultiplayerScoreboardStatsListPanel _widget_1_0;

	private MissionScoreboardPlayerVM _datasource_Root;

	private MBBindingList<MissionScoreboardStatItemVM> _datasource_Root_Stats;

	public MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_15_ItemTemplate(UIContext context)
		: base(context)
	{
	}

	public void CreateWidgets()
	{
		_widget = this;
		_widget_0 = new Widget(base.Context);
		_widget.AddChild(_widget_0);
		_widget_1 = new MultiplayerScoreboardStatsParentWidget(base.Context);
		_widget.AddChild(_widget_1);
		_widget_1_0 = new MultiplayerScoreboardStatsListPanel(base.Context);
		_widget_1.AddChild(_widget_1_0);
	}

	public void SetIds()
	{
		base.Id = "PlayerItem";
		_widget_1_0.Id = "Stats";
	}

	public void SetAttributes()
	{
		base.DoNotPassEventsToChildren = true;
		base.WidthSizePolicy = SizePolicy.StretchToParent;
		base.HeightSizePolicy = SizePolicy.Fixed;
		base.SuggestedHeight = 62f;
		base.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_0.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_0.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0.SuggestedHeight = 67f;
		_widget_0.HorizontalAlignment = HorizontalAlignment.Left;
		_widget_0.VerticalAlignment = VerticalAlignment.Center;
		_widget_0.PositionXOffset = -1f;
		_widget_0.Sprite = base.Context.SpriteData.GetSprite("MPGeneral\\MPScoreboard\\player_indicator");
		_widget_0.AlphaFactor = 0.3f;
		_widget_1.DoNotPassEventsToChildren = true;
		_widget_1.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_1.HeightSizePolicy = SizePolicy.CoverChildren;
		_widget_1.ActiveAlpha = 1f;
		_widget_1.InactiveAlpha = 0.3f;
		_widget_1_0.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_1_0.HeightSizePolicy = SizePolicy.CoverChildren;
		_widget_1_0.StackLayout.LayoutMethod = LayoutMethod.HorizontalLeftToRight;
		_widget_1_0.NameColumnWidthRatio = 3f;
		_widget_1_0.ScoreColumnWidthRatio = 2f;
		_widget_1_0.SoldiersColumnWidthRatio = 2f;
	}

	public void DestroyDataSource()
	{
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget.EventFire -= EventListenerOf_widget;
		_widget_0.PropertyChanged -= PropertyChangedListenerOf_widget_0;
		_widget_0.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0;
		_widget_0.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0;
		_widget_0.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0;
		_widget_0.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0;
		_widget_0.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0;
		_widget_0.intPropertyChanged -= intPropertyChangedListenerOf_widget_0;
		_widget_0.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0;
		_widget_0.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0;
		_widget_1.PropertyChanged -= PropertyChangedListenerOf_widget_1;
		_widget_1.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_1;
		_widget_1.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_1;
		_widget_1.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_1;
		_widget_1.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_1;
		_widget_1.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_1;
		_widget_1.intPropertyChanged -= intPropertyChangedListenerOf_widget_1;
		_widget_1.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_1;
		_widget_1.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_1;
		if (_datasource_Root_Stats != null)
		{
			_datasource_Root_Stats.ListChanged -= OnList_datasource_Root_StatsChanged;
			for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_1_0.GetChild(num);
				((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)child).OnBeforeRemovedChild(child);
				((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)_widget_1_0.GetChild(num)).DestroyDataSource();
			}
			_datasource_Root_Stats = null;
		}
		_datasource_Root = null;
	}

	public void SetDataSource(MissionScoreboardPlayerVM dataSource)
	{
		RefreshDataSource_datasource_Root(dataSource);
	}

	private void EventListenerOf_widget(Widget widget, string commandName, object[] args)
	{
		if (commandName == "AlternateClick")
		{
			_datasource_Root.ExecuteSelection();
		}
		if (commandName == "Click")
		{
			_datasource_Root.ExecuteSelection();
		}
	}

	private void PropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void intPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget_0(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget_0(string propertyName)
	{
		if (propertyName == "IsVisible")
		{
			_datasource_Root.IsPlayer = _widget_0.IsVisible;
		}
	}

	private void PropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void intPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget_1(string propertyName)
	{
		if (propertyName == "IsInactive")
		{
			_datasource_Root.IsDead = _widget_1.IsInactive;
		}
	}

	private void ViewModelPropertyChangedListenerOf_datasource_Root(object sender, PropertyChangedEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithValueListenerOf_datasource_Root(object sender, PropertyChangedWithValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root(object sender, PropertyChangedWithBoolValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root(object sender, PropertyChangedWithFloatValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithUIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root(object sender, PropertyChangedWithColorValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root(object sender, PropertyChangedWithDoubleValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root(object sender, PropertyChangedWithVec2ValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void HandleViewModelPropertyChangeOf_datasource_Root(string propertyName)
	{
		switch (propertyName)
		{
		case "Stats":
			RefreshDataSource_datasource_Root_Stats(_datasource_Root.Stats);
			break;
		case "IsPlayer":
			_widget_0.IsVisible = _datasource_Root.IsPlayer;
			break;
		case "IsDead":
			_widget_1.IsInactive = _datasource_Root.IsDead;
			break;
		}
	}

	public void OnList_datasource_Root_StatsChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_1_0.GetChild(num);
				((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_1_0.GetChild(num);
				((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)child4).SetDataSource(null);
				_widget_1_0.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_Stats.Count; i++)
			{
				MissionScoreboardStatItemVM bindingObject = _datasource_Root_Stats[i];
				_widget_1_0.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate = new MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate);
			MissionScoreboardStatItemVM dataSource = (MissionScoreboardStatItemVM)(generatedWidgetData.Data = _datasource_Root_Stats[e.NewIndex]);
			multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_1_0.AddChildAtIndex(multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate, e.NewIndex);
			multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.CreateWidgets();
			multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.SetIds();
			multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.SetAttributes();
			multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_1_0.GetChild(e.NewIndex);
			((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_1_0.GetChild(e.NewIndex);
			((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)child).SetDataSource(null);
			_widget_1_0.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	private void RefreshDataSource_datasource_Root(MissionScoreboardPlayerVM newDataSource)
	{
		if (_datasource_Root != null)
		{
			_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
			_widget.EventFire -= EventListenerOf_widget;
			_widget_0.PropertyChanged -= PropertyChangedListenerOf_widget_0;
			_widget_0.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0;
			_widget_0.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0;
			_widget_0.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0;
			_widget_0.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0;
			_widget_0.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0;
			_widget_0.intPropertyChanged -= intPropertyChangedListenerOf_widget_0;
			_widget_0.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0;
			_widget_0.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0;
			_widget_1.PropertyChanged -= PropertyChangedListenerOf_widget_1;
			_widget_1.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_1;
			_widget_1.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_1;
			_widget_1.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_1;
			_widget_1.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_1;
			_widget_1.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_1;
			_widget_1.intPropertyChanged -= intPropertyChangedListenerOf_widget_1;
			_widget_1.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_1;
			_widget_1.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_1;
			if (_datasource_Root_Stats != null)
			{
				_datasource_Root_Stats.ListChanged -= OnList_datasource_Root_StatsChanged;
				for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
				{
					Widget child = _widget_1_0.GetChild(num);
					((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)child).OnBeforeRemovedChild(child);
					Widget child2 = _widget_1_0.GetChild(num);
					((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)child2).SetDataSource(null);
					_widget_1_0.RemoveChild(child2);
				}
				_datasource_Root_Stats = null;
			}
			_datasource_Root = null;
		}
		_datasource_Root = newDataSource;
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged += ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue += ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue += ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue += ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue += ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue += ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue += ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue += ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value += ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget.EventFire += EventListenerOf_widget;
		_widget_0.IsVisible = _datasource_Root.IsPlayer;
		_widget_0.PropertyChanged += PropertyChangedListenerOf_widget_0;
		_widget_0.boolPropertyChanged += boolPropertyChangedListenerOf_widget_0;
		_widget_0.floatPropertyChanged += floatPropertyChangedListenerOf_widget_0;
		_widget_0.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget_0;
		_widget_0.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget_0;
		_widget_0.doublePropertyChanged += doublePropertyChangedListenerOf_widget_0;
		_widget_0.intPropertyChanged += intPropertyChangedListenerOf_widget_0;
		_widget_0.uintPropertyChanged += uintPropertyChangedListenerOf_widget_0;
		_widget_0.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget_0;
		_widget_1.IsInactive = _datasource_Root.IsDead;
		_widget_1.PropertyChanged += PropertyChangedListenerOf_widget_1;
		_widget_1.boolPropertyChanged += boolPropertyChangedListenerOf_widget_1;
		_widget_1.floatPropertyChanged += floatPropertyChangedListenerOf_widget_1;
		_widget_1.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget_1;
		_widget_1.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget_1;
		_widget_1.doublePropertyChanged += doublePropertyChangedListenerOf_widget_1;
		_widget_1.intPropertyChanged += intPropertyChangedListenerOf_widget_1;
		_widget_1.uintPropertyChanged += uintPropertyChangedListenerOf_widget_1;
		_widget_1.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget_1;
		_datasource_Root_Stats = _datasource_Root.Stats;
		if (_datasource_Root_Stats != null)
		{
			_datasource_Root_Stats.ListChanged += OnList_datasource_Root_StatsChanged;
			for (int i = 0; i < _datasource_Root_Stats.Count; i++)
			{
				MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate = new MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate);
				MissionScoreboardStatItemVM dataSource = (MissionScoreboardStatItemVM)(generatedWidgetData.Data = _datasource_Root_Stats[i]);
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_1_0.AddChildAtIndex(multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate, i);
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.CreateWidgets();
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.SetIds();
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.SetAttributes();
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}

	private void RefreshDataSource_datasource_Root_Stats(MBBindingList<MissionScoreboardStatItemVM> newDataSource)
	{
		if (_datasource_Root_Stats != null)
		{
			_datasource_Root_Stats.ListChanged -= OnList_datasource_Root_StatsChanged;
			for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_1_0.GetChild(num);
				((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_1_0.GetChild(num);
				((MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate)child2).SetDataSource(null);
				_widget_1_0.RemoveChild(child2);
			}
			_datasource_Root_Stats = null;
		}
		_datasource_Root_Stats = newDataSource;
		_datasource_Root_Stats = _datasource_Root.Stats;
		if (_datasource_Root_Stats != null)
		{
			_datasource_Root_Stats.ListChanged += OnList_datasource_Root_StatsChanged;
			for (int i = 0; i < _datasource_Root_Stats.Count; i++)
			{
				MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate = new MultiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate);
				MissionScoreboardStatItemVM dataSource = (MissionScoreboardStatItemVM)(generatedWidgetData.Data = _datasource_Root_Stats[i]);
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_1_0.AddChildAtIndex(multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate, i);
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.CreateWidgets();
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.SetIds();
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.SetAttributes();
				multiplayerScoreboard__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_Scoreboard_MissionScoreboardVM_Dependency_17_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}
}
