using System.ComponentModel;
using System.Numerics;
using TaleWorlds.GauntletUI;
using TaleWorlds.GauntletUI.BaseTypes;
using TaleWorlds.GauntletUI.Layout;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade.GauntletUI.Widgets.Mission.FlagMarker;
using TaleWorlds.MountAndBlade.Multiplayer.ViewModelCollection.FlagMarker.Targets;

namespace TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated0;

public class MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_6_MPMissionMarkerPeer__InheritedPrefab : MultiplayerMissionMarkerListPanel
{
	private MultiplayerMissionMarkerListPanel _widget;

	private Widget _widget_0;

	private ListPanel _widget_0_0;

	private TextWidget _widget_0_0_0;

	private MissionPeerMarkerTargetVM _datasource_Root;

	public MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_6_MPMissionMarkerPeer__InheritedPrefab(UIContext context)
		: base(context)
	{
	}

	public virtual void CreateWidgets()
	{
		_widget = this;
		_widget_0 = new Widget(base.Context);
		_widget.AddChild(_widget_0);
		_widget_0_0 = new ListPanel(base.Context);
		_widget_0.AddChild(_widget_0_0);
		_widget_0_0_0 = new TextWidget(base.Context);
		_widget_0_0.AddChild(_widget_0_0_0);
	}

	public virtual void SetIds()
	{
		_widget_0.Id = "PeerWidget";
		_widget_0_0_0.Id = "NameTextWidget";
	}

	public virtual void SetAttributes()
	{
		base.WidthSizePolicy = SizePolicy.CoverChildren;
		base.HeightSizePolicy = SizePolicy.CoverChildren;
		base.CloseDistanceCutoff = 25f;
		base.FarAlphaTarget = 0.5f;
		base.FarDistanceCutoff = 250f;
		base.StackLayout.LayoutMethod = LayoutMethod.VerticalBottomToTop;
		base.PeerWidget = _widget_0;
		base.IsSpawnFlag = false;
		_widget_0.WidthSizePolicy = SizePolicy.CoverChildren;
		_widget_0.HeightSizePolicy = SizePolicy.CoverChildren;
		_widget_0.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_0.VerticalAlignment = VerticalAlignment.Center;
		_widget_0_0.WidthSizePolicy = SizePolicy.CoverChildren;
		_widget_0_0.HeightSizePolicy = SizePolicy.CoverChildren;
		_widget_0_0.StackLayout.LayoutMethod = LayoutMethod.HorizontalRightToLeft;
		_widget_0_0_0.WidthSizePolicy = SizePolicy.CoverChildren;
		_widget_0_0_0.HeightSizePolicy = SizePolicy.CoverChildren;
		_widget_0_0_0.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_0_0_0.VerticalAlignment = VerticalAlignment.Center;
		_widget_0_0_0.Brush = base.Context.GetBrush("PeerMarker.TextBrush");
		_widget_0_0_0.ClipContents = false;
		_widget_0_0_0.OverrideDefaultStateSwitchingEnabled = true;
	}

	public virtual void DestroyDataSource()
	{
		if (_datasource_Root != null)
		{
			_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
			_widget.PropertyChanged -= PropertyChangedListenerOf_widget;
			_widget.boolPropertyChanged -= boolPropertyChangedListenerOf_widget;
			_widget.floatPropertyChanged -= floatPropertyChangedListenerOf_widget;
			_widget.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget;
			_widget.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget;
			_widget.doublePropertyChanged -= doublePropertyChangedListenerOf_widget;
			_widget.intPropertyChanged -= intPropertyChangedListenerOf_widget;
			_widget.uintPropertyChanged -= uintPropertyChangedListenerOf_widget;
			_widget.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget;
			_widget_0_0_0.PropertyChanged -= PropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.intPropertyChanged -= intPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0_0_0;
			_datasource_Root = null;
		}
	}

	public virtual void SetDataSource(MissionPeerMarkerTargetVM dataSource)
	{
		RefreshDataSource_datasource_Root(dataSource);
	}

	private void PropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void intPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget(string propertyName)
	{
		switch (propertyName)
		{
		case "Distance":
			_datasource_Root.Distance = _widget.Distance;
			break;
		case "IsMarkerEnabled":
			_datasource_Root.IsEnabled = _widget.IsMarkerEnabled;
			break;
		case "MarkerType":
			_datasource_Root.MarkerType = _widget.MarkerType;
			break;
		case "Position":
			_datasource_Root.ScreenPosition = _widget.Position;
			break;
		}
	}

	private void PropertyChangedListenerOf_widget_0_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0_0(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget_0_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0_0(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget_0_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0_0(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget_0_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0_0(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget_0_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0_0(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget_0_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0_0(propertyName);
	}

	private void intPropertyChangedListenerOf_widget_0_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0_0(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget_0_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0_0(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget_0_0_0(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget_0_0_0(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget_0_0_0(string propertyName)
	{
		if (propertyName == "Brush.FontColor")
		{
			_datasource_Root.Color2 = _widget_0_0_0.Brush.FontColor.ToString();
		}
		else if (propertyName == "Text")
		{
			_datasource_Root.Name = _widget_0_0_0.Text;
		}
	}

	private void ViewModelPropertyChangedListenerOf_datasource_Root(object sender, PropertyChangedEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithValueListenerOf_datasource_Root(object sender, PropertyChangedWithValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root(object sender, PropertyChangedWithBoolValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root(object sender, PropertyChangedWithFloatValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithUIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root(object sender, PropertyChangedWithColorValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root(object sender, PropertyChangedWithDoubleValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root(object sender, PropertyChangedWithVec2ValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void HandleViewModelPropertyChangeOf_datasource_Root(string propertyName)
	{
		switch (propertyName)
		{
		case "Distance":
			_widget.Distance = _datasource_Root.Distance;
			break;
		case "IsEnabled":
			_widget.IsMarkerEnabled = _datasource_Root.IsEnabled;
			break;
		case "MarkerType":
			_widget.MarkerType = _datasource_Root.MarkerType;
			break;
		case "ScreenPosition":
			_widget.Position = _datasource_Root.ScreenPosition;
			break;
		case "Color2":
			if (_datasource_Root.Color2 != null)
			{
				_widget_0_0_0.Brush.FontColor = Color.ConvertStringToColor(_datasource_Root.Color2);
			}
			break;
		case "Name":
			_widget_0_0_0.Text = _datasource_Root.Name;
			break;
		}
	}

	private void RefreshDataSource_datasource_Root(MissionPeerMarkerTargetVM newDataSource)
	{
		if (_datasource_Root != null)
		{
			_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
			_widget.PropertyChanged -= PropertyChangedListenerOf_widget;
			_widget.boolPropertyChanged -= boolPropertyChangedListenerOf_widget;
			_widget.floatPropertyChanged -= floatPropertyChangedListenerOf_widget;
			_widget.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget;
			_widget.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget;
			_widget.doublePropertyChanged -= doublePropertyChangedListenerOf_widget;
			_widget.intPropertyChanged -= intPropertyChangedListenerOf_widget;
			_widget.uintPropertyChanged -= uintPropertyChangedListenerOf_widget;
			_widget.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget;
			_widget_0_0_0.PropertyChanged -= PropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.intPropertyChanged -= intPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_0_0_0;
			_datasource_Root = null;
		}
		_datasource_Root = newDataSource;
		if (_datasource_Root != null)
		{
			_datasource_Root.PropertyChanged += ViewModelPropertyChangedListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithValue += ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithBoolValue += ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithIntValue += ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithFloatValue += ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithUIntValue += ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithColorValue += ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithDoubleValue += ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithVec2Value += ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
			_widget.Distance = _datasource_Root.Distance;
			_widget.IsMarkerEnabled = _datasource_Root.IsEnabled;
			_widget.MarkerType = _datasource_Root.MarkerType;
			_widget.Position = _datasource_Root.ScreenPosition;
			_widget.PropertyChanged += PropertyChangedListenerOf_widget;
			_widget.boolPropertyChanged += boolPropertyChangedListenerOf_widget;
			_widget.floatPropertyChanged += floatPropertyChangedListenerOf_widget;
			_widget.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget;
			_widget.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget;
			_widget.doublePropertyChanged += doublePropertyChangedListenerOf_widget;
			_widget.intPropertyChanged += intPropertyChangedListenerOf_widget;
			_widget.uintPropertyChanged += uintPropertyChangedListenerOf_widget;
			_widget.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget;
			if (_datasource_Root.Color2 != null)
			{
				_widget_0_0_0.Brush.FontColor = Color.ConvertStringToColor(_datasource_Root.Color2);
			}
			_widget_0_0_0.Text = _datasource_Root.Name;
			_widget_0_0_0.PropertyChanged += PropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.boolPropertyChanged += boolPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.floatPropertyChanged += floatPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.doublePropertyChanged += doublePropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.intPropertyChanged += intPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.uintPropertyChanged += uintPropertyChangedListenerOf_widget_0_0_0;
			_widget_0_0_0.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget_0_0_0;
		}
	}
}
