using System.ComponentModel;
using System.Numerics;
using TaleWorlds.GauntletUI;
using TaleWorlds.GauntletUI.BaseTypes;
using TaleWorlds.GauntletUI.Data;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade.GauntletUI.Widgets.Mission.NameMarker;
using TaleWorlds.MountAndBlade.Multiplayer.ViewModelCollection.FlagMarker;
using TaleWorlds.MountAndBlade.Multiplayer.ViewModelCollection.FlagMarker.Targets;

namespace TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated0;

public class MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM : NameMarkerScreenWidget, IGeneratedGauntletMovieRoot
{
	private NameMarkerScreenWidget _widget;

	private Widget _widget_0;

	private Widget _widget_0_0;

	private Widget _widget_0_1;

	private Widget _widget_0_2;

	private Widget _widget_1;

	private MultiplayerMissionMarkerVM _datasource_Root;

	private MBBindingList<MissionFlagMarkerTargetVM> _datasource_Root_FlagTargets;

	private MBBindingList<MissionPeerMarkerTargetVM> _datasource_Root_PeerTargets;

	private MBBindingList<MissionSiegeEngineMarkerTargetVM> _datasource_Root_SiegeEngineTargets;

	private MBBindingList<MissionAlwaysVisibleMarkerTargetVM> _datasource_Root_AlwaysVisibleTargets;

	public MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM(UIContext context)
		: base(context)
	{
	}

	public void CreateWidgets()
	{
		_widget = this;
		_widget_0 = new Widget(base.Context);
		_widget.AddChild(_widget_0);
		_widget_0_0 = new Widget(base.Context);
		_widget_0.AddChild(_widget_0_0);
		_widget_0_1 = new Widget(base.Context);
		_widget_0.AddChild(_widget_0_1);
		_widget_0_2 = new Widget(base.Context);
		_widget_0.AddChild(_widget_0_2);
		_widget_1 = new Widget(base.Context);
		_widget.AddChild(_widget_1);
	}

	public void SetIds()
	{
		_widget_0.Id = "MarkersContainer";
	}

	public void SetAttributes()
	{
		base.WidthSizePolicy = SizePolicy.StretchToParent;
		base.HeightSizePolicy = SizePolicy.StretchToParent;
		base.Sprite = base.Context.SpriteData.GetSprite("BlankWhiteSquare_9");
		base.TargetAlphaValue = 0f;
		base.MarkersContainer = _widget_0;
		_widget_0.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_0.HeightSizePolicy = SizePolicy.StretchToParent;
		_widget_0_0.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_0_0.HeightSizePolicy = SizePolicy.StretchToParent;
		_widget_0_1.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_0_1.HeightSizePolicy = SizePolicy.StretchToParent;
		_widget_0_2.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_0_2.HeightSizePolicy = SizePolicy.StretchToParent;
		_widget_1.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_1.HeightSizePolicy = SizePolicy.StretchToParent;
	}

	public void RefreshBindingWithChildren()
	{
		MultiplayerMissionMarkerVM datasource_Root = _datasource_Root;
		SetDataSource(null);
		SetDataSource(datasource_Root);
	}

	public void DestroyDataSource()
	{
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget.PropertyChanged -= PropertyChangedListenerOf_widget;
		_widget.boolPropertyChanged -= boolPropertyChangedListenerOf_widget;
		_widget.floatPropertyChanged -= floatPropertyChangedListenerOf_widget;
		_widget.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget;
		_widget.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget;
		_widget.doublePropertyChanged -= doublePropertyChangedListenerOf_widget;
		_widget.intPropertyChanged -= intPropertyChangedListenerOf_widget;
		_widget.uintPropertyChanged -= uintPropertyChangedListenerOf_widget;
		_widget.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget;
		if (_datasource_Root_FlagTargets != null)
		{
			_datasource_Root_FlagTargets.ListChanged -= OnList_datasource_Root_FlagTargetsChanged;
			for (int num = _widget_0_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_0_0.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)child).OnBeforeRemovedChild(child);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)_widget_0_0.GetChild(num)).DestroyDataSource();
			}
			_datasource_Root_FlagTargets = null;
		}
		if (_datasource_Root_PeerTargets != null)
		{
			_datasource_Root_PeerTargets.ListChanged -= OnList_datasource_Root_PeerTargetsChanged;
			for (int num2 = _widget_0_1.ChildCount - 1; num2 >= 0; num2--)
			{
				Widget child2 = _widget_0_1.GetChild(num2);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)child2).OnBeforeRemovedChild(child2);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)_widget_0_1.GetChild(num2)).DestroyDataSource();
			}
			_datasource_Root_PeerTargets = null;
		}
		if (_datasource_Root_SiegeEngineTargets != null)
		{
			_datasource_Root_SiegeEngineTargets.ListChanged -= OnList_datasource_Root_SiegeEngineTargetsChanged;
			for (int num3 = _widget_0_2.ChildCount - 1; num3 >= 0; num3--)
			{
				Widget child3 = _widget_0_2.GetChild(num3);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)_widget_0_2.GetChild(num3)).DestroyDataSource();
			}
			_datasource_Root_SiegeEngineTargets = null;
		}
		if (_datasource_Root_AlwaysVisibleTargets != null)
		{
			_datasource_Root_AlwaysVisibleTargets.ListChanged -= OnList_datasource_Root_AlwaysVisibleTargetsChanged;
			for (int num4 = _widget_1.ChildCount - 1; num4 >= 0; num4--)
			{
				Widget child4 = _widget_1.GetChild(num4);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)child4).OnBeforeRemovedChild(child4);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)_widget_1.GetChild(num4)).DestroyDataSource();
			}
			_datasource_Root_AlwaysVisibleTargets = null;
		}
		_datasource_Root = null;
	}

	public void SetDataSource(MultiplayerMissionMarkerVM dataSource)
	{
		RefreshDataSource_datasource_Root(dataSource);
	}

	private void PropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void intPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget(string propertyName)
	{
		if (propertyName == "IsMarkersEnabled")
		{
			_datasource_Root.IsEnabled = _widget.IsMarkersEnabled;
		}
	}

	private void ViewModelPropertyChangedListenerOf_datasource_Root(object sender, PropertyChangedEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithValueListenerOf_datasource_Root(object sender, PropertyChangedWithValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root(object sender, PropertyChangedWithBoolValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root(object sender, PropertyChangedWithFloatValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithUIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root(object sender, PropertyChangedWithColorValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root(object sender, PropertyChangedWithDoubleValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root(object sender, PropertyChangedWithVec2ValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void HandleViewModelPropertyChangeOf_datasource_Root(string propertyName)
	{
		switch (propertyName)
		{
		case "FlagTargets":
			RefreshDataSource_datasource_Root_FlagTargets(_datasource_Root.FlagTargets);
			break;
		case "PeerTargets":
			RefreshDataSource_datasource_Root_PeerTargets(_datasource_Root.PeerTargets);
			break;
		case "SiegeEngineTargets":
			RefreshDataSource_datasource_Root_SiegeEngineTargets(_datasource_Root.SiegeEngineTargets);
			break;
		case "AlwaysVisibleTargets":
			RefreshDataSource_datasource_Root_AlwaysVisibleTargets(_datasource_Root.AlwaysVisibleTargets);
			break;
		case "IsEnabled":
			_widget.IsMarkersEnabled = _datasource_Root.IsEnabled;
			break;
		}
	}

	public void OnList_datasource_Root_FlagTargetsChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_0_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_0_0.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_0_0.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)child4).SetDataSource(null);
				_widget_0_0.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_FlagTargets.Count; i++)
			{
				MissionFlagMarkerTargetVM bindingObject = _datasource_Root_FlagTargets[i];
				_widget_0_0.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate);
			MissionFlagMarkerTargetVM dataSource = (MissionFlagMarkerTargetVM)(generatedWidgetData.Data = _datasource_Root_FlagTargets[e.NewIndex]);
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_0_0.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate, e.NewIndex);
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.CreateWidgets();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.SetIds();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.SetAttributes();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_0_0.GetChild(e.NewIndex);
			((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_0_0.GetChild(e.NewIndex);
			((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)child).SetDataSource(null);
			_widget_0_0.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	public void OnList_datasource_Root_PeerTargetsChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_0_1.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_0_1.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_0_1.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)child4).SetDataSource(null);
				_widget_0_1.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_PeerTargets.Count; i++)
			{
				MissionPeerMarkerTargetVM bindingObject = _datasource_Root_PeerTargets[i];
				_widget_0_1.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate);
			MissionPeerMarkerTargetVM dataSource = (MissionPeerMarkerTargetVM)(generatedWidgetData.Data = _datasource_Root_PeerTargets[e.NewIndex]);
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_0_1.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate, e.NewIndex);
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.CreateWidgets();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.SetIds();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.SetAttributes();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_0_1.GetChild(e.NewIndex);
			((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_0_1.GetChild(e.NewIndex);
			((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)child).SetDataSource(null);
			_widget_0_1.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	public void OnList_datasource_Root_SiegeEngineTargetsChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_0_2.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_0_2.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_0_2.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)child4).SetDataSource(null);
				_widget_0_2.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_SiegeEngineTargets.Count; i++)
			{
				MissionSiegeEngineMarkerTargetVM bindingObject = _datasource_Root_SiegeEngineTargets[i];
				_widget_0_2.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate);
			MissionSiegeEngineMarkerTargetVM dataSource = (MissionSiegeEngineMarkerTargetVM)(generatedWidgetData.Data = _datasource_Root_SiegeEngineTargets[e.NewIndex]);
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_0_2.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate, e.NewIndex);
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.CreateWidgets();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.SetIds();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.SetAttributes();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_0_2.GetChild(e.NewIndex);
			((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_0_2.GetChild(e.NewIndex);
			((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)child).SetDataSource(null);
			_widget_0_2.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	public void OnList_datasource_Root_AlwaysVisibleTargetsChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_1.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_1.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_1.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)child4).SetDataSource(null);
				_widget_1.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_AlwaysVisibleTargets.Count; i++)
			{
				MissionAlwaysVisibleMarkerTargetVM bindingObject = _datasource_Root_AlwaysVisibleTargets[i];
				_widget_1.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate);
			MissionAlwaysVisibleMarkerTargetVM dataSource = (MissionAlwaysVisibleMarkerTargetVM)(generatedWidgetData.Data = _datasource_Root_AlwaysVisibleTargets[e.NewIndex]);
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_1.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate, e.NewIndex);
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.CreateWidgets();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.SetIds();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.SetAttributes();
			mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_1.GetChild(e.NewIndex);
			((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_1.GetChild(e.NewIndex);
			((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)child).SetDataSource(null);
			_widget_1.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	private void RefreshDataSource_datasource_Root(MultiplayerMissionMarkerVM newDataSource)
	{
		if (_datasource_Root != null)
		{
			_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
			_widget.PropertyChanged -= PropertyChangedListenerOf_widget;
			_widget.boolPropertyChanged -= boolPropertyChangedListenerOf_widget;
			_widget.floatPropertyChanged -= floatPropertyChangedListenerOf_widget;
			_widget.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget;
			_widget.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget;
			_widget.doublePropertyChanged -= doublePropertyChangedListenerOf_widget;
			_widget.intPropertyChanged -= intPropertyChangedListenerOf_widget;
			_widget.uintPropertyChanged -= uintPropertyChangedListenerOf_widget;
			_widget.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget;
			if (_datasource_Root_FlagTargets != null)
			{
				_datasource_Root_FlagTargets.ListChanged -= OnList_datasource_Root_FlagTargetsChanged;
				for (int num = _widget_0_0.ChildCount - 1; num >= 0; num--)
				{
					Widget child = _widget_0_0.GetChild(num);
					((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)child).OnBeforeRemovedChild(child);
					Widget child2 = _widget_0_0.GetChild(num);
					((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)child2).SetDataSource(null);
					_widget_0_0.RemoveChild(child2);
				}
				_datasource_Root_FlagTargets = null;
			}
			if (_datasource_Root_PeerTargets != null)
			{
				_datasource_Root_PeerTargets.ListChanged -= OnList_datasource_Root_PeerTargetsChanged;
				for (int num2 = _widget_0_1.ChildCount - 1; num2 >= 0; num2--)
				{
					Widget child3 = _widget_0_1.GetChild(num2);
					((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)child3).OnBeforeRemovedChild(child3);
					Widget child4 = _widget_0_1.GetChild(num2);
					((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)child4).SetDataSource(null);
					_widget_0_1.RemoveChild(child4);
				}
				_datasource_Root_PeerTargets = null;
			}
			if (_datasource_Root_SiegeEngineTargets != null)
			{
				_datasource_Root_SiegeEngineTargets.ListChanged -= OnList_datasource_Root_SiegeEngineTargetsChanged;
				for (int num3 = _widget_0_2.ChildCount - 1; num3 >= 0; num3--)
				{
					Widget child5 = _widget_0_2.GetChild(num3);
					((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)child5).OnBeforeRemovedChild(child5);
					Widget child6 = _widget_0_2.GetChild(num3);
					((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)child6).SetDataSource(null);
					_widget_0_2.RemoveChild(child6);
				}
				_datasource_Root_SiegeEngineTargets = null;
			}
			if (_datasource_Root_AlwaysVisibleTargets != null)
			{
				_datasource_Root_AlwaysVisibleTargets.ListChanged -= OnList_datasource_Root_AlwaysVisibleTargetsChanged;
				for (int num4 = _widget_1.ChildCount - 1; num4 >= 0; num4--)
				{
					Widget child7 = _widget_1.GetChild(num4);
					((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)child7).OnBeforeRemovedChild(child7);
					Widget child8 = _widget_1.GetChild(num4);
					((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)child8).SetDataSource(null);
					_widget_1.RemoveChild(child8);
				}
				_datasource_Root_AlwaysVisibleTargets = null;
			}
			_datasource_Root = null;
		}
		_datasource_Root = newDataSource;
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged += ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue += ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue += ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue += ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue += ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue += ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue += ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue += ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value += ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget.IsMarkersEnabled = _datasource_Root.IsEnabled;
		_widget.PropertyChanged += PropertyChangedListenerOf_widget;
		_widget.boolPropertyChanged += boolPropertyChangedListenerOf_widget;
		_widget.floatPropertyChanged += floatPropertyChangedListenerOf_widget;
		_widget.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget;
		_widget.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget;
		_widget.doublePropertyChanged += doublePropertyChangedListenerOf_widget;
		_widget.intPropertyChanged += intPropertyChangedListenerOf_widget;
		_widget.uintPropertyChanged += uintPropertyChangedListenerOf_widget;
		_widget.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget;
		_datasource_Root_FlagTargets = _datasource_Root.FlagTargets;
		if (_datasource_Root_FlagTargets != null)
		{
			_datasource_Root_FlagTargets.ListChanged += OnList_datasource_Root_FlagTargetsChanged;
			for (int i = 0; i < _datasource_Root_FlagTargets.Count; i++)
			{
				MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate);
				MissionFlagMarkerTargetVM dataSource = (MissionFlagMarkerTargetVM)(generatedWidgetData.Data = _datasource_Root_FlagTargets[i]);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_0_0.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate, i);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.CreateWidgets();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.SetIds();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.SetAttributes();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.SetDataSource(dataSource);
			}
		}
		_datasource_Root_PeerTargets = _datasource_Root.PeerTargets;
		if (_datasource_Root_PeerTargets != null)
		{
			_datasource_Root_PeerTargets.ListChanged += OnList_datasource_Root_PeerTargetsChanged;
			for (int j = 0; j < _datasource_Root_PeerTargets.Count; j++)
			{
				MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData2 = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate);
				MissionPeerMarkerTargetVM dataSource2 = (MissionPeerMarkerTargetVM)(generatedWidgetData2.Data = _datasource_Root_PeerTargets[j]);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.AddComponent(generatedWidgetData2);
				_widget_0_1.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate, j);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.CreateWidgets();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.SetIds();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.SetAttributes();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.SetDataSource(dataSource2);
			}
		}
		_datasource_Root_SiegeEngineTargets = _datasource_Root.SiegeEngineTargets;
		if (_datasource_Root_SiegeEngineTargets != null)
		{
			_datasource_Root_SiegeEngineTargets.ListChanged += OnList_datasource_Root_SiegeEngineTargetsChanged;
			for (int k = 0; k < _datasource_Root_SiegeEngineTargets.Count; k++)
			{
				MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData3 = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate);
				MissionSiegeEngineMarkerTargetVM dataSource3 = (MissionSiegeEngineMarkerTargetVM)(generatedWidgetData3.Data = _datasource_Root_SiegeEngineTargets[k]);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.AddComponent(generatedWidgetData3);
				_widget_0_2.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate, k);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.CreateWidgets();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.SetIds();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.SetAttributes();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.SetDataSource(dataSource3);
			}
		}
		_datasource_Root_AlwaysVisibleTargets = _datasource_Root.AlwaysVisibleTargets;
		if (_datasource_Root_AlwaysVisibleTargets != null)
		{
			_datasource_Root_AlwaysVisibleTargets.ListChanged += OnList_datasource_Root_AlwaysVisibleTargetsChanged;
			for (int l = 0; l < _datasource_Root_AlwaysVisibleTargets.Count; l++)
			{
				MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData4 = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate);
				MissionAlwaysVisibleMarkerTargetVM dataSource4 = (MissionAlwaysVisibleMarkerTargetVM)(generatedWidgetData4.Data = _datasource_Root_AlwaysVisibleTargets[l]);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.AddComponent(generatedWidgetData4);
				_widget_1.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate, l);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.CreateWidgets();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.SetIds();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.SetAttributes();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.SetDataSource(dataSource4);
			}
		}
	}

	private void RefreshDataSource_datasource_Root_FlagTargets(MBBindingList<MissionFlagMarkerTargetVM> newDataSource)
	{
		if (_datasource_Root_FlagTargets != null)
		{
			_datasource_Root_FlagTargets.ListChanged -= OnList_datasource_Root_FlagTargetsChanged;
			for (int num = _widget_0_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_0_0.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_0_0.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate)child2).SetDataSource(null);
				_widget_0_0.RemoveChild(child2);
			}
			_datasource_Root_FlagTargets = null;
		}
		_datasource_Root_FlagTargets = newDataSource;
		_datasource_Root_FlagTargets = _datasource_Root.FlagTargets;
		if (_datasource_Root_FlagTargets != null)
		{
			_datasource_Root_FlagTargets.ListChanged += OnList_datasource_Root_FlagTargetsChanged;
			for (int i = 0; i < _datasource_Root_FlagTargets.Count; i++)
			{
				MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate);
				MissionFlagMarkerTargetVM dataSource = (MissionFlagMarkerTargetVM)(generatedWidgetData.Data = _datasource_Root_FlagTargets[i]);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_0_0.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate, i);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.CreateWidgets();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.SetIds();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.SetAttributes();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_1_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}

	private void RefreshDataSource_datasource_Root_PeerTargets(MBBindingList<MissionPeerMarkerTargetVM> newDataSource)
	{
		if (_datasource_Root_PeerTargets != null)
		{
			_datasource_Root_PeerTargets.ListChanged -= OnList_datasource_Root_PeerTargetsChanged;
			for (int num = _widget_0_1.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_0_1.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_0_1.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate)child2).SetDataSource(null);
				_widget_0_1.RemoveChild(child2);
			}
			_datasource_Root_PeerTargets = null;
		}
		_datasource_Root_PeerTargets = newDataSource;
		_datasource_Root_PeerTargets = _datasource_Root.PeerTargets;
		if (_datasource_Root_PeerTargets != null)
		{
			_datasource_Root_PeerTargets.ListChanged += OnList_datasource_Root_PeerTargetsChanged;
			for (int i = 0; i < _datasource_Root_PeerTargets.Count; i++)
			{
				MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate);
				MissionPeerMarkerTargetVM dataSource = (MissionPeerMarkerTargetVM)(generatedWidgetData.Data = _datasource_Root_PeerTargets[i]);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_0_1.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate, i);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.CreateWidgets();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.SetIds();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.SetAttributes();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_2_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}

	private void RefreshDataSource_datasource_Root_SiegeEngineTargets(MBBindingList<MissionSiegeEngineMarkerTargetVM> newDataSource)
	{
		if (_datasource_Root_SiegeEngineTargets != null)
		{
			_datasource_Root_SiegeEngineTargets.ListChanged -= OnList_datasource_Root_SiegeEngineTargetsChanged;
			for (int num = _widget_0_2.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_0_2.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_0_2.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate)child2).SetDataSource(null);
				_widget_0_2.RemoveChild(child2);
			}
			_datasource_Root_SiegeEngineTargets = null;
		}
		_datasource_Root_SiegeEngineTargets = newDataSource;
		_datasource_Root_SiegeEngineTargets = _datasource_Root.SiegeEngineTargets;
		if (_datasource_Root_SiegeEngineTargets != null)
		{
			_datasource_Root_SiegeEngineTargets.ListChanged += OnList_datasource_Root_SiegeEngineTargetsChanged;
			for (int i = 0; i < _datasource_Root_SiegeEngineTargets.Count; i++)
			{
				MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate);
				MissionSiegeEngineMarkerTargetVM dataSource = (MissionSiegeEngineMarkerTargetVM)(generatedWidgetData.Data = _datasource_Root_SiegeEngineTargets[i]);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_0_2.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate, i);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.CreateWidgets();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.SetIds();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.SetAttributes();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_3_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}

	private void RefreshDataSource_datasource_Root_AlwaysVisibleTargets(MBBindingList<MissionAlwaysVisibleMarkerTargetVM> newDataSource)
	{
		if (_datasource_Root_AlwaysVisibleTargets != null)
		{
			_datasource_Root_AlwaysVisibleTargets.ListChanged -= OnList_datasource_Root_AlwaysVisibleTargetsChanged;
			for (int num = _widget_1.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_1.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_1.GetChild(num);
				((MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate)child2).SetDataSource(null);
				_widget_1.RemoveChild(child2);
			}
			_datasource_Root_AlwaysVisibleTargets = null;
		}
		_datasource_Root_AlwaysVisibleTargets = newDataSource;
		_datasource_Root_AlwaysVisibleTargets = _datasource_Root.AlwaysVisibleTargets;
		if (_datasource_Root_AlwaysVisibleTargets != null)
		{
			_datasource_Root_AlwaysVisibleTargets.ListChanged += OnList_datasource_Root_AlwaysVisibleTargetsChanged;
			for (int i = 0; i < _datasource_Root_AlwaysVisibleTargets.Count; i++)
			{
				MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate = new MPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate);
				MissionAlwaysVisibleMarkerTargetVM dataSource = (MissionAlwaysVisibleMarkerTargetVM)(generatedWidgetData.Data = _datasource_Root_AlwaysVisibleTargets[i]);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_1.AddChildAtIndex(mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate, i);
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.CreateWidgets();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.SetIds();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.SetAttributes();
				mPMissionMarkers__TaleWorlds_MountAndBlade_Multiplayer_ViewModelCollection_FlagMarker_MultiplayerMissionMarkerVM_Dependency_4_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}
}
