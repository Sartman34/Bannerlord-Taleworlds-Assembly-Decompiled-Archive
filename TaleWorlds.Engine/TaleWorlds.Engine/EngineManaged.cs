using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.DotNet;
using TaleWorlds.Library;

namespace TaleWorlds.Engine;

internal class EngineManaged : IManagedComponent
{
	private static EngineManaged _instance;

	private static Dictionary<int, IntPtr> _engineApiPointers = new Dictionary<int, IntPtr>();

	private static ICallbackManager _callbackManager;

	private static Delegate PassManagedEngineCallbackMethodPointersMono = null;

	public string ManagedCallbacksDll => ManagedDllFolder.Name + "TaleWorlds.Engine.AutoGenerated.dll";

	public EngineManaged()
	{
		_instance = this;
	}

	void IManagedComponent.OnStart()
	{
	}

	void IManagedComponent.OnCustomCallbackMethodPassed(string name, Delegate method)
	{
		if (name == "Engine")
		{
			PassManagedEngineCallbackMethodPointersMono = method;
			OnInitialize();
		}
	}

	void IManagedComponent.OnApplicationTick(float dt)
	{
		EngineController.OnApplicationTick(dt);
	}

	private void OnInitialize()
	{
		List<Type> typesSafe = AssemblyLoader.LoadFrom(ManagedCallbacksDll).GetTypesSafe();
		Type type = null;
		foreach (Type item in typesSafe)
		{
			if (item.GetInterfaces().Contains(typeof(ICallbackManager)))
			{
				type = item;
				break;
			}
		}
		_callbackManager = type.GetConstructor(new Type[0]).Invoke(new object[0]) as ICallbackManager;
		_callbackManager.Initialize();
		Delegate[] delegates = _callbackManager.GetDelegates();
		for (int i = 0; i < delegates.Length; i++)
		{
			try
			{
				PassManagedEngineCallbackMethodPointers(delegates[i]);
			}
			catch (Exception ex)
			{
				PassManagedEngineCallbackMethodPointers(null);
				Console.WriteLine(string.Concat(ex, " ", i));
			}
		}
		EngineApplicationInterface.SetObjects(_callbackManager.GetScriptingInterfaceObjects());
		Managed.AddConstructorDelegateOfWeakReferenceClass<GameEntity>();
		Managed.AddConstructorDelegateOfWeakReferenceClass<Scene>();
		Managed.AddConstructorDelegateOfWeakReferenceClass<ManagedScriptComponent>();
		Managed.AddConstructorDelegateOfWeakReferenceClass<Texture>();
		EngineScreenManager.Initialize();
	}

	[EngineCallback]
	internal static void EngineApiMethodInterfaceInitializer(int id, IntPtr pointer)
	{
		_engineApiPointers.Add(id, pointer);
	}

	[EngineCallback]
	internal static void CheckSharedStructureSizes()
	{
		_callbackManager.CheckSharedStructureSizes();
	}

	[EngineCallback]
	internal static void FillEngineApiPointers()
	{
		foreach (KeyValuePair<int, IntPtr> engineApiPointer in _engineApiPointers)
		{
			try
			{
				_callbackManager.SetFunctionPointer(engineApiPointer.Key, engineApiPointer.Value);
			}
			catch (Exception ex)
			{
				Console.WriteLine("error: " + engineApiPointer.Key + " " + ex);
			}
		}
	}

	private static void PassManagedEngineCallbackMethodPointers(Delegate methodDelegate)
	{
		if ((object)PassManagedEngineCallbackMethodPointersMono != null)
		{
			PassManagedEngineCallbackMethodPointersMono.DynamicInvoke(methodDelegate);
		}
	}
}
