using System.Collections.Generic;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core;

public abstract class GameType
{
	private GameTypeLoadingStates _stepNo;

	public virtual bool SupportsSaving => false;

	public Game CurrentGame { get; internal set; }

	public MBObjectManager ObjectManager => CurrentGame.ObjectManager;

	public GameManagerBase GameManager => CurrentGame.GameManager;

	public virtual bool IsInventoryAccessibleAtMission => false;

	public virtual bool IsQuestScreenAccessibleAtMission => false;

	public virtual bool IsCharacterWindowAccessibleAtMission => false;

	public virtual bool IsPartyWindowAccessibleAtMission => false;

	public virtual bool IsKingdomWindowAccessibleAtMission => false;

	public virtual bool IsClanWindowAccessibleAtMission => false;

	public virtual bool IsEncyclopediaWindowAccessibleAtMission => false;

	public virtual bool IsBannerWindowAccessibleAtMission => false;

	public virtual bool IsDevelopment => false;

	public virtual bool IsCoreOnlyGameMode => false;

	public virtual bool RequiresTutorial => true;

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
	}

	public GameType()
	{
		_stepNo = GameTypeLoadingStates.InitializeFirstStep;
	}

	public abstract void OnStateChanged(GameState oldState);

	protected internal abstract void BeforeRegisterTypes(MBObjectManager objectManager);

	protected internal abstract void OnRegisterTypes(MBObjectManager objectManager);

	protected internal abstract void OnInitialize();

	protected abstract void DoLoadingForGameType(GameTypeLoadingStates gameTypeLoadingState, out GameTypeLoadingStates nextState);

	public bool DoLoadingForGameType()
	{
		bool result = false;
		GameTypeLoadingStates nextState = GameTypeLoadingStates.None;
		switch (_stepNo)
		{
		case GameTypeLoadingStates.InitializeFirstStep:
			DoLoadingForGameType(GameTypeLoadingStates.InitializeFirstStep, out nextState);
			if (nextState == GameTypeLoadingStates.WaitSecondStep)
			{
				_stepNo++;
			}
			break;
		case GameTypeLoadingStates.WaitSecondStep:
			DoLoadingForGameType(GameTypeLoadingStates.WaitSecondStep, out nextState);
			if (nextState == GameTypeLoadingStates.LoadVisualsThirdState)
			{
				_stepNo++;
			}
			break;
		case GameTypeLoadingStates.LoadVisualsThirdState:
			DoLoadingForGameType(GameTypeLoadingStates.LoadVisualsThirdState, out nextState);
			if (nextState == GameTypeLoadingStates.PostInitializeFourthState)
			{
				_stepNo++;
			}
			break;
		case GameTypeLoadingStates.PostInitializeFourthState:
			DoLoadingForGameType(GameTypeLoadingStates.PostInitializeFourthState, out nextState);
			if (nextState == GameTypeLoadingStates.None)
			{
				_stepNo++;
				result = true;
			}
			break;
		}
		return result;
	}

	public abstract void OnDestroy();

	public virtual void OnMissionIsStarting(string missionName, MissionInitializerRecord rec)
	{
	}

	public virtual void InitializeParameters()
	{
	}
}
