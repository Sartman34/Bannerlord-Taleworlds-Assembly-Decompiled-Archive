using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core;

public sealed class CraftingPiece : MBObjectBase
{
	public enum PieceTypes
	{
		Invalid = -1,
		Blade,
		Guard,
		Handle,
		Pommel,
		NumberOfPieceTypes
	}

	private static CraftingPiece[] _invalidCraftingPiece;

	public WeaponFlags AdditionalWeaponFlags;

	public ItemFlags AdditionalItemFlags;

	private MBList<int> _materialCosts;

	private MBList<(CraftingMaterials, int)> _materialsUsed;

	public bool IsValid { get; private set; }

	public TextObject Name { get; private set; }

	public PieceTypes PieceType { get; private set; }

	public string MeshName { get; private set; }

	public BasicCultureObject Culture { get; private set; }

	public float Length { get; private set; }

	public float DistanceToNextPiece { get; private set; }

	public float DistanceToPreviousPiece { get; private set; }

	public float PieceOffset { get; private set; }

	public float PreviousPieceOffset { get; private set; }

	public float NextPieceOffset { get; private set; }

	public float Weight { get; private set; }

	public float Inertia { get; private set; }

	public float CenterOfMass { get; private set; }

	public int ArmorBonus { get; private set; }

	public int SwingDamageBonus { get; private set; }

	public int SwingSpeedBonus { get; private set; }

	public int ThrustDamageBonus { get; private set; }

	public int ThrustSpeedBonus { get; private set; }

	public int HandlingBonus { get; private set; }

	public int AccuracyBonus { get; private set; }

	public int PieceTier { get; private set; }

	public bool FullScale { get; private set; }

	public Vec3 ItemHolsterPosShift { get; private set; }

	public float Appearance { get; private set; }

	public bool IsGivenByDefault { get; private set; }

	public bool IsHiddenOnDesigner { get; private set; }

	public bool IsUnique { get; private set; }

	public string ItemUsageFeaturesToExclude { get; private set; }

	public MBReadOnlyList<(CraftingMaterials, int)> MaterialsUsed => _materialsUsed;

	public bool IsEmptyPiece => _materialCosts.All((int cost) => cost == 0);

	public int CraftingCost { get; private set; }

	public int RequiredSkillValue { get; private set; }

	public BladeData BladeData { get; private set; }

	public static MBReadOnlyList<CraftingPiece> All => Game.Current.ObjectManager.GetObjectTypeList<CraftingPiece>();

	internal static void AutoGeneratedStaticCollectObjectsCraftingPiece(object o, List<object> collectedObjects)
	{
		((CraftingPiece)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	public CraftingPiece()
	{
		InitializeLists();
	}

	[LoadInitializationCallback]
	private void OnLoad(MetaData metaData)
	{
		InitializeLists();
	}

	private void InitializeLists()
	{
		_materialCosts = new MBList<int>(9);
		for (int i = 0; i < 9; i++)
		{
			_materialCosts.Add(0);
		}
		_materialsUsed = new MBList<(CraftingMaterials, int)>(0);
	}

	public static CraftingPiece GetInvalidCraftingPiece(PieceTypes pieceType)
	{
		if (_invalidCraftingPiece == null)
		{
			_invalidCraftingPiece = new CraftingPiece[4];
		}
		if (_invalidCraftingPiece[(int)pieceType] == null)
		{
			_invalidCraftingPiece[(int)pieceType] = new CraftingPiece
			{
				PieceType = pieceType,
				Name = new TextObject("{=!}Invalid"),
				IsValid = false
			};
		}
		return _invalidCraftingPiece[(int)pieceType];
	}

	public override void Deserialize(MBObjectManager objectManager, XmlNode node)
	{
		base.Deserialize(objectManager, node);
		IsValid = true;
		Name = new TextObject(node.Attributes["name"].InnerText);
		PieceType = (PieceTypes)Enum.Parse(typeof(PieceTypes), node.Attributes["piece_type"].InnerText, ignoreCase: true);
		MeshName = node.Attributes["mesh"].InnerText;
		Culture = ((node.Attributes["mesh"] != null) ? ((BasicCultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(BasicCultureObject), node)) : null);
		Appearance = ((node.Attributes["appearance"] != null) ? float.Parse(node.Attributes["appearance"].Value) : 0.5f);
		CraftingCost = ((node.Attributes["CraftingCost"] != null) ? int.Parse(node.Attributes["CraftingCost"].Value) : 0);
		XmlAttribute xmlAttribute = node.Attributes["weight"];
		Weight = ((xmlAttribute != null) ? float.Parse(xmlAttribute.Value) : 0f);
		XmlAttribute xmlAttribute2 = node.Attributes["length"];
		if (xmlAttribute2 != null)
		{
			Length = 0.01f * float.Parse(xmlAttribute2.Value);
			DistanceToNextPiece = Length / 2f;
			DistanceToPreviousPiece = Length / 2f;
		}
		else
		{
			XmlAttribute xmlAttribute3 = node.Attributes["distance_to_next_piece"];
			XmlAttribute xmlAttribute4 = node.Attributes["distance_to_previous_piece"];
			DistanceToNextPiece = 0.01f * float.Parse(xmlAttribute3.Value);
			DistanceToPreviousPiece = 0.01f * float.Parse(xmlAttribute4.Value);
			Length = DistanceToNextPiece + DistanceToPreviousPiece;
		}
		Inertia = 1f / 12f * Weight * Length * Length;
		XmlAttribute xmlAttribute5 = node.Attributes["center_of_mass"];
		float num = ((xmlAttribute5 != null) ? float.Parse(xmlAttribute5.Value) : 0.5f);
		CenterOfMass = Length * num;
		XmlAttribute xmlAttribute6 = node.Attributes["item_holster_pos_shift"];
		Vec3 itemHolsterPosShift = default(Vec3);
		if (xmlAttribute6 != null)
		{
			string[] array = xmlAttribute6.Value.Split(new char[1] { ',' });
			if (array.Length == 3)
			{
				float.TryParse(array[0], out itemHolsterPosShift.x);
				float.TryParse(array[1], out itemHolsterPosShift.y);
				float.TryParse(array[2], out itemHolsterPosShift.z);
			}
		}
		ItemHolsterPosShift = itemHolsterPosShift;
		XmlAttribute xmlAttribute7 = node.Attributes["tier"];
		PieceTier = ((xmlAttribute7 == null) ? 1 : int.Parse(xmlAttribute7.Value));
		IsUnique = XmlHelper.ReadBool(node, "is_unique");
		IsGivenByDefault = XmlHelper.ReadBool(node, "is_default");
		IsHiddenOnDesigner = XmlHelper.ReadBool(node, "is_hidden");
		XmlAttribute xmlAttribute8 = node.Attributes["full_scale"];
		FullScale = ((xmlAttribute8 != null) ? (xmlAttribute8.InnerText == "true") : (PieceType == PieceTypes.Guard || PieceType == PieceTypes.Pommel));
		XmlAttribute xmlAttribute9 = node.Attributes["excluded_item_usage_features"];
		ItemUsageFeaturesToExclude = ((xmlAttribute9 != null) ? xmlAttribute9.InnerText : "");
		XmlAttribute xmlAttribute10 = node.Attributes["required_skill_value"];
		RequiredSkillValue = ((xmlAttribute10 != null) ? int.Parse(xmlAttribute10.Value) : 0);
		foreach (XmlNode childNode in node.ChildNodes)
		{
			if (childNode.Attributes == null)
			{
				continue;
			}
			switch (childNode.Name)
			{
			case "StatContributions":
			{
				XmlAttribute xmlAttribute13 = childNode.Attributes["armor_bonus"];
				ArmorBonus = ((xmlAttribute13 != null) ? int.Parse(xmlAttribute13.Value) : 0);
				XmlAttribute xmlAttribute14 = childNode.Attributes["handling_bonus"];
				HandlingBonus = ((xmlAttribute14 != null) ? int.Parse(xmlAttribute14.Value) : 0);
				XmlAttribute xmlAttribute15 = childNode.Attributes["swing_damage_bonus"];
				SwingDamageBonus = ((xmlAttribute15 != null) ? int.Parse(xmlAttribute15.Value) : 0);
				XmlAttribute xmlAttribute16 = childNode.Attributes["swing_speed_bonus"];
				SwingSpeedBonus = ((xmlAttribute16 != null) ? int.Parse(xmlAttribute16.Value) : 0);
				XmlAttribute xmlAttribute17 = childNode.Attributes["thrust_damage_bonus"];
				ThrustDamageBonus = ((xmlAttribute17 != null) ? int.Parse(xmlAttribute17.Value) : 0);
				XmlAttribute xmlAttribute18 = childNode.Attributes["thrust_speed_bonus"];
				ThrustSpeedBonus = ((xmlAttribute18 != null) ? int.Parse(xmlAttribute18.Value) : 0);
				XmlAttribute xmlAttribute19 = childNode.Attributes["accuracy_bonus"];
				AccuracyBonus = ((xmlAttribute19 != null) ? int.Parse(xmlAttribute19.Value) : 0);
				break;
			}
			case "BladeData":
				BladeData = new BladeData(PieceType, Length);
				BladeData.Deserialize(objectManager, childNode);
				break;
			case "BuildData":
			{
				XmlAttribute xmlAttribute20 = childNode.Attributes["piece_offset"];
				XmlAttribute xmlAttribute21 = childNode.Attributes["previous_piece_offset"];
				XmlAttribute xmlAttribute22 = childNode.Attributes["next_piece_offset"];
				PieceOffset = ((xmlAttribute20 != null) ? (0.01f * float.Parse(xmlAttribute20.Value)) : 0f);
				PreviousPieceOffset = ((xmlAttribute21 != null) ? (0.01f * float.Parse(xmlAttribute21.Value)) : 0f);
				NextPieceOffset = ((xmlAttribute22 != null) ? (0.01f * float.Parse(xmlAttribute22.Value)) : 0f);
				break;
			}
			case "Materials":
				_materialsUsed = new MBList<(CraftingMaterials, int)>();
				foreach (XmlNode childNode2 in childNode.ChildNodes)
				{
					string value = childNode2.Attributes["id"].Value;
					string value2 = childNode2.Attributes["count"].Value;
					Enum.TryParse<CraftingMaterials>(value, out var result);
					if (int.TryParse(value2, out var result2) && result2 > 0)
					{
						_materialsUsed.Add((result, result2));
					}
					_materialCosts[(int)result] = result2;
				}
				_materialsUsed.Capacity = _materialsUsed.Count;
				break;
			case "Flags":
				AdditionalItemFlags = (ItemFlags)0u;
				AdditionalWeaponFlags = (WeaponFlags)0uL;
				foreach (XmlNode childNode3 in childNode.ChildNodes)
				{
					XmlAttribute xmlAttribute11 = childNode3.Attributes["name"];
					XmlAttribute xmlAttribute12 = childNode3.Attributes["type"];
					if (xmlAttribute12 == null || xmlAttribute12.Value == "WeaponFlags")
					{
						WeaponFlags weaponFlags = (WeaponFlags)Enum.Parse(typeof(WeaponFlags), xmlAttribute11.Value, ignoreCase: true);
						AdditionalWeaponFlags |= weaponFlags;
					}
					else
					{
						ItemFlags itemFlags = (ItemFlags)Enum.Parse(typeof(ItemFlags), xmlAttribute11.Value, ignoreCase: true);
						AdditionalItemFlags |= itemFlags;
					}
				}
				break;
			}
		}
		_ = PieceType;
	}
}
