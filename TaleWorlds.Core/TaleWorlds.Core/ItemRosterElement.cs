using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core;

public struct ItemRosterElement : ISerializableObject, ISavedStruct
{
	private static readonly ItemRosterElement StaticInvalidElement = new ItemRosterElement(null);

	[SaveableField(11)]
	private int _amount;

	public static ItemRosterElement Invalid => StaticInvalidElement;

	[SaveableProperty(21)]
	public EquipmentElement EquipmentElement { get; private set; }

	public int Amount
	{
		get
		{
			return _amount;
		}
		set
		{
			if (value < 0)
			{
				throw new MBUnderFlowException("ItemRosterElement::Amount");
			}
			_amount = value;
		}
	}

	public bool IsEmpty => EquipmentElement.Item == null;

	public static void AutoGeneratedStaticCollectObjectsItemRosterElement(object o, List<object> collectedObjects)
	{
		((ItemRosterElement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		EquipmentElement.AutoGeneratedStaticCollectObjectsEquipmentElement(EquipmentElement, collectedObjects);
	}

	internal static object AutoGeneratedGetMemberValueEquipmentElement(object o)
	{
		return ((ItemRosterElement)o).EquipmentElement;
	}

	internal static object AutoGeneratedGetMemberValue_amount(object o)
	{
		return ((ItemRosterElement)o)._amount;
	}

	public ItemRosterElement(ItemObject item, int amount = 0, ItemModifier itemModifier = null)
	{
		this = default(ItemRosterElement);
		EquipmentElement = new EquipmentElement(item, itemModifier);
		_amount = amount;
	}

	public ItemRosterElement(EquipmentElement equipmentElement, int amount)
	{
		EquipmentElement = equipmentElement;
		_amount = amount;
	}

	public override int GetHashCode()
	{
		return EquipmentElement.GetHashCode();
	}

	public override string ToString()
	{
		return EquipmentElement.Item.ToString() + " x" + Amount;
	}

	public ItemRosterElement(ItemRosterElement itemRosterElement)
		: this(itemRosterElement.EquipmentElement.Item, itemRosterElement.Amount, itemRosterElement.EquipmentElement.ItemModifier)
	{
	}

	public void Clear()
	{
		EquipmentElement.Clear();
		Amount = 0;
	}

	public bool IsEqualTo(ItemRosterElement other)
	{
		if (Amount == other.Amount)
		{
			return EquipmentElement.IsEqualTo(other.EquipmentElement);
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (!(obj is ItemRosterElement other))
		{
			return false;
		}
		return IsEqualTo(other);
	}

	public float GetRosterElementWeight()
	{
		return EquipmentElement.GetEquipmentElementWeight() * (float)Amount;
	}

	void ISerializableObject.DeserializeFrom(IReader reader)
	{
		Amount = reader.ReadInt();
		string text = reader.ReadString();
		ItemModifier itemModifier = null;
		if (text != "")
		{
			itemModifier = Game.Current.ObjectManager.GetObject<ItemModifier>(text);
		}
		MBGUID objectId = new MBGUID(reader.ReadUInt());
		ItemObject item = MBObjectManager.Instance.GetObject(objectId) as ItemObject;
		EquipmentElement = new EquipmentElement(item, itemModifier);
	}

	void ISerializableObject.SerializeTo(IWriter writer)
	{
		writer.WriteInt(Amount);
		writer.WriteString((EquipmentElement.ItemModifier != null) ? EquipmentElement.ItemModifier.StringId : "");
		writer.WriteUInt(EquipmentElement.Item?.Id.InternalValue ?? 0);
	}

	bool ISavedStruct.IsDefault()
	{
		if (EquipmentElement.Item == null && EquipmentElement.ItemModifier == null)
		{
			return Amount == 0;
		}
		return false;
	}
}
