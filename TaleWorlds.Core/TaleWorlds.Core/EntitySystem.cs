using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using TaleWorlds.Library;

namespace TaleWorlds.Core;

public class EntitySystem<T> where T : class, IEntityComponent
{
	private readonly MBList<T> _components;

	private readonly Dictionary<Type, IList> _componentsOfTypes;

	public MBReadOnlyList<T> Components => _components;

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
	}

	public EntitySystem()
	{
		_components = new MBList<T>();
		_componentsOfTypes = new Dictionary<Type, IList>();
	}

	public TComponent AddComponent<TComponent>() where TComponent : class, T, new()
	{
		return AddComponent(typeof(TComponent)) as TComponent;
	}

	public T AddComponent(Type componentType)
	{
		T val = componentType.GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, null, new Type[0], null).Invoke(new object[0]) as T;
		_components.Add(val);
		Type type = val.GetType();
		while (type != null && type != typeof(object))
		{
			if (!_componentsOfTypes.ContainsKey(type))
			{
				IList value = Activator.CreateInstance(typeof(List<>).MakeGenericType(type)) as IList;
				_componentsOfTypes.Add(type, value);
			}
			_componentsOfTypes[type].Add(val);
			type = type.BaseType;
		}
		val.OnInitialize();
		return val;
	}

	public TComponent GetComponent<TComponent>() where TComponent : class, T
	{
		if (_componentsOfTypes.ContainsKey(typeof(TComponent)))
		{
			IList list = _componentsOfTypes[typeof(TComponent)];
			if (list.Count > 0)
			{
				return list[0] as TComponent;
			}
		}
		return null;
	}

	public T GetComponent(Type componentType)
	{
		if (_componentsOfTypes.ContainsKey(componentType))
		{
			IList list = _componentsOfTypes[componentType];
			if (list.Count > 0)
			{
				return list[0] as T;
			}
		}
		return null;
	}

	public List<TComponent> GetComponents<TComponent>() where TComponent : class, T
	{
		if (_componentsOfTypes.ContainsKey(typeof(TComponent)))
		{
			IList list = _componentsOfTypes[typeof(TComponent)];
			if (list.Count > 0)
			{
				return list as List<TComponent>;
			}
		}
		return null;
	}

	public MBList<T> GetComponents()
	{
		return _components;
	}

	public void RemoveComponent(T component)
	{
		component.OnFinalize();
		_components.Remove(component);
		Type type = component.GetType();
		while (type != null && type != typeof(object))
		{
			_componentsOfTypes[type].Remove(component);
			type = type.BaseType;
		}
	}

	public void RemoveComponent<TComponent>() where TComponent : class, T
	{
		TComponent component = GetComponent<TComponent>();
		if (component != null)
		{
			RemoveComponent((T)component);
		}
	}
}
