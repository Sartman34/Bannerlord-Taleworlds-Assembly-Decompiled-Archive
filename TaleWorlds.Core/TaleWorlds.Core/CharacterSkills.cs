using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core;

public class CharacterSkills : PropertyOwner<SkillObject>
{
	public CharacterSkills(CharacterSkills propertyOwner)
		: base((PropertyOwner<SkillObject>)propertyOwner)
	{
	}

	public CharacterSkills()
	{
	}

	public override void Deserialize(MBObjectManager objectManager, XmlNode node)
	{
		Initialize();
		foreach (XmlNode childNode in node.ChildNodes)
		{
			if (childNode.NodeType != XmlNodeType.Comment)
			{
				XmlAttributeCollection attributes = childNode.Attributes;
				string value = attributes["id"].Value;
				string value2 = attributes["value"].Value;
				SkillObject @object = Game.Current.ObjectManager.GetObject<SkillObject>(value);
				if (@object != null)
				{
					int value3 = ((value2 == null) ? 1 : Convert.ToInt32(value2));
					SetPropertyValue(@object, value3);
				}
			}
		}
		foreach (XmlNode childNode2 in node.ChildNodes)
		{
			if (childNode2.NodeType == XmlNodeType.Comment)
			{
				continue;
			}
			string text = childNode2.Name;
			int value4 = 1;
			if (text == "skill")
			{
				text = null;
				if (childNode2.Attributes != null)
				{
					XmlAttribute xmlAttribute = childNode2.Attributes["id"];
					if (xmlAttribute != null)
					{
						text = xmlAttribute.InnerText;
					}
				}
			}
			if (text == null)
			{
				continue;
			}
			SkillObject object2 = Game.Current.ObjectManager.GetObject<SkillObject>(text);
			if (object2 != null)
			{
				XmlAttribute xmlAttribute2 = childNode2.Attributes["value"];
				if (xmlAttribute2 != null)
				{
					string value5 = xmlAttribute2.Value;
					value4 = ((value5 == null) ? 1 : Convert.ToInt32(value5));
				}
				SetPropertyValue(object2, value4);
			}
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsCharacterSkills(object o, List<object> collectedObjects)
	{
		((CharacterSkills)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}
}
