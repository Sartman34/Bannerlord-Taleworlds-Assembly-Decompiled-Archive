using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core;

public sealed class ItemModifier : MBObjectBase
{
	[CachedData]
	public TextObject Name { get; private set; }

	public int Damage { get; private set; }

	public int Speed { get; private set; }

	public int MissileSpeed { get; private set; }

	public int Armor { get; private set; }

	public short HitPoints { get; private set; }

	public short StackCount { get; private set; }

	public float MountSpeed { get; private set; }

	public float Maneuver { get; private set; }

	public float ChargeDamage { get; private set; }

	public float MountHitPoints { get; private set; }

	public float LootDropScore { get; private set; }

	public float ProductionDropScore { get; private set; }

	public float PriceMultiplier { get; private set; }

	public ItemQuality ItemQuality { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsItemModifier(object o, List<object> collectedObjects)
	{
		((ItemModifier)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	public ItemModifier()
	{
		Name = TextObject.Empty;
	}

	public override void Deserialize(MBObjectManager objectManager, XmlNode node)
	{
		base.Deserialize(objectManager, node);
		Name = new TextObject(XmlHelper.ReadString(node, "name"));
		Damage = XmlHelper.ReadInt(node, "damage");
		Speed = XmlHelper.ReadInt(node, "speed");
		MissileSpeed = XmlHelper.ReadInt(node, "missile_speed");
		Armor = XmlHelper.ReadInt(node, "armor");
		MountSpeed = XmlHelper.ReadFloat(node, "horse_speed");
		Maneuver = XmlHelper.ReadFloat(node, "maneuver");
		ChargeDamage = XmlHelper.ReadFloat(node, "charge_damage");
		MountHitPoints = XmlHelper.ReadFloat(node, "horse_hit_points");
		HitPoints = (short)XmlHelper.ReadInt(node, "hit_points");
		StackCount = (short)XmlHelper.ReadInt(node, "stack_count");
		ItemQuality = ReadItemQuality(node);
		LootDropScore = XmlHelper.ReadInt(node, "loot_drop_score");
		ProductionDropScore = XmlHelper.ReadInt(node, "production_drop_score");
		PriceMultiplier = XmlHelper.ReadFloat(node, "price_factor", 1f);
		MBObjectManager.Instance.ReadObjectReferenceFromXml<ItemModifierGroup>("modifier_group", node)?.AddItemModifier(this);
	}

	private ItemQuality ReadItemQuality(XmlNode node)
	{
		switch (XmlHelper.ReadString(node, "quality"))
		{
		case "poor":
			return ItemQuality.Poor;
		case "inferior":
			return ItemQuality.Inferior;
		case "fine":
			return ItemQuality.Fine;
		case "masterwork":
			return ItemQuality.Masterwork;
		case "legendary":
			return ItemQuality.Legendary;
		case "common":
		case "":
			return ItemQuality.Common;
		default:
			return ItemQuality.Common;
		}
	}

	public bool Equals(ItemModifier other)
	{
		if (other == null)
		{
			return false;
		}
		return base.StringId == other.StringId;
	}

	public override int GetHashCode()
	{
		return base.StringId.GetDeterministicHashCode();
	}

	private static int ModifyFactor(int baseValue, float factor)
	{
		if (baseValue == 0)
		{
			return 0;
		}
		if (!MBMath.ApproximatelyEquals(factor, 0f))
		{
			baseValue = ((factor < 1f) ? MathF.Ceiling(factor * (float)baseValue) : MathF.Floor(factor * (float)baseValue));
		}
		return baseValue;
	}

	public int ModifyDamage(int baseDamage)
	{
		int num = baseDamage + Damage;
		return MBMath.ClampInt(num, 1, num);
	}

	public int ModifySpeed(int baseSpeed)
	{
		int num = baseSpeed + Speed;
		return MBMath.ClampInt(num, 1, num);
	}

	public int ModifyMountSpeed(int baseSpeed)
	{
		int num = ModifyFactor(baseSpeed, MountSpeed);
		return MBMath.ClampInt(num, 1, num);
	}

	public int ModifyMountManeuver(int baseManeuver)
	{
		int num = ModifyFactor(baseManeuver, Maneuver);
		return MBMath.ClampInt(num, 1, num);
	}

	public int ModifyMountCharge(int baseCharge)
	{
		int num = ModifyFactor(baseCharge, ChargeDamage);
		return MBMath.ClampInt(num, 1, num);
	}

	public int ModifyMountHitPoints(int baseCharge)
	{
		int num = ModifyFactor(baseCharge, MountHitPoints);
		return MBMath.ClampInt(num, 1, num);
	}

	public int ModifyMissileSpeed(int baseSpeed)
	{
		int num = baseSpeed + MissileSpeed;
		return MBMath.ClampInt(num, 1, num);
	}

	public int ModifyArmor(int armorValue)
	{
		int num = armorValue + Armor;
		return MBMath.ClampInt(num, 1, num);
	}

	public short ModifyHitPoints(short baseHitPoints)
	{
		short num = (short)(baseHitPoints + HitPoints);
		return (short)MBMath.ClampInt(num, 1, num);
	}

	public short ModifyStackCount(short baseStackCount)
	{
		short num = (short)(baseStackCount + StackCount);
		return (short)MBMath.ClampInt(num, 1, num);
	}
}
