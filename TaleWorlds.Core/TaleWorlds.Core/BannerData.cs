using System;
using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core;

public class BannerData
{
	public const float RotationPrecision = 0.00278f;

	[CachedData]
	private int _localVersion;

	[SaveableField(1)]
	private int _meshId;

	[SaveableField(2)]
	private int _colorId;

	[SaveableField(3)]
	public int _colorId2;

	[SaveableField(4)]
	public Vec2 _size;

	[SaveableField(5)]
	public Vec2 _position;

	[SaveableField(6)]
	public bool _drawStroke;

	[SaveableField(7)]
	public bool _mirror;

	[SaveableField(8)]
	public float _rotationValue;

	public int LocalVersion => _localVersion;

	public int MeshId
	{
		get
		{
			return _meshId;
		}
		set
		{
			if (value != _meshId)
			{
				_meshId = value;
				_localVersion++;
			}
		}
	}

	public int ColorId
	{
		get
		{
			return _colorId;
		}
		set
		{
			if (value != _colorId)
			{
				_colorId = value;
				_localVersion++;
			}
		}
	}

	public int ColorId2
	{
		get
		{
			return _colorId2;
		}
		set
		{
			if (value != _colorId2)
			{
				_colorId2 = value;
				_localVersion++;
			}
		}
	}

	public Vec2 Size
	{
		get
		{
			return _size;
		}
		set
		{
			if (value != _size)
			{
				_size = value;
				_localVersion++;
			}
		}
	}

	public Vec2 Position
	{
		get
		{
			return _position;
		}
		set
		{
			if (value != _position)
			{
				_position = value;
				_localVersion++;
			}
		}
	}

	public bool DrawStroke
	{
		get
		{
			return _drawStroke;
		}
		set
		{
			if (value != _drawStroke)
			{
				_drawStroke = value;
				_localVersion++;
			}
		}
	}

	public bool Mirror
	{
		get
		{
			return _mirror;
		}
		set
		{
			if (value != _mirror)
			{
				_mirror = value;
				_localVersion++;
			}
		}
	}

	public float RotationValue
	{
		get
		{
			return _rotationValue;
		}
		set
		{
			if (value != _rotationValue)
			{
				_rotationValue = value;
				_localVersion++;
			}
		}
	}

	public float Rotation => (float)Math.PI * 2f * RotationValue;

	public BannerData(int meshId, int colorId, int colorId2, Vec2 size, Vec2 position, bool drawStroke, bool mirror, float rotationValue)
	{
		MeshId = meshId;
		ColorId = colorId;
		ColorId2 = colorId2;
		Size = size;
		Position = position;
		DrawStroke = drawStroke;
		Mirror = mirror;
		RotationValue = rotationValue;
	}

	public BannerData(BannerData bannerData)
		: this(bannerData.MeshId, bannerData.ColorId, bannerData.ColorId2, bannerData.Size, bannerData.Position, bannerData.DrawStroke, bannerData.Mirror, bannerData.RotationValue)
	{
	}

	public override bool Equals(object obj)
	{
		if (obj is BannerData bannerData && bannerData.MeshId == MeshId && bannerData.ColorId == ColorId && bannerData.ColorId2 == ColorId2 && bannerData.Size.X == Size.X && bannerData.Size.Y == Size.Y && bannerData.Position.X == Position.X && bannerData.Position.Y == Position.Y && bannerData.DrawStroke == DrawStroke && bannerData.Mirror == Mirror && bannerData.RotationValue == RotationValue)
		{
			return true;
		}
		return false;
	}

	public override int GetHashCode()
	{
		return base.GetHashCode();
	}

	internal static void AutoGeneratedStaticCollectObjectsBannerData(object o, List<object> collectedObjects)
	{
		((BannerData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
	}

	internal static object AutoGeneratedGetMemberValue_colorId2(object o)
	{
		return ((BannerData)o)._colorId2;
	}

	internal static object AutoGeneratedGetMemberValue_size(object o)
	{
		return ((BannerData)o)._size;
	}

	internal static object AutoGeneratedGetMemberValue_position(object o)
	{
		return ((BannerData)o)._position;
	}

	internal static object AutoGeneratedGetMemberValue_drawStroke(object o)
	{
		return ((BannerData)o)._drawStroke;
	}

	internal static object AutoGeneratedGetMemberValue_mirror(object o)
	{
		return ((BannerData)o)._mirror;
	}

	internal static object AutoGeneratedGetMemberValue_rotationValue(object o)
	{
		return ((BannerData)o)._rotationValue;
	}

	internal static object AutoGeneratedGetMemberValue_meshId(object o)
	{
		return ((BannerData)o)._meshId;
	}

	internal static object AutoGeneratedGetMemberValue_colorId(object o)
	{
		return ((BannerData)o)._colorId;
	}
}
