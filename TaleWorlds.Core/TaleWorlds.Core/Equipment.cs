using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core;

public class Equipment
{
	public enum EquipmentType
	{
		Invalid = -1,
		Battle,
		Civilian
	}

	public enum UnderwearTypes
	{
		NoUnderwear,
		FullUnderwear,
		OnlyTop
	}

	public enum InitialWeaponEquipPreference
	{
		Any,
		MeleeForMainHand,
		RangedForMainHand
	}

	[SaveableField(1)]
	private EquipmentType _equipmentType;

	public const int EquipmentSlotLength = 12;

	[SaveableField(2)]
	private readonly EquipmentElement[] _itemSlots;

	public bool SyncEquipments;

	public const string NullCode = "@null";

	public bool IsValid => _equipmentType != EquipmentType.Invalid;

	public bool IsCivilian => _equipmentType == EquipmentType.Civilian;

	public EquipmentElement this[int index]
	{
		get
		{
			return _itemSlots[index];
		}
		set
		{
			IsItemFitsToSlot((EquipmentIndex)index, value.Item);
			_itemSlots[index] = value;
		}
	}

	public EquipmentElement this[EquipmentIndex index]
	{
		get
		{
			return _itemSlots[(int)index];
		}
		set
		{
			this[(int)index] = value;
		}
	}

	public EquipmentElement Horse => _itemSlots[10];

	public ArmorComponent.HairCoverTypes HairCoverType
	{
		get
		{
			ArmorComponent.HairCoverTypes result = ArmorComponent.HairCoverTypes.None;
			ItemObject item = this[EquipmentIndex.NumAllWeaponSlots].Item;
			if (item != null)
			{
				result = item.ArmorComponent?.HairCoverType ?? ArmorComponent.HairCoverTypes.None;
			}
			else if (this[EquipmentIndex.Body].Item == null)
			{
				result = ArmorComponent.HairCoverTypes.Type4;
			}
			return result;
		}
	}

	public ArmorComponent.BeardCoverTypes BeardCoverType => this[EquipmentIndex.NumAllWeaponSlots].Item?.ArmorComponent?.BeardCoverType ?? ArmorComponent.BeardCoverTypes.None;

	public ArmorComponent.HorseHarnessCoverTypes ManeCoverType => this[EquipmentIndex.HorseHarness].Item?.ArmorComponent?.ManeCoverType ?? ArmorComponent.HorseHarnessCoverTypes.None;

	public string ReinsMeshName => this[EquipmentIndex.HorseHarness].Item?.ArmorComponent?.ReinsMesh ?? "";

	public bool EarsAreHidden
	{
		get
		{
			if (HairCoverType != 0 && HairCoverType != ArmorComponent.HairCoverTypes.Type1)
			{
				return HairCoverType != ArmorComponent.HairCoverTypes.Type4;
			}
			return false;
		}
	}

	public bool MouthIsHidden => BeardCoverType == ArmorComponent.BeardCoverTypes.All;

	public ArmorComponent.BodyMeshTypes BodyMeshType => this[EquipmentIndex.Body].Item?.ArmorComponent?.BodyMeshType ?? ArmorComponent.BodyMeshTypes.Normal;

	public ArmorComponent.BodyDeformTypes BodyDeformType => this[EquipmentIndex.Body].Item?.ArmorComponent?.BodyDeformType ?? ArmorComponent.BodyDeformTypes.Medium;

	internal static void AutoGeneratedStaticCollectObjectsEquipment(object o, List<object> collectedObjects)
	{
		((Equipment)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_itemSlots);
	}

	internal static object AutoGeneratedGetMemberValue_equipmentType(object o)
	{
		return ((Equipment)o)._equipmentType;
	}

	internal static object AutoGeneratedGetMemberValue_itemSlots(object o)
	{
		return ((Equipment)o)._itemSlots;
	}

	public Equipment()
	{
		_itemSlots = new EquipmentElement[12];
		_equipmentType = EquipmentType.Invalid;
	}

	public Equipment(bool isCivilian)
		: this()
	{
		_itemSlots = new EquipmentElement[12];
		_equipmentType = (isCivilian ? EquipmentType.Civilian : EquipmentType.Battle);
	}

	public Equipment(Equipment equipment)
	{
		_itemSlots = new EquipmentElement[12];
		for (int i = 0; i < 12; i++)
		{
			_itemSlots[i] = new EquipmentElement(equipment[i]);
		}
		_equipmentType = equipment._equipmentType;
	}

	private void SetItem(int index, EquipmentElement element)
	{
		this[index] = element;
	}

	public Equipment Clone(bool cloneWithoutWeapons = false)
	{
		Equipment equipment = new Equipment(IsCivilian);
		for (int i = 0; i < 12; i++)
		{
			bool flag = cloneWithoutWeapons && i >= 0 && i < 5;
			equipment.SetItem(i, flag ? EquipmentElement.Invalid : this[i]);
		}
		return equipment;
	}

	public void FillFrom(Equipment sourceEquipment, bool useSourceEquipmentType = true)
	{
		if (useSourceEquipmentType)
		{
			_equipmentType = sourceEquipment._equipmentType;
		}
		for (int i = 0; i < 12; i++)
		{
			this[i] = sourceEquipment[i];
		}
	}

	public void Deserialize(MBObjectManager objectManager, XmlNode node)
	{
		foreach (XmlNode childNode in node.ChildNodes)
		{
			DeserializeNode(objectManager, childNode);
		}
	}

	public void DeserializeNode(MBObjectManager objectManager, XmlNode node)
	{
		if (node.NodeType != XmlNodeType.Comment)
		{
			XmlAttributeCollection attributes = node.Attributes;
			XmlAttribute xmlAttribute = attributes["id"];
			XmlAttribute xmlAttribute2 = attributes["slot"];
			string objectName = (xmlAttribute.Value.Contains(".") ? xmlAttribute.Value.Split(new char[1] { '.' })[1] : xmlAttribute.Value);
			EquipmentIndex equipmentIndexFromOldEquipmentIndexName = GetEquipmentIndexFromOldEquipmentIndexName(xmlAttribute2.Value);
			ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>(objectName);
			if (IsItemFitsToSlot(equipmentIndexFromOldEquipmentIndexName, @object))
			{
				this[equipmentIndexFromOldEquipmentIndexName] = new EquipmentElement(@object);
			}
			else
			{
				Debug.FailedAssert(string.Concat((@object == null) ? TextObject.Empty : @object.Name, " does not fit to slot ", equipmentIndexFromOldEquipmentIndexName), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\Equipment.cs", "DeserializeNode", 168);
			}
		}
	}

	public static EquipmentIndex GetEquipmentIndexFromOldEquipmentIndexName(string oldEquipmentIndexName)
	{
		return (EquipmentIndex)Enum.Parse(typeof(EquipmentIndex), oldEquipmentIndexName switch
		{
			"Item0" => "Weapon0", 
			"Item1" => "Weapon1", 
			"Item2" => "Weapon2", 
			"Item3" => "Weapon3", 
			"Item4" => "ExtraWeaponSlot", 
			_ => oldEquipmentIndexName, 
		});
	}

	public bool IsEmpty()
	{
		return _itemSlots.All((EquipmentElement itemRosterElement) => itemRosterElement.Item == null);
	}

	public float GetTotalWeightOfArmor(bool forHuman)
	{
		float num = 0f;
		for (EquipmentIndex equipmentIndex = (forHuman ? EquipmentIndex.NumAllWeaponSlots : EquipmentIndex.HorseHarness); (int)equipmentIndex < (forHuman ? 10 : 12); equipmentIndex++)
		{
			EquipmentElement equipmentElement = this[equipmentIndex];
			if (!equipmentElement.IsEmpty)
			{
				num += equipmentElement.GetEquipmentElementWeight();
			}
		}
		return num;
	}

	public float GetTotalWeightOfWeapons()
	{
		float num = 0f;
		for (EquipmentIndex equipmentIndex = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex < EquipmentIndex.NumAllWeaponSlots; equipmentIndex++)
		{
			EquipmentElement equipmentElement = this[equipmentIndex];
			if (!equipmentElement.IsEmpty)
			{
				num += equipmentElement.GetEquipmentElementWeight();
			}
		}
		return num;
	}

	public float GetHeadArmorSum()
	{
		float num = 0f;
		for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
		{
			EquipmentElement equipmentElement = this[equipmentIndex];
			if (equipmentElement.Item != null)
			{
				num += (float)equipmentElement.GetModifiedHeadArmor();
			}
		}
		return num;
	}

	public float GetHumanBodyArmorSum()
	{
		float num = 0f;
		for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
		{
			EquipmentElement equipmentElement = this[equipmentIndex];
			if (equipmentElement.Item != null)
			{
				num += (float)equipmentElement.GetModifiedBodyArmor();
			}
		}
		return num;
	}

	public float GetLegArmorSum()
	{
		float num = 0f;
		for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
		{
			EquipmentElement equipmentElement = this[equipmentIndex];
			if (equipmentElement.Item != null)
			{
				num += (float)equipmentElement.GetModifiedLegArmor();
			}
		}
		return num;
	}

	public float GetArmArmorSum()
	{
		float num = 0f;
		for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
		{
			EquipmentElement equipmentElement = this[equipmentIndex];
			if (equipmentElement.Item != null)
			{
				num += (float)equipmentElement.GetModifiedArmArmor();
			}
		}
		return num;
	}

	public float GetHorseArmorSum()
	{
		float num = 0f;
		EquipmentIndex index = EquipmentIndex.HorseHarness;
		EquipmentElement equipmentElement = this[index];
		if (equipmentElement.Item != null)
		{
			num += (float)equipmentElement.GetModifiedMountBodyArmor();
		}
		return num;
	}

	public UnderwearTypes GetUnderwearType(bool isFemale)
	{
		ItemObject item = this[EquipmentIndex.Body].Item;
		if (item == null)
		{
			return UnderwearTypes.FullUnderwear;
		}
		if (isFemale && item.DoesNotHideChest)
		{
			return UnderwearTypes.OnlyTop;
		}
		return UnderwearTypes.NoUnderwear;
	}

	public bool HasWeapon()
	{
		for (int i = 0; i < 5; i++)
		{
			EquipmentElement equipmentElement = _itemSlots[i];
			if (!equipmentElement.IsEmpty && equipmentElement.Item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.WeaponMask))
			{
				return true;
			}
		}
		return false;
	}

	public bool HasWeaponOfClass(WeaponClass weaponClass)
	{
		for (int i = 0; i < 5; i++)
		{
			EquipmentElement equipmentElement = _itemSlots[i];
			if (!equipmentElement.IsEmpty && equipmentElement.Item.PrimaryWeapon.WeaponClass == weaponClass)
			{
				return true;
			}
		}
		return false;
	}

	public static Equipment CreateFromEquipmentCode(string equipmentCode)
	{
		Equipment equipment = new Equipment();
		for (int i = 0; i < 12; i++)
		{
			equipment[i] = default(EquipmentElement);
		}
		string[] array = equipmentCode.Split(new char[1] { '+' }, StringSplitOptions.RemoveEmptyEntries);
		for (int j = 0; j < array.Length; j++)
		{
			string[] array2 = array[j].Split(new char[1] { '-' }, StringSplitOptions.RemoveEmptyEntries);
			int index = Convert.ToInt32(array2[0]);
			string text = array2[1];
			if (text != "@null")
			{
				ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>(text);
				string text2 = array2[2];
				ItemModifier itemModifier = null;
				if (text2 != "@null")
				{
					itemModifier = MBObjectManager.Instance.GetObject<ItemModifier>(text2);
				}
				EquipmentElement value = new EquipmentElement(@object, itemModifier);
				equipment[index] = value;
			}
		}
		return equipment;
	}

	public string CalculateEquipmentCode()
	{
		MBStringBuilder mBStringBuilder = default(MBStringBuilder);
		mBStringBuilder.Initialize(16, "CalculateEquipmentCode");
		for (int i = 0; i < 12; i++)
		{
			EquipmentElement equipmentElement = this[i];
			string value = ((equipmentElement.Item != null) ? equipmentElement.Item.StringId : "@null");
			string value2 = ((equipmentElement.ItemModifier != null) ? equipmentElement.ItemModifier.StringId : "@null");
			if (string.IsNullOrEmpty(value))
			{
				value = "@null";
			}
			if (string.IsNullOrEmpty(value2))
			{
				value2 = "@null";
			}
			mBStringBuilder.Append('+');
			mBStringBuilder.Append(i);
			mBStringBuilder.Append('-');
			mBStringBuilder.Append(value);
			mBStringBuilder.Append('-');
			mBStringBuilder.Append(value2);
		}
		return mBStringBuilder.ToStringAndRelease();
	}

	public void AddEquipmentToSlotWithoutAgent(EquipmentIndex equipmentIndex, EquipmentElement itemRosterElement)
	{
		this[equipmentIndex] = itemRosterElement;
	}

	public EquipmentElement GetEquipmentFromSlot(EquipmentIndex equipmentIndex)
	{
		return this[equipmentIndex];
	}

	public static bool IsItemFitsToSlot(EquipmentIndex slotIndex, ItemObject item)
	{
		bool result = false;
		if (item == null)
		{
			result = true;
		}
		else
		{
			switch (item.ItemType)
			{
			case ItemObject.ItemTypeEnum.Invalid:
				result = false;
				break;
			case ItemObject.ItemTypeEnum.Horse:
				result = slotIndex == EquipmentIndex.ArmorItemEndSlot;
				break;
			case ItemObject.ItemTypeEnum.OneHandedWeapon:
			case ItemObject.ItemTypeEnum.TwoHandedWeapon:
			case ItemObject.ItemTypeEnum.Polearm:
			case ItemObject.ItemTypeEnum.Arrows:
			case ItemObject.ItemTypeEnum.Bolts:
			case ItemObject.ItemTypeEnum.Shield:
			case ItemObject.ItemTypeEnum.Bow:
			case ItemObject.ItemTypeEnum.Crossbow:
			case ItemObject.ItemTypeEnum.Thrown:
			case ItemObject.ItemTypeEnum.Pistol:
			case ItemObject.ItemTypeEnum.Musket:
			case ItemObject.ItemTypeEnum.Bullets:
			case ItemObject.ItemTypeEnum.Banner:
				result = ((!item.ItemFlags.HasAnyFlag(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction)) ? (slotIndex == EquipmentIndex.WeaponItemBeginSlot || slotIndex == EquipmentIndex.Weapon1 || slotIndex == EquipmentIndex.Weapon2 || slotIndex == EquipmentIndex.Weapon3) : (slotIndex == EquipmentIndex.ExtraWeaponSlot));
				break;
			case ItemObject.ItemTypeEnum.HeadArmor:
				result = slotIndex == EquipmentIndex.NumAllWeaponSlots;
				break;
			case ItemObject.ItemTypeEnum.BodyArmor:
				result = slotIndex == EquipmentIndex.Body;
				break;
			case ItemObject.ItemTypeEnum.LegArmor:
				result = slotIndex == EquipmentIndex.Leg;
				break;
			case ItemObject.ItemTypeEnum.HandArmor:
				result = slotIndex == EquipmentIndex.Gloves;
				break;
			case ItemObject.ItemTypeEnum.Animal:
				result = slotIndex == EquipmentIndex.ArmorItemEndSlot;
				break;
			case ItemObject.ItemTypeEnum.Book:
				result = false;
				break;
			case ItemObject.ItemTypeEnum.Cape:
				result = slotIndex == EquipmentIndex.Cape;
				break;
			case ItemObject.ItemTypeEnum.HorseHarness:
				result = slotIndex == EquipmentIndex.HorseHarness;
				break;
			}
		}
		return result;
	}

	public EquipmentIndex GetWeaponPickUpSlotIndex(EquipmentElement itemRosterElement, bool isStuckMissile)
	{
		if (itemRosterElement.Item.ItemFlags.HasAnyFlag(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction))
		{
			return EquipmentIndex.ExtraWeaponSlot;
		}
		EquipmentIndex equipmentIndex = EquipmentIndex.None;
		if (equipmentIndex == EquipmentIndex.None)
		{
			for (EquipmentIndex equipmentIndex2 = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex2 < EquipmentIndex.ExtraWeaponSlot; equipmentIndex2++)
			{
				if (this[(int)equipmentIndex2].Item == null)
				{
					equipmentIndex = equipmentIndex2;
					break;
				}
			}
		}
		return equipmentIndex;
	}

	public bool IsEquipmentEqualTo(Equipment other)
	{
		if (other == null)
		{
			return false;
		}
		for (int i = 0; i < 12; i++)
		{
			if (!this[i].IsEqualTo(other[i]))
			{
				return false;
			}
		}
		return IsCivilian == other.IsCivilian;
	}

	public static Equipment GetRandomEquipmentElements(BasicCharacterObject character, bool randomEquipmentModifier, bool isCivilianEquipment = false, int seed = -1)
	{
		Equipment equipment = new Equipment(isCivilianEquipment);
		List<Equipment> list = character.AllEquipments.Where((Equipment eq) => eq.IsCivilian == isCivilianEquipment && !eq.IsEmpty()).ToList();
		if (list.IsEmpty())
		{
			return equipment;
		}
		int count = list.Count;
		Random random = new Random(seed);
		int weaponSetNo = MBRandom.RandomInt(count);
		int weaponSetNo2 = MBRandom.RandomInt(count);
		int weaponSetNo3 = MBRandom.RandomInt(count);
		for (int i = 0; i < 12; i++)
		{
			if (seed != -1)
			{
				weaponSetNo = random.Next() % count;
				weaponSetNo2 = random.Next() % count;
				weaponSetNo3 = random.Next() % count;
			}
			switch (i)
			{
			case 0:
			case 1:
				equipment[i] = GetRandomizedEquipment(list, (EquipmentIndex)i, weaponSetNo, randomEquipmentModifier);
				break;
			case 2:
			case 3:
				equipment[i] = GetRandomizedEquipment(list, (EquipmentIndex)i, weaponSetNo2, randomEquipmentModifier);
				break;
			default:
				equipment[i] = GetRandomizedEquipment(list, (EquipmentIndex)i, weaponSetNo3, randomEquipmentModifier);
				break;
			}
		}
		return equipment;
	}

	public static void SwapWeapons(Equipment equipment, EquipmentIndex index1, EquipmentIndex index2)
	{
		EquipmentElement value = equipment[index1];
		equipment[index1] = equipment[index2];
		equipment[index2] = value;
	}

	private static EquipmentElement GetRandomizedEquipment(List<Equipment> equipmentSets, EquipmentIndex weaponSlot, int weaponSetNo, bool randomEquipmentModifier)
	{
		EquipmentElement equipmentFromSlot = equipmentSets[weaponSetNo].GetEquipmentFromSlot(weaponSlot);
		if (randomEquipmentModifier)
		{
			ItemModifier itemModifier = equipmentFromSlot.Item?.ItemComponent?.ItemModifierGroup?.GetRandomItemModifierLootScoreBased();
			if (itemModifier != null)
			{
				equipmentFromSlot.SetModifier(itemModifier);
			}
		}
		return equipmentFromSlot;
	}

	public void GetInitialWeaponIndicesToEquip(out EquipmentIndex mainHandWeaponIndex, out EquipmentIndex offHandWeaponIndex, out bool isMainHandNotUsableWithOneHand, InitialWeaponEquipPreference initialWeaponEquipPreference = InitialWeaponEquipPreference.Any)
	{
		mainHandWeaponIndex = EquipmentIndex.None;
		offHandWeaponIndex = EquipmentIndex.None;
		isMainHandNotUsableWithOneHand = false;
		EquipmentIndex[] array = new EquipmentIndex[5]
		{
			EquipmentIndex.ExtraWeaponSlot,
			EquipmentIndex.WeaponItemBeginSlot,
			EquipmentIndex.Weapon1,
			EquipmentIndex.Weapon2,
			EquipmentIndex.Weapon3
		};
		bool flag = false;
		bool flag2 = false;
		foreach (EquipmentIndex equipmentIndex in array)
		{
			if (!this[equipmentIndex].IsEmpty)
			{
				ItemObject item = this[equipmentIndex].Item;
				if ((mainHandWeaponIndex == EquipmentIndex.None || (initialWeaponEquipPreference == InitialWeaponEquipPreference.MeleeForMainHand && !flag) || (initialWeaponEquipPreference == InitialWeaponEquipPreference.RangedForMainHand && !flag2)) && !item.ItemFlags.HasAnyFlag(ItemFlags.HeldInOffHand))
				{
					mainHandWeaponIndex = equipmentIndex;
					isMainHandNotUsableWithOneHand = item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand);
					flag = item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.MeleeWeapon);
					flag2 = item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.RangedWeapon);
				}
				else if (offHandWeaponIndex == EquipmentIndex.None && item.ItemFlags.HasAnyFlag(ItemFlags.HeldInOffHand))
				{
					offHandWeaponIndex = equipmentIndex;
				}
			}
		}
	}
}
