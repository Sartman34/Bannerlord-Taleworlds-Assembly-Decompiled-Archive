using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core;

public class ItemModifierGroup : MBObjectBase
{
	private readonly MBList<ItemModifier> _itemModifiers = new MBList<ItemModifier>();

	private readonly MBList<(ItemModifier, float)> _lootDropItemModifierScores = new MBList<(ItemModifier, float)>();

	private readonly MBList<(ItemModifier, float)> _productionDropItemModifierScores = new MBList<(ItemModifier, float)>();

	public int NoModifierLootScore { get; private set; }

	public int NoModifierProductionScore { get; private set; }

	public MBReadOnlyList<ItemModifier> ItemModifiers => _itemModifiers;

	internal static void AutoGeneratedStaticCollectObjectsItemModifierGroup(object o, List<object> collectedObjects)
	{
		((ItemModifierGroup)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	public ItemModifierGroup()
		: base("")
	{
	}

	public ItemModifierGroup(string id)
		: base(id)
	{
	}

	public override void Deserialize(MBObjectManager objectManager, XmlNode node)
	{
		base.Deserialize(objectManager, node);
		NoModifierLootScore = XmlHelper.ReadInt(node, "no_modifier_loot_score");
		NoModifierProductionScore = XmlHelper.ReadInt(node, "no_modifier_production_score");
		InitializeDropScoreLists();
	}

	public void AddItemModifier(ItemModifier itemModifier)
	{
		_itemModifiers.Add(itemModifier);
	}

	public ItemModifier GetRandomItemModifierLootScoreBased()
	{
		return GetRandomItemModifier(useLootScores: true);
	}

	public ItemModifier GetRandomItemModifierProductionScoreBased()
	{
		return GetRandomItemModifier(useLootScores: false);
	}

	private ItemModifier GetRandomItemModifier(bool useLootScores)
	{
		return MBRandom.ChooseWeighted(useLootScores ? _lootDropItemModifierScores : _productionDropItemModifierScores);
	}

	public List<ItemModifier> GetModifiersBasedOnQuality(ItemQuality quality)
	{
		return ItemModifiers.Where((ItemModifier modifier) => modifier.ItemQuality == quality).ToList();
	}

	private void InitializeDropScoreLists()
	{
		foreach (ItemModifier itemModifier in _itemModifiers)
		{
			_lootDropItemModifierScores.Add((itemModifier, itemModifier.LootDropScore));
			_productionDropItemModifierScores.Add((itemModifier, itemModifier.ProductionDropScore));
		}
		_lootDropItemModifierScores.Add((null, NoModifierLootScore));
		_productionDropItemModifierScores.Add((null, NoModifierProductionScore));
	}
}
