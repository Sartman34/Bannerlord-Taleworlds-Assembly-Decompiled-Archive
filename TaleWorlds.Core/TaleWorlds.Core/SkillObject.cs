using System.Collections.Generic;
using TaleWorlds.Localization;

namespace TaleWorlds.Core;

public sealed class SkillObject : PropertyObject
{
	public enum SkillTypeEnum
	{
		Personal,
		Leader,
		Party
	}

	private SkillTypeEnum _skillType;

	private CharacterAttribute _characterAttribute;

	public CharacterAttribute CharacterAttribute
	{
		get
		{
			return _characterAttribute;
		}
		private set
		{
			_characterAttribute = value;
			_characterAttribute.AddSkill(this);
		}
	}

	public bool IsLeaderSkill => _skillType == SkillTypeEnum.Leader;

	public bool IsPartySkill => _skillType == SkillTypeEnum.Party;

	public bool IsPersonalSkill => _skillType == SkillTypeEnum.Personal;

	public TextObject HowToLearnSkillText
	{
		get
		{
			if (GameTexts.FindText("str_how_to_learn_skill", base.StringId) == null)
			{
				return new TextObject("{=Aj3zqQq4}Not available");
			}
			return GameTexts.FindText("str_how_to_learn_skill", base.StringId);
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsSkillObject(object o, List<object> collectedObjects)
	{
		((SkillObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	public SkillObject(string stringId)
		: base(stringId)
	{
	}

	public void SetAttribute(CharacterAttribute attribute)
	{
		CharacterAttribute = attribute;
	}

	public override string ToString()
	{
		return base.Name.ToString();
	}

	public SkillObject Initialize(TextObject name, TextObject description, SkillTypeEnum skillType)
	{
		Initialize(name, description);
		_skillType = skillType;
		AfterInitialized();
		return this;
	}
}
