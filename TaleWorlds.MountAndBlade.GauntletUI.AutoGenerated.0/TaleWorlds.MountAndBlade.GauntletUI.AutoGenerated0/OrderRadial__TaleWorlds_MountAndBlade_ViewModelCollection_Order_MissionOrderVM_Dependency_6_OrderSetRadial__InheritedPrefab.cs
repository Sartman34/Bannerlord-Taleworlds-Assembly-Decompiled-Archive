using System.ComponentModel;
using System.Numerics;
using TaleWorlds.GauntletUI;
using TaleWorlds.GauntletUI.BaseTypes;
using TaleWorlds.GauntletUI.Data;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade.ViewModelCollection.Order;

namespace TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated0;

public class OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_6_OrderSetRadial__InheritedPrefab : Widget
{
	private Widget _widget;

	private OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_14_OrderItemRadial__DependendPrefab _widget_0;

	private Widget _widget_1;

	private CircleActionSelectorWidget _widget_1_0;

	private TextWidget _widget_2;

	private Widget _widget_3;

	private OrderSetVM _datasource_Root;

	private MBBindingList<OrderItemVM> _datasource_Root_Orders;

	public OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_6_OrderSetRadial__InheritedPrefab(UIContext context)
		: base(context)
	{
	}

	public virtual void CreateWidgets()
	{
		_widget = this;
		_widget_0 = new OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_14_OrderItemRadial__DependendPrefab(base.Context);
		_widget.AddChild(_widget_0);
		_widget_0.CreateWidgets();
		_widget_1 = new Widget(base.Context);
		_widget.AddChild(_widget_1);
		_widget_1_0 = new CircleActionSelectorWidget(base.Context);
		_widget_1.AddChild(_widget_1_0);
		_widget_2 = new TextWidget(base.Context);
		_widget.AddChild(_widget_2);
		_widget_3 = new Widget(base.Context);
		_widget.AddChild(_widget_3);
	}

	public virtual void SetIds()
	{
		_widget_0.SetIds();
		_widget_3.Id = "DirectionWidget";
	}

	public virtual void SetAttributes()
	{
		base.WidthSizePolicy = SizePolicy.Fixed;
		base.HeightSizePolicy = SizePolicy.Fixed;
		base.SuggestedWidth = 93.75f;
		base.SuggestedHeight = 92.5f;
		base.HorizontalAlignment = HorizontalAlignment.Center;
		base.VerticalAlignment = VerticalAlignment.Center;
		_widget_0.SetAttributes();
		_widget_0.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_0.VerticalAlignment = VerticalAlignment.Center;
		_widget_1.WidthSizePolicy = SizePolicy.CoverChildren;
		_widget_1.HeightSizePolicy = SizePolicy.CoverChildren;
		_widget_1.MarginBottom = 115f;
		_widget_1_0.WidthSizePolicy = SizePolicy.Fixed;
		_widget_1_0.HeightSizePolicy = SizePolicy.Fixed;
		_widget_1_0.SuggestedWidth = 430f;
		_widget_1_0.SuggestedHeight = 400f;
		_widget_1_0.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_1_0.VerticalAlignment = VerticalAlignment.Bottom;
		_widget_1_0.DistanceFromCenterModifier = 130f;
		_widget_1_0.PositionYOffset = -385f;
		_widget_1_0.PositionXOffset = -175f;
		_widget_1_0.DirectionWidget = _widget_3;
		_widget_1_0.Sprite = base.Context.SpriteData.GetSprite("General\\RadialMenu\\radial_menu_bg");
		_widget_1_0.Color = new Color(0f, 0f, 0f, 0.6f);
		_widget_1_0.ActivateOnlyWithController = true;
		_widget_2.WidthSizePolicy = SizePolicy.CoverChildren;
		_widget_2.HeightSizePolicy = SizePolicy.CoverChildren;
		_widget_2.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_2.VerticalAlignment = VerticalAlignment.Center;
		_widget_2.MarginBottom = 520f;
		_widget_2.MarginRight = 15f;
		_widget_2.Brush = base.Context.GetBrush("Order.SelectedOrder.Text");
		_widget_3.WidthSizePolicy = SizePolicy.Fixed;
		_widget_3.HeightSizePolicy = SizePolicy.Fixed;
		_widget_3.SuggestedWidth = 13f;
		_widget_3.SuggestedHeight = 13f;
		_widget_3.HorizontalAlignment = HorizontalAlignment.Center;
		_widget_3.VerticalAlignment = VerticalAlignment.Center;
		_widget_3.MarginBottom = 460f;
		_widget_3.Sprite = base.Context.SpriteData.GetSprite("BlankWhiteCircle");
		_widget_3.AlphaFactor = 0.5f;
	}

	public virtual void DestroyDataSource()
	{
		if (_datasource_Root == null)
		{
			return;
		}
		_widget_0.DestroyDataSource();
		_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget_1.PropertyChanged -= PropertyChangedListenerOf_widget_1;
		_widget_1.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_1;
		_widget_1.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_1;
		_widget_1.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_1;
		_widget_1.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_1;
		_widget_1.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_1;
		_widget_1.intPropertyChanged -= intPropertyChangedListenerOf_widget_1;
		_widget_1.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_1;
		_widget_1.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_1;
		_widget_2.PropertyChanged -= PropertyChangedListenerOf_widget_2;
		_widget_2.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_2;
		_widget_2.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_2;
		_widget_2.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_2;
		_widget_2.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_2;
		_widget_2.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_2;
		_widget_2.intPropertyChanged -= intPropertyChangedListenerOf_widget_2;
		_widget_2.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_2;
		_widget_2.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_2;
		if (_datasource_Root_Orders != null)
		{
			_datasource_Root_Orders.ListChanged -= OnList_datasource_Root_OrdersChanged;
			for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_1_0.GetChild(num);
				((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)child).OnBeforeRemovedChild(child);
				((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)_widget_1_0.GetChild(num)).DestroyDataSource();
			}
			_datasource_Root_Orders = null;
		}
		_datasource_Root = null;
	}

	public virtual void SetDataSource(OrderSetVM dataSource)
	{
		RefreshDataSource_datasource_Root(dataSource);
	}

	private void PropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void intPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget_1(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget_1(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget_1(string propertyName)
	{
		if (propertyName == "IsVisible")
		{
			_datasource_Root.ShowOrders = _widget_1.IsVisible;
		}
	}

	private void PropertyChangedListenerOf_widget_2(PropertyOwnerObject propertyOwnerObject, string propertyName, object e)
	{
		HandleWidgetPropertyChangeOf_widget_2(propertyName);
	}

	private void boolPropertyChangedListenerOf_widget_2(PropertyOwnerObject propertyOwnerObject, string propertyName, bool e)
	{
		HandleWidgetPropertyChangeOf_widget_2(propertyName);
	}

	private void floatPropertyChangedListenerOf_widget_2(PropertyOwnerObject propertyOwnerObject, string propertyName, float e)
	{
		HandleWidgetPropertyChangeOf_widget_2(propertyName);
	}

	private void Vec2PropertyChangedListenerOf_widget_2(PropertyOwnerObject propertyOwnerObject, string propertyName, Vec2 e)
	{
		HandleWidgetPropertyChangeOf_widget_2(propertyName);
	}

	private void Vector2PropertyChangedListenerOf_widget_2(PropertyOwnerObject propertyOwnerObject, string propertyName, Vector2 e)
	{
		HandleWidgetPropertyChangeOf_widget_2(propertyName);
	}

	private void doublePropertyChangedListenerOf_widget_2(PropertyOwnerObject propertyOwnerObject, string propertyName, double e)
	{
		HandleWidgetPropertyChangeOf_widget_2(propertyName);
	}

	private void intPropertyChangedListenerOf_widget_2(PropertyOwnerObject propertyOwnerObject, string propertyName, int e)
	{
		HandleWidgetPropertyChangeOf_widget_2(propertyName);
	}

	private void uintPropertyChangedListenerOf_widget_2(PropertyOwnerObject propertyOwnerObject, string propertyName, uint e)
	{
		HandleWidgetPropertyChangeOf_widget_2(propertyName);
	}

	private void ColorPropertyChangedListenerOf_widget_2(PropertyOwnerObject propertyOwnerObject, string propertyName, Color e)
	{
		HandleWidgetPropertyChangeOf_widget_2(propertyName);
	}

	private void HandleWidgetPropertyChangeOf_widget_2(string propertyName)
	{
		if (propertyName == "Text")
		{
			_datasource_Root.SelectedOrderText = _widget_2.Text;
		}
		else if (propertyName == "IsVisible")
		{
			_datasource_Root.ShowOrders = _widget_2.IsVisible;
		}
	}

	private void ViewModelPropertyChangedListenerOf_datasource_Root(object sender, PropertyChangedEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithValueListenerOf_datasource_Root(object sender, PropertyChangedWithValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root(object sender, PropertyChangedWithBoolValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root(object sender, PropertyChangedWithFloatValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithUIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root(object sender, PropertyChangedWithColorValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root(object sender, PropertyChangedWithDoubleValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root(object sender, PropertyChangedWithVec2ValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void HandleViewModelPropertyChangeOf_datasource_Root(string propertyName)
	{
		switch (propertyName)
		{
		case "Orders":
			RefreshDataSource_datasource_Root_Orders(_datasource_Root.Orders);
			break;
		case "ShowOrders":
			_widget_1.IsVisible = _datasource_Root.ShowOrders;
			_widget_2.IsVisible = _datasource_Root.ShowOrders;
			break;
		case "SelectedOrderText":
			_widget_2.Text = _datasource_Root.SelectedOrderText;
			break;
		}
	}

	public void OnList_datasource_Root_OrdersChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_1_0.GetChild(num);
				((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_1_0.GetChild(num);
				((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)child4).SetDataSource(null);
				_widget_1_0.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_Orders.Count; i++)
			{
				OrderItemVM bindingObject = _datasource_Root_Orders[i];
				_widget_1_0.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate = new OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate);
			OrderItemVM dataSource = (OrderItemVM)(generatedWidgetData.Data = _datasource_Root_Orders[e.NewIndex]);
			orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_1_0.AddChildAtIndex(orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate, e.NewIndex);
			orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.CreateWidgets();
			orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.SetIds();
			orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.SetAttributes();
			orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_1_0.GetChild(e.NewIndex);
			((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_1_0.GetChild(e.NewIndex);
			((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)child).SetDataSource(null);
			_widget_1_0.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	private void RefreshDataSource_datasource_Root(OrderSetVM newDataSource)
	{
		if (_datasource_Root != null)
		{
			_widget_0.SetDataSource(null);
			_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
			_widget_1.PropertyChanged -= PropertyChangedListenerOf_widget_1;
			_widget_1.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_1;
			_widget_1.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_1;
			_widget_1.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_1;
			_widget_1.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_1;
			_widget_1.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_1;
			_widget_1.intPropertyChanged -= intPropertyChangedListenerOf_widget_1;
			_widget_1.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_1;
			_widget_1.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_1;
			_widget_2.PropertyChanged -= PropertyChangedListenerOf_widget_2;
			_widget_2.boolPropertyChanged -= boolPropertyChangedListenerOf_widget_2;
			_widget_2.floatPropertyChanged -= floatPropertyChangedListenerOf_widget_2;
			_widget_2.Vec2PropertyChanged -= Vec2PropertyChangedListenerOf_widget_2;
			_widget_2.Vector2PropertyChanged -= Vector2PropertyChangedListenerOf_widget_2;
			_widget_2.doublePropertyChanged -= doublePropertyChangedListenerOf_widget_2;
			_widget_2.intPropertyChanged -= intPropertyChangedListenerOf_widget_2;
			_widget_2.uintPropertyChanged -= uintPropertyChangedListenerOf_widget_2;
			_widget_2.ColorPropertyChanged -= ColorPropertyChangedListenerOf_widget_2;
			if (_datasource_Root_Orders != null)
			{
				_datasource_Root_Orders.ListChanged -= OnList_datasource_Root_OrdersChanged;
				for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
				{
					Widget child = _widget_1_0.GetChild(num);
					((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)child).OnBeforeRemovedChild(child);
					Widget child2 = _widget_1_0.GetChild(num);
					((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)child2).SetDataSource(null);
					_widget_1_0.RemoveChild(child2);
				}
				_datasource_Root_Orders = null;
			}
			_datasource_Root = null;
		}
		_datasource_Root = newDataSource;
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged += ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue += ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue += ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue += ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue += ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue += ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue += ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue += ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value += ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_widget_1.IsVisible = _datasource_Root.ShowOrders;
		_widget_1.PropertyChanged += PropertyChangedListenerOf_widget_1;
		_widget_1.boolPropertyChanged += boolPropertyChangedListenerOf_widget_1;
		_widget_1.floatPropertyChanged += floatPropertyChangedListenerOf_widget_1;
		_widget_1.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget_1;
		_widget_1.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget_1;
		_widget_1.doublePropertyChanged += doublePropertyChangedListenerOf_widget_1;
		_widget_1.intPropertyChanged += intPropertyChangedListenerOf_widget_1;
		_widget_1.uintPropertyChanged += uintPropertyChangedListenerOf_widget_1;
		_widget_1.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget_1;
		_widget_2.Text = _datasource_Root.SelectedOrderText;
		_widget_2.IsVisible = _datasource_Root.ShowOrders;
		_widget_2.PropertyChanged += PropertyChangedListenerOf_widget_2;
		_widget_2.boolPropertyChanged += boolPropertyChangedListenerOf_widget_2;
		_widget_2.floatPropertyChanged += floatPropertyChangedListenerOf_widget_2;
		_widget_2.Vec2PropertyChanged += Vec2PropertyChangedListenerOf_widget_2;
		_widget_2.Vector2PropertyChanged += Vector2PropertyChangedListenerOf_widget_2;
		_widget_2.doublePropertyChanged += doublePropertyChangedListenerOf_widget_2;
		_widget_2.intPropertyChanged += intPropertyChangedListenerOf_widget_2;
		_widget_2.uintPropertyChanged += uintPropertyChangedListenerOf_widget_2;
		_widget_2.ColorPropertyChanged += ColorPropertyChangedListenerOf_widget_2;
		_datasource_Root_Orders = _datasource_Root.Orders;
		if (_datasource_Root_Orders != null)
		{
			_datasource_Root_Orders.ListChanged += OnList_datasource_Root_OrdersChanged;
			for (int i = 0; i < _datasource_Root_Orders.Count; i++)
			{
				OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate = new OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate);
				OrderItemVM dataSource = (OrderItemVM)(generatedWidgetData.Data = _datasource_Root_Orders[i]);
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_1_0.AddChildAtIndex(orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate, i);
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.CreateWidgets();
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.SetIds();
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.SetAttributes();
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.SetDataSource(dataSource);
			}
		}
		_widget_0.SetDataSource(_datasource_Root);
	}

	private void RefreshDataSource_datasource_Root_Orders(MBBindingList<OrderItemVM> newDataSource)
	{
		if (_datasource_Root_Orders != null)
		{
			_datasource_Root_Orders.ListChanged -= OnList_datasource_Root_OrdersChanged;
			for (int num = _widget_1_0.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_1_0.GetChild(num);
				((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_1_0.GetChild(num);
				((OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate)child2).SetDataSource(null);
				_widget_1_0.RemoveChild(child2);
			}
			_datasource_Root_Orders = null;
		}
		_datasource_Root_Orders = newDataSource;
		_datasource_Root_Orders = _datasource_Root.Orders;
		if (_datasource_Root_Orders != null)
		{
			_datasource_Root_Orders.ListChanged += OnList_datasource_Root_OrdersChanged;
			for (int i = 0; i < _datasource_Root_Orders.Count; i++)
			{
				OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate = new OrderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate);
				OrderItemVM dataSource = (OrderItemVM)(generatedWidgetData.Data = _datasource_Root_Orders[i]);
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_1_0.AddChildAtIndex(orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate, i);
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.CreateWidgets();
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.SetIds();
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.SetAttributes();
				orderRadial__TaleWorlds_MountAndBlade_ViewModelCollection_Order_MissionOrderVM_Dependency_13_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}
}
